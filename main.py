# -*- coding: utf-8 -*-
import os
import re
import json
import uuid
import logging
from datetime import datetime, timedelta, timezone, time as dtime
from typing import List, Tuple

from dotenv import load_dotenv
from langdetect import detect, DetectorFactory

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from openai import OpenAI
import gspread
from gspread.exceptions import SpreadsheetNotFound
from oauth2client.service_account import ServiceAccountCredentials

# ---------------------------
# Boot & Config
# ---------------------------
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
DetectorFactory.seed = 0

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Sheets")
SHEET_ID = os.getenv("SHEET_ID", "")  # —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å ID
DEFAULT_CHECKIN_LOCAL = "08:30"

# OpenAI –∫–ª–∏–µ–Ω—Ç
oai = None
if OPENAI_API_KEY:
    try:
        oai = OpenAI(api_key=OPENAI_API_KEY)
    except Exception as e:
        logging.error(f"OpenAI init error: {e}")
        oai = None

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
if not creds_json:
    raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
creds_dict = json.loads(creds_json)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gclient = gspread.authorize(credentials)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–Ω–∏–≥—É –ø–æ ID, –∏–Ω–∞—á–µ –ø–æ –∏–º–µ–Ω–∏; –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚Äî —Å–æ–∑–¥–∞—ë–º
try:
    ss = gclient.open_by_key(SHEET_ID) if SHEET_ID else gclient.open(SHEET_NAME)
except SpreadsheetNotFound:
    logging.warning("Spreadsheet not found by ID/name ‚Äî creating a new one...")
    ss = gclient.create(SHEET_NAME)

def _get_or_create_ws(title: str, headers: List[str]):
    try:
        ws = ss.worksheet(title)
    except gspread.WorksheetNotFound:
        ws = ss.add_worksheet(title=title, rows=1000, cols=max(20, len(headers)))
        ws.append_row(headers)
    vals = ws.get_all_values()
    if not vals:
        ws.append_row(headers)
    return ws

ws_feedback = _get_or_create_ws(
    "Feedback", ["timestamp", "user_id", "name", "username", "rating", "comment"]
)
ws_users = _get_or_create_ws(
    "Users", ["user_id", "username", "lang", "consent", "tz_offset", "checkin_hour", "paused"]
)
ws_profiles = _get_or_create_ws(
    "Profiles",
    ["user_id", "sex", "age", "goal", "conditions", "meds", "allergies",
     "sleep", "activity", "diet", "notes", "updated_at"],
)
ws_episodes = _get_or_create_ws(
    "Episodes",
    ["episode_id","user_id","topic","started_at","baseline_severity","red_flags",
     "plan_accepted","target","reminder_at","next_checkin_at","status","last_update","notes"],
)
ws_reminders = _get_or_create_ws(
    "Reminders", ["id", "user_id", "text", "when_utc", "created_at", "status"]
)
ws_daily = _get_or_create_ws(
    "DailyCheckins", ["timestamp", "user_id", "mood", "comment"]
)

# ---------------------------
# In-memory session state
# ---------------------------
sessions: dict[int, dict] = {}

# ---------------------------
# i18n
# ---------------------------
SUPPORTED = {"ru", "en", "uk"}

def norm_lang(code: str | None) -> str:
    if not code:
        return "en"
    c = code.split("-")[0].lower()
    return c if c in SUPPORTED else "en"

T = {
    "en": {
        "welcome": "Hi! I‚Äôm TendAI ‚Äî your health & longevity assistant.\nChoose a topic below or just describe what‚Äôs bothering you.",
        "menu": ["Pain", "Throat/Cold", "Sleep", "Stress", "Digestion", "Energy", "Nutrition", "Labs", "Habits", "Longevity", "Profile"],
        "help": "I can help with short checkups, a simple 24‚Äì48h plan, reminders and daily check-ins.\nCommands:\n/help, /privacy, /pause, /resume, /delete_data, /profile, /checkin_on [HH:MM], /checkin_off, /settz +3",
        "privacy": "TendAI is not a medical service and can‚Äôt replace a doctor.\nWe store minimal data (Sheets) to support reminders.\nUse /delete_data to erase your info.",
        "paused_on": "Notifications paused. Use /resume to enable.",
        "paused_off": "Notifications resumed.",
        "deleted": "All your data in TendAI was deleted. You can /start again anytime.",
        "ask_consent": "May I send you a follow-up later to check how you feel? (Change anytime with /pause or /resume.)",
        "yes": "Yes",
        "no": "No",
        "choose_topic": "Choose a topic:",
        "triage_pain_q1": "Where does it hurt?",
        "triage_pain_q1_opts": ["Head", "Throat", "Back", "Belly", "Other"],
        "triage_pain_q2": "What kind of pain?",
        "triage_pain_q2_opts": ["Dull", "Sharp", "Pulsating", "Pressing"],
        "triage_pain_q3": "How long has it lasted?",
        "triage_pain_q3_opts": ["<3h", "3‚Äì24h", ">1 day", ">1 week"],
        "triage_pain_q4": "Rate the pain now (0‚Äì10):",
        "triage_pain_q5": "Any of these now?",
        "triage_pain_q5_opts": ["High fever", "Vomiting", "Weakness or numbness", "Speech/vision problems", "Trauma", "None"],
        "plan_header": "Your 24‚Äì48h plan:",
        "plan_accept": "Will you try this today?",
        "accept_opts": ["‚úÖ Yes", "üîÅ Later", "‚úñÔ∏è No"],
        "remind_when": "When shall I check on you?",
        "remind_opts": ["in 4h", "this evening", "tomorrow morning", "no need"],
        "thanks": "Got it üôå",
        "checkin_ping": "Quick check-in: how is it now (0‚Äì10)?",
        "checkin_better": "Nice! Keep it up üí™",
        "checkin_worse": "Sorry to hear. If you have any red flags or pain ‚â•7/10, consider seeking medical help.",
        "comment_prompt": "Thanks for your rating üôè\nWant to add a comment? Just type it in, or send /skip to skip.",
        "comment_saved": "Comment saved, thank you! üôå",
        "skip_ok": "Skipped.",
        "unknown": "I need a bit more information to help. Where exactly does it hurt? How long has it lasted?",
        "lang_switched": "OK, I‚Äôll reply in English next time.",
        "profile_intro": "Let‚Äôs set up your profile (~40s). Use buttons or type your answer.",
        "p_step_1": "Step 1/8. Your sex:",
        "p_step_2": "Step 2/8. Age:",
        "p_step_3": "Step 3/8. Main goal:",
        "p_step_4": "Step 4/8. Chronic conditions (if any):",
        "p_step_5": "Step 5/8. Meds/supplements/allergies:",
        "p_step_6": "Step 6/8. Sleep (bed/wake, e.g. 23:30/07:00):",
        "p_step_7": "Step 7/8. Activity:",
        "p_step_8": "Step 8/8. Diet most of the time:",
        "write": "‚úçÔ∏è Write",
        "skip": "‚è≠Ô∏è Skip",
        "saved_profile": "Saved: ",
        "start_where": "Where do you want to start? (symptom/sleep/nutrition/labs/habits/longevity)",
        "daily_gm": "Good morning! Quick daily check-in:",
        "mood_good": "üòÉ Good",
        "mood_ok": "üòê Okay",
        "mood_bad": "üò£ Poor",
        "mood_note": "‚úçÔ∏è Comment",
        "mood_thanks": "Thanks! Wishing you a smooth day üëã",
        "btn_like": "üëç",
        "btn_dislike": "üëé",
    },
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –Ω–∏–∂–µ –∏–ª–∏ –æ–ø–∏—à–∏, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç.",
        "menu": ["–ë–æ–ª—å", "–ì–æ—Ä–ª–æ/–ø—Ä–æ—Å—Ç—É–¥–∞", "–°–æ–Ω", "–°—Ç—Ä–µ—Å—Å", "–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ", "–≠–Ω–µ—Ä–≥–∏—è", "–ü–∏—Ç–∞–Ω–∏–µ", "–ê–Ω–∞–ª–∏–∑—ã", "–ü—Ä–∏–≤—ã—á–∫–∏", "–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ", "–ü—Ä–æ—Ñ–∏–ª—å"],
        "help": "–ü–æ–º–æ–≥–∞—é –∫–æ—Ä–æ—Ç–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π, –ø–ª–∞–Ω–æ–º –Ω–∞ 24‚Äì48 —á, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ —á–µ–∫-–∏–Ω–∞–º–∏.\n–ö–æ–º–∞–Ω–¥—ã:\n/help, /privacy, /pause, /resume, /delete_data, /profile, /checkin_on [–ß–ß:–ú–ú], /checkin_off, /settz +3",
        "privacy": "TendAI –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞. –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö (Sheets) –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n–ö–æ–º–∞–Ω–¥–∞ /delete_data —É–¥–∞–ª–∏—Ç –≤—Å—ë.",
        "paused_on": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–∞—É–∑—É. –í–∫–ª—é—á–∏—Ç—å: /resume",
        "paused_off": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.",
        "deleted": "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ TendAI —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ /start.",
        "ask_consent": "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã? (–ú–µ–Ω—è–µ—Ç—Å—è /pause –∏ /resume.)",
        "yes": "–î–∞",
        "no": "–ù–µ—Ç",
        "choose_topic": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        "triage_pain_q1": "–ì–¥–µ –±–æ–ª–∏—Ç?",
        "triage_pain_q1_opts": ["–ì–æ–ª–æ–≤–∞", "–ì–æ—Ä–ª–æ", "–°–ø–∏–Ω–∞", "–ñ–∏–≤–æ—Ç", "–î—Ä—É–≥–æ–µ"],
        "triage_pain_q2": "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏?",
        "triage_pain_q2_opts": ["–¢—É–ø–∞—è", "–û—Å—Ç—Ä–∞—è", "–ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è", "–î–∞–≤—è—â–∞—è"],
        "triage_pain_q3": "–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è?",
        "triage_pain_q3_opts": ["<3—á", "3‚Äì24—á", ">1 –¥–Ω—è", ">1 –Ω–µ–¥–µ–ª–∏"],
        "triage_pain_q4": "–û—Ü–µ–Ω–∏—Ç–µ –±–æ–ª—å (0‚Äì10):",
        "triage_pain_q5": "–ï—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–µ–π—á–∞—Å?",
        "triage_pain_q5_opts": ["–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–†–≤–æ—Ç–∞", "–°–ª–∞–±–æ—Å—Ç—å/–æ–Ω–µ–º–µ–Ω–∏–µ", "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è", "–¢—Ä–∞–≤–º–∞", "–ù–µ—Ç"],
        "plan_header": "–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á–∞—Å–æ–≤:",
        "plan_accept": "–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
        "accept_opts": ["‚úÖ –î–∞", "üîÅ –ü–æ–∑–∂–µ", "‚úñÔ∏è –ù–µ—Ç"],
        "remind_when": "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "remind_opts": ["—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞", "–≤–µ—á–µ—Ä–æ–º", "–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º", "–Ω–µ –Ω–∞–¥–æ"],
        "thanks": "–ü—Ä–∏–Ω—è—Ç–æ üôå",
        "checkin_ping": "–ö–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ 0‚Äì10?",
        "checkin_better": "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üí™",
        "checkin_worse": "–°–æ—á—É–≤—Å—Ç–≤—É—é. –ï—Å–ª–∏ –µ—Å—Ç—å ¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª –∏–ª–∏ –±–æ–ª—å ‚â•7/10 ‚Äî –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        "comment_prompt": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É üôè\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        "comment_saved": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å–ø–∞—Å–∏–±–æ! üôå",
        "skip_ok": "–ü—Ä–æ–ø—É—â–µ–Ω–æ.",
        "unknown": "–ù—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π. –ì–¥–µ –±–æ–ª–∏—Ç –∏ —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?",
        "lang_switched": "–û–∫, –¥–∞–ª—å—à–µ –æ—Ç–≤–µ—á–∞—é –ø–æ-—Ä—É—Å—Å–∫–∏.",
        "profile_intro": "–ù–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–∏–ª—å (~40—Å). –ú–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç.",
        "p_step_1": "–®–∞–≥ 1/8. –£–∫–∞–∂–∏ –ø–æ–ª:",
        "p_step_2": "–®–∞–≥ 2/8. –í–æ–∑—Ä–∞—Å—Ç:",
        "p_step_3": "–®–∞–≥ 3/8. –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:",
        "p_step_4": "–®–∞–≥ 4/8. –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):",
        "p_step_5": "–®–∞–≥ 5/8. –õ–µ–∫–∞—Ä—Å—Ç–≤–∞/–¥–æ–±–∞–≤–∫–∏/–∞–ª–ª–µ—Ä–≥–∏–∏:",
        "p_step_6": "–®–∞–≥ 6/8. –°–æ–Ω (–æ—Ç–±–æ–π/–ø–æ–¥—ä—ë–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        "p_step_7": "–®–∞–≥ 7/8. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:",
        "p_step_8": "–®–∞–≥ 8/8. –ü–∏—Ç–∞–Ω–∏–µ —á–∞—â–µ –≤—Å–µ–≥–æ:",
        "write": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
        "skip": "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "saved_profile": "–°–æ—Ö—Ä–∞–Ω–∏–ª: ",
        "start_where": "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/–ø–∏—Ç–∞–Ω–∏–µ/–∞–Ω–∞–ª–∏–∑—ã/–ø—Ä–∏–≤—ã—á–∫–∏/–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ)",
        "daily_gm": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ë—ã—Å—Ç—Ä—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω:",
        "mood_good": "üòÉ –•–æ—Ä–æ—à–æ",
        "mood_ok": "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ",
        "mood_bad": "üò£ –ü–ª–æ—Ö–æ",
        "mood_note": "‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        "mood_thanks": "–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üëã",
        "btn_like": "üëç",
        "btn_dislike": "üëé",
    },
    "uk": {
        "welcome": "–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è.\n–û–±–µ—Ä–∏ —Ç–µ–º—É –Ω–∏–∂—á–µ –∞–±–æ –æ–ø–∏—à–∏, —â–æ —Ç—É—Ä–±—É—î.",
        "menu": ["–ë—ñ–ª—å", "–ì–æ—Ä–ª–æ/–∑–∞—Å—Ç—É–¥–∞", "–°–æ–Ω", "–°—Ç—Ä–µ—Å", "–¢—Ä–∞–≤–ª–µ–Ω–Ω—è", "–ï–Ω–µ—Ä–≥—ñ—è", "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è", "–ê–Ω–∞–ª—ñ–∑–∏", "–ó–≤–∏—á–∫–∏", "–î–æ–≤–≥–æ–ª—ñ—Ç—Ç—è", "–ü—Ä–æ—Ñ—ñ–ª—å"],
        "help": "–î–æ–ø–æ–º–∞–≥–∞—é –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏, –ø–ª–∞–Ω–æ–º –Ω–∞ 24‚Äì48 –≥–æ–¥, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏ —Ç–∞ —â–æ–¥–µ–Ω–Ω–∏–º–∏ —á–µ–∫-—ñ–Ω–∞–º–∏.\n–ö–æ–º–∞–Ω–¥–∏:\n/help, /privacy, /pause, /resume, /delete_data, /profile, /checkin_on [–ì–ì:–•–•], /checkin_off, /settz +2",
        "privacy": "TendAI –Ω–µ –∑–∞–º—ñ–Ω—é—î –ª—ñ–∫–∞—Ä—è. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ–Ω—ñ–º—É–º –¥–∞–Ω–∏—Ö (Sheets) –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.\n–ö–æ–º–∞–Ω–¥–∞ /delete_data –≤–∏–¥–∞–ª–∏—Ç—å —É—Å–µ.",
        "paused_on": "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ. –£–≤—ñ–º–∫–Ω—É—Ç–∏: /resume",
        "paused_off": "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω–µ–Ω—ñ.",
        "deleted": "–£—Å—ñ –≤–∞—à—ñ –¥–∞–Ω—ñ –≤ TendAI –≤–∏–¥–∞–ª–µ–Ω–æ. –ú–æ–∂–Ω–∞ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ /start.",
        "ask_consent": "–ú–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ –≤–∏? (–ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ /pause —á–∏ /resume.)",
        "yes": "–¢–∞–∫",
        "no": "–ù—ñ",
        "choose_topic": "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:",
        "triage_pain_q1": "–î–µ –±–æ–ª–∏—Ç—å?",
        "triage_pain_q1_opts": ["–ì–æ–ª–æ–≤–∞", "–ì–æ—Ä–ª–æ", "–°–ø–∏–Ω–∞", "–ñ–∏–≤—ñ—Ç", "–Ü–Ω—à–µ"],
        "triage_pain_q2": "–Ø–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª—é?",
        "triage_pain_q2_opts": ["–¢—É–ø–∏–π", "–ì–æ—Å—Ç—Ä–∏–π", "–ü—É–ª—å—Å—É—é—á–∏–π", "–¢–∏—Å–Ω—É—á–∏–π"],
        "triage_pain_q3": "–Ø–∫ –¥–æ–≤–≥–æ —Ç—Ä–∏–≤–∞—î?",
        "triage_pain_q3_opts": ["<3–≥–æ–¥", "3‚Äì24–≥–æ–¥", ">1 –¥–Ω—è", ">1 —Ç–∏–∂–Ω—è"],
        "triage_pain_q4": "–û—Ü—ñ–Ω—ñ—Ç—å –±—ñ–ª—å (0‚Äì10):",
        "triage_pain_q5": "–Ñ —â–æ—Å—å —ñ–∑ —Ü—å–æ–≥–æ –∑–∞—Ä–∞–∑?",
        "triage_pain_q5_opts": ["–í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–ë–ª—é–≤–∞–Ω–Ω—è", "–°–ª–∞–±–∫—ñ—Å—Ç—å/–æ–Ω—ñ–º—ñ–Ω–Ω—è", "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–æ–≤–æ—é/–∑–æ—Ä–æ–º", "–¢—Ä–∞–≤–º–∞", "–ù–µ–º–∞—î"],
        "plan_header": "–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥:",
        "plan_accept": "–ì–æ—Ç–æ–≤—ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "accept_opts": ["‚úÖ –¢–∞–∫", "üîÅ –ü—ñ–∑–Ω—ñ—à–µ", "‚úñÔ∏è –ù—ñ"],
        "remind_when": "–ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏ —Ç–∞ –∑–∞–ø–∏—Ç–∞—Ç–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è?",
        "remind_opts": ["—á–µ—Ä–µ–∑ 4 –≥–æ–¥", "—É–≤–µ—á–µ—Ä—ñ", "–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ", "–Ω–µ —Ç—Ä–µ–±–∞"],
        "thanks": "–ü—Ä–∏–π–Ω—è—Ç–æ üôå",
        "checkin_ping": "–ö–æ—Ä–æ—Ç–∫–æ: —è–∫ –∑–∞—Ä–∞–∑ –∑–∞ —à–∫–∞–ª–æ—é 0‚Äì10?",
        "checkin_better": "–ß—É–¥–æ–≤–æ! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ üí™",
        "checkin_worse": "–®–∫–æ–¥–∞. –Ø–∫—â–æ —î ¬´—á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ¬ª –∞–±–æ –±—ñ–ª—å ‚â•7/10 ‚Äî –∫—Ä–∞—â–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.",
        "comment_prompt": "–î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É üôè\n–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –π–æ–≥–æ, –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /skip, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.",
        "comment_saved": "–ö–æ–º–µ–Ω—Ç–∞—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –¥—è–∫—É—é! üôå",
        "skip_ok": "–ü—Ä–æ–ø—É—â–µ–Ω–æ.",
        "unknown": "–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π. –î–µ –±–æ–ª–∏—Ç—å —ñ —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î?",
        "lang_switched": "–û–∫, –Ω–∞–¥–∞–ª—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏–º—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.",
        "profile_intro": "–ù–∞–ª–∞—à—Ç—É–π–º–æ –ø—Ä–æ—Ñ—ñ–ª—å (~40—Å). –ú–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∞–±–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Å–≤—ñ–π.",
        "p_step_1": "–ö—Ä–æ–∫ 1/8. –°—Ç–∞—Ç—å:",
        "p_step_2": "–ö—Ä–æ–∫ 2/8. –í—ñ–∫:",
        "p_step_3": "–ö—Ä–æ–∫ 3/8. –ì–æ–ª–æ–≤–Ω–∞ –º–µ—Ç–∞:",
        "p_step_4": "–ö—Ä–æ–∫ 4/8. –•—Ä–æ–Ω—ñ—á–Ω—ñ —Ö–≤–æ—Ä–æ–±–∏ (—è–∫—â–æ —î):",
        "p_step_5": "–ö—Ä–æ–∫ 5/8. –õ—ñ–∫–∏/–¥–æ–±–∞–≤–∫–∏/–∞–ª–µ—Ä–≥—ñ—ó:",
        "p_step_6": "–ö—Ä–æ–∫ 6/8. –°–æ–Ω (–≤—ñ–¥–±—ñ–π/–ø—ñ–¥–π–æ–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        "p_step_7": "–ö—Ä–æ–∫ 7/8. –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:",
        "p_step_8": "–ö—Ä–æ–∫ 8/8. –•–∞—Ä—á—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–∂–Ω–æ:",
        "write": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏",
        "skip": "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "saved_profile": "–ó–±–µ—Ä—ñ–≥: ",
        "start_where": "–ó —á–æ–≥–æ –ø–æ—á–Ω–µ–º–æ? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è/–∞–Ω–∞–ª—ñ–∑–∏/–∑–≤–∏—á–∫–∏/–¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è)",
        "daily_gm": "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! –®–≤–∏–¥–∫–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —á–µ–∫-—ñ–Ω:",
        "mood_good": "üòÉ –î–æ–±—Ä–µ",
        "mood_ok": "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ",
        "mood_bad": "üò£ –ü–æ–≥–∞–Ω–æ",
        "mood_note": "‚úçÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä",
        "mood_thanks": "–î—è–∫—É—é! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üëã",
        "btn_like": "üëç",
        "btn_dislike": "üëé",
    },
}

def t(lang: str, key: str) -> str:
    return T.get(lang, T["en"]).get(key, T["en"].get(key, key))

# ---------------------------
# Helpers for Sheets
# ---------------------------
def utcnow():
    return datetime.now(timezone.utc)

def iso(dt: datetime | None) -> str:
    if not dt:
        return ""
    return dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def users_get_row_index(user_id: int) -> int | None:
    vals = ws_users.get_all_records()
    for i, row in enumerate(vals, start=2):
        if str(row.get("user_id")) == str(user_id):
            return i
    return None

def users_get(user_id: int) -> dict:
    vals = ws_users.get_all_records()
    for row in vals:
        if str(row.get("user_id")) == str(user_id):
            return row
    return {}

def users_upsert(user_id: int, username: str, lang: str):
    idx = users_get_row_index(user_id)
    base = [str(user_id), username or "", lang, "no", "0", DEFAULT_CHECKIN_LOCAL, "no"]
    if idx:
        ws_users.update(f"A{idx}:G{idx}", [base])
    else:
        ws_users.append_row(base)

def users_set(user_id: int, field: str, value: str):
    idx = users_get_row_index(user_id)
    if not idx:
        return
    headers = ws_users.row_values(1)
    if field in headers:
        col = headers.index(field) + 1
        ws_users.update_cell(idx, col, value)

def profiles_get_row_index(user_id: int) -> int | None:
    vals = ws_profiles.get_all_records()
    for i, row in enumerate(vals, start=2):
        if str(row.get("user_id")) == str(user_id):
            return i
    return None

def profiles_get(user_id: int) -> dict:
    vals = ws_profiles.get_all_records()
    for row in vals:
        if str(row.get("user_id")) == str(user_id):
            return row
    return {}

def profiles_upsert(user_id: int, data: dict):
    idx = profiles_get_row_index(user_id)
    headers = ws_profiles.row_values(1)
    row = profiles_get(user_id) if idx else {}
    row.update({k: ("" if v is None else (", ".join(v) if isinstance(v, list) else str(v))) for k, v in data.items()})
    row["user_id"] = str(user_id)
    row["updated_at"] = iso(utcnow())
    values = [row.get(h, "") for h in headers]
    if idx:
        ws_profiles.update(f"A{idx}:{chr(64+len(headers))}{idx}", [values])
    else:
        ws_profiles.append_row(values)

def episode_create(user_id: int, topic: str, baseline_severity: int, red_flags: str) -> str:
    eid = f"{user_id}-{uuid.uuid4().hex[:8]}"
    now = iso(utcnow())
    ws_episodes.append_row([
        eid, str(user_id), topic, now,
        str(baseline_severity), red_flags, "0", "<=3/10",
        "", "", "open", now, ""
    ])
    return eid

def episode_find_open(user_id: int) -> dict | None:
    vals = ws_episodes.get_all_records()
    for row in vals:
        if str(row.get("user_id")) == str(user_id) and row.get("status") == "open":
            return row
    return None

def episode_set(eid: str, field: str, value: str):
    vals = ws_episodes.get_all_values()
    headers = vals[0]
    if field not in headers:
        return
    col = headers.index(field) + 1
    for i in range(2, len(vals) + 1):
        if ws_episodes.cell(i, 1).value == eid:
            ws_episodes.update_cell(i, col, value)
            ws_episodes.update_cell(i, headers.index("last_update") + 1, iso(utcnow()))
            return

def reminder_add(user_id: int, text: str, when_utc: datetime):
    rid = f"{user_id}-{uuid.uuid4().hex[:6]}"
    ws_reminders.append_row([rid, str(user_id), text, iso(when_utc), iso(utcnow()), "scheduled"])
    return rid

def schedule_from_sheet_on_start(app):
    """–ü–æ–¥–Ω–∏–º–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã, reminders –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫–∞–ø—ã."""
    now = utcnow()
    # Episodes check-ins
    for row in ws_episodes.get_all_records():
        if row.get("status") != "open":
            continue
        eid = row.get("episode_id")
        uid = int(row.get("user_id"))
        nca = row.get("next_checkin_at") or ""
        if not nca:
            continue
        try:
            dt_ = datetime.strptime(nca, "%Y-%m-%d %H:%M:%S%z")
        except Exception:
            continue
        delay = max(60, (dt_ - now).total_seconds())
        app.job_queue.run_once(job_checkin_episode, when=delay, data={"user_id": uid, "episode_id": eid})
    # Reminders one-off
    for row in ws_reminders.get_all_records():
        if (row.get("status") or "") != "scheduled":
            continue
        uid = int(row.get("user_id"))
        when = row.get("when_utc")
        rid = row.get("id")
        try:
            dt_ = datetime.strptime(when, "%Y-%m-%d %H:%M:%S%z")
        except Exception:
            continue
        delay = max(60, (dt_ - now).total_seconds())
        app.job_queue.run_once(job_oneoff_reminder, when=delay, data={"user_id": uid, "reminder_id": rid})
    # Daily check-ins
    for u in ws_users.get_all_records():
        if (u.get("paused") or "").lower() == "yes":
            continue
        uid = int(u.get("user_id"))
        tz_off = int(str(u.get("tz_offset") or "0"))
        hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
        schedule_daily_checkin(app, uid, tz_off, hhmm, norm_lang(u.get("lang")))

# ---------------------------
# Daily check-in scheduling
# ---------------------------
def hhmm_to_tuple(hhmm: str) -> tuple[int, int]:
    m = re.search(r'([01]?\d|2[0-3]):([0-5]\d)', hhmm.strip())
    return (int(m.group(1)), int(m.group(2))) if m else (8, 30)

def local_to_utc_hour_min(tz_offset_hours: int, hhmm: str) -> tuple[int, int]:
    h, m = hhmm_to_tuple(hhmm)
    h_utc = (h - tz_offset_hours) % 24
    return h_utc, m

def schedule_daily_checkin(app, user_id: int, tz_offset: int, hhmm_local: str, lang: str):
    for j in app.job_queue.get_jobs_by_name(f"daily_{user_id}"):
        j.schedule_removal()
    h_utc, m_utc = local_to_utc_hour_min(tz_offset, hhmm_local)
    t = dtime(hour=h_utc, minute=m_utc, tzinfo=timezone.utc)
    app.job_queue.run_daily(job_daily_checkin, time=t, name=f"daily_{user_id}",
                            data={"user_id": user_id, "lang": lang})

# ---------------------------
# Scenarios (pain + generic)
# ---------------------------
TOPIC_KEYS = {
    "en": {"Pain": "pain", "Throat/Cold": "throat", "Sleep": "sleep", "Stress": "stress", "Digestion": "digestion", "Energy": "energy",
           "Nutrition": "nutrition", "Labs": "labs", "Habits": "habits", "Longevity": "longevity", "Profile": "profile"},
    "ru": {"–ë–æ–ª—å": "pain", "–ì–æ—Ä–ª–æ/–ø—Ä–æ—Å—Ç—É–¥–∞": "throat", "–°–æ–Ω": "sleep", "–°—Ç—Ä–µ—Å—Å": "stress", "–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ": "digestion", "–≠–Ω–µ—Ä–≥–∏—è": "energy",
           "–ü–∏—Ç–∞–Ω–∏–µ": "nutrition", "–ê–Ω–∞–ª–∏–∑—ã": "labs", "–ü—Ä–∏–≤—ã—á–∫–∏": "habits", "–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ": "longevity", "–ü—Ä–æ—Ñ–∏–ª—å": "profile"},
    "uk": {"–ë—ñ–ª—å": "pain", "–ì–æ—Ä–ª–æ/–∑–∞—Å—Ç—É–¥–∞": "throat", "–°–æ–Ω": "sleep", "–°—Ç—Ä–µ—Å": "stress", "–¢—Ä–∞–≤–ª–µ–Ω–Ω—è": "digestion", "–ï–Ω–µ—Ä–≥—ñ—è": "energy",
           "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è": "nutrition", "–ê–Ω–∞–ª—ñ–∑–∏": "labs", "–ó–≤–∏—á–∫–∏": "habits", "–î–æ–≤–≥–æ–ª—ñ—Ç—Ç—è": "longevity", "–ü—Ä–æ—Ñ—ñ–ª—å": "profile"},
}

def main_menu(lang: str) -> ReplyKeyboardMarkup:
    lst = T[lang]["menu"]
    rows = [lst[:5], lst[5:]]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def numeric_keyboard_0_10(lang: str) -> ReplyKeyboardMarkup:
    row1 = [str(i) for i in range(0, 6)]
    row2 = [str(i) for i in range(6, 11)]
    return ReplyKeyboardMarkup([row1, row2], resize_keyboard=True, one_time_keyboard=True)

def accept_keyboard(lang: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([T[lang]["accept_opts"]], resize_keyboard=True, one_time_keyboard=True)

def remind_keyboard(lang: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([T[lang]["remind_opts"]], resize_keyboard=True, one_time_keyboard=True)

# ---------------------------
# Planning helpers
# ---------------------------
def pain_plan(lang: str, red_flags_selected: list[str]) -> list[str]:
    flg = [s for s in red_flags_selected if s and str(s).lower() not in ["none", "–Ω–µ—Ç", "–Ω–µ–º–∞—î"]]
    if flg:
        return {
            "ru": ["‚ö†Ô∏è –ï—Å—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏. –õ—É—á—à–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –≤—Ä–∞—á—É/–≤ —Å–∫–æ—Ä—É—é."],
            "uk": ["‚ö†Ô∏è –Ñ —Ç—Ä–∏–≤–æ–∂–Ω—ñ –æ–∑–Ω–∞–∫–∏. –ö—Ä–∞—â–µ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è/—à–≤–∏–¥–∫–æ—ó."],
            "en": ["‚ö†Ô∏è Red flags present. Please seek urgent medical evaluation."],
        }[lang]
    if lang == "ru":
        return [
            "1) –í–æ–¥–∞ 400‚Äì600 –º–ª –∏ 15‚Äì20 –º–∏–Ω —Ç–∏—à–∏–Ω—ã/–æ—Ç–¥—ã—Ö–∞.",
            "2) –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –∏–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ —Å –µ–¥–æ–π.",
            "3) –ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å, —É–º–µ–Ω—å—à–∏—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞ 30‚Äì60 –º–∏–Ω.",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞: –∫ –≤–µ—á–µ—Ä—É –±–æ–ª—å ‚â§3/10; —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è ‚Äî –ø–∏—à–∏.",
        ]
    if lang == "uk":
        return [
            "1) –í–æ–¥–∞ 400‚Äì600 –º–ª —ñ 15‚Äì20 —Ö–≤ —Ç–∏—à—ñ/–≤—ñ–¥–ø–æ—á–∏–Ω–∫—É.",
            "2) –Ø–∫—â–æ –Ω–µ–º–∞ –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω—å ‚Äî —ñ–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –∑ —ó–∂–µ—é.",
            "3) –ü—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏, –º–µ–Ω—à–µ –µ–∫—Ä–∞–Ω—É 30‚Äì60 —Ö–≤.",
            "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –¥–æ –≤–µ—á–æ—Ä–∞ –±—ñ–ª—å ‚â§3/10; —è–∫—â–æ –ø–æ—Å–∏–ª—é—î—Ç—å—Å—è ‚Äî –Ω–∞–ø–∏—à–∏.",
        ]
    return [
        "1) Drink 400‚Äì600 ml water; rest 15‚Äì20 min in a quiet room.",
        "2) If no contraindications ‚Äî ibuprofen 200‚Äì400 mg once with food.",
        "3) Air the room; reduce screen time 30‚Äì60 min.",
        "Check: by evening pain ‚â§3/10; worsening ‚Äî ping me.",
    ]

# ---------------------------
# Jobs (check-ins)
# ---------------------------
async def job_checkin_episode(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data or {}
    user_id = data.get("user_id"); episode_id = data.get("episode_id")
    if not user_id or not episode_id:
        return
    u = users_get(user_id)
    if (u.get("paused") or "").lower() == "yes":
        return
    lang = norm_lang(u.get("lang") or "en")
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=t(lang, "checkin_ping"),
            reply_markup=numeric_keyboard_0_10(lang),
        )
        episode_set(episode_id, "next_checkin_at", "")
    except Exception as e:
        logging.error(f"job_checkin_episode send error: {e}")

async def job_oneoff_reminder(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data or {}
    user_id = data.get("user_id"); rid = data.get("reminder_id")
    try:
        row = users_get(user_id)
        lang = norm_lang(row.get("lang") or "en")
        await context.bot.send_message(chat_id=user_id, text=t(lang, "thanks"))
    except Exception as e:
        logging.error(f"reminder send error: {e}")
    vals = ws_reminders.get_all_values()
    for i in range(2, len(vals)+1):
        if ws_reminders.cell(i, 1).value == rid:
            ws_reminders.update_cell(i, 6, "sent")
            break

async def job_daily_checkin(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid = d.get("user_id"); lang = d.get("lang", "en")
    u = users_get(uid)
    if (u.get("paused") or "").lower() == "yes":
        return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["mood_good"], callback_data="mood|good"),
         InlineKeyboardButton(T[lang]["mood_ok"],   callback_data="mood|ok"),
         InlineKeyboardButton(T[lang]["mood_bad"],  callback_data="mood|bad")],
        [InlineKeyboardButton(T[lang]["mood_note"], callback_data="mood|note")]
    ])
    try:
        await context.bot.send_message(uid, T[lang]["daily_gm"], reply_markup=kb)
    except Exception as e:
        logging.error(f"daily checkin error: {e}")

# ---------------------------
# LLM Router
# ---------------------------
SYS_ROUTER = """
You are TendAI ‚Äî a concise, warm, professional health & longevity assistant (not a doctor).
Always answer strictly in {lang}. Keep it short (<=6 lines + up to 4 bullets).
Use user profile if helpful. TRIAGE: ask 1‚Äì2 clarifiers first; advise ER only for clear red flags with high confidence.
Return MINIFIED JSON ONLY:
{"intent":"symptom"|"nutrition"|"sleep"|"labs"|"habits"|"longevity"|"other",
 "assistant_reply":string,
 "followups":string[],"needs_more":boolean,"red_flags":boolean,"confidence":0..1}
"""

def llm_router_answer(text: str, lang: str, profile: dict) -> dict:
    if not oai:
        return {"intent":"other","assistant_reply":t(lang,"unknown"),"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}
    sys = SYS_ROUTER.format(lang=lang) + f"\nUserProfile: {json.dumps(profile, ensure_ascii=False)}"
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.2,
            max_tokens=420,
            messages=[{"role":"system","content":sys},{"role":"user","content":text}]
        )
        out = resp.choices[0].message.content.strip()
        m = re.search(r"\{.*\}\s*$", out, re.S)
        data = json.loads(m.group(0) if m else out)
        if data.get("red_flags") and float(data.get("confidence",0)) < 0.6:
            data["red_flags"] = False
            data["needs_more"] = True
            data.setdefault("followups", []).append(
                "–ì–¥–µ –∏–º–µ–Ω–Ω–æ/–∫–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä/—Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?" if lang=="ru" else
                ("–î–µ —Å–∞–º–µ/—è–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä/—Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î?" if lang=="uk" else "Where exactly/what character/how long?")
            )
        return data
    except Exception as e:
        logging.error(f"router LLM error: {e}")
        return {"intent":"other","assistant_reply":t(lang,"unknown"),"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}

# ---------------------------
# Profile (guided intake)
# ---------------------------
PROFILE_STEPS = [
    {"key":"sex", "opts":{
        "ru":[("–ú—É–∂—Å–∫–æ–π","male"),("–ñ–µ–Ω—Å–∫–∏–π","female"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("Male","male"),("Female","female"),("Other","other")],
        "uk":[("–ß–æ–ª–æ–≤—ñ—á–∞","male"),("–ñ—ñ–Ω–æ—á–∞","female"),("–Ü–Ω—à–∞","other")],
    }},
    {"key":"age", "opts":{
        "ru":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "en":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "uk":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
    }},
    {"key":"goal", "opts":{
        "ru":[("–ü–æ—Ö—É–¥–µ–Ω–∏–µ","weight"),("–≠–Ω–µ—Ä–≥–∏—è","energy"),("–°–æ–Ω","sleep"),("–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ","longevity"),("–°–∏–ª–∞","strength")],
        "en":[("Weight","weight"),("Energy","energy"),("Sleep","sleep"),("Longevity","longevity"),("Strength","strength")],
        "uk":[("–í–∞–≥–∞","weight"),("–ï–Ω–µ—Ä–≥—ñ—è","energy"),("–°–æ–Ω","sleep"),("–î–æ–≤–≥–æ–ª—ñ—Ç—Ç—è","longevity"),("–°–∏–ª–∞","strength")],
    }},
    {"key":"conditions", "opts":{
        "ru":[("–ù–µ—Ç","none"),("–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è","hypertension"),("–î–∏–∞–±–µ—Ç","diabetes"),("–©–∏—Ç–æ–≤–∏–¥–∫–∞","thyroid"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("None","none"),("Hypertension","hypertension"),("Diabetes","diabetes"),("Thyroid","thyroid"),("Other","other")],
        "uk":[("–ù–µ–º–∞—î","none"),("–ì—ñ–ø–µ—Ä—Ç–æ–Ω—ñ—è","hypertension"),("–î—ñ–∞–±–µ—Ç","diabetes"),("–©–∏—Ç–æ–ø–æ–¥—ñ–±–Ω–∞","thyroid"),("–Ü–Ω—à–µ","other")],
    }},
    {"key":"meds", "opts":{
        "ru":[("–ù–µ—Ç","none"),("–ú–∞–≥–Ω–∏–π","magnesium"),("–í–∏—Ç–∞–º–∏–Ω D","vitd"),("–ê–ª–ª–µ—Ä–≥–∏–∏ –µ—Å—Ç—å","allergies"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("None","none"),("Magnesium","magnesium"),("Vitamin D","vitd"),("Allergies","allergies"),("Other","other")],
        "uk":[("–ù–µ–º–∞—î","none"),("–ú–∞–≥–Ω—ñ–π","magnesium"),("–í—ñ—Ç–∞–º—ñ–Ω D","vitd"),("–ê–ª–µ—Ä–≥—ñ—ó","allergies"),("–Ü–Ω—à–µ","other")],
    }},
    {"key":"sleep", "opts":{
        "ru":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
        "en":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("Irregular","irregular")],
        "uk":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
    }},
    {"key":"activity", "opts":{
        "ru":[("<5k —à–∞–≥–æ–≤","<5k"),("5‚Äì8k","5-8k"),("8‚Äì12k","8-12k"),("–°–ø–æ—Ä—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ","sport")],
        "en":[("<5k steps","<5k"),("5‚Äì8k","5-8k"),("8‚Äì12k","8-12k"),("Regular sport","sport")],
        "uk":[("<5k –∫—Ä–æ–∫—ñ–≤","<5k"),("5‚Äì8k","5-8k"),("8‚Äì12k","8-12k"),("–°–ø–æ—Ä—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ","sport")],
    }},
    {"key":"diet", "opts":{
        "ru":[("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ","balanced"),("–ù–∏–∑–∫–æ—É–≥–ª/–∫–µ—Ç–æ","lowcarb"),("–í–µ–≥–µ—Ç–∞—Ä/–≤–µ–≥–∞–Ω","plant"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
        "en":[("Balanced","balanced"),("Low-carb/keto","lowcarb"),("Vegetarian/vegan","plant"),("Irregular","irregular")],
        "uk":[("–ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ","balanced"),("–ú–∞–ª–æ–≤—É–≥–ª/–∫–µ—Ç–æ","lowcarb"),("–í–µ–≥–µ—Ç–∞—Ä/–≤–µ–≥–∞–Ω","plant"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
    }},
]

def build_profile_kb(lang: str, key: str, opts: List[Tuple[str,str]]) -> InlineKeyboardMarkup:
    rows = []
    row = []
    for label, val in opts:
        row.append(InlineKeyboardButton(label, callback_data=f"p|choose|{key}|{val}"))
        if len(row) == 3:
            rows.append(row); row=[]
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(T[lang]["write"], callback_data=f"p|write|{key}"),
                 InlineKeyboardButton(T[lang]["skip"],  callback_data=f"p|skip|{key}")])
    return InlineKeyboardMarkup(rows)

async def start_profile(update: Update, lang: str, uid: int):
    sessions[uid] = {"profile_active": True, "p_step": 0, "p_wait_key": None}
    await update.message.reply_text(T[lang]["profile_intro"])
    step = PROFILE_STEPS[0]
    kb = build_profile_kb(lang, step["key"], step["opts"][lang])
    await update.message.reply_text(T[lang]["p_step_1"], reply_markup=kb)

# >>> FIXED: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Message, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç reply_text
async def advance_profile(msg, lang: str, uid: int):
    s = sessions.get(uid, {})
    s["p_step"] += 1
    if s["p_step"] < len(PROFILE_STEPS):
        idx = s["p_step"]
        msg_key = f"p_step_{idx+1}"
        step = PROFILE_STEPS[idx]
        kb = build_profile_kb(lang, step["key"], step["opts"][lang])
        await msg.reply_text(T[lang][msg_key], reply_markup=kb)
        return
    prof = profiles_get(uid)
    summary_parts = []
    for k in ["sex","age","goal","conditions","meds","sleep","activity","diet"]:
        v = prof.get(k) or sessions.get(uid,{}).get(k,"")
        if v:
            summary_parts.append(f"{k}: {v}")
    profiles_upsert(uid, {})
    sessions[uid]["profile_active"] = False
    await msg.reply_text(T[lang]["saved_profile"] + "; ".join(summary_parts))
    await msg.reply_text(T[lang]["start_where"], reply_markup=main_menu(lang))

# ---------------------------
# Commands
# ---------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = norm_lang(getattr(user, "language_code", None))
    users_upsert(user.id, user.username or "", lang)

    await update.message.reply_text(t(lang, "welcome"), reply_markup=main_menu(lang))

    u = users_get(user.id)
    if (u.get("consent") or "").lower() not in {"yes", "no"}:
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton(t(lang, "yes"), callback_data="consent|yes"),
              InlineKeyboardButton(t(lang, "no"),  callback_data="consent|no")]]
        )
        await update.message.reply_text(t(lang, "ask_consent"), reply_markup=kb)

    tz_off = int(str(u.get("tz_offset") or "0"))
    hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
    schedule_daily_checkin(context.application, user.id, tz_off, hhmm, lang)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or "en")
    await update.message.reply_text(t(lang, "help"))

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or "en")
    await update.message.reply_text(t(lang, "privacy"))

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    users_set(uid, "paused", "yes")
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text(t(lang, "paused_on"))

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    users_set(uid, "paused", "no")
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text(t(lang, "paused_off"))

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    idx = users_get_row_index(uid)
    if idx:
        ws_users.delete_rows(idx)
    pidx = profiles_get_row_index(uid)
    if pidx:
        ws_profiles.delete_rows(pidx)
    vals = ws_episodes.get_all_values()
    to_delete = []
    for i in range(2, len(vals) + 1):
        if ws_episodes.cell(i, 2).value == str(uid):
            to_delete.append(i)
    for j, row_i in enumerate(to_delete):
        ws_episodes.delete_rows(row_i - j)
    rvals = ws_reminders.get_all_values()
    to_delete = []
    for i in range(2, len(rvals) + 1):
        if ws_reminders.cell(i, 2).value == str(uid):
            to_delete.append(i)
    for j, row_i in enumerate(to_delete):
        ws_reminders.delete_rows(row_i - j)

    lang = norm_lang(getattr(update.effective_user, "language_code", None))
    await update.message.reply_text(t(lang, "deleted"), reply_markup=ReplyKeyboardRemove())

async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user, "language_code", None))
    await start_profile(update, lang, uid)

async def cmd_settz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    parts = (update.message.text or "").split()
    if len(parts) < 2 or not re.fullmatch(r"[+-]?\d{1,2}", parts[1]):
        await update.message.reply_text({"ru":"–§–æ—Ä–º–∞—Ç: /settz +3","uk":"–§–æ—Ä–º–∞—Ç: /settz +2","en":"Usage: /settz +3"}[lang]); return
    off = int(parts[1])
    users_set(uid, "tz_offset", str(off))
    hhmm = users_get(uid).get("checkin_hour") or DEFAULT_CHECKIN_LOCAL
    schedule_daily_checkin(context.application, uid, off, hhmm, lang)
    await update.message.reply_text({"ru":f"–ß–∞—Å–æ–≤–æ–π —Å–¥–≤–∏–≥: {off}—á","uk":f"–ó—Å—É–≤: {off} –≥–æ–¥","en":f"Timezone offset: {off}h"}[lang])

async def cmd_checkin_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    parts = (update.message.text or "").split(maxsplit=1)
    hhmm = DEFAULT_CHECKIN_LOCAL
    if len(parts) == 2:
        m = re.search(r'([01]?\d|2[0-3]):([0-5]\d)', parts[1])
        if m: hhmm = m.group(0)
    users_set(uid, "checkin_hour", hhmm)
    tz_off = int(str(users_get(uid).get("tz_offset") or "0"))
    schedule_daily_checkin(context.application, uid, tz_off, hhmm, lang)
    await update.message.reply_text({"ru":f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤–∫–ª—é—á—ë–Ω ({hhmm}).","uk":f"–©–æ–¥–µ–Ω–Ω–∏–π —á–µ–∫-—ñ–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–æ ({hhmm}).","en":f"Daily check-in enabled ({hhmm})."}[lang])

async def cmd_checkin_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    for j in context.application.job_queue.get_jobs_by_name(f"daily_{uid}"):
        j.schedule_removal()
    await update.message.reply_text({"ru":"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤—ã–∫–ª—é—á–µ–Ω.","uk":"–©–æ–¥–µ–Ω–Ω–∏–π —á–µ–∫-—ñ–Ω –≤–∏–º–∫–Ω–µ–Ω–æ.","en":"Daily check-in disabled."}[norm_lang(users_get(uid).get("lang") or "en")])

async def cmd_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if sessions.get(uid, {}).get("awaiting_comment"):
        sessions[uid]["awaiting_comment"] = False
        lang = norm_lang(users_get(uid).get("lang") or "en")
        await update.message.reply_text(t(lang, "skip_ok"))

# ---------------------------
# Callback (consent, feedback, profile, daily mood)
# ---------------------------
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = (q.data or "")
    uid = q.from_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")

    if data.startswith("consent|"):
        choice = data.split("|", 1)[1]
        users_set(uid, "consent", "yes" if choice == "yes" else "no")
        await q.edit_message_reply_markup(reply_markup=None)
        await q.message.reply_text(t(lang, "thanks"))
        return

    if data in {"feedback_yes", "feedback_no"}:
        rating = "1" if data.endswith("yes") else "0"
        ws_feedback.append_row([iso(utcnow()), str(uid), data, q.from_user.username or "", rating, ""])
        sessions.setdefault(uid, {})["awaiting_comment"] = True
        await q.edit_message_reply_markup(reply_markup=None)
        await q.message.reply_text(t(lang, "comment_prompt"))
        return

    if data.startswith("p|"):
        _, action, key, *rest = data.split("|")
        if action == "choose":
            value = "|".join(rest)
            sessions.setdefault(uid, {})[key] = value
            profiles_upsert(uid, {key: value})
            await advance_profile(q.message, lang, uid)
            return
        if action == "write":
            sessions.setdefault(uid, {})["p_wait_key"] = key
            await q.message.reply_text({"ru":"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:","uk":"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç:","en":"Type your answer:"}[lang])
            return
        if action == "skip":
            profiles_upsert(uid, {key: ""})
            await advance_profile(q.message, lang, uid)
            return

    if data.startswith("mood|"):
        mood = data.split("|",1)[1]
        if mood == "note":
            sessions.setdefault(uid, {})["awaiting_daily_comment"] = True
            await q.message.reply_text({"ru":"–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ:","uk":"–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è:","en":"Write a short note:"}[lang])
            return
        ws_daily.append_row([iso(utcnow()), str(uid), mood, ""])
        await q.message.reply_text(T[lang]["mood_thanks"])
        return

# ---------------------------
# Scenario Flow (pain)
# ---------------------------
def detect_or_choose_topic(lang: str, text: str) -> str | None:
    text_l = text.lower()
    if any(w in text_l for w in ["–æ–ø—Ä–æ—Å", "–∞–Ω–∫–µ—Ç–∞", "–æ–ø–∏—Ç", "questionnaire", "survey"]):
        return "profile"
    if any(w in text_l for w in ["–±–æ–ª–∏—Ç", "–±–æ–ª—å", "hurt", "pain", "–±–æ–ª—é"]):
        return "pain"
    if any(w in text_l for w in ["–≥–æ—Ä–ª–æ", "throat", "–ø—Ä–æ—Å—Ç—É–¥", "cold"]):
        return "throat"
    if any(w in text_l for w in ["—Å–æ–Ω", "sleep"]):
        return "sleep"
    if any(w in text_l for w in ["—Å—Ç—Ä–µ—Å—Å", "stress"]):
        return "stress"
    if any(w in text_l for w in ["–∂–∏–≤–æ—Ç", "–∂–µ–ª—É–¥", "–∂–∏–≤—ñ—Ç", "—Å—Ç—É–ª", "–ø–æ–Ω–æ—Å", "–¥–∏–∞—Ä", "digest"]):
        return "digestion"
    if any(w in text_l for w in ["—ç–Ω–µ—Ä–≥", "–µ–Ω–µ—Ä–≥", "energy", "fatigue", "—Å–ª–∞–±–æ—Å—Ç—å"]):
        return "energy"
    if any(w in text_l for w in ["–ø–∏—Ç–∞–Ω–∏–µ","—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è","nutrition"]):
        return "nutrition"
    if any(w in text_l for w in ["–∞–Ω–∞–ª–∏–∑","–∞–Ω–∞–ª—ñ–∑","labs"]):
        return "labs"
    if any(w in text_l for w in ["–ø—Ä–∏–≤—ã—á","–∑–≤–∏—á","habit"]):
        return "habits"
    if any(w in text_l for w in ["–¥–æ–ª–≥–æ–ª–µ—Ç","–¥–æ–≤–≥–æ–ª—ñ—Ç","longevity"]):
        return "longevity"
    for label, key in TOPIC_KEYS.get(lang, TOPIC_KEYS["en"]).items():
        if text.strip() == label:
            return key
    return None

async def start_pain_triage(update: Update, lang: str, uid: int):
    sessions[uid] = {"topic": "pain", "step": 1, "answers": {}}
    await update.message.reply_text(
        t(lang, "triage_pain_q1"),
        reply_markup=ReplyKeyboardMarkup([T[lang]["triage_pain_q1_opts"]], resize_keyboard=True, one_time_keyboard=True),
    )

async def continue_pain_triage(update: Update, context: ContextTypes.DEFAULT_TYPE, lang: str, uid: int, text: str):
    s = sessions.get(uid, {})
    step = s.get("step", 1)

    if step == 1:
        s["answers"]["loc"] = text
        s["step"] = 2
        await update.message.reply_text(
            t(lang, "triage_pain_q2"),
            reply_markup=ReplyKeyboardMarkup([T[lang]["triage_pain_q2_opts"]], resize_keyboard=True, one_time_keyboard=True),
        ); return

    if step == 2:
        s["answers"]["kind"] = text
        s["step"] = 3
        await update.message.reply_text(
            t(lang, "triage_pain_q3"),
            reply_markup=ReplyKeyboardMarkup([T[lang]["triage_pain_q3_opts"]], resize_keyboard=True, one_time_keyboard=True),
        ); return

    if step == 3:
        s["answers"]["duration"] = text
        s["step"] = 4
        await update.message.reply_text(t(lang, "triage_pain_q4"), reply_markup=numeric_keyboard_0_10(lang))
        return

    if step == 4:
        m = re.search(r'\d+', text)
        if not m:
            await update.message.reply_text(t(lang, "triage_pain_q4"), reply_markup=numeric_keyboard_0_10(lang))
            return
        sev = max(0, min(10, int(m.group(0))))
        s["answers"]["severity"] = sev
        s["step"] = 5
        await update.message.reply_text(
            t(lang, "triage_pain_q5"),
            reply_markup=ReplyKeyboardMarkup([T[lang]["triage_pain_q5_opts"]], resize_keyboard=True, one_time_keyboard=True),
        ); return

    if step == 5:
        red = text
        s["answers"]["red"] = red
        sev = int(s["answers"].get("severity", 5))
        eid = episode_create(uid, "pain", sev, red)
        s["episode_id"] = eid
        plan_lines = pain_plan(lang, [red])
        await update.message.reply_text(f"{t(lang,'plan_header')}\n" + "\n".join(plan_lines))
        await update.message.reply_text(t(lang, "plan_accept"), reply_markup=accept_keyboard(lang))
        s["step"] = 6; return

    if step == 6:
        acc = text.strip()
        accepted = "1" if acc.startswith("‚úÖ") else "0"
        episode_set(s["episode_id"], "plan_accepted", accepted)
        await update.message.reply_text(t(lang, "remind_when"), reply_markup=remind_keyboard(lang))
        s["step"] = 7; return

    if step == 7:
        choice = text.strip().lower()
        delay = None
        if choice in {"in 4h", "—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞", "—á–µ—Ä–µ–∑ 4 –≥–æ–¥"}: delay = timedelta(hours=4)
        elif choice in {"this evening", "–≤–µ—á–µ—Ä–æ–º", "—É–≤–µ—á–µ—Ä—ñ"}: delay = timedelta(hours=6)
        elif choice in {"tomorrow morning", "–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º", "–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ"}: delay = timedelta(hours=16)
        elif choice in {"no need", "–Ω–µ –Ω–∞–¥–æ", "–Ω–µ —Ç—Ä–µ–±–∞"}: delay = None

        if delay:
            next_time = utcnow() + delay
            episode_set(s["episode_id"], "next_checkin_at", iso(next_time))
            context.job_queue.run_once(job_checkin_episode, when=delay.total_seconds(),
                                       data={"user_id": uid, "episode_id": s["episode_id"]})
        await update.message.reply_text(t(lang, "thanks"), reply_markup=main_menu(lang))
        sessions.pop(uid, None)
        return

# ---------------------------
# Main text handler
# ---------------------------
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    text = (update.message.text or "").strip()

    urec = users_get(uid)
    if not urec:
        try:
            lang = norm_lang(detect(text))
        except Exception:
            lang = norm_lang(getattr(user, "language_code", None))
        users_upsert(uid, user.username or "", lang)
    else:
        lang = norm_lang(urec.get("lang") or getattr(user, "language_code", None))

    # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É —á–µ–∫—É
    if sessions.get(uid, {}).get("awaiting_daily_comment"):
        ws_daily.append_row([iso(utcnow()), str(uid), "note", text])
        sessions[uid]["awaiting_daily_comment"] = False
        await update.message.reply_text(T[lang]["mood_thanks"])
        return

    # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫
    if sessions.get(uid, {}).get("awaiting_comment"):
        ws_feedback.append_row([iso(utcnow()), str(uid), "comment", user.username or "", "", text])
        sessions[uid]["awaiting_comment"] = False
        await update.message.reply_text(t(lang, "comment_saved"))
        return

    # —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ —à–∞–≥–∞ –ø—Ä–æ—Ñ–∏–ª—è
    if sessions.get(uid, {}).get("p_wait_key"):
        key = sessions[uid]["p_wait_key"]
        sessions[uid]["p_wait_key"] = None
        val = text
        if key == "age":
            m = re.search(r'\d{2}', text)
            if m: val = m.group(0)
        profiles_upsert(uid, {key: val})
        sessions[uid][key] = val
        await advance_profile(update.message, lang, uid)
        return

    # –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –±–æ–ª–∏
    if sessions.get(uid, {}).get("topic") == "pain":
        await continue_pain_triage(update, context, lang, uid, text); return

    topic = detect_or_choose_topic(lang, text)
    if topic == "profile":
        await start_profile(update, lang, uid); return
    if topic == "pain":
        await start_pain_triage(update, lang, uid); return
    if topic in {"throat", "sleep", "stress", "digestion", "energy", "nutrition", "labs", "habits", "longevity"}:
        prof = profiles_get(uid)
        data = llm_router_answer(text, lang, prof)
        reply = data.get("assistant_reply") or t(lang, "unknown")
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang]["btn_like"], callback_data="feedback_yes"),
                                    InlineKeyboardButton(T[lang]["btn_dislike"], callback_data="feedback_no")]])
        await update.message.reply_text(reply, reply_markup=kb)
        for q in (data.get("followups") or [])[:2]:
            await update.message.reply_text(q)
        return

    # –æ–±—â–∏–π —Ñ–æ–ª–±—ç–∫
    prof = profiles_get(uid)
    data = llm_router_answer(text, lang, prof)
    reply = data.get("assistant_reply") or t(lang, "unknown")
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang]["btn_like"], callback_data="feedback_yes"),
                                InlineKeyboardButton(T[lang]["btn_dislike"], callback_data="feedback_no")]])
    await update.message.reply_text(reply, reply_markup=kb)
    for q in (data.get("followups") or [])[:2]:
        await update.message.reply_text(q)

# ---------------------------
# Number replies (0‚Äì10)
# ---------------------------
async def on_number_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    text = update.message.text.strip()
    try:
        val = int(text)
        if not (0 <= val <= 10):
            return
    except Exception:
        return

    lang = norm_lang(users_get(uid).get("lang") or getattr(user, "language_code", None))

    # >>> –í–ê–ñ–ù–û: –µ—Å–ª–∏ –∏–¥—ë—Ç –±–æ–ª—å-—à–∞–≥4, –ø–µ—Ä–µ–¥–∞—ë–º –≤ —Ç—Ä–∏–∞–∂
    if sessions.get(uid, {}).get("topic") == "pain" and sessions[uid].get("step") == 4:
        await continue_pain_triage(update, context, lang, uid, str(val))
        return

    ep = episode_find_open(uid)
    if not ep:
        await update.message.reply_text(t(lang, "thanks")); return
    eid = ep.get("episode_id")
    episode_set(eid, "notes", f"checkin:{val}")

    if val <= 3:
        await update.message.reply_text(t(lang, "checkin_better"), reply_markup=main_menu(lang))
        episode_set(eid, "status", "resolved")
    else:
        await update.message.reply_text(t(lang, "checkin_worse"), reply_markup=main_menu(lang))

# ---------------------------
# App init
# ---------------------------
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    schedule_from_sheet_on_start(app)

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("privacy", cmd_privacy))
    app.add_handler(CommandHandler("pause", cmd_pause))
    app.add_handler(CommandHandler("resume", cmd_resume))
    app.add_handler(CommandHandler("delete_data", cmd_delete_data))
    app.add_handler(CommandHandler("skip", cmd_skip))
    app.add_handler(CommandHandler("profile", cmd_profile))
    app.add_handler(CommandHandler("settz", cmd_settz))
    app.add_handler(CommandHandler("checkin_on", cmd_checkin_on))
    app.add_handler(CommandHandler("checkin_off", cmd_checkin_off))

    app.add_handler(CallbackQueryHandler(on_callback))

    app.add_handler(MessageHandler(filters.Regex(r"^(?:[0-9]|10)$"), on_number_reply))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.run_polling()

if __name__ == "__main__":
    main()
