# -*- coding: utf-8 -*-
import os
import json
import logging
import uuid
from datetime import datetime, timedelta, timezone

from dotenv import load_dotenv
from langdetect import detect, DetectorFactory

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from openai import OpenAI
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ---------------------------
# Boot & Config
# ---------------------------
load_dotenv()
logging.basicConfig(level=logging.INFO)
DetectorFactory.seed = 0  # –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä—É–µ–º langdetect

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Feedback")

# OpenAI –∫–ª–∏–µ–Ω—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –∫–∞–∫ —Ñ–æ–ª–±—ç–∫)
oai = None
if OPENAI_API_KEY:
    try:
        oai = OpenAI(api_key=OPENAI_API_KEY)
    except Exception as e:
        logging.error(f"OpenAI init error: {e}")
        oai = None

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
if not creds_json:
    raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
creds_dict = json.loads(creds_json)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gclient = gspread.authorize(credentials)

# –°–æ–∑–¥–∞—ë–º/–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–Ω–∏–≥—É –∏ –ª–∏—Å—Ç—ã
ss = gclient.open(SHEET_NAME)

def _get_or_create_ws(title: str, headers: list[str]):
    try:
        ws = ss.worksheet(title)
    except gspread.WorksheetNotFound:
        ws = ss.add_worksheet(title=title, rows=1000, cols=20)
        ws.append_row(headers)
    # –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π ‚Äî –¥–æ–±–∞–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    vals = ws.get_all_values()
    if not vals:
        ws.append_row(headers)
    return ws

ws_feedback = _get_or_create_ws(
    "Feedback",
    ["timestamp", "user_id", "name", "username", "rating", "comment"],
)

ws_users = _get_or_create_ws(
    "Users",
    ["user_id", "username", "lang", "consent", "tz_offset", "checkin_hour", "paused"],
)

ws_episodes = _get_or_create_ws(
    "Episodes",
    [
        "episode_id",
        "user_id",
        "topic",
        "started_at",
        "baseline_severity",
        "red_flags",
        "plan_accepted",
        "target",
        "reminder_at",
        "next_checkin_at",
        "status",
        "last_update",
        "notes",
    ],
)

# ---------------------------
# In-memory session state
# ---------------------------
# –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (–Ω–µ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å)
sessions: dict[int, dict] = {}  # user_id -> {...}

# ---------------------------
# i18n
# ---------------------------
SUPPORTED = {"ru", "en", "uk"}  # —Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞

def norm_lang(code: str | None) -> str:
    if not code:
        return "en"
    c = code.split("-")[0].lower()
    if c in SUPPORTED:
        return c
    return "en"

T = {
    "en": {
        "welcome": "Hi! I‚Äôm TendAI ‚Äî your health & longevity assistant.\nChoose a topic below or just describe what‚Äôs bothering you.",
        "menu": ["Pain", "Throat/Cold", "Sleep", "Stress", "Digestion", "Energy"],
        "help": "I can help with short checkups, a simple 24‚Äì48h plan, and gentle follow-ups.\nCommands:\n/help, /privacy, /pause, /resume, /delete_data",
        "privacy": "TendAI is not a medical service and can‚Äôt replace a doctor.\nWe store minimal data to support reminders.\nUse /delete_data to erase your info.",
        "paused_on": "Notifications paused. Use /resume to enable.",
        "paused_off": "Notifications resumed.",
        "deleted": "All your data in TendAI was deleted. You can /start again anytime.",
        "ask_consent": "May I send you a follow-up later to check how you feel? (You can change with /pause or /resume.)",
        "yes": "Yes",
        "no": "No",
        "choose_topic": "Choose a topic:",
        "triage_pain_q1": "Where does it hurt?",
        "triage_pain_q1_opts": ["Head", "Throat", "Back", "Belly", "Other"],
        "triage_pain_q2": "What kind of pain?",
        "triage_pain_q2_opts": ["Dull", "Sharp", "Pulsating", "Pressing"],
        "triage_pain_q3": "How long has it lasted?",
        "triage_pain_q3_opts": ["<3h", "3‚Äì24h", ">1 day", ">1 week"],
        "triage_pain_q4": "Rate the pain now (0‚Äì10):",
        "triage_pain_q5": "Any of these now?",
        "triage_pain_q5_opts": ["High fever", "Vomiting", "Weakness or numbness", "Speech/vision problems", "Trauma", "None"],
        "plan_header": "Your 24‚Äì48h plan:",
        "plan_accept": "Will you try this today?",
        "accept_opts": ["‚úÖ Yes", "üîÅ Later", "‚úñÔ∏è No"],
        "remind_when": "When shall I check on you?",
        "remind_opts": ["in 4h", "this evening", "tomorrow morning", "no need"],
        "thanks": "Got it üôå",
        "checkin_ping": "Quick check-in: how is it now (0‚Äì10)?",
        "checkin_better": "Nice! Keep it up üí™",
        "checkin_worse": "Sorry to hear. If you have any red flags or pain ‚â•7/10, consider seeking medical help.",
        "comment_prompt": "Thanks for your rating üôè\nWant to add a comment? Just type it in, or send /skip to skip.",
        "comment_saved": "Comment saved, thank you! üôå",
        "skip_ok": "Skipped.",
        "unknown": "I need a bit more information to help. Where exactly does it hurt? How long has it lasted?",
        "lang_switched": "OK, I‚Äôll reply in English next time.",
    },
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –Ω–∏–∂–µ –∏–ª–∏ –æ–ø–∏—à–∏, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç.",
        "menu": ["–ë–æ–ª—å", "–ì–æ—Ä–ª–æ/–ø—Ä–æ—Å—Ç—É–¥–∞", "–°–æ–Ω", "–°—Ç—Ä–µ—Å—Å", "–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ", "–≠–Ω–µ—Ä–≥–∏—è"],
        "help": "–Ø –ø–æ–º–æ–≥–∞—é –∫–æ—Ä–æ—Ç–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π, –ø–ª–∞–Ω–æ–º –Ω–∞ 24‚Äì48 —á –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–º–∏ —á–µ–∫-–∏–Ω–∞–º–∏.\n–ö–æ–º–∞–Ω–¥—ã:\n/help, /privacy, /pause, /resume, /delete_data",
        "privacy": "TendAI –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞. –ú—ã —Ö—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n–ö–æ–º–∞–Ω–¥–∞ /delete_data —É–¥–∞–ª–∏—Ç –≤—Å—ë.",
        "paused_on": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–∞—É–∑—É. –í–∫–ª—é—á–∏—Ç—å: /resume",
        "paused_off": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.",
        "deleted": "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ TendAI —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ /start.",
        "ask_consent": "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã? (–ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å /pause –∏ /resume.)",
        "yes": "–î–∞",
        "no": "–ù–µ—Ç",
        "choose_topic": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        "triage_pain_q1": "–ì–¥–µ –±–æ–ª–∏—Ç?",
        "triage_pain_q1_opts": ["–ì–æ–ª–æ–≤–∞", "–ì–æ—Ä–ª–æ", "–°–ø–∏–Ω–∞", "–ñ–∏–≤–æ—Ç", "–î—Ä—É–≥–æ–µ"],
        "triage_pain_q2": "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏?",
        "triage_pain_q2_opts": ["–¢—É–ø–∞—è", "–û—Å—Ç—Ä–∞—è", "–ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è", "–î–∞–≤—è—â–∞—è"],
        "triage_pain_q3": "–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è?",
        "triage_pain_q3_opts": ["<3—á", "3‚Äì24—á", ">1 –¥–Ω—è", ">1 –Ω–µ–¥–µ–ª–∏"],
        "triage_pain_q4": "–û—Ü–µ–Ω–∏—Ç–µ –±–æ–ª—å (0‚Äì10):",
        "triage_pain_q5": "–ï—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ?",
        "triage_pain_q5_opts": ["–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–†–≤–æ—Ç–∞", "–°–ª–∞–±–æ—Å—Ç—å/–æ–Ω–µ–º–µ–Ω–∏–µ", "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è", "–¢—Ä–∞–≤–º–∞", "–ù–µ—Ç"],
        "plan_header": "–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á–∞—Å–æ–≤:",
        "plan_accept": "–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
        "accept_opts": ["‚úÖ –î–∞", "üîÅ –ü–æ–∑–∂–µ", "‚úñÔ∏è –ù–µ—Ç"],
        "remind_when": "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "remind_opts": ["—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞", "–≤–µ—á–µ—Ä–æ–º", "–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º", "–Ω–µ –Ω–∞–¥–æ"],
        "thanks": "–ü—Ä–∏–Ω—è—Ç–æ üôå",
        "checkin_ping": "–ö–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ 0‚Äì10?",
        "checkin_better": "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üí™",
        "checkin_worse": "–°–æ—á—É–≤—Å—Ç–≤—É—é. –ï—Å–ª–∏ –µ—Å—Ç—å ¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª –∏–ª–∏ –±–æ–ª—å ‚â•7/10 ‚Äî –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        "comment_prompt": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É üôè\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        "comment_saved": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å–ø–∞—Å–∏–±–æ! üôå",
        "skip_ok": "–ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏.",
        "unknown": "–ù—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π. –ì–¥–µ –±–æ–ª–∏—Ç –∏ —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?",
        "lang_switched": "–û–∫, –¥–∞–ª—å—à–µ –æ—Ç–≤–µ—á–∞—é –ø–æ-—Ä—É—Å—Å–∫–∏.",
    },
    "uk": {
        "welcome": "–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è.\n–û–±–µ—Ä–∏ —Ç–µ–º—É –Ω–∏–∂—á–µ –∞–±–æ –æ–ø–∏—à–∏, —â–æ —Ç—É—Ä–±—É—î.",
        "menu": ["–ë—ñ–ª—å", "–ì–æ—Ä–ª–æ/–∑–∞—Å—Ç—É–¥–∞", "–°–æ–Ω", "–°—Ç—Ä–µ—Å", "–¢—Ä–∞–≤–ª–µ–Ω–Ω—è", "–ï–Ω–µ—Ä–≥—ñ—è"],
        "help": "–î–æ–ø–æ–º–∞–≥–∞—é –∫–æ—Ä–æ—Ç–∫–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é, –ø–ª–∞–Ω–æ–º –Ω–∞ 24‚Äì48 –≥–æ–¥ —Ç–∞ —á–µ–∫–∞–º–∏.\n–ö–æ–º–∞–Ω–¥–∏:\n/help, /privacy, /pause, /resume, /delete_data",
        "privacy": "TendAI –Ω–µ –∑–∞–º—ñ–Ω—é—î –ª—ñ–∫–∞—Ä—è. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ–Ω—ñ–º—É–º –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.\n–ö–æ–º–∞–Ω–¥–∞ /delete_data –≤–∏–¥–∞–ª–∏—Ç—å —É—Å–µ.",
        "paused_on": "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ. –£–≤—ñ–º–∫–Ω—É—Ç–∏: /resume",
        "paused_off": "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω–µ–Ω—ñ.",
        "deleted": "–£—Å—ñ –≤–∞—à—ñ –¥–∞–Ω—ñ –≤ TendAI –≤–∏–¥–∞–ª–µ–Ω–æ. –ú–æ–∂–Ω–∞ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ /start.",
        "ask_consent": "–ú–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ –≤–∏? (–ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ /pause –∞–±–æ /resume.)",
        "yes": "–¢–∞–∫",
        "no": "–ù—ñ",
        "choose_topic": "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:",
        "triage_pain_q1": "–î–µ –±–æ–ª–∏—Ç—å?",
        "triage_pain_q1_opts": ["–ì–æ–ª–æ–≤–∞", "–ì–æ—Ä–ª–æ", "–°–ø–∏–Ω–∞", "–ñ–∏–≤—ñ—Ç", "–Ü–Ω—à–µ"],
        "triage_pain_q2": "–Ø–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª—é?",
        "triage_pain_q2_opts": ["–¢—É–ø–∏–π", "–ì–æ—Å—Ç—Ä–∏–π", "–ü—É–ª—å—Å—É—é—á–∏–π", "–¢–∏—Å–Ω—É—á–∏–π"],
        "triage_pain_q3": "–Ø–∫ –¥–æ–≤–≥–æ —Ç—Ä–∏–≤–∞—î?",
        "triage_pain_q3_opts": ["<3–≥–æ–¥", "3‚Äì24–≥–æ–¥", ">1 –¥–Ω—è", ">1 —Ç–∏–∂–Ω—è"],
        "triage_pain_q4": "–û—Ü—ñ–Ω—ñ—Ç—å –±—ñ–ª—å (0‚Äì10):",
        "triage_pain_q5": "–Ñ —â–æ—Å—å —ñ–∑ —Ü—å–æ–≥–æ?",
        "triage_pain_q5_opts": ["–í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–ë–ª—é–≤–∞–Ω–Ω—è", "–°–ª–∞–±–∫—ñ—Å—Ç—å/–æ–Ω—ñ–º—ñ–Ω–Ω—è", "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–æ–≤–æ—é/–∑–æ—Ä–æ–º", "–¢—Ä–∞–≤–º–∞", "–ù–µ–º–∞—î"],
        "plan_header": "–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥:",
        "plan_accept": "–ì–æ—Ç–æ–≤—ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "accept_opts": ["‚úÖ –¢–∞–∫", "üîÅ –ü—ñ–∑–Ω—ñ—à–µ", "‚úñÔ∏è –ù—ñ"],
        "remind_when": "–ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏ —Ç–∞ —Å–ø–∏—Ç–∞—Ç–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è?",
        "remind_opts": ["—á–µ—Ä–µ–∑ 4 –≥–æ–¥", "—É–≤–µ—á–µ—Ä—ñ", "–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ", "–Ω–µ —Ç—Ä–µ–±–∞"],
        "thanks": "–ü—Ä–∏–π–Ω—è—Ç–æ üôå",
        "checkin_ping": "–ö–æ—Ä–æ—Ç–∫–æ: —è–∫ –∑–∞—Ä–∞–∑ –∑–∞ —à–∫–∞–ª–æ—é 0‚Äì10?",
        "checkin_better": "–ß—É–¥–æ–≤–æ! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ üí™",
        "checkin_worse": "–®–∫–æ–¥–∞. –Ø–∫—â–æ —î ¬´—á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ¬ª –∞–±–æ –±—ñ–ª—å ‚â•7/10 ‚Äî –∫—Ä–∞—â–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.",
        "comment_prompt": "–î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É üôè\n–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å, –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /skip, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.",
        "comment_saved": "–ö–æ–º–µ–Ω—Ç–∞—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –¥—è–∫—É—é! üôå",
        "skip_ok": "–ü—Ä–æ–ø—É—â–µ–Ω–æ.",
        "unknown": "–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π. –î–µ –±–æ–ª–∏—Ç—å —ñ —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î?",
        "lang_switched": "–û–∫, –Ω–∞–¥–∞–ª—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏–º—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.",
    },
}

def t(lang: str, key: str) -> str:
    return T.get(lang, T["en"]).get(key, T["en"].get(key, key))

# ---------------------------
# Sheets helpers
# ---------------------------
def utcnow():
    return datetime.now(timezone.utc)

def iso(dt: datetime | None) -> str:
    if not dt:
        return ""
    return dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def users_get_row_index(user_id: int) -> int | None:
    vals = ws_users.get_all_records()
    for i, row in enumerate(vals, start=2):
        if str(row.get("user_id")) == str(user_id):
            return i
    return None

def users_get(user_id: int) -> dict:
    vals = ws_users.get_all_records()
    for row in vals:
        if str(row.get("user_id")) == str(user_id):
            return row
    return {}

def users_upsert(user_id: int, username: str, lang: str):
    idx = users_get_row_index(user_id)
    if idx:
        ws_users.update(f"A{idx}:G{idx}", [[str(user_id), username or "", lang, "no", "0", "", "no"]])
    else:
        ws_users.append_row([str(user_id), username or "", lang, "no", "0", "", "no"])

def users_set(user_id: int, field: str, value: str):
    idx = users_get_row_index(user_id)
    if not idx:
        return
    headers = ws_users.row_values(1)
    if field in headers:
        col = headers.index(field) + 1
        ws_users.update_cell(idx, col, value)

def episode_create(user_id: int, topic: str, baseline_severity: int, red_flags: str) -> str:
    eid = f"{user_id}-{uuid.uuid4().hex[:8]}"
    now = iso(utcnow())
    ws_episodes.append_row([
        eid, str(user_id), topic, now,
        str(baseline_severity), red_flags, "0", "<=3/10",
        "", "", "open", now, ""
    ])
    return eid

def episode_find_open(user_id: int) -> dict | None:
    vals = ws_episodes.get_all_records()
    for row in vals:
        if str(row.get("user_id")) == str(user_id) and row.get("status") == "open":
            return row
    return None

def episode_set(eid: str, field: str, value: str):
    vals = ws_episodes.get_all_values()
    headers = vals[0]
    if field not in headers:
        return
    col = headers.index(field) + 1
    for i in range(2, len(vals) + 1):
        if ws_episodes.cell(i, 1).value == eid:
            ws_episodes.update_cell(i, col, value)
            ws_episodes.update_cell(i, headers.index("last_update") + 1, iso(utcnow()))
            return

def schedule_from_sheet_on_start(app):
    """–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ–∫-–∏–Ω—ã."""
    vals = ws_episodes.get_all_records()
    now = utcnow()
    for row in vals:
        if row.get("status") != "open":
            continue
        eid = row.get("episode_id")
        uid = int(row.get("user_id"))
        nca = row.get("next_checkin_at") or ""
        if not nca:
            continue
        try:
            # —Ñ–æ—Ä–º–∞—Ç: "YYYY-mm-dd HH:MM:SS+0000"
            dt = datetime.strptime(nca, "%Y-%m-%d %H:%M:%S%z")
        except Exception:
            continue
        delay = (dt - now).total_seconds()
        if delay < 60:
            delay = 60  # –µ—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ‚Äî –Ω–∞–ø–æ–º–Ω–∏–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
        app.job_queue.run_once(job_checkin, when=delay, data={"user_id": uid, "episode_id": eid})

# ---------------------------
# Scenarios (pain + generic)
# ---------------------------
TOPIC_KEYS = {
    "en": {"Pain": "pain", "Throat/Cold": "throat", "Sleep": "sleep", "Stress": "stress", "Digestion": "digestion", "Energy": "energy"},
    "ru": {"–ë–æ–ª—å": "pain", "–ì–æ—Ä–ª–æ/–ø—Ä–æ—Å—Ç—É–¥–∞": "throat", "–°–æ–Ω": "sleep", "–°—Ç—Ä–µ—Å—Å": "stress", "–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ": "digestion", "–≠–Ω–µ—Ä–≥–∏—è": "energy"},
    "uk": {"–ë—ñ–ª—å": "pain", "–ì–æ—Ä–ª–æ/–∑–∞—Å—Ç—É–¥–∞": "throat", "–°–æ–Ω": "sleep", "–°—Ç—Ä–µ—Å": "stress", "–¢—Ä–∞–≤–ª–µ–Ω–Ω—è": "digestion", "–ï–Ω–µ—Ä–≥—ñ—è": "energy"},
}

def main_menu(lang: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([T[lang]["menu"]], resize_keyboard=True)

def numeric_keyboard_0_10(lang: str) -> ReplyKeyboardMarkup:
    row1 = [str(i) for i in range(0, 6)]
    row2 = [str(i) for i in range(6, 11)]
    return ReplyKeyboardMarkup([row1, row2], resize_keyboard=True, one_time_keyboard=True)

def accept_keyboard(lang: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([T[lang]["accept_opts"]], resize_keyboard=True, one_time_keyboard=True)

def remind_keyboard(lang: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([T[lang]["remind_opts"]], resize_keyboard=True, one_time_keyboard=True)

# ---------------------------
# Planning helpers
# ---------------------------
def pain_plan(lang: str, red_flags_selected: list[str]) -> list[str]:
    # –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω –¥–ª—è –±–æ–ª–∏ –±–µ–∑ –∫—Ä–∞—Å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
    if lang == "ru":
        lines = [
            "1) –í–æ–¥–∞ 400‚Äì600 –º–ª, 15‚Äì20 –º–∏–Ω –æ—Ç–¥—ã—Ö–∞ –≤ —Ç–∏—Ö–æ–π –∫–æ–º–Ω–∞—Ç–µ.",
            "2) –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –∏–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ —Å –µ–¥–æ–π.",
            "3) –ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏ —É–º–µ–Ω—å—à–∏—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞ 30‚Äì60 –º–∏–Ω.",
            "–°–ª–µ–¥–∏—Ç—å: –∫ –≤–µ—á–µ—Ä—É –±–æ–ª—å ‚â§3/10.",
            "–ö –≤—Ä–∞—á—É: –≤–Ω–µ–∑–∞–ø–Ω–∞—è ¬´—Å–∞–º–∞—è —Å–∏–ª—å–Ω–∞—è¬ª –±–æ–ª—å, –ø–æ—Å–ª–µ —Ç—Ä–∞–≤–º—ã, —Å —Ä–≤–æ—Ç–æ–π/–Ω–∞—Ä—É—à–µ–Ω–∏–µ–º —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è/–æ–Ω–µ–º–µ–Ω–∏–µ–º ‚Äî —Å—Ä–æ—á–Ω–æ.",
        ]
    elif lang == "uk":
        lines = [
            "1) –í–æ–¥–∞ 400‚Äì600 –º–ª, 15‚Äì20 —Ö–≤ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É –≤ —Ç–∏—Ö—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ.",
            "2) –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω—å ‚Äî —ñ–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –∑ —ó–∂–µ—é.",
            "3) –ü—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É —Ç–∞ –∑–º–µ–Ω—à–∏—Ç–∏ –µ–∫—Ä–∞–Ω –Ω–∞ 30‚Äì60 —Ö–≤.",
            "–°—Ç–µ–∂–∏—Ç–∏: –¥–æ –≤–µ—á–æ—Ä–∞ –±—ñ–ª—å ‚â§3/10.",
            "–î–æ –ª—ñ–∫–∞—Ä—è: —Ä–∞–ø—Ç–æ–≤–∏–π ¬´–Ω–∞–π—Å–∏–ª—å–Ω—ñ—à–∏–π¬ª –±—ñ–ª—å, –ø—ñ—Å–ª—è —Ç—Ä–∞–≤–º–∏, –∑ –±–ª—é–≤–∞–Ω–Ω—è–º/–ø–æ—Ä—É—à–µ–Ω–Ω—è–º –º–æ–≤–∏/–∑–æ—Ä—É/–æ–Ω—ñ–º—ñ–Ω–Ω—è–º ‚Äî –Ω–µ–≥–∞–π–Ω–æ.",
        ]
    else:
        lines = [
            "1) Drink 400‚Äì600 ml water and rest 15‚Äì20 minutes in a quiet room.",
            "2) If no contraindications ‚Äî ibuprofen 200‚Äì400 mg once with food.",
            "3) Air the room and reduce screen time 30‚Äì60 minutes.",
            "Monitor: by evening pain ‚â§3/10.",
            "See a doctor: sudden ‚Äúworst ever‚Äù pain, after trauma, with vomiting/speech/vision issues/numbness ‚Äî urgently.",
        ]
    if any(s for s in red_flags_selected if s and s.lower() not in ["none", "–Ω–µ—Ç", "–Ω–µ–º–∞—î"]):
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–ª–∞–≥–∏ ‚Äî –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Å—ã–ª
        if lang == "ru":
            lines = ["‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏. –õ—É—á—à–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –æ—Ü–µ–Ω–∏—Ç—å—Å—è —É –≤—Ä–∞—á–∞ / —Å–∫–æ—Ä–æ–π –ø–æ–º–æ—â–∏."]
        elif lang == "uk":
            lines = ["‚ö†Ô∏è –Ñ —Ç—Ä–∏–≤–æ–∂–Ω—ñ –æ–∑–Ω–∞–∫–∏. –ö—Ä–∞—â–µ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –æ—Ü—ñ–Ω–∏—Ç–∏—Å—è —É –ª—ñ–∫–∞—Ä—è / —à–≤–∏–¥–∫–æ—ó."]
        else:
            lines = ["‚ö†Ô∏è Red flags present. Please consider urgent medical evaluation."]
    return lines

# ---------------------------
# Jobs (check-ins)
# ---------------------------
async def job_checkin(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data or {}
    user_id = data.get("user_id")
    episode_id = data.get("episode_id")
    if not user_id or not episode_id:
        return
    # –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞ –ø–∞—É–∑–µ?
    u = users_get(user_id)
    if (u.get("paused") or "").lower() == "yes":
        return
    lang = u.get("lang") or "en"
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=t(lang, "checkin_ping"),
            reply_markup=numeric_keyboard_0_10(lang),
        )
        # –ø–æ–º–µ—Ç–∏–º next_checkin_at –ø—É—Å—Ç—ã–º ‚Äî –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞
        episode_set(episode_id, "next_checkin_at", "")
    except Exception as e:
        logging.error(f"job_checkin send error: {e}")

# ---------------------------
# Command Handlers
# ---------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    # —è–∑—ã–∫: –∏–∑ user.language_code –∏–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    lang = norm_lang(getattr(user, "language_code", None))
    users_upsert(user.id, user.username or "", lang)

    await update.message.reply_text(
        t(lang, "welcome"),
        reply_markup=main_menu(lang),
    )

    # —Å–ø—Ä–æ—Å–∏–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ)
    u = users_get(user.id)
    if (u.get("consent") or "").lower() not in {"yes", "no"}:
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton(t(lang, "yes"), callback_data="consent|yes"),
              InlineKeyboardButton(t(lang, "no"), callback_data="consent|no")]]
        )
        await update.message.reply_text(t(lang, "ask_consent"), reply_markup=kb)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or "en")
    await update.message.reply_text(t(lang, "help"))

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or "en")
    await update.message.reply_text(t(lang, "privacy"))

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    users_set(uid, "paused", "yes")
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text(t(lang, "paused_on"))

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    users_set(uid, "paused", "no")
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text(t(lang, "paused_off"))

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    # –≤—ã—á–∏—â–∞–µ–º Users
    idx = users_get_row_index(uid)
    if idx:
        ws_users.delete_rows(idx)
    # –≤—ã—á–∏—â–∞–µ–º Episodes
    vals = ws_episodes.get_all_values()
    to_delete = []
    for i in range(2, len(vals) + 1):
        if ws_episodes.cell(i, 2).value == str(uid):
            to_delete.append(i)
    for j, row_i in enumerate(to_delete):
        ws_episodes.delete_rows(row_i - j)
    # —Ñ–∏–¥–±–µ–∫ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º (–∞–Ω–æ–Ω–∏–º–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞)
    lang = norm_lang(getattr(update.effective_user, "language_code", None))
    await update.message.reply_text(t(lang, "deleted"), reply_markup=ReplyKeyboardRemove())

# ---------------------------
# Callback (consent, feedback thumbs)
# ---------------------------
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = (q.data or "")
    uid = q.from_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")

    if data.startswith("consent|"):
        choice = data.split("|", 1)[1]
        users_set(uid, "consent", "yes" if choice == "yes" else "no")
        await q.edit_message_reply_markup(reply_markup=None)
        await q.message.reply_text(t(lang, "thanks"))

    elif data in {"feedback_yes", "feedback_no"}:
        # –∑–∞–ø–∏—Å–∞—Ç—å –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫ –∏ —Å–ø—Ä–æ—Å–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        rating = "1" if data.endswith("yes") else "0"
        ws_feedback.append_row([iso(utcnow()), str(uid), data, q.from_user.username or "", rating, ""])
        sessions.setdefault(uid, {})["awaiting_comment"] = True
        await q.edit_message_reply_markup(reply_markup=None)
        await q.message.reply_text(t(lang, "comment_prompt"))

# ---------------------------
# Scenario Flow
# ---------------------------
def detect_or_choose_topic(lang: str, text: str) -> str | None:
    text_l = text.lower()
    # —Ç—Ä–∏–≥–≥–µ—Ä—ã
    if any(w in text_l for w in ["–±–æ–ª–∏—Ç", "–±–æ–ª—å", "hurt", "pain", "–±–æ–ª—é"]):
        return "pain"
    if any(w in text_l for w in ["–≥–æ—Ä–ª–æ", "throat", "–ø—Ä–æ—Å—Ç—É–¥", "cold"]):
        return "throat"
    if any(w in text_l for w in ["—Å–æ–Ω", "sleep"]):
        return "sleep"
    if any(w in text_l for w in ["—Å—Ç—Ä–µ—Å—Å", "stress"]):
        return "stress"
    if any(w in text_l for w in ["–∂–∏–≤–æ—Ç", "–∂–µ–ª—É–¥", "–∂–∏–≤—ñ—Ç", "—Å—Ç—É–ª", "–ø–æ–Ω–æ—Å", "–¥–∏–∞—Ä", "digest"]):
        return "digestion"
    if any(w in text_l for w in ["—ç–Ω–µ—Ä–≥", "–µ–Ω–µ—Ä–≥", "energy", "fatigue", "—Å–ª–∞–±–æ—Å—Ç—å"]):
        return "energy"
    # –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    for label, key in TOPIC_KEYS.get(lang, TOPIC_KEYS["en"]).items():
        if text.strip() == label:
            return key
    return None

async def start_pain_triage(update: Update, lang: str, uid: int):
    sessions[uid] = {"topic": "pain", "step": 1, "answers": {}}
    await update.message.reply_text(
        t(lang, "triage_pain_q1"),
        reply_markup=ReplyKeyboardMarkup([T[lang]["triage_pain_q1_opts"]], resize_keyboard=True, one_time_keyboard=True),
    )

async def continue_pain_triage(update: Update, context: ContextTypes.DEFAULT_TYPE, lang: str, uid: int, text: str):
    s = sessions.get(uid, {})
    step = s.get("step", 1)

    if step == 1:
        s["answers"]["loc"] = text
        s["step"] = 2
        await update.message.reply_text(
            t(lang, "triage_pain_q2"),
            reply_markup=ReplyKeyboardMarkup([T[lang]["triage_pain_q2_opts"]], resize_keyboard=True, one_time_keyboard=True),
        )
        return

    if step == 2:
        s["answers"]["kind"] = text
        s["step"] = 3
        await update.message.reply_text(
            t(lang, "triage_pain_q3"),
            reply_markup=ReplyKeyboardMarkup([T[lang]["triage_pain_q3_opts"]], resize_keyboard=True, one_time_keyboard=True),
        )
        return

    if step == 3:
        s["answers"]["duration"] = text
        s["step"] = 4
        await update.message.reply_text(
            t(lang, "triage_pain_q4"),
            reply_markup=numeric_keyboard_0_10(lang),
        )
        return

    if step == 4:
        try:
            sev = int(text)
        except Exception:
            await update.message.reply_text(t(lang, "triage_pain_q4"), reply_markup=numeric_keyboard_0_10(lang))
            return
        s["answers"]["severity"] = sev
        s["step"] = 5
        await update.message.reply_text(
            t(lang, "triage_pain_q5"),
            reply_markup=ReplyKeyboardMarkup([T[lang]["triage_pain_q5_opts"]], resize_keyboard=True, one_time_keyboard=True),
        )
        return

    if step == 5:
        red = text
        s["answers"]["red"] = red

        # —Å–æ–∑–¥–∞—ë–º —ç–ø–∏–∑–æ–¥, –≤—ã–¥–∞—ë–º –ø–ª–∞–Ω
        sev = int(s["answers"].get("severity", 5))
        eid = episode_create(uid, "pain", sev, red)
        s["episode_id"] = eid

        plan_lines = pain_plan(lang, [red])
        await update.message.reply_text(f"{t(lang,'plan_header')}\n" + "\n".join(plan_lines))
        await update.message.reply_text(t(lang, "plan_accept"), reply_markup=accept_keyboard(lang))
        s["step"] = 6
        return

    if step == 6:
        acc = text.strip()
        accepted = "1" if acc.startswith("‚úÖ") else "0"
        episode_set(s["episode_id"], "plan_accepted", accepted)
        await update.message.reply_text(t(lang, "remind_when"), reply_markup=remind_keyboard(lang))
        s["step"] = 7
        return

    if step == 7:
        choice = text.strip().lower()
        delay = None
        if choice in {"in 4h", "—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞", "—á–µ—Ä–µ–∑ 4 –≥–æ–¥"}:
            delay = timedelta(hours=4)
        elif choice in {"this evening", "–≤–µ—á–µ—Ä–æ–º", "—É–≤–µ—á–µ—Ä—ñ"}:
            delay = timedelta(hours=6)
        elif choice in {"tomorrow morning", "–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º", "–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ"}:
            delay = timedelta(hours=16)
        elif choice in {"no need", "–Ω–µ –Ω–∞–¥–æ", "–Ω–µ —Ç—Ä–µ–±–∞"}:
            delay = None

        if delay:
            next_time = utcnow() + delay
            episode_set(s["episode_id"], "next_checkin_at", iso(next_time))
            context.job_queue.run_once(
                job_checkin, when=delay.total_seconds(),
                data={"user_id": uid, "episode_id": s["episode_id"]}
            )
        await update.message.reply_text(t(lang, "thanks"), reply_markup=main_menu(lang))
        # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        sessions.pop(uid, None)
        return

# ---------------------------
# Main text handler
# ---------------------------
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    text = (update.message.text or "").strip()

    # —è–∑—ã–∫: –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—ã—Ç–∞–µ–º—Å—è –¥–µ—Ç–µ–∫—Ç–∏—Ç—å
    urec = users_get(uid)
    if not urec:
        # –Ω–∞ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –∏–Ω–ø—É—Ç
        try:
            lang = norm_lang(detect(text))
        except Exception:
            lang = norm_lang(getattr(user, "language_code", None))
        users_upsert(uid, user.username or "", lang)
    else:
        lang = norm_lang(urec.get("lang") or getattr(user, "language_code", None))

    # 1) –ï—Å–ª–∏ –∂–¥—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∏–¥–±–µ–∫—É
    if sessions.get(uid, {}).get("awaiting_comment"):
        ws_feedback.append_row([iso(utcnow()), str(uid), "comment", user.username or "", "", text])
        sessions[uid]["awaiting_comment"] = False
        await update.message.reply_text(t(lang, "comment_saved"))
        return

    # 2) –ï—Å–ª–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ pain
    if sessions.get(uid, {}).get("topic") == "pain":
        await continue_pain_triage(update, context, lang, uid, text)
        return

    # 3) –î–µ—Ç–µ–∫—Ç —Ç–µ–º—ã –∏ –∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è
    topic = detect_or_choose_topic(lang, text)
    if topic == "pain":
        await start_pain_triage(update, lang, uid)
        return
    elif topic in {"throat", "sleep", "stress", "digestion", "energy"}:
        # –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º pain-—Ç—Ä–∏–∞–∂ –∫–∞–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π (–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ —Ä–∞–∑–≤–µ—Ç–≤–∏—Ç—å)
        await start_pain_triage(update, lang, uid)
        return

    # 4) –§–æ–ª–±—ç–∫: –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å LLM (–µ—Å–ª–∏ –∫–ª—é—á –∑–∞–¥–∞–Ω), –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    if oai:
        try:
            prompt = (
                "You are TendAI, a warm, concise health & longevity assistant. "
                "Ask 1‚Äì2 clarifying questions, list 2‚Äì3 possible causes, "
                "1‚Äì3 simple at-home steps, and when to seek care. "
                "Reply in the user's language. Keep it short."
            )
            resp = oai.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": text},
                ],
                temperature=0.3,
                max_tokens=300,
            )
            answer = resp.choices[0].message.content.strip()
            await update.message.reply_text(answer, reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üëç", callback_data="feedback_yes"),
                  InlineKeyboardButton("üëé", callback_data="feedback_no")]]
            ))
            return
        except Exception as e:
            logging.error(f"OpenAI error: {e}")

    # –±–µ–∑ LLM ‚Äî –¥–µ—Ñ–æ–ª—Ç
    await update.message.reply_text(t(lang, "unknown"), reply_markup=main_menu(lang))

# ---------------------------
# Check-in reply (numbers)
# ---------------------------
async def on_number_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ 0‚Äì10 ‚Äî —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —á–µ–∫-–∏–Ω."""
    user = update.effective_user
    uid = user.id
    text = update.message.text.strip()
    try:
        val = int(text)
        if not (0 <= val <= 10):
            return
    except Exception:
        return

    lang = norm_lang(users_get(uid).get("lang") or getattr(user, "language_code", None))
    ep = episode_find_open(uid)
    if not ep:
        await update.message.reply_text(t(lang, "thanks"))
        return
    eid = ep.get("episode_id")
    # —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É
    episode_set(eid, "notes", f"checkin:{val}")

    if val <= 3:
        await update.message.reply_text(t(lang, "checkin_better"), reply_markup=main_menu(lang))
        # –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —ç–ø–∏–∑–æ–¥
        episode_set(eid, "status", "resolved")
    else:
        await update.message.reply_text(t(lang, "checkin_worse"), reply_markup=main_menu(lang))

# ---------------------------
# Skip comment
# ---------------------------
async def cmd_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if sessions.get(uid, {}).get("awaiting_comment"):
        sessions[uid]["awaiting_comment"] = False
        lang = norm_lang(users_get(uid).get("lang") or "en")
        await update.message.reply_text(t(lang, "skip_ok"))
    else:
        pass

# ---------------------------
# App init
# ---------------------------
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ–∫-–∏–Ω—ã
    schedule_from_sheet_on_start(app)

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("privacy", cmd_privacy))
    app.add_handler(CommandHandler("pause", cmd_pause))
    app.add_handler(CommandHandler("resume", cmd_resume))
    app.add_handler(CommandHandler("delete_data", cmd_delete_data))
    app.add_handler(CommandHandler("skip", cmd_skip))

    app.add_handler(CallbackQueryHandler(on_callback))

    # —Å–Ω–∞—á–∞–ª–∞ –ª–æ–≤–∏–º "—á–∏—Å–ª–∞" –∫–∞–∫ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–µ–∫-–∏–Ω
    app.add_handler(MessageHandler(filters.Regex(r"^(?:[0-9]|10)$"), on_number_reply))
    # –∑–∞—Ç–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.run_polling()

if __name__ == "__main__":
    main()
