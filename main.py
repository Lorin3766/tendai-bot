import os
import json
import logging
from dotenv import load_dotenv
from langdetect import detect, LangDetectException
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CommandHandler,
    ContextTypes, filters, CallbackQueryHandler
)
from openai import OpenAI
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")

if not TELEGRAM_TOKEN or not OPENAI_API_KEY or not GOOGLE_CREDENTIALS_JSON:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_TOKEN, OPENAI_API_KEY –∏–ª–∏ GOOGLE_CREDENTIALS_JSON –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Sheets
try:
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
    credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client_sheet = gspread.authorize(credentials)
    sheet = client_sheet.open("TendAI Feedback").worksheet("Feedback")
except Exception as e:
    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets: {e}")
    sheet = None

# –ü–∞–º—è—Ç—å –∏ —Å—á—ë—Ç—á–∏–∫–∏
user_memory = {}
message_counter = {}

quick_mode_symptoms = {
    "–≥–æ–ª–æ–≤–∞": "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Å—Ç—Ä–µ—Å—Å, –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ, —É—Å—Ç–∞–ª–æ—Å—Ç—å.\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å: –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ, –≤—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–º–∏—Ç–µ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ.\n–ö –≤—Ä–∞—á—É: –µ—Å–ª–∏ –±–æ–ª—å —Ä–µ–∑–∫–∞—è –∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è.",
    "—Å–ø–∏–Ω–∞": "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –º—ã—à—Ü, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Å–∞–Ω–∫–∞.\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å: –ª—ë–≥–∫–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞, –∏–∑–±–µ–≥–∞–π—Ç–µ –Ω–∞–≥—Ä—É–∑–æ–∫, —Ç—ë–ø–ª—ã–π –∫–æ–º–ø—Ä–µ—Å—Å.\n–ö –≤—Ä–∞—á—É: –ø—Ä–∏ –æ–Ω–µ–º–µ–Ω–∏–∏ –∏–ª–∏ —Å–∏–ª—å–Ω–æ–π –±–æ–ª–∏.",
    "–∂–∏–≤–æ—Ç": "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ, —Å–ø–∞–∑–º, –∏–Ω—Ñ–µ–∫—Ü–∏—è.\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å: –æ—Ç–¥—ã—Ö, —Ç—ë–ø–ª–∞—è –≤–æ–¥–∞, –ª—ë–≥–∫–∞—è –¥–∏–µ—Ç–∞.\n–ö –≤—Ä–∞—á—É: –ø—Ä–∏ —Ä–µ–∑–∫–æ–π –±–æ–ª–∏, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ, —Ä–≤–æ—Ç–µ."
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
def add_feedback(user_id, feedback_text):
    if sheet:
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            sheet.append_row([timestamp, str(user_id), feedback_text])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")

# –ö–Ω–æ–ø–∫–∏ —Ñ–∏–¥–±–µ–∫–∞
def feedback_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üëç –î–∞", callback_data="feedback_yes"),
         InlineKeyboardButton("üëé –ù–µ—Ç", callback_data="feedback_no")]
    ])

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è TendAI ü§ó –ß—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏ –≤–æ–ª–Ω—É–µ—Ç? –Ø –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–¥–±–µ–∫–∞
async def feedback_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    feedback = query.data
    add_feedback(user_id, feedback)
    await query.edit_message_reply_markup(reply_markup=None)
    await query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ üôè")

# –ì–ª–∞–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    user_id = update.effective_user.id
    user_message = update.message.text.strip()
    message_counter[user_id] = message_counter.get(user_id, 0) + 1

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
    try:
        lang = detect(user_message)
    except LangDetectException:
        lang = "unknown"

    # –†–µ–∂–∏–º #60—Å–µ–∫
    if "#60—Å–µ–∫" in user_message.lower():
        for symptom, advice in quick_mode_symptoms.items():
            if symptom in user_message.lower():
                await update.message.reply_text(advice, reply_markup=feedback_buttons())
                return

    # –ü—Ä–∏–º–µ—Ä —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if "–±–æ–ª–∏—Ç" in user_message.lower():
        user_memory[user_id] = {"symptom": user_message}
        await update.message.reply_text("–ì–¥–µ –∏–º–µ–Ω–Ω–æ –±–æ–ª–∏—Ç? –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
        return

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    system_prompt = "–¢—ã ‚Äî TendAI, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ],
            temperature=0.7,
            max_tokens=400
        )
        bot_reply = (user_memory.get(user_id, {}).get("symptom", "") + "\n" if user_id in user_memory else "") \
                    + response.choices[0].message["content"].strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        bot_reply = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

    await update.message.reply_text(bot_reply, reply_markup=feedback_buttons())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(feedback_callback))
    app.run_polling()
