# -*- coding: utf-8 -*-
# ==========================================
# TendAI ‚Äî FULL CODE (Part 1 / 2)
# Base, i18n, storage (Sheets with 429-fix), intake, rules, care
# –ß–∞—Å—Ç—å 2 –¥–æ–±–∞–≤–∏—Ç: –∫–æ–ª–ª–±–µ–∫–∏, –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç —è–∑—ã–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏,
# —Ç—Ä–∏–∞–∂-—Ñ–ª–æ—É, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –¥–∂–æ–±—ã, build_app() –∏ main().
# ==========================================

import os, re, json, uuid, logging, random, time
from datetime import datetime, timedelta, timezone, date, time as dtime
from typing import List, Dict, Optional, Set, Tuple
from difflib import SequenceMatcher

from dotenv import load_dotenv
from langdetect import detect, DetectorFactory

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ---------- OpenAI (optional) ----------
from openai import OpenAI

# ---------- Google Sheets (robust + memory fallback + 429 cooldown) ----------
import gspread
import gspread.utils as gsu
from gspread.exceptions import SpreadsheetNotFound, WorksheetNotFound
from oauth2client.service_account import ServiceAccountCredentials


# ---------------- Boot & Config ----------------
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
DetectorFactory.seed = 0

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")

SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Sheets")
SHEET_ID = os.getenv("SHEET_ID", "")
ALLOW_CREATE_SHEET = os.getenv("ALLOW_CREATE_SHEET", "0") == "1"

DEFAULT_CHECKIN_LOCAL = "08:30"
DEFAULT_EVENING_LOCAL  = "20:00"
DEFAULT_MIDDAY_LOCAL   = "13:00"
DEFAULT_WEEKLY_LOCAL   = "10:00"  # Sunday
DEFAULT_QUIET_HOURS    = "22:00-08:00"

AUTO_MAX_PER_DAY = 2  # –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π/–¥–µ–Ω—å –º–∞–∫—Å–∏–º—É–º

# OpenAI client (optional)
oai: Optional[OpenAI] = None
try:
    if OPENAI_API_KEY:
        os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
        oai = OpenAI()
except Exception as e:
    logging.error(f"OpenAI init error: {e}")
    oai = None


# ---------------- i18n & text ----------------
SUPPORTED = {"ru", "en", "uk", "es"}

def norm_lang(code: Optional[str]) -> str:
    if not code: return "en"
    c = code.split("-")[0].lower()
    return c if c in SUPPORTED else "en"

T: Dict[str, Dict[str, str]] = {
    "en": {
        "welcome": "Hi! I‚Äôm TendAI ‚Äî a caring health & longevity assistant.\nShort, useful, friendly. Let‚Äôs do a 40s intake to personalize.",
        "help": "Short checkups, 24‚Äì48h plans, reminders, daily check-ins.\nCommands: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /evening_on 20:00 /evening_off /settz +2 /health60 /mood /energy /hydrate /skintip /cycle /youth /ru /uk /en /es",
        "privacy": "I‚Äôm not a medical service. Minimal data for reminders only. Use /delete_data to erase.",
        "quick_title": "Quick actions",
        "quick_h60": "‚ö° Health in 60s",
        "quick_er": "üöë Emergency info",
        "quick_lab": "üß™ Lab",
        "quick_rem": "‚è∞ Reminder",
        "profile_intro": "Quick intake (~40s). Use buttons or type.",
        "write": "‚úçÔ∏è Write", "skip": "‚è≠Ô∏è Skip",
        "start_where": "Where do you want to start? (symptom/sleep/nutrition/labs/habits/longevity)",
        "saved_profile": "Saved: ",
        "daily_gm": "Good morning! üåû How do you feel today?",
        "gm_excellent": "üëç Excellent", "gm_ok": "üôÇ Okay", "gm_tired": "üòê Tired", "gm_pain": "ü§ï In pain", "gm_skip": "‚è≠Ô∏è Skip today",
        "mood_note": "‚úçÔ∏è Comment", "mood_thanks": "Thanks! Have a smooth day üëã",
        "h60_btn": "Health in 60 seconds",
        "h60_intro": "Briefly write what‚Äôs bothering you (e.g., ‚Äúheadache‚Äù, ‚Äúfatigue‚Äù). I‚Äôll give 3 key tips in 60s.",
        "h60_t1": "Possible causes", "h60_t2": "Do now (next 24‚Äì48h)", "h60_t3": "When to see a doctor", "h60_serious":"Serious to rule out",
        "ask_fb":"Was this helpful?","fb_good":"üëç Like","fb_bad":"üëé Dislike","fb_free":"üìù Feedback","fb_write":"Write a short feedback:","fb_thanks":"Thanks for your feedback! ‚úÖ",
        "youth_pack":"Youth Pack","gm_energy":"‚ö° Energy","gm_energy_q":"Your energy (1‚Äì5)?","gm_energy_done":"Logged energy ‚Äî thanks!","gm_evening_btn":"‚è∞ Remind this evening",
        "hydrate_btn":"üíß Hydration","hydrate_nudge":"üíß Time for a glass of water","skintip_btn":"üß¥ Skin/Body tip","skintip_sent":"Tip sent.","daily_tip_prefix":"üçé Daily tip:",
        "challenge_btn":"üéØ 7-day hydration challenge","challenge_started":"Challenge started! I‚Äôll track your daily check-ins.","challenge_progress":"Challenge progress: {d}/{len} days.",
        "cycle_btn":"ü©∏ Cycle","cycle_consent":"Track your cycle for gentle timing tips?","cycle_ask_last":"Enter last period date (YYYY-MM-DD):","cycle_ask_len":"Average cycle length (e.g., 28):","cycle_saved":"Cycle tracking saved.",
        "quiet_saved":"Quiet hours saved: {qh}", "set_quiet_btn":"üåô Quiet hours", "ask_quiet":"Type quiet hours as HH:MM-HH:MM (local), e.g. 22:00-08:00",
        "evening_intro":"Evening check-in:","evening_tip_btn":"ü™Ñ Tip of the day","evening_set":"Evening check-in set to {t} (local).","evening_off":"Evening check-in disabled.",
        "ask_consent":"May I send a follow-up later to check how you feel?","yes":"Yes","no":"No",
        "unknown":"I need a bit more info: where exactly and how long?","thanks":"Got it üôå","back":"‚óÄ Back","exit":"Exit",
        "paused_on":"Notifications paused. Use /resume to enable.","paused_off":"Notifications resumed.","deleted":"All your data was deleted. Use /start to begin again.",
        "life_today":"Today is your {n}-th day of life üéâ. Target ‚Äî 36,500 (100y).","life_percent":"You‚Äôve already passed {p}% toward 100 years.","life_estimate":"(estimated by age, set birth_date for accuracy)",
        "px":"Considering your profile: {sex}, {age}y; goal ‚Äî {goal}.",
        "act_rem_4h":"‚è∞ Remind in 4h","act_rem_eve":"‚è∞ This evening","act_rem_morn":"‚è∞ Tomorrow morning","act_save_episode":"üíæ Save episode","act_ex_neck":"üßò 5-min neck routine","act_er":"üöë Emergency info",
    },
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–ö–æ—Ä–æ—Ç–∫–æ, –ø–æ–ª–µ–∑–Ω–æ –∏ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏. –î–∞–≤–∞–π—Ç–µ –º–∏–Ω–∏-–æ–ø—Ä–æ—Å (~40—Å) –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.",
        "help": "–ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã.\n–ö–æ–º–∞–Ω–¥—ã: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /evening_on 20:00 /evening_off /settz +3 /health60 /mood /energy /hydrate /skintip /cycle /youth /ru /uk /en /es",
        "privacy": "–Ø –Ω–µ –∑–∞–º–µ–Ω—è—é –≤—Ä–∞—á–∞. –î–∞–Ω–Ω—ã–µ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. /delete_data ‚Äî —É–¥–∞–ª–∏—Ç—å.",
        "quick_title":"–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è","quick_h60":"‚ö° –ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫","quick_er":"üöë –°—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é","quick_lab":"üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è","quick_rem":"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
        "profile_intro":"–ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å (~40—Å). –ú–æ–∂–Ω–æ –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º.","write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å","skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "start_where":"–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/–ø–∏—Ç–∞–Ω–∏–µ/–∞–Ω–∞–ª–∏–∑—ã/–ø—Ä–∏–≤—ã—á–∫–∏/–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ)","saved_profile":"–°–æ—Ö—Ä–∞–Ω–∏–ª: ",
        "daily_gm":"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üåû –ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?","gm_excellent":"üëç –û—Ç–ª–∏—á–Ω–æ","gm_ok":"üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ","gm_tired":"üòê –£—Å—Ç–∞–ª","gm_pain":"ü§ï –ë–æ–ª–∏—Ç","gm_skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "mood_note":"‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π","mood_thanks":"–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üëã",
        "h60_btn":"–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥","h60_intro":"–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞¬ª, ¬´—É—Å—Ç–∞–ª–æ—Å—Ç—å¬ª). –î–∞–º 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–≤–µ—Ç–∞ –∑–∞ 60 —Å–µ–∫.",
        "h60_t1":"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã","h60_t2":"–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å (24‚Äì48 —á)","h60_t3":"–ö–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É","h60_serious":"–ß—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ–µ –∏—Å–∫–ª—é—á–∏—Ç—å",
        "ask_fb":"–≠—Ç–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ?","fb_good":"üëç –ù—Ä–∞–≤–∏—Ç—Å—è","fb_bad":"üëé –ù–µ –ø–æ–ª–µ–∑–Ω–æ","fb_free":"üìù –û—Ç–∑—ã–≤","fb_write":"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤:","fb_thanks":"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! ‚úÖ",
        "youth_pack":"–ú–æ–ª–æ–¥—ë–∂–Ω—ã–π –ø–∞–∫–µ—Ç","gm_energy":"‚ö° –≠–Ω–µ—Ä–≥–∏—è","gm_energy_q":"–ö–∞–∫ —ç–Ω–µ—Ä–≥–∏—è (1‚Äì5)?","gm_energy_done":"–ó–∞–ø–∏—Å–∞–ª —ç–Ω–µ—Ä–≥–∏—é ‚Äî —Å–ø–∞—Å–∏–±–æ!","gm_evening_btn":"‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –≤–µ—á–µ—Ä–æ–º",
        "hydrate_btn":"üíß –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è","hydrate_nudge":"üíß –í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã","skintip_btn":"üß¥ –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–æ–∂–∏/—Ç–µ–ª–∞","skintip_sent":"–°–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.","daily_tip_prefix":"üçé –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–Ω—è:",
        "challenge_btn":"üéØ –ß–µ–ª–ª–µ–Ω–¥–∂ 7 –¥–Ω–µ–π (–≤–æ–¥–∞)","challenge_started":"–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞—Ç!","challenge_progress":"–ü—Ä–æ–≥—Ä–µ—Å—Å: {d}/{len} –¥–Ω–µ–π.",
        "cycle_btn":"ü©∏ –¶–∏–∫–ª","cycle_consent":"–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–∏–∫–ª –∏ –¥–∞–≤–∞—Ç—å –º—è–≥–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏?","cycle_ask_last":"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö (–ì–ì–ì–ì-–ú–ú-–î–î):","cycle_ask_len":"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28):","cycle_saved":"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
        "quiet_saved":"–¢–∏—Ö–∏–µ —á–∞—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {qh}","set_quiet_btn":"üåô –¢–∏—Ö–∏–µ —á–∞—Å—ã","ask_quiet":"–í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú (–ª–æ–∫–∞–ª—å–Ω–æ), –Ω–∞–ø—Ä. 22:00-08:00",
        "evening_intro":"–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω:","evening_tip_btn":"ü™Ñ –°–æ–≤–µ—Ç –¥–Ω—è","evening_set":"–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω –Ω–∞ {t} (–ª–æ–∫–∞–ª—å–Ω–æ).","evening_off":"–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω.",
        "ask_consent":"–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã?","yes":"–î–∞","no":"–ù–µ—Ç",
        "unknown":"–ù—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: –≥–¥–µ –∏–º–µ–Ω–Ω–æ –∏ –∫–∞–∫ –¥–æ–ª–≥–æ?","thanks":"–ü—Ä–∏–Ω—è—Ç–æ üôå","back":"‚óÄ –ù–∞–∑–∞–¥","exit":"–í—ã–π—Ç–∏",
        "paused_on":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–∞—É–∑—É. /resume ‚Äî –≤–∫–ª—é—á–∏—Ç—å.","paused_off":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.","deleted":"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        "life_today":"–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π {n}-–π –¥–µ–Ω—å –∂–∏–∑–Ω–∏ üéâ. –¶–µ–ª—å ‚Äî 36 500 (100 –ª–µ—Ç).","life_percent":"–¢—ã –ø—Ä–æ—à—ë–ª —É–∂–µ {p}% –ø—É—Ç–∏ –∫ 100 –≥–æ–¥–∞–º.","life_estimate":"(–æ—Ü–µ–Ω–æ—á–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É ‚Äî —É–∫–∞–∂–∏ birth_date –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)",
        "px":"–° —É—á—ë—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è: {sex}, {age} –ª–µ—Ç; —Ü–µ–ª—å ‚Äî {goal}.",
        "act_rem_4h":"‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 4 —á","act_rem_eve":"‚è∞ –°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º","act_rem_morn":"‚è∞ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º","act_save_episode":"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–ø–∏–∑–æ–¥","act_ex_neck":"üßò 5-–º–∏–Ω —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —à–µ–∏","act_er":"üöë –ö–æ–≥–¥–∞ —Å—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é",
    },
    "uk": {
        "welcome":"–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî —Ç—É—Ä–±–æ—Ç–ª–∏–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤‚Äô—è.\n–ó—Ä–æ–±—ñ–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ (~40—Å) –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó.",
        "help":"–ö–æ—Ä–æ—Ç–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ–¥–µ–Ω–Ω—ñ —á–µ–∫-—ñ–Ω–∏.\n–ö–æ–º–∞–Ω–¥–∏: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /evening_on 20:00 /evening_off /settz +2 /health60 /mood /energy /hydrate /skintip /cycle /youth /ru /uk /en /es",
        "privacy":"–Ø –Ω–µ –∑–∞–º—ñ–Ω—é—é –ª—ñ–∫–∞—Ä—è. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ª–∏—à–µ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å. /delete_data ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏.",
        "quick_title":"–®–≤–∏–¥–∫—ñ –¥—ñ—ó","quick_h60":"‚ö° –ó–¥–æ—Ä–æ–≤‚Äô—è –∑–∞ 60 —Å","quick_er":"üöë –ù–µ–≤—ñ–¥–∫–ª–∞–¥–Ω–æ","quick_lab":"üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—è","quick_rem":"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è",
        "profile_intro":"–®–≤–∏–¥–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ (~40—Å).","write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏","skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "start_where":"–ó —á–æ–≥–æ –ø–æ—á–Ω–µ–º–æ? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è/–∞–Ω–∞–ª—ñ–∑–∏/–∑–≤–∏—á–∫–∏/–¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è)","saved_profile":"–ó–±–µ—Ä—ñ–≥: ",
        "daily_gm":"–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! üåû –Ø–∫ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è —Å—å–æ–≥–æ–¥–Ω—ñ?","gm_excellent":"üëç –ß—É–¥–æ–≤–æ","gm_ok":"üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ","gm_tired":"üòê –í—Ç–æ–º–∞","gm_pain":"ü§ï –ë–æ–ª–∏—Ç—å","gm_skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "mood_note":"‚úçÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä","mood_thanks":"–î—è–∫—É—é! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üëã",
        "h60_btn":"–ó–¥–æ—Ä–æ–≤‚Äô—è –∑–∞ 60 —Å–µ–∫—É–Ω–¥","h60_intro":"–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à—ñ—Ç—å, —â–æ —Ç—É—Ä–±—É—î. –î–∞–º 3 –ø–æ—Ä–∞–¥–∏ –∑–∞ 60 —Å.",
        "h60_t1":"–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏","h60_t2":"–©–æ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞—Ä–∞–∑ (24‚Äì48 –≥–æ–¥)","h60_t3":"–ö–æ–ª–∏ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –ª—ñ–∫–∞—Ä—è","h60_serious":"–©–æ —Å–µ—Ä–π–æ–∑–Ω–µ –≤–∏–∫–ª—é—á–∏—Ç–∏",
        "ask_fb":"–¶–µ –±—É–ª–æ –∫–æ—Ä–∏—Å–Ω–æ?","fb_good":"üëç –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è","fb_bad":"üëé –ù–µ –∫–æ—Ä–∏—Å–Ω–æ","fb_free":"üìù –í—ñ–¥–≥—É–∫","fb_write":"–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ñ–¥–≥—É–∫:","fb_thanks":"–î—è–∫—É—é! ‚úÖ",
        "youth_pack":"–ú–æ–ª–æ–¥—ñ–∂–Ω–∏–π –ø–∞–∫–µ—Ç","gm_energy":"‚ö° –ï–Ω–µ—Ä–≥—ñ—è","gm_energy_q":"–ï–Ω–µ—Ä–≥—ñ—è (1‚Äì5)?","gm_energy_done":"–ó–∞–Ω–æ—Ç—É–≤–∞–≤ –µ–Ω–µ—Ä–≥—ñ—é ‚Äî –¥—è–∫—É—é!","gm_evening_btn":"‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏ –≤–≤–µ—á–µ—Ä—ñ",
        "hydrate_btn":"üíß –ì—ñ–¥—Ä–∞—Ç–∞—Ü—ñ—è","hydrate_nudge":"üíß –ß–∞—Å –¥–ª—è —Å–∫–ª—è–Ω–∫–∏ –≤–æ–¥–∏","skintip_btn":"üß¥ –ü–æ—Ä–∞–¥–∞ –¥–ª—è —à–∫—ñ—Ä–∏/—Ç—ñ–ª–∞","skintip_sent":"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ.","daily_tip_prefix":"üçé –ü—ñ–¥–∫–∞–∑–∫–∞ –¥–Ω—è:",
        "challenge_btn":"üéØ –ß–µ–ª–µ–Ω–¥–∂ 7 –¥–Ω—ñ–≤ (–≤–æ–¥–∞)","challenge_started":"–ß–µ–ª–µ–Ω–¥–∂ –∑–∞–ø—É—â–µ–Ω–æ!","challenge_progress":"–ü—Ä–æ–≥—Ä–µ—Å: {d}/{len} –¥–Ω—ñ–≤.",
        "cycle_btn":"ü©∏ –¶–∏–∫–ª","cycle_consent":"–í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Ü–∏–∫–ª —ñ –º‚Äô—è–∫—ñ –ø–æ—Ä–∞–¥–∏?","cycle_ask_last":"–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –º–µ–Ω—Å—Ç—Ä—É–∞—Ü—ñ–π (–†–†–†–†-–ú–ú-–î–î):","cycle_ask_len":"–°–µ—Ä–µ–¥–Ω—è –¥–æ–≤–∂–∏–Ω–∞ —Ü–∏–∫–ª—É (–Ω–∞–ø—Ä., 28):","cycle_saved":"–ó–±–µ—Ä–µ–∂–µ–Ω–æ.",
        "quiet_saved":"–¢–∏—Ö—ñ –≥–æ–¥–∏–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {qh}","set_quiet_btn":"üåô –¢–∏—Ö—ñ –≥–æ–¥–∏–Ω–∏","ask_quiet":"–í–≤–µ–¥—ñ—Ç—å –ì–ì:–•–•-–ì–ì:–•–• (–ª–æ–∫–∞–ª—å–Ω–æ), –Ω–∞–ø—Ä. 22:00-08:00",
        "evening_intro":"–í–µ—á—ñ—Ä–Ω—ñ–π —á–µ–∫-—ñ–Ω:","evening_tip_btn":"ü™Ñ –ü–æ—Ä–∞–¥–∞ –¥–Ω—è","evening_set":"–í–µ—á—ñ—Ä–Ω—ñ–π —á–µ–∫-—ñ–Ω –Ω–∞ {t} (–ª–æ–∫–∞–ª—å–Ω–æ).","evening_off":"–í–∏–º–∫–Ω–µ–Ω–æ.",
        "ask_consent":"–ú–æ–∂—É –Ω–∞–≥–∞–¥–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —è–∫ –≤–∏?","yes":"–¢–∞–∫","no":"–ù—ñ",
        "unknown":"–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: –¥–µ —Å–∞–º–µ —ñ —è–∫ –¥–æ–≤–≥–æ?","thanks":"–ü—Ä–∏–π–Ω—è—Ç–æ üôå","back":"‚óÄ –ù–∞–∑–∞–¥","exit":"–í–∏–π—Ç–∏",
        "paused_on":"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ. /resume ‚Äî —É–≤—ñ–º–∫–Ω—É—Ç–∏.","paused_off":"–ó–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ.","deleted":"–£—Å—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ. /start ‚Äî –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.",
        "life_today":"–°—å–æ–≥–æ–¥–Ω—ñ —Ç–≤—ñ–π {n}-–π –¥–µ–Ω—å –∂–∏—Ç—Ç—è üéâ. –ú–µ—Ç–∞ ‚Äî 36 500 (100 —Ä–æ–∫—ñ–≤).","life_percent":"–¢–∏ –ø—Ä–æ–π—à–æ–≤ {p}% —à–ª—è—Ö—É –¥–æ 100 —Ä–æ–∫—ñ–≤.","life_estimate":"(–æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –∑–∞ –≤—ñ–∫–æ–º ‚Äî –≤–∫–∞–∂–∏ birth_date –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ)",
        "px":"–ó —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ—Ñ—ñ–ª—é: {sex}, {age} —Ä.; –º–µ—Ç–∞ ‚Äî {goal}.",
        "act_rem_4h":"‚è∞ –ß–µ—Ä–µ–∑ 4 –≥–æ–¥","act_rem_eve":"‚è∞ –°—å–æ–≥–æ–¥–Ω—ñ –≤–≤–µ—á–µ—Ä—ñ","act_rem_morn":"‚è∞ –ó–∞–≤—Ç—Ä–∞ –∑—Ä–∞–Ω–∫—É","act_save_episode":"üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –µ–ø—ñ–∑–æ–¥","act_ex_neck":"üßò 5-—Ö–≤ –¥–ª—è —à–∏—ó","act_er":"üöë –ö–æ–ª–∏ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ",
    },
}
T["es"] = T["en"]


# --- Localization of profile values & prefix ---
LOCALIZE_MAP = {
    "sex": {
        "ru": {"male":"–º—É–∂—Å–∫–æ–π","female":"–∂–µ–Ω—Å–∫–∏–π","other":"–¥—Ä—É–≥–æ–π"},
        "uk": {"male":"—á–æ–ª–æ–≤—ñ—á–∞","female":"–∂—ñ–Ω–æ—á–∞","other":"—ñ–Ω—à–∞"},
        "en": {"male":"male","female":"female","other":"other"},
        "es": {"male":"hombre","female":"mujer","other":"otro"},
    },
    "goal": {
        "ru": {"energy":"—ç–Ω–µ—Ä–≥–∏—è","sleep":"—Å–æ–Ω","weight":"–≤–µ—Å","strength":"—Å–∏–ª–∞","longevity":"–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ"},
        "uk": {"energy":"–µ–Ω–µ—Ä–≥—ñ—è","sleep":"—Å–æ–Ω","weight":"–≤–∞–≥–∞","strength":"—Å–∏–ª–∞","longevity":"–¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è"},
        "en": {"energy":"energy","sleep":"sleep","weight":"weight","strength":"strength","longevity":"longevity"},
        "es": {"energy":"energ√≠a","sleep":"sue√±o","weight":"peso","strength":"fuerza","longevity":"longevidad"},
    },
    "activity": {
        "ru": {"low":"–Ω–∏–∑–∫–∞—è","mid":"—Å—Ä–µ–¥–Ω—è—è","high":"–≤—ã—Å–æ–∫–∞—è","sport":"—Å–ø–æ—Ä—Ç"},
        "uk": {"low":"–Ω–∏–∑—å–∫–∞","mid":"—Å–µ—Ä–µ–¥–Ω—è","high":"–≤–∏—Å–æ–∫–∞","sport":"—Å–ø–æ—Ä—Ç"},
        "en": {"low":"low","mid":"medium","high":"high","sport":"sport"},
        "es": {"low":"baja","mid":"media","high":"alta","sport":"deporte"},
    },
    "diet_focus": {
        "ru":{"balanced":"—Å–±–∞–ª–∞–Ω—Å.","lowcarb":"–Ω–∏–∑–∫–æ—É–≥–ª.","plant":"—Ä–∞—Å—Ç–∏—Ç.","irregular":"–Ω–µ—Ä–µ–≥—É–ª."},
        "uk":{"balanced":"–∑–±–∞–ª–∞–Ω—Å.","lowcarb":"–º–∞–ª–æ–≤—É–≥–ª.","plant":"—Ä–æ—Å–ª–∏–Ω–Ω–µ","irregular":"–Ω–µ—Ä–µ–≥—É–ª."},
        "en":{"balanced":"balanced","lowcarb":"low-carb","plant":"plant-based","irregular":"irregular"},
        "es":{"balanced":"equilibrada","lowcarb":"baja carb.","plant":"vegetal","irregular":"irregular"},
    }
}

def localize_value(lang: str, field: str, value: str) -> str:
    v = (value or "").strip().lower()
    m = LOCALIZE_MAP.get(field, {}).get(lang, {})
    return m.get(v, value)

def detect_lang_from_text(text: str, fallback: str) -> str:
    s = (text or "").strip()
    if not s: return fallback
    low = s.lower()
    if re.search(r"[–∞-—è—ë—ñ—ó—î“ë]", low):
        return "uk" if re.search(r"[—ñ—ó—î“ë]", low) else "ru"
    try:
        return norm_lang(detect(s))
    except Exception:
        return fallback

def personalized_prefix(lang: str, profile: dict) -> str:
    sex_raw = (profile.get("sex") or "")
    goal_raw = (profile.get("goal") or "")
    age_raw  = str(profile.get("age") or "")
    m = re.search(r"\d+", age_raw or "")
    age = m.group(0) if m else ""
    sex  = localize_value(lang, "sex", sex_raw)
    goal = localize_value(lang, "goal", goal_raw)
    if sum(bool(x) for x in (sex, age, goal)) >= 2:
        tpl = (T.get(lang) or T["en"]).get("px", T["en"]["px"])
        return tpl.format(sex=sex or "‚Äî", age=age or "‚Äî", goal=goal or "‚Äî")
    return ""


# ---------------- Helpers ----------------
def utcnow() -> datetime: return datetime.now(timezone.utc)
def iso(dt: Optional[datetime]) -> str:
    return "" if not dt else dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def profile_is_incomplete(profile_row: dict) -> bool:
    keys = ["sex","age","goal"]
    return sum(1 for k in keys if str(profile_row.get(k) or "").strip()) < 2

def age_to_band(age: int) -> str:
    if age <= 0: return "unknown"
    if age <= 25: return "18‚Äì25"
    if age <= 35: return "26‚Äì35"
    if age <= 45: return "36‚Äì45"
    if age <= 60: return "46‚Äì60"
    return "60+"

def _ratio(a: str, b: str) -> float:
    return SequenceMatcher(None, (a or "").lower(), (b or "").lower()).ratio()

def _user_lang(uid:int) -> str:
    u = users_get(uid) if 'users_get' in globals() else {}
    return norm_lang((u or {}).get("lang") or "en")


# -------- Sessions (runtime) ----------
sessions: Dict[int, dict] = {}  # ephemeral state per user


# -------- Sheets (with memory fallback + 429-cooldown) --------
SHEETS_ENABLED = True
ss = None
ws_feedback = ws_users = ws_profiles = ws_episodes = ws_reminders = ws_daily = None
ws_rules = ws_challenges = None

GSPREAD_CLIENT: Optional[gspread.client.Client] = None
SPREADSHEET_ID_FOR_INTAKE: str = ""

# –±—ã—Å—Ç—Ä—ã–π –∫—ç—à —Å—Ç—Ä–æ–∫ (id ‚Üí row) –∏ ¬´–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å¬ª –ø—Ä–∏ 429
ROW_CACHE = {"Users": {}, "Profiles": {}, "Episodes": {}, "Reminders": {}}
_SHEETS_COOLDOWN_UNTIL = 0

def _gs_can_read() -> bool:
    return time.time() >= _SHEETS_COOLDOWN_UNTIL

def _gs_tripped(e: Exception):
    """–ï—Å–ª–∏ —Å–ª–æ–≤–∏–ª–∏ 429 ‚Äî —Å—Ç–∞–≤–∏–º ¬´–ø–∞—É–∑—É¬ª –Ω–∞ –º–∏–Ω—É—Ç—É, –∞ –Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º Sheets –Ω–∞—Å–æ–≤—Å–µ–º."""
    global _SHEETS_COOLDOWN_UNTIL
    if "429" in str(e):
        _SHEETS_COOLDOWN_UNTIL = time.time() + 70  # —Å–µ–∫.

def _ws_headers(ws):
    try: return ws.row_values(1) if ws else []
    except Exception as e:
        _gs_tripped(e); return []

def _sheets_init():
    global SHEETS_ENABLED, ss, ws_feedback, ws_users, ws_profiles, ws_episodes, ws_reminders, ws_daily, ws_rules, ws_challenges
    global GSPREAD_CLIENT, SPREADSHEET_ID_FOR_INTAKE
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if not creds_json: raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
        creds = json.loads(creds_json)
        credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds, scope)
        gclient = gspread.authorize(credentials)
        GSPREAD_CLIENT = gclient

        try:
            ss = gclient.open_by_key(SHEET_ID) if SHEET_ID else gclient.open(SHEET_NAME)
        except SpreadsheetNotFound:
            if ALLOW_CREATE_SHEET: ss = gclient.create(SHEET_NAME)
            else: raise

        SPREADSHEET_ID_FOR_INTAKE = getattr(ss, "id", SHEET_ID or "")

        # –ª—ë–≥–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ç–æ–≤ –±–µ–∑ get_all_values()
        def _ensure_ws(title: str, headers: List[str]):
            try:
                ws = ss.worksheet(title)
            except WorksheetNotFound:
                ws = ss.add_worksheet(title=title, rows=4000, cols=max(60, len(headers)))
                ws.update('A1', [headers])
                return ws
            try:
                cur = ws.row_values(1)
            except Exception as e:
                _gs_tripped(e); cur = []
            need = (not cur) or (len(cur) < len(headers)) or any((i >= len(cur)) or (cur[i] != h) for i,h in enumerate(headers))
            if need:
                ws.update('A1', [headers])
            return ws

        ws_feedback   = _ensure_ws("Feedback",   ["timestamp","user_id","name","username","rating","comment"])
        ws_users      = _ensure_ws("Users",      ["user_id","username","lang","consent","tz_offset","checkin_hour","evening_hour","paused","last_seen","last_auto_date","last_auto_count","streak","streak_best","gm_last_date"])
        ws_profiles   = _ensure_ws("Profiles",   [
            "user_id","sex","age","goal","goals","conditions","meds","allergies",
            "sleep","activity","diet","diet_focus","steps_target","habits",
            "cycle_enabled","cycle_last_date","cycle_avg_len","last_cycle_tip_date",
            "quiet_hours","consent_flags","notes","updated_at","city","surgeries","ai_profile","birth_date"
        ])
        ws_episodes   = _ensure_ws("Episodes",   ["episode_id","user_id","topic","started_at","baseline_severity","red_flags","plan_accepted","target","reminder_at","next_checkin_at","status","last_update","notes"])
        ws_daily      = _ensure_ws("DailyCheckins",["timestamp","user_id","mood","energy","comment"])
        ws_rules      = _ensure_ws("Rules",      ["rule_id","topic","segment","trigger","advice_text","citation","last_updated","enabled"])
        ws_challenges = _ensure_ws("Challenges", ["user_id","challenge_id","name","start_date","length_days","days_done","status"])
        ws_reminders  = _ensure_ws("Reminders",  ["id","user_id","text","when_utc","created_at","status"])

        logging.info("Google Sheets connected.")
    except Exception as e:
        SHEETS_ENABLED = False
        logging.error(f"SHEETS disabled (fallback to memory). Reason: {e}")

_sheets_init()

# --------- Memory fallback stores ----------
MEM_USERS: Dict[int, dict] = {}
MEM_PROFILES: Dict[int, dict] = {}
MEM_EPISODES: List[dict] = []
MEM_REMINDERS: List[dict] = []
MEM_FEEDBACK: List[dict] = []
MEM_DAILY: List[dict] = []
MEM_CHALLENGES: List[dict] = []
MEM_RULES: List[dict] = []

def _headers(ws): return _ws_headers(ws)

# -------- Wrappers (429-friendly): Users / Profiles --------
def users_get(uid: int) -> dict:
    if SHEETS_ENABLED and _gs_can_read():
        try:
            row_i = ROW_CACHE["Users"].get(uid)
            if not row_i:
                cell = ws_users.find(str(uid))
                if cell:
                    row_i = cell.row
                    ROW_CACHE["Users"][uid] = row_i
            if row_i:
                vals = ws_users.row_values(row_i)
                hdr = _headers(ws_users)
                return {hdr[i]: (vals[i] if i < len(vals) else "") for i in range(len(hdr))}
        except Exception as e:
            _gs_tripped(e)
            logging.warning(f"users_get -> memory fallback: {e}")
    return MEM_USERS.get(uid, {})

def users_upsert(uid: int, username: str, lang: str):
    base = {
        "user_id": str(uid), "username": username or "", "lang": lang, "consent": "no",
        "tz_offset": "0", "checkin_hour": DEFAULT_CHECKIN_LOCAL, "evening_hour": "",
        "paused": "no", "last_seen": iso(utcnow()), "last_auto_date": "", "last_auto_count": "0",
        "streak": "0","streak_best":"0","gm_last_date": "",
    }
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_users)
            row_i = ROW_CACHE["Users"].get(uid)
            if not row_i and _gs_can_read():
                cell = ws_users.find(str(uid))
                if cell:
                    row_i = cell.row
                    ROW_CACHE["Users"][uid] = row_i
            if row_i:
                cur = users_get(uid)
                merged = {**base, **{k: (cur.get(k) or base[k]) for k in base}}
                ws_users.update(f"A{row_i}:{gsu.rowcol_to_a1(row_i, len(hdr))}",
                                [[merged.get(h, "") for h in hdr]])
                return
            ws_users.append_row([base.get(h, "") for h in hdr])
            try:
                cell = ws_users.find(str(uid))
                if cell: ROW_CACHE["Users"][uid] = cell.row
            except Exception: pass
            return
        except Exception as e:
            _gs_tripped(e)
            logging.warning(f"users_upsert -> memory fallback: {e}")
    MEM_USERS[uid] = {**MEM_USERS.get(uid, {}), **base}

def users_set(uid: int, field: str, value: str):
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_users)
            if field not in hdr:
                ws_users.update('A1', [hdr + [field]])
                hdr = _headers(ws_users)
            row_i = ROW_CACHE["Users"].get(uid)
            if not row_i and _gs_can_read():
                cell = ws_users.find(str(uid))
                if cell:
                    row_i = cell.row
                    ROW_CACHE["Users"][uid] = row_i
            if row_i:
                ws_users.update_cell(row_i, hdr.index(field) + 1, value)
                return
        except Exception as e:
            _gs_tripped(e)
            logging.warning(f"users_set -> memory fallback: {e}")
    u = MEM_USERS.setdefault(uid, {}); u[field] = value

def profiles_get(uid: int) -> dict:
    if SHEETS_ENABLED and _gs_can_read():
        try:
            row_i = ROW_CACHE["Profiles"].get(uid)
            if not row_i:
                cell = ws_profiles.find(str(uid))
                if cell:
                    row_i = cell.row
                    ROW_CACHE["Profiles"][uid] = row_i
            if row_i:
                vals = ws_profiles.row_values(row_i)
                hdr = _headers(ws_profiles)
                return {hdr[i]: (vals[i] if i < len(vals) else "") for i in range(len(hdr))}
        except Exception as e:
            _gs_tripped(e)
            logging.warning(f"profiles_get -> memory fallback: {e}")
    return MEM_PROFILES.get(uid, {})

def profiles_upsert(uid: int, patch: dict):
    patch = dict(patch or {}); patch["user_id"] = str(uid); patch["updated_at"] = iso(utcnow())
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_profiles)
            for k in patch.keys():
                if k not in hdr:
                    ws_profiles.update('A1', [hdr + [k]])
                    hdr = _headers(ws_profiles)
            row_i = ROW_CACHE["Profiles"].get(uid)
            if not row_i and _gs_can_read():
                cell = ws_profiles.find(str(uid))
                if cell:
                    row_i = cell.row
                    ROW_CACHE["Profiles"][uid] = row_i
            if row_i:
                cur_vals = ws_profiles.row_values(row_i)
                cur = {hdr[i]: (cur_vals[i] if i < len(cur_vals) else "") for i in range(len(hdr))}
                merged = {**cur, **patch}
                ws_profiles.update(f"A{row_i}:{gsu.rowcol_to_a1(row_i, len(hdr))}",
                                   [[merged.get(h, "") for h in hdr]])
                return
            ws_profiles.append_row([patch.get(h, "") for h in hdr])
            try:
                cell = ws_profiles.find(str(uid))
                if cell: ROW_CACHE["Profiles"][uid] = cell.row
            except Exception: pass
            return
        except Exception as e:
            _gs_tripped(e)
            logging.warning(f"profiles_upsert -> memory fallback: {e}")
    MEM_PROFILES[uid] = {**MEM_PROFILES.get(uid, {}), **patch}

# -------- The rest (episodes/reminders/daily/feedback/challenges) ‚Äî –∫–∞–∫ –±—ã–ª–æ --------
def feedback_add(ts: str, uid: int, name: str, username: str, rating: str, comment: str):
    row = {"timestamp":ts, "user_id":str(uid), "name":name, "username":username, "rating":rating, "comment":comment}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_feedback); ws_feedback.append_row([row.get(h, "") for h in hdr]); return
        except Exception as e:
            _gs_tripped(e); logging.warning(f"feedback_add -> memory fallback: {e}")
    MEM_FEEDBACK.append(row)

def daily_add(ts: str, uid: int, mood: str="", comment: str="", energy: Optional[int]=None):
    row = {"timestamp":ts, "user_id":str(uid), "mood":mood, "energy":("" if energy is None else str(energy)), "comment":comment}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_daily); ws_daily.append_row([row.get(h, "") for h in hdr]); return
        except Exception as e:
            _gs_tripped(e); logging.warning(f"daily_add -> memory fallback: {e}")
    MEM_DAILY.append(row)

def episode_create(uid: int, topic: str, severity: int=5, red: str="") -> str:
    eid = str(uuid.uuid4())
    row = {"episode_id":eid,"user_id":str(uid),"topic":topic,"started_at":iso(utcnow()),
           "baseline_severity":str(severity),"red_flags":red,"plan_accepted":"","target":"",
           "reminder_at":"","next_checkin_at":"","status":"open","last_update":iso(utcnow()),"notes":""}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_episodes); ws_episodes.append_row([row.get(h, "") for h in hdr])
        except Exception as e:
            _gs_tripped(e); logging.warning(f"episode_create -> memory fallback: {e}"); MEM_EPISODES.append(row)
    else: MEM_EPISODES.append(row)
    return eid

def episode_set(eid: str, key: str, val: str):
    if SHEETS_ENABLED:
        try:
            # –∞–¥—Ä–µ—Å–Ω—ã–π –∞–ø–¥–µ–π—Ç (–∏—â–µ–º —ç–ø–∏–∑–æ–¥ –ø–æ id)
            cell = ws_episodes.find(eid)
            if cell:
                row_i = cell.row
                hdr = _headers(ws_episodes)
                if key not in hdr:
                    ws_episodes.update('A1', [hdr + [key]]); hdr = _headers(ws_episodes)
                cur = ws_episodes.row_values(row_i)
                merged = {hdr[i]: (cur[i] if i < len(cur) else "") for i in range(len(hdr))}
                merged[key] = val
                ws_episodes.update(f"A{row_i}:{gsu.rowcol_to_a1(row_i,len(hdr))}", [[merged.get(h,"") for h in hdr]])
                return
        except Exception as e:
            _gs_tripped(e); logging.warning(f"episode_set -> memory fallback: {e}")
    for r in MEM_EPISODES:
        if r.get("episode_id")==eid:
            r[key]=val; return

def episode_find_open(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED and _gs_can_read():
        try:
            # –¥–µ—à—ë–≤–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º; –ª–∏–±–æ —Ö—Ä–∞–Ω–∏–º –∫–µ—à id‚Üírow
            vals = ws_episodes.get_all_records()[-50:]  # —Ä–µ–¥–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
            for r in reversed(vals):
                if str(r.get("user_id"))==str(uid) and (r.get("status")=="open"):
                    return r
        except Exception as e:
            _gs_tripped(e); logging.warning(f"episode_find_open fallback: {e}")
    for r in reversed(MEM_EPISODES):
        if r.get("user_id")==str(uid) and r.get("status")=="open":
            return r
    return None

def reminder_add(uid: int, text: str, when_utc: datetime) -> str:
    rid = str(uuid.uuid4())
    row = {"id":rid,"user_id":str(uid),"text":text,"when_utc":iso(when_utc),"created_at":iso(utcnow()),"status":"open"}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_reminders); ws_reminders.append_row([row.get(h, "") for h in hdr]); return rid
        except Exception as e:
            _gs_tripped(e); logging.warning(f"reminder_add -> memory fallback: {e}")
    MEM_REMINDERS.append(row); return rid

def challenge_get(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED and _gs_can_read():
        try:
            rows = ws_challenges.get_all_records()[-100:]  # —Ä–µ–¥–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
            for r in reversed(rows):
                if r.get("user_id")==str(uid) and r.get("status")!="done":
                    return r
        except Exception as e:
            _gs_tripped(e); logging.warning(f"challenge_get fallback: {e}")
    for r in MEM_CHALLENGES:
        if r.get("user_id")==str(uid) and r.get("status")!="done":
            return r
    return None

def challenge_start(uid: int, name: str="water7", length_days: int=7):
    row = {"user_id":str(uid),"challenge_id":str(uuid.uuid4()),"name":name,"start_date":iso(utcnow()),
           "length_days":str(length_days),"days_done":"0","status":"active"}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_challenges); ws_challenges.append_row([row.get(h,"") for h in hdr]); return
        except Exception as e:
            _gs_tripped(e); logging.warning(f"challenge_start -> memory fallback: {e}")
    MEM_CHALLENGES.append(row)


# ---------- Quickbar & Menus ----------
def quickbar_kb(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["quick_h60"], callback_data="menu|h60")],
        [InlineKeyboardButton(T[lang]["quick_er"], callback_data="menu|er"),
         InlineKeyboardButton(T[lang]["quick_lab"], callback_data="menu|lab")],
        [InlineKeyboardButton(T[lang]["quick_rem"], callback_data="menu|rem")]
    ])

async def show_quickbar(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: Optional[int]=None, force: bool=False):
    try:
        if uid and not force:
            s = sessions.setdefault(uid, {})
            if s.get("qb_sent"):
                return
            s["qb_sent"] = True
        await context.bot.send_message(chat_id, T[lang]["quick_title"], reply_markup=quickbar_kb(lang))
    except Exception as e:
        logging.warning(f"show_quickbar failed: {e}")


def inline_topic_kb(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ö° " + T[lang]["h60_btn"], callback_data="menu|h60")],
        [InlineKeyboardButton("üß™ Lab", callback_data="menu|lab"),
         InlineKeyboardButton("ü©∫ Sleep", callback_data="menu|sleep")],
        [InlineKeyboardButton("ü•ó Food", callback_data="menu|food"),
         InlineKeyboardButton("üèÉ Habits", callback_data="menu|habits")],
    ])


# ---------- Time & Quiet hours ----------
def _user_tz_off(uid: int) -> int:
    try: return int((users_get(uid) or {}).get("tz_offset") or "0")
    except: return 0

def user_local_now(uid: int) -> datetime:
    return datetime.utcnow().replace(tzinfo=timezone.utc) + timedelta(hours=_user_tz_off(uid))

def hhmm_tuple(hhmm: str) -> Tuple[int,int]:
    m = re.match(r"^\s*([01]?\d|2[0-3]):([0-5]\d)\s*$", hhmm or "")
    if not m: return (8,30)
    return (int(m.group(1)), int(m.group(2)))

def local_to_utc_dt(uid: int, local_dt: datetime) -> datetime:
    return local_dt - timedelta(hours=_user_tz_off(uid))

def _user_quiet_hours(uid: int) -> str:
    prof = profiles_get(uid) or {}
    return (prof.get("quiet_hours") or DEFAULT_QUIET_HOURS).strip()

def adjust_out_of_quiet(local_dt: datetime, qh: str) -> datetime:
    m = re.match(r"^\s*([01]?\d|2[0-3]):[0-5]\d-([01]?\d|2[0-3]):[0-5]\d\s*$", qh or "")
    if not m: return local_dt
    start, end = qh.split("-")
    sh, sm = hhmm_tuple(start); eh, em = hhmm_tuple(end)
    st = local_dt.replace(hour=sh, minute=sm, second=0, microsecond=0)
    en = local_dt.replace(hour=eh, minute=em, second=0, microsecond=0)
    if st < en:
        in_quiet = (st <= local_dt < en)
    else:
        in_quiet = (local_dt >= st or local_dt < en)
    return en if in_quiet else local_dt


# ---------- Life metrics ----------
def life_metrics(profile: dict) -> Dict[str,int]:
    b = (profile or {}).get("birth_date","").strip()
    days = None
    if re.match(r"^\d{4}-\d{2}-\d{2}$", b):
        try:
            y,m,d = map(int, b.split("-"))
            bd = datetime(y,m,d,tzinfo=timezone.utc)
            days = (utcnow()-bd).days
        except Exception:
            days = None
    if days is None:
        try: a = int(re.search(r"\d+", str((profile or {}).get("age","") or "0")).group(0))
        except Exception: a = 0
        days = max(0, a*365)
    percent = min(100, round(days/36500*100, 1))
    return {"days_lived": days, "percent_to_100": percent}

def progress_bar(percent: float, width: int=12) -> str:
    fill = int(round(width*percent/100.0))
    return "‚ñà"*fill + "‚ñë"*(width-fill)


# ------------- LLM Router (concise) -------------
SYS_ROUTER = (
    "You are TendAI ‚Äî a concise, warm, professional health & longevity assistant (not a doctor). "
    "Always answer strictly in {lang}. Keep replies short (<=6 lines + up to 4 bullets). "
    "Personalize using the profile (sex/age/goal/conditions, diet_focus, steps_target). "
    "TRIAGE: ask 1‚Äì2 clarifiers first; recommend ER only for clear red flags. "
    "Return JSON ONLY: {\"intent\":\"symptom|nutrition|sleep|labs|habits|longevity|other\","
    "\"assistant_reply\":\"...\",\"followups\":[\"...\"],\"needs_more\":true,\"red_flags\":false,\"confidence\":0.0}"
)

def llm_router_answer(text: str, lang: str, profile: dict) -> dict:
    if not oai:
        clar = {
            "ru":"–ì–¥–µ –∏–º–µ–Ω–Ω–æ –±–æ–ª–∏—Ç –∏ —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è? –ï—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/—Ç—Ä–∞–≤–º–∞?",
            "uk":"–î–µ —Å–∞–º–µ –±–æ–ª–∏—Ç—å —ñ —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î? –Ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/—Ç—Ä–∞–≤–º–∞?",
            "en":"Where exactly is the pain and for how long? Any fever/trauma?",
            "es":"¬øD√≥nde exactamente y desde cu√°ndo? ¬øFiebre/trauma?",
        }[lang]
        return {"intent":"other","assistant_reply":clar,"followups":[clar],"needs_more":True,"red_flags":False,"confidence":0.3}
    sys = SYS_ROUTER.replace("{lang}", lang) + f"\nUserProfile: {json.dumps(profile, ensure_ascii=False)}"
    try:
        resp = oai.chat_completions.create(
            model=OPENAI_MODEL, temperature=0.25, max_tokens=420,
            response_format={"type":"json_object"},
            messages=[{"role":"system","content":sys},{"role":"user","content":text}]
        )
        content = getattr(resp.choices[0].message, "content", None) or getattr(resp.choices[0], "message", {}).get("content","")
        data = json.loads((content or "{}").strip() or "{}")
        if "followups" not in data or data["followups"] is None:
            data["followups"] = []
        return data
    except Exception as e:
        logging.error(f"router LLM error: {e}")
        clar = {
            "ru":"–ì–¥–µ –∏–º–µ–Ω–Ω–æ –∏ –∫–∞–∫ –¥–∞–≤–Ω–æ? –ï—Å—Ç—å –ª–∏ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Ç—Ä–∞–≤–º–∞?",
            "uk":"–î–µ —Å–∞–º–µ —ñ —è–∫ –¥–∞–≤–Ω–æ? –Ñ –ø–æ—á–µ—Ä–≤–æ–Ω—ñ–Ω–Ω—è/—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/—Ç—Ä–∞–≤–º–∞?",
            "en":"Where exactly and since when? Any redness, fever or injury?",
            "es":"¬øD√≥nde exactamente y desde cu√°ndo? ¬øEnrojecimiento, fiebre o lesi√≥n?",
        }[lang]
        return {"intent":"other","assistant_reply":clar,"followups":[clar],"needs_more":True,"red_flags":False,"confidence":0.3}


# ===== Health60 =====
def _fmt_bullets(items: list) -> str:
    return "\n".join([f"‚Ä¢ {x}" for x in items if isinstance(x, str) and x.strip()])

SYS_H60 = (
    "You are TendAI ‚Äî a concise, warm, professional assistant (not a doctor). "
    "Answer strictly in {lang}. JSON ONLY: {\"causes\":[\"...\"],\"serious\":\"...\",\"do_now\":[\"...\"],\"see_doctor\":[\"...\"]}. "
    "Rules: 2‚Äì4 simple causes; exactly 1 serious item to rule out; 3‚Äì5 concrete do_now steps; 2‚Äì3 see_doctor cues."
)

def health60_make_plan(lang: str, symptom_text: str, profile: dict) -> str:
    fallback_map = {
        "ru": (f"{T['ru']['h60_t1']}:\n‚Ä¢ –ë—ã—Ç–æ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã\n{T['ru']['h60_serious']}: ‚Ä¢ –ò—Å–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∫–∏–µ, –Ω–æ —Å–µ—Ä—å—ë–∑–Ω—ã–µ –ø—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏\n\n"
               f"{T['ru']['h60_t2']}:\n‚Ä¢ –í–æ–¥–∞ 300‚Äì500 –º–ª\n‚Ä¢ –û—Ç–¥—ã—Ö 15‚Äì20 –º–∏–Ω\n‚Ä¢ –ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ\n\n"
               f"{T['ru']['h60_t3']}:\n‚Ä¢ –£—Ö—É–¥—à–µ–Ω–∏–µ\n‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏\n‚Ä¢ –ë–æ–ª—å ‚â•7/10"),
        "uk": (f"{T['uk']['h60_t1']}:\n‚Ä¢ –ü–æ–±—É—Ç–æ–≤—ñ –ø—Ä–∏—á–∏–Ω–∏\n{T['uk']['h60_serious']}: ‚Ä¢ –í–∏–∫–ª—é—á–∏—Ç–∏ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ, –∞–ª–µ —Å–µ—Ä–π–æ–∑–Ω—ñ –ø—Ä–∏ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—ñ\n\n"
               f"{T['uk']['h60_t2']}:\n‚Ä¢ –í–æ–¥–∞ 300‚Äì500 –º–ª\n‚Ä¢ –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ 15‚Äì20 —Ö–≤\n‚Ä¢ –ü—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è\n\n"
               f"{T['uk']['h60_t3']}:\n‚Ä¢ –ü–æ–≥—ñ—Ä—à–µ–Ω–Ω—è\n‚Ä¢ –í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–ø—Ä–∞–ø–æ—Ä—Ü—ñ\n‚Ä¢ –ë—ñ–ª—å ‚â•7/10"),
        "en": (f"{T['en']['h60_t1']}:\n‚Ä¢ Everyday causes\n{T['en']['h60_serious']}: ‚Ä¢ Rule out rare but serious if worsening\n\n"
               f"{T['en']['h60_t2']}:\n‚Ä¢ Drink 300‚Äì500 ml water\n‚Ä¢ 15‚Äì20 min rest\n‚Ä¢ Ventilate\n\n"
               f"{T['en']['h60_t3']}:\n‚Ä¢ Worsening\n‚Ä¢ High fever/red flags\n‚Ä¢ Pain ‚â•7/10"),
    }
    fallback = fallback_map.get(lang, fallback_map["en"])
    if not oai: return fallback
    sys = SYS_H60.replace("{lang}", lang)
    user = {"symptom": (symptom_text or "").strip()[:500],
            "profile": {k: profile.get(k, "") for k in ["sex","age","goal","conditions","meds","sleep","activity","diet","diet_focus","steps_target"]}}
    try:
        resp = oai.chat_completions.create(
            model=OPENAI_MODEL, temperature=0.2, max_tokens=420,
            response_format={"type":"json_object"},
            messages=[{"role":"system","content":sys},{"role":"user","content":json.dumps(user, ensure_ascii=False)}]
        )
        content = getattr(resp.choices[0].message, "content", None) or getattr(resp.choices[0], "message", {}).get("content","")
        data = json.loads((content or "{}").strip() or "{}")
        causes  = _fmt_bullets(data.get("causes") or [])
        serious = (data.get("serious") or "").strip()
        do_now  = _fmt_bullets(data.get("do_now") or [])
        see_doc = _fmt_bullets(data.get("see_doctor") or [])
        parts = []
        if causes:  parts.append(f"{T[lang]['h60_t1']}:\n{causes}")
        if serious: parts.append(f"{T[lang]['h60_serious']}: {serious}")
        if do_now:  parts.append(f"\n{T[lang]['h60_t2']}:\n{do_now}")
        if see_doc: parts.append(f"\n{T[lang]['h60_t3']}:\n{see_doc}")
        return "\n".join(parts).strip()
    except Exception as e:
        logging.error(f"health60 LLM error: {e}")
        return fallback


# ---------- Lightweight content helpers ----------
def _get_skin_tip(lang: str, sex: str, age: int) -> str:
    pool_ru = [
        "–ú—è–≥–∫–æ–µ SPF –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —Å–∞–º–∞—è –Ω–µ–¥–æ–æ—Ü–µ–Ω—ë–Ω–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫–æ–∂—É.",
        "–î—É—à: —Ç—ë–ø–ª–∞—è –≤–æ–¥–∞, –Ω–µ –≥–æ—Ä—è—á–∞—è; 3‚Äì5 –º–∏–Ω—É—Ç ‚Äî –∫–æ–∂–∞ —Å–∫–∞–∂–µ—Ç —Å–ø–∞—Å–∏–±–æ.",
        "–£–º—ã–≤–∞–ª–∫–∞ –±–µ–∑ SLS, —É–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–æ–¥—ã."
    ]
    pool_en = [
        "Daily light SPF is the most underrated skin investment.",
        "Keep showers warm, not hot; 3‚Äì5 minutes protects your skin barrier.",
        "Use a gentle cleanser and moisturize right after water."
    ]
    pools = {"ru": pool_ru, "uk": pool_ru, "en": pool_en, "es": pool_en}
    return random.choice(pools.get(lang, pool_en))

def _get_daily_tip(profile: dict, lang: str) -> str:
    base = {
        "ru": ["1 –º–∏–Ω—É—Ç—É –¥—ã—Ö–∞–Ω–∏—è 4-6 ‚Äî –∏ –ø—É–ª—å—Å —Å–ø–æ–∫–æ–π–Ω–µ–µ.", "–°—Ç–∞–∫–∞–Ω –≤–æ–¥—ã —Ä—è–¥–æ–º ‚Äî –≥–ª–æ—Ç–æ–∫ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–∞–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—à—å —Ç–µ–ª–µ—Ñ–æ–Ω."],
        "uk": ["1 —Ö–≤–∏–ª–∏–Ω–∞ –¥–∏—Ö–∞–Ω–Ω—è 4-6 ‚Äî –ø—É–ª—å—Å —Å–ø–æ–∫—ñ–π–Ω—ñ—à–∏–π.", "–°–∫–ª—è–Ω–∫–∞ –≤–æ–¥–∏ –ø–æ—Ä—É—á ‚Äî –∫–æ–≤—Ç–æ–∫ —â–æ—Ä–∞–∑—É —è–∫ —Ä–æ–∑–±–ª–æ–∫–æ–≤—É—î—à —Ç–µ–ª–µ—Ñ–æ–Ω."],
        "en": ["Try 1 minute of 4-6 breathing ‚Äî heart rate calms down.", "Keep a glass of water nearby ‚Äî sip when you unlock your phone."]
    }
    return random.choice(base.get(lang, base["en"]))


# ---------- CARE engine (habits memory & nudges) ----------
def _ai_obj(profile: dict) -> dict:
    try:
        raw = profile.get("ai_profile") or "{}"
        return json.loads(raw) if isinstance(raw, str) else (raw or {})
    except Exception:
        return {}

def _ai_get(profile: dict, key: str, default=None):
    return _ai_obj(profile).get(key, default)

def _ai_set(uid: int, key: str, value):
    p = profiles_get(uid) or {}
    obj = _ai_obj(p); obj[key] = value
    profiles_upsert(uid, {"ai_profile": json.dumps(obj, ensure_ascii=False)})

def learn_from_text(uid: int, text: str):
    """–û—á–µ–Ω—å –ª—ë–≥–∫–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∫–æ—Ñ–µ–∏–Ω/—Å–æ–Ω/–≥–æ–ª–æ–≤–∞/–≤–æ–¥–∞)."""
    low = (text or "").lower()
    p = profiles_get(uid) or {}
    obj = _ai_obj(p)
    def inc(k, dv=1): obj[k] = int(obj.get(k, 0)) + dv
    if any(w in low for w in ["–∫–æ—Ñ–µ","coffee","espresso","–∫–∞–ø—É—á–∏–Ω–æ","latte"]): inc("caf_mentions")
    if any(w in low for w in ["–≥–æ–ª–æ–≤–∞","headache","–º–∏–≥—Ä–µ–Ω—å","migraine"]): inc("headache_mentions")
    if any(w in low for w in ["—Å–æ–Ω","sleep","insomnia","–±–µ—Å—Å–æ–Ω"]): inc("sleep_mentions")
    if any(w in low for w in ["–≤–æ–¥–∞","hydrate","–∂–∞–∂–¥–∞","water"]): inc("water_prompt")
    profiles_upsert(uid, {"ai_profile": json.dumps(obj, ensure_ascii=False)})

def life_stage_from_profile(profile: dict) -> str:
    try:
        a = int(re.search(r"\d+", str(profile.get("age","") or "0")).group(0))
    except Exception:
        a = 0
    if a <= 25: return "20s"
    if a <= 40: return "30s"
    if a <= 55: return "40s-50s"
    return "60+"

def build_care_nudge(uid: int, lang: str) -> str:
    p = profiles_get(uid) or {}
    stage = life_stage_from_profile(p)
    ai = _ai_obj(p)
    if int(ai.get("headache_mentions",0)) >= 2:
        return {"ru":"–ó–∞–º–µ—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏: –∫–æ—Ñ–µ–∏–Ω, —ç–∫—Ä–∞–Ω, –Ω–µ–¥–æ—Å—ã–ø ‚Äî —Å–µ–≥–æ–¥–Ω—è –ø–æ–ø—Ä–æ–±—É–π 10-–º–∏–Ω –ø—Ä–æ–≥—É–ª–∫—É –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                "uk":"–ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É –Ω–∞ —Ç—Ä–∏–≥–µ—Ä–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –±–æ–ª—é: –∫–æ—Ñ–µ—ó–Ω, –µ–∫—Ä–∞–Ω, –Ω–µ–¥–æ—Å–∏–ø ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ 10-—Ö–≤ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
                "en":"Track headache triggers: caffeine, screens, poor sleep ‚Äî try a 10-min walk phone-free today.",
                "es":"Detecta desencadenantes de dolor de cabeza: cafe√≠na, pantallas, sue√±o ‚Äî camina 10 min sin m√≥vil."}[lang]
    if stage=="20s":
        return {"ru":"‚ö° –ú–∏–Ω–∏-—á–µ–ª–ª–µ–Ω–¥–∂: 2 —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã –¥–æ –ø–æ–ª—É–¥–Ω—è ‚Äî –æ—Ç–º–µ—Ç—å —Ä–µ–∞–∫—Ü–∏—é —ç–Ω–µ—Ä–≥–∏–∏.",
                "uk":"‚ö° –ú—ñ–Ω—ñ-—á–µ–ª–µ–Ω–¥–∂: 2 —Å–∫–ª—è–Ω–∫–∏ –≤–æ–¥–∏ –¥–æ –ø–æ–ª—É–¥–Ω—è ‚Äî –≤—ñ–¥–º—ñ—Ç—å –µ–Ω–µ—Ä–≥—ñ—é.",
                "en":"‚ö° Mini-challenge: 2 glasses of water before noon ‚Äî notice energy boost.",
                "es":"‚ö° Mini-reto: 2 vasos de agua antes del mediod√≠a ‚Äî nota la energ√≠a."}[lang]
    return f"{T[lang]['daily_tip_prefix']} {_get_daily_tip(p, lang)}"


# ---------- Auto-message limiter (unified) ----------
def _auto_allowed(uid: int) -> bool:
    today = datetime.utcnow().date().isoformat()
    u = users_get(uid) or {}
    last = (u.get("last_auto_date") or "")
    cnt = int(str(u.get("last_auto_count") or "0") or "0")
    if last != today:
        users_set(uid, "last_auto_date", today)
        users_set(uid, "last_auto_count", "0")
        cnt = 0
    return cnt < AUTO_MAX_PER_DAY

def _auto_inc(uid: int):
    today = datetime.utcnow().date().isoformat()
    u = users_get(uid) or {}
    last = (u.get("last_auto_date") or "")
    cnt = int(str(u.get("last_auto_count") or "0") or "0")
    if last != today:
        users_set(uid, "last_auto_date", today); users_set(uid, "last_auto_count", "1")
    else:
        users_set(uid, "last_auto_count", str(cnt+1))


# ---------- Scheduling API (–±–µ–∑ –¥–∂–æ–±; –¥–∂–æ–±—ã ‚Äî –≤ –ß–∞—Å—Ç–∏ 2) ----------
def schedule_oneoff_local(app, uid: int, local_after_hours: float, text: str):
    """–†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ N —á–∞—Å–æ–≤ (–ª–æ–∫–∞–ª—å–Ω–æ, —Å —Ç–∏—Ö–∏–º–∏ —á–∞—Å–∞–º–∏). job_oneoff_reminder ‚Äî –≤ –ß–∞—Å—Ç–∏ 2."""
    now_local = user_local_now(uid)
    when_local = now_local + timedelta(hours=local_after_hours)
    when_local = adjust_out_of_quiet(when_local, _user_quiet_hours(uid))
    when_utc = local_to_utc_dt(uid, when_local)
    rid = reminder_add(uid, text, when_utc)
    if getattr(app, "job_queue", None):
        # —Å–∞–º job_oneoff_reminder –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤ —á–∞—Å—Ç–∏ 2
        app.job_queue.run_once(lambda *_: None, when=(when_utc - utcnow()), data={"user_id":uid, "reminder_id":rid})
    return rid


# ---------- Rules (evidence-based) ----------
def rules_lookup(topic: str, segment: str, lang: str) -> Optional[str]:
    try:
        if SHEETS_ENABLED and ws_rules and _gs_can_read():
            rows = ws_rules.get_all_records()[-200:]  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –≤—ã–±–æ—Ä–∫—É
            for r in rows:
                if (r.get("enabled","").strip().lower() in {"1","true","yes"}) and \
                   (r.get("topic","").strip().lower() == (topic or "").strip().lower()):
                    seg = (r.get("segment") or "").strip().lower()
                    if not seg or seg == (segment or "").strip().lower():
                        txt = (r.get("advice_text") or "").strip()
                        if not txt: continue
                        m = re.search(r"\[\[\s*"+re.escape(lang)+r"\s*:(.*?)\]\]", txt, re.DOTALL)
                        if m: return m.group(1).strip()
                        return txt
    except Exception as e:
        _gs_tripped(e); logging.warning(f"rules_lookup fallback: {e}")
    return None


# ---------- Gentle one-liners ----------
def tiny_care_tip(lang: str, mood: str, profile: dict) -> str:
    if lang == "ru":
        if mood == "excellent": return "üî• –û—Ç–ª–∏—á–Ω–æ! –°–æ—Ö—Ä–∞–Ω–∏–º —Ä–∏—Ç–º ‚Äî 5 –º–∏–Ω—É—Ç –¥–≤–∏–∂–µ–Ω–∏—è –∫ –∫–æ—Ñ–µ?"
        if mood == "ok":        return "üôÇ 300 –º–ª –≤–æ–¥—ã –∏ 1 –º–∏–Ω—É—Ç—É –¥—ã—Ö–∞–Ω–∏—è 4-6."
        if mood == "tired":     return "üò¥ –ü—Ä–æ–≥—É–ª–∫–∞ 5‚Äì7 –º–∏–Ω + —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã."
        if mood == "pain":      return "ü§ï –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –±–æ–ª—å—é. –ï—Å–ª–∏ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è ‚Äî ¬´‚ö° 60 —Å–µ–∫¬ª."
        return "üëç –ë–µ—Ä–µ–∂—ë–º —Ç–µ–º–ø –∏ –≤–æ–¥—É —Ä—è–¥–æ–º."
    if lang == "uk":
        if mood == "excellent": return "üî• –ö—Ä—É—Ç–æ! 5 —Ö–≤–∏–ª–∏–Ω —Ä—É—Ö—É –¥–æ –∫–∞–≤–∏?"
        if mood == "ok":        return "üôÇ 300 –º–ª –≤–æ–¥–∏ —ñ 1 —Ö–≤ –¥–∏—Ö–∞–Ω–Ω—è 4-6."
        if mood == "tired":     return "üò¥ –ü—Ä–æ–≥—É–ª—è–Ω–∫–∞ 5‚Äì7 —Ö–≤ + –≤–æ–¥–∞."
        if mood == "pain":      return "ü§ï –Ø–∫—â–æ –ø–æ—Å–∏–ª—é—î—Ç—å—Å—è ‚Äî ¬´‚ö° 60 c¬ª."
        return "üëç –ë–µ—Ä–µ–∂–µ–º–æ —Ç–µ–º–ø —ñ –≤–æ–¥—É –ø–æ—Ä—É—á."
    if mood == "excellent": return "üî• Nice! 5-min walk before coffee?"
    if mood == "ok":        return "üôÇ 300 ml water + 1-min 4-6 breathing."
    if mood == "tired":     return "üò¥ Try 5‚Äì7 min walk + water."
    if mood == "pain":      return "ü§ï If worsening, tap ‚Äú‚ö° 60s‚Äù."
    return "üëç Keep the pace and keep water nearby."


# ---------- Challenge helpers ----------
def _challenge_tick(uid: int) -> Optional[str]:
    ch = challenge_get(uid)
    if not ch:
        return None
    try:
        done = int(ch.get("days_done") or "0")
        length = int(ch.get("length_days") or "7")
    except Exception:
        done, length = 0, 7
    done = min(length, done + 1)
    if SHEETS_ENABLED and ws_challenges:
        try:
            vals = ws_challenges.get_all_records()
            for i, r in enumerate(vals, start=2):
                if r.get("user_id")==str(uid) and r.get("challenge_id")==ch.get("challenge_id"):
                    ws_challenges.update_cell(i, ( _headers(ws_challenges).index("days_done")+1 ), str(done))
                    if done >= length:
                        ws_challenges.update_cell(i, ( _headers(ws_challenges).index("status")+1 ), "done")
                    break
        except Exception as e:
            _gs_tripped(e); logging.warning(f"challenge_tick -> memory fallback: {e}")
            ch["days_done"] = str(done)
            if done >= length: ch["status"] = "done"
    else:
        ch["days_done"] = str(done)
        if done >= length: ch["status"] = "done"
    return f"{T[norm_lang((users_get(uid) or {}).get('lang') or 'en')]['challenge_progress'].format(d=done, len=length)}"


# ---------- Streak helpers ----------
def streak_update(uid: int) -> Optional[str]:
    u = users_get(uid) or {}
    today = datetime.utcnow().date().isoformat()
    last = (u.get("gm_last_date") or "")
    if last == today:
        return None
    try:
        streak = int(u.get("streak") or "0")
        best   = int(u.get("streak_best") or "0")
    except Exception:
        streak, best = 0, 0
    streak = streak + 1 if last else 1
    best = max(best, streak)
    users_set(uid, "streak", str(streak))
    users_set(uid, "streak_best", str(best))
    users_set(uid, "gm_last_date", today)
    if streak in (3, 7, 14, 30):
        lang = norm_lang((u.get("lang") or "en"))
        msg = {
            "ru": f"üî• {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –î–µ—Ä–∂–∏–º –º—è–≥–∫–∏–π —Ç–µ–º–ø.",
            "uk": f"üî• {streak} –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å! –¢—Ä–∏–º–∞—î–º–æ —Ç–µ–º–ø.",
            "en": f"üî• {streak} days in a row! Keep it gentle.",
            "es": f"üî• ¬°{streak} d√≠as seguidos! Suave y constante.",
        }[lang]
        return msg
    return None


# ---------- Cycle helpers ----------
def _calc_cycle_phase(last: str, avg_len: int, today: Optional[date]=None) -> str:
    try:
        y,m,d = map(int, last.split("-"))
        lmp = date(y,m,d)
        t = today or datetime.utcnow().date()
        day = (t - lmp).days % max(24, min(40, avg_len or 28))
        if day <= 5:   return "menstruation"
        if day <= 13:  return "follicular"
        if day <= 16:  return "ovulation"
        return "luteal"
    except Exception:
        return "unknown"

def _cycle_tip(lang: str, phase: str) -> str:
    tips_ru = {
        "menstruation":"–ú—è–≥–∫–∏–π —Ä–µ–∂–∏–º: –≤–æ–¥–∞, —Å–æ–Ω, –ª—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞.",
        "follicular":"–•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –∑–∞–¥–∞—á —Å —Ñ–æ–∫—É—Å–æ–º.",
        "ovulation":"–ë–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏ ‚Äî –Ω–æ —Å–ª–µ–¥–∏ –∑–∞ —Å–Ω–æ–º –∏ –≤–æ–¥–æ–π.",
        "luteal":"–ú–∞–≥–Ω–∏–π/–æ–º–µ–≥–∞ –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é —Å –≤—Ä–∞—á–æ–º, –±–µ—Ä–µ–≥–∏ —Ä–∏—Ç–º."
    }
    tips_en = {
        "menstruation":"Gentle mode: hydration, sleep, light stretching.",
        "follicular":"Great window for training and focus tasks.",
        "ovulation":"Energy is up ‚Äî guard sleep and hydration.",
        "luteal":"Consider magnesium/omega (doctor-approved), keep the pace."
    }
    src = tips_ru if lang in {"ru","uk"} else tips_en
    return src.get(phase, src["follicular"])


# ---------- MINI-INTAKE ----------
MINI_KEYS = ["sex","age","goal","conditions","meds_allergies","activity","diet_focus","steps_target","habits","birth_date"]
MINI_FREE_KEYS: Set[str] = {"meds_allergies","birth_date"}
MINI_STEPS = {
    "sex": {
        "ru":[("–ú—É–∂—Å–∫–æ–π","male"),("–ñ–µ–Ω—Å–∫–∏–π","female"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("Male","male"),("Female","female"),("Other","other")],
        "uk":[("–ß–æ–ª–æ–≤—ñ—á–∞","male"),("–ñ—ñ–Ω–æ—á–∞","female"),("–Ü–Ω—à–∞","other")],
        "es":[("Hombre","male"),("Mujer","female"),("Otro","other")],
        "label":{"ru":"–ü–æ–ª:","en":"Sex:","uk":"–°—Ç–∞—Ç—å:","es":"Sexo:"}
    },
    "age": {
        "ru":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "en":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "uk":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "es":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "label":{"ru":"–í–æ–∑—Ä–∞—Å—Ç:","en":"Age:","uk":"–í—ñ–∫:","es":"Edad:"}
    },
    "goal": {
        "ru":[("–≠–Ω–µ—Ä–≥–∏—è","energy"),("–°–æ–Ω","sleep"),("–ü–æ—Ö—É–¥–µ–Ω–∏–µ","weight"),("–°–∏–ª–∞","strength"),("–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ","longevity")],
        "en":[("Energy","energy"),("Sleep","sleep"),("Weight","weight"),("Strength","strength"),("Longevity","longevity")],
        "uk":[("–ï–Ω–µ—Ä–≥—ñ—è","energy"),("–°–æ–Ω","sleep"),("–í–∞–≥–∞","weight"),("–°–∏–ª–∞","strength"),("–î–æ–≤–≥–æ–ª—ñ—Ç—Ç—è","longevity")],
        "es":[("Energ√≠a","energy"),("Sue√±o","sleep"),("Peso","weight"),("Fuerza","strength"),("Longevidad","longevity")],
        "label":{"ru":"–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:","en":"Main goal:","uk":"–ú–µ—Ç–∞:","es":"Objetivo:"}
    },
    "conditions": {
        "ru":[("–ù–µ—Ç","none"),("–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥.","cvd"),("–©–ñ/—ç–Ω–¥–æ–∫—Ä.","endocrine"),("–ñ–ö–¢","gi"),("–ê–ª–ª–µ—Ä–≥–∏—è","allergy"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("None","none"),("Cardio/vascular","cvd"),("Thyroid/endocrine","endocrine"),("GI","gi"),("Allergy","allergy"),("Other","other")],
        "uk":[("–ù–µ–º–∞—î","none"),("–°–µ—Ä—Ü–µ–≤–æ-—Å—É–¥.","cvd"),("–©–ó/–µ–Ω–¥–æ–∫—Ä.","endocrine"),("–®–ö–¢","gi"),("–ê–ª–µ—Ä–≥—ñ—è","allergy"),("–Ü–Ω—à–µ","other")],
        "es":[("Ninguno","none"),("Cardio","cvd"),("Tiroides","endocrine"),("GI","gi"),("Alergia","allergy"),("Otro","other")],
        "label":{"ru":"–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:","en":"Chronic conditions:","uk":"–•—Ä–æ–Ω—ñ—á–Ω—ñ —Å—Ç–∞–Ω–∏:","es":"Condiciones cr√≥nicas:"}
    },
    "meds_allergies": {
        "ru":[], "en":[], "uk":[], "es":[],
        "label":{"ru":"–õ–µ–∫–∞—Ä—Å—Ç–≤–∞/–¥–æ–±–∞–≤–∫–∏/–∞–ª–ª–µ—Ä–≥–∏–∏ (–∫–æ—Ä–æ—Ç–∫–æ):","en":"Meds/supplements/allergies (short):","uk":"–õ—ñ–∫–∏/–¥–æ–±–∞–≤–∫–∏/–∞–ª–µ—Ä–≥—ñ—ó (–∫–æ—Ä–æ—Ç–∫–æ):","es":"Medicamentos/suplementos/alergias (corto):"}
    },
    "activity": {
        "ru":[("–ù–∏–∑–∫–∞—è","low"),("–°—Ä–µ–¥–Ω—è—è","mid"),("–í—ã—Å–æ–∫–∞—è","high"),("–°–ø–æ—Ä—Ç","sport")],
        "en":[("Low","low"),("Medium","mid"),("High","high"),("Sport","sport")],
        "uk":[("–ù–∏–∑—å–∫–∞","low"),("–°–µ—Ä–µ–¥–Ω—è","mid"),("–í–∏—Å–æ–∫–∞","high"),("–°–ø–æ—Ä—Ç","sport")],
        "es":[("Baja","low"),("Media","mid"),("Alta","high"),("Deporte","sport")],
        "label":{"ru":"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:","en":"Activity:","uk":"–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:","es":"Actividad:"}
    },
    "diet_focus": {
        "ru":[("–°–±–∞–ª–∞–Ω—Å.","balanced"),("–ù–∏–∑–∫–æ—É–≥–ª.","lowcarb"),("–†–∞—Å—Ç–∏—Ç.","plant"),("–ù–µ—Ä–µ–≥—É–ª.","irregular")],
        "en":[("Balanced","balanced"),("Low-carb","lowcarb"),("Plant-based","plant"),("Irregular","irregular")],
        "uk":[("–ó–±–∞–ª–∞–Ω—Å.","balanced"),("–ú–∞–ª–æ–≤—É–≥–ª.","lowcarb"),("–†–æ—Å–ª–∏–Ω–Ω–µ","plant"),("–ù–µ—Ä–µ–≥—É–ª.","irregular")],
        "es":[("Equilibrada","balanced"),("Baja carb.","lowcarb"),("Vegetal","plant"),("Irregular","irregular")],
        "label":{"ru":"–ü–∏—Ç–∞–Ω–∏–µ —á–∞—â–µ –≤—Å–µ–≥–æ:","en":"Diet mostly:","uk":"–•–∞—Ä—á—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–∂–Ω–æ:","es":"Dieta:"}
    },
    "steps_target": {
        "ru":[("<5–∫","5000"),("5‚Äì8–∫","8000"),("8‚Äì12–∫","12000"),("–°–ø–æ—Ä—Ç","15000")],
        "en":[("<5k","5000"),("5‚Äì8k","8000"),("8‚Äì12k","12000"),("Sport","15000")],
        "uk":[("<5–∫","5000"),("5‚Äì8–∫","8000"),("8‚Äì12–∫","12000"),("–°–ø–æ—Ä—Ç","15000")],
        "es":[("<5k","5000"),("5‚Äì8k","8000"),("8‚Äì12k","12000"),("Deporte","15000")],
        "label":{"ru":"–®–∞–≥–∏/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:","en":"Steps/activity:","uk":"–ö—Ä–æ–∫–∏/–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:","es":"Pasos/actividad:"}
    },
    "habits": {
        "ru":[("–ù–µ –∫—É—Ä—é","no_smoke"),("–ö—É—Ä—é","smoke"),("–ê–ª–∫. —Ä–µ–¥–∫–æ","alc_low"),("–ê–ª–∫. —á–∞—Å—Ç–æ","alc_high"),("–ö–æ—Ñ–µ–∏–Ω 0‚Äì1","caf_low"),("–ö–æ—Ñ–µ–∏–Ω 2‚Äì3","caf_mid"),("–ö–æ—Ñ–µ–∏–Ω 4+","caf_high")],
        "en":[("No smoking","no_smoke"),("Smoking","smoke"),("Alcohol rare","alc_low"),("Alcohol often","alc_high"),("Caffeine 0‚Äì1","caf_low"),("Caffeine 2‚Äì3","caf_mid"),("Caffeine 4+","caf_high")],
        "uk":[("–ù–µ –∫—É—Ä—é","no_smoke"),("–ö—É—Ä—é","smoke"),("–ê–ª–∫. —Ä—ñ–¥–∫–æ","alc_low"),("–ê–ª–∫. —á–∞—Å—Ç–æ","alc_high"),("–ö–æ—Ñ–µ—ó–Ω 0‚Äì1","caf_low"),("–ö–æ—Ñ–µ—ó–Ω 2‚Äì3","caf_mid"),("–ö–æ—Ñ–µ—ó–Ω 4+","caf_high")],
        "es":[("No fuma","no_smoke"),("Fuma","smoke"),("Alcohol raro","alc_low"),("Alcohol a menudo","alc_high"),("Cafe√≠na 0‚Äì1","caf_low"),("Cafe√≠na 2‚Äì3","caf_mid"),("Cafe√≠na 4+","caf_high")],
        "label":{"ru":"–ü—Ä–∏–≤—ã—á–∫–∏ (–≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ):","en":"Habits (pick closest):","uk":"–ó–≤–∏—á–∫–∏ (–æ–±–µ—Ä—ñ—Ç—å –±–ª–∏–∂—á–µ):","es":"H√°bitos (elige):"}
    },
    "birth_date": {
        "ru":[], "en":[], "uk":[], "es":[],
        "label":{"ru":"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î) ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é:","en":"Birth date (YYYY-MM-DD) ‚Äî optional:","uk":"–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–†–†–†–†-–ú–ú-–î–î) ‚Äî –æ–ø—Ü—ñ–π–Ω–æ:","es":"Fecha de nacimiento (AAAA-MM-DD) ‚Äî opcional:"}
    },
}

def build_mini_kb(lang: str, key: str) -> InlineKeyboardMarkup:
    opts = MINI_STEPS[key].get(lang, [])
    rows, row = [], []
    for label, val in opts:
        row.append(InlineKeyboardButton(label, callback_data=f"mini|choose|{key}|{val}"))
        if len(row) == 3:
            rows.append(row); row=[]
    if row: rows.append(row)
    if key in MINI_FREE_KEYS or (not opts):
        rows.append([InlineKeyboardButton(T[lang]["write"], callback_data=f"mini|write|{key}")])
    rows.append([InlineKeyboardButton(T[lang]["skip"], callback_data=f"mini|skip|{key}")])
    return InlineKeyboardMarkup(rows)

async def start_mini_intake(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    sessions[uid] = sessions.get(uid, {})
    sessions[uid].update({"mini_active": True, "mini_step": 0, "mini_answers": {}, "qb_sent": False})
    await context.bot.send_message(chat_id, {
        "ru":"üîé –ú–∏–Ω–∏-–æ–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (4‚Äì6 –∫–ª–∏–∫–æ–≤).",
        "uk":"üîé –ú—ñ–Ω—ñ-–æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó (4‚Äì6 –∫–ª—ñ–∫—ñ–≤).",
        "en":"üîé Mini-intake for personalization (4‚Äì6 taps).",
        "es":"üîé Mini-intake para personalizaci√≥n (4‚Äì6 toques).",
    }[lang], reply_markup=ReplyKeyboardRemove())
    await ask_next_mini(context, chat_id, lang, uid)

def mini_handle_choice(uid: int, key: str, value: str):
    s = sessions.setdefault(uid, {"mini_active": True, "mini_step": 0, "mini_answers": {}})
    s["mini_answers"][key] = value
    s["mini_step"] = int(s.get("mini_step", 0)) + 1

async def ask_next_mini(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    s = sessions.get(uid, {})
    step_idx = s.get("mini_step", 0)
    if step_idx >= len(MINI_KEYS):
        answers = s.get("mini_answers", {})
        if answers.get("meds_allergies"):
            profiles_upsert(uid, {"meds":answers["meds_allergies"], "allergies":answers["meds_allergies"]})
        if answers.get("birth_date"):
            profiles_upsert(uid, {"birth_date": answers["birth_date"]})
        profiles_upsert(uid, answers)
        sessions[uid]["mini_active"] = False
        profiles_upsert(uid, {"ai_profile": json.dumps({"v":1,"habits":answers.get("habits","")}, ensure_ascii=False)})
        await context.bot.send_message(chat_id, T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
        await show_quickbar(context, chat_id, lang, uid)
        return
    key = MINI_KEYS[step_idx]
    label = MINI_STEPS[key]["label"][lang]
    await context.bot.send_message(chat_id, label, reply_markup=build_mini_kb(lang, key))
# ---------- Small helpers ----------
def _user_lang(uid: int) -> str:
    try:
        return norm_lang((users_get(uid) or {}).get("lang") or "en")
    except Exception:
        return "en"

def _parse_tz(s: str) -> Optional[int]:
    m = re.match(r"^\s*([+-]?\d{1,2})\s*$", s or "")
    if not m: return None
    try:
        off = int(m.group(1))
        if -12 <= off <= 14: return off
        return None
    except Exception:
        return None

def _parse_quiet(s: str) -> Optional[str]:
    if re.match(r"^\s*([01]?\d|2[0-3]):[0-5]\d-([01]?\d|2[0-3]):[0-5]\d\s*$", s or ""):
        return s.strip()
    return None

# ---------- Language commands ----------
async def _set_lang(update: Update, context: ContextTypes.DEFAULT_TYPE, lang: str):
    uid = update.effective_user.id
    users_upsert(uid, update.effective_user.username, lang)
    users_set(uid, "lang", lang)
    await update.message.reply_text(T[lang]["thanks"])
    await show_quickbar(context, update.effective_chat.id, lang, uid, force=True)

async def cmd_ru(update: Update, context: ContextTypes.DEFAULT_TYPE):  await _set_lang(update, context, "ru")
async def cmd_en(update: Update, context: ContextTypes.DEFAULT_TYPE):  await _set_lang(update, context, "en")
async def cmd_uk(update: Update, context: ContextTypes.DEFAULT_TYPE):  await _set_lang(update, context, "uk")
async def cmd_es(update: Update, context: ContextTypes.DEFAULT_TYPE):  await _set_lang(update, context, "es")

# ---------- Core commands ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    guess = norm_lang(getattr(update.effective_user, "language_code", "en"))
    users_upsert(uid, update.effective_user.username, guess)
    lang = _user_lang(uid)
    users_set(uid, "last_seen", iso(utcnow()))
    await update.message.reply_text(T[lang]["welcome"])
    # Quickbar and optional intake
    prof = profiles_get(uid) or {}
    if profile_is_incomplete(prof):
        await start_mini_intake(context, update.effective_chat.id, lang, uid)
    else:
        await show_quickbar(context, update.effective_chat.id, lang, uid, force=True)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    await update.message.reply_text(T[lang]["help"])
    await show_quickbar(context, update.effective_chat.id, lang, uid)

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    await update.message.reply_text(T[lang]["privacy"])

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    users_set(uid, "paused", "yes")
    await update.message.reply_text(T[lang]["paused_on"])

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    users_set(uid, "paused", "no")
    await update.message.reply_text(T[lang]["paused_off"])

async def cmd_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    # memory stores ‚Äì wipe
    MEM_USERS.pop(uid, None); MEM_PROFILES.pop(uid, None)
    # (Sheets —É–¥–∞–ª—è—Ç—å –Ω–µ –±—É–¥–µ–º ‚Äî –º—è–≥–∫–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞)
    await update.message.reply_text(T[lang]["deleted"])

def _fmt_profile_brief(lang: str, p: dict) -> str:
    pref = personalized_prefix(lang, p) or ""
    items = []
    sv = lambda f: localize_value(lang, f, (p.get(f) or ""))
    if p.get("diet_focus"): items.append(sv("diet_focus"))
    if p.get("activity"):   items.append(sv("activity"))
    if p.get("steps_target"): items.append(str(p.get("steps_target")))
    if p.get("habits"): items.append(str(p.get("habits")))
    brief = ", ".join([x for x in items if str(x).strip()])
    return (pref + ("\n" + brief if brief else "")).strip()

async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    p = profiles_get(uid) or {}
    if not p: 
        await update.message.reply_text({"ru":"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –ø—É—Å—Ç.","uk":"–ü—Ä–æ—Ñ—ñ–ª—å –ø–æ—Ä–æ–∂–Ω—ñ–π.","en":"Profile is empty.","es":"Perfil vac√≠o."}[lang])
    else:
        await update.message.reply_text(_fmt_profile_brief(lang, p))

# ---------- Time & scheduling commands ----------
async def cmd_settz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    if not context.args:
        await update.message.reply_text({"ru":"–ü—Ä–∏–º–µ—Ä: /settz +3","uk":"–ü—Ä–∏–∫–ª–∞–¥: /settz +3","en":"Example: /settz +3","es":"Ej.: /settz +3"}[lang]); return
    off = _parse_tz(context.args[0])
    if off is None:
        await update.message.reply_text({"ru":"–í–≤–µ–¥–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä +3 –∏–ª–∏ -5.","uk":"–í–≤–µ–¥—ñ—Ç—å –∑—Å—É–≤, –Ω–∞–ø—Ä. +3 –∞–±–æ -5.","en":"Enter offset like +3 or -5.","es":"Introduce offset como +3 o -5."}[lang]); return
    users_set(uid, "tz_offset", str(off))
    await update.message.reply_text({"ru":f"–ß–∞—Å–æ–≤–æ–π —Å–¥–≤–∏–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {off}","uk":f"–ó—Å—É–≤ —á–∞—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {off}","en":f"Time offset saved: {off}","es":f"Offset guardado: {off}"}[lang])

async def cmd_checkin_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    hhmm = context.args[0] if context.args else DEFAULT_CHECKIN_LOCAL
    if hhmm_tuple(hhmm) is None: hhmm = DEFAULT_CHECKIN_LOCAL
    users_set(uid, "checkin_hour", hhmm)
    schedule_daily_checkin(context.application, uid, _user_tz_off(uid), hhmm, lang)
    await update.message.reply_text({"ru":f"–£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω –≤ {hhmm}.","uk":f"–†–∞–Ω–∫–æ–≤–∏–π —á–µ–∫-—ñ–Ω –æ {hhmm}.","en":f"Morning check-in at {hhmm}.","es":f"Check-in matutino a las {hhmm}."}[lang])

async def cmd_checkin_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    _remove_jobs(context.application, f"gm_{uid}")
    await update.message.reply_text({"ru":"–£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω.","uk":"–†–∞–Ω–∫–æ–≤–∏–π —á–µ–∫-—ñ–Ω –≤–∏–º–∫–Ω–µ–Ω–æ.","en":"Morning check-in disabled.","es":"Check-in matutino desactivado."}[_user_lang(uid)])

async def cmd_evening_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    hhmm = context.args[0] if context.args else DEFAULT_EVENING_LOCAL
    users_set(uid, "evening_hour", hhmm)
    schedule_evening_checkin(context.application, uid, _user_tz_off(uid), hhmm, lang)
    await update.message.reply_text(T[lang]["evening_set"].format(t=hhmm))

async def cmd_evening_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    _remove_jobs(context.application, f"eve_{uid}")
    await update.message.reply_text(T[_user_lang(uid)]["evening_off"])

# ---------- Quick Commands ----------
async def cmd_health60(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    sessions.setdefault(uid, {})["awaiting_h60_text"] = True
    await update.message.reply_text(T[lang]["h60_intro"])

async def cmd_hydrate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    await update.message.reply_text(T[lang]["hydrate_nudge"])
    tip = _challenge_tick(uid)
    if tip: await update.message.reply_text(tip)

async def cmd_skintip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    p = profiles_get(uid) or {}
    try: age = int(re.search(r"\d+", str(p.get("age","") or "0")).group(0))
    except: age = 30
    await update.message.reply_text(_get_skin_tip(lang, p.get("sex",""), age))

async def cmd_energy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(str(i), callback_data=f"energy|{i}") for i in range(1,6)]])
    await update.message.reply_text(T[lang]["gm_energy_q"], reply_markup=kb)

async def cmd_cycle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang]["yes"], callback_data="cycle|consent|yes"),
                                InlineKeyboardButton(T[lang]["no"],  callback_data="cycle|consent|no")]])
    await update.message.reply_text(T[lang]["cycle_consent"], reply_markup=kb)

async def cmd_youth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    if not challenge_get(uid):
        challenge_start(uid, "water7", 7)
        await update.message.reply_text(T[lang]["challenge_started"])
    await update.message.reply_text(T[lang]["challenge_progress"].format(d=int(challenge_get(uid).get("days_done","0")), len=int(challenge_get(uid).get("length_days","7"))))

# ---------- Quiet hours via callback ----------
async def cmd_quiet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    sessions.setdefault(uid, {})["await_quiet"] = True
    await update.message.reply_text(T[lang]["ask_quiet"])

# ---------- Override jobs to respect pause flag ----------
async def job_gm(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}; uid = d.get("user_id"); 
    if (users_get(uid) or {}).get("paused") == "yes": return
    lang = _user_lang(uid)
    if not _auto_allowed(uid): return
    local_now = user_local_now(uid)
    if adjust_out_of_quiet(local_now, _user_quiet_hours(uid)) != local_now: return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["gm_excellent"], callback_data="gm|mood|excellent"),
         InlineKeyboardButton(T[lang]["gm_ok"],        callback_data="gm|mood|ok")],
        [InlineKeyboardButton(T[lang]["gm_tired"],     callback_data="gm|mood|tired"),
         InlineKeyboardButton(T[lang]["gm_pain"],      callback_data="gm|mood|pain")],
        [InlineKeyboardButton(T[lang]["gm_skip"],      callback_data="gm|skip")],
        [InlineKeyboardButton(T[lang]["mood_note"],    callback_data="gm|note")]
    ])
    try:
        await context.bot.send_message(uid, T[lang]["daily_gm"], reply_markup=kb)
        _auto_inc(uid)
    except Exception as e:
        logging.warning(f"job_gm send failed: {e}")

async def job_evening(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}; uid = d.get("user_id")
    if (users_get(uid) or {}).get("paused") == "yes": return
    lang = _user_lang(uid)
    if not _auto_allowed(uid): return
    local_now = user_local_now(uid)
    if adjust_out_of_quiet(local_now, _user_quiet_hours(uid)) != local_now: return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["evening_tip_btn"], callback_data="eve|tip")],
        [InlineKeyboardButton(T[lang]["hydrate_btn"],     callback_data="water|nudge")]
    ])
    try:
        await context.bot.send_message(uid, T[lang]["evening_intro"], reply_markup=kb)
        _auto_inc(uid)
    except Exception as e:
        logging.warning(f"job_evening send failed: {e}")

# ---------- Callback handler (extend) ----------
async def cb_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q: return
    await q.answer()
    uid = q.from_user.id
    lang = _lang_for_cb(uid)
    data = (q.data or "")
    parts = data.split("|")
    kind = parts[0]

    # MINI-INTAKE
    if kind == "mini":
        action = parts[1]; key = parts[2]
        if action == "choose":
            val = parts[3]; mini_handle_choice(uid, key, val)
            await ask_next_mini(context, q.message.chat_id, lang, uid); return
        if action == "write":
            s = sessions.setdefault(uid, {}); s["mini_wait_key"] = key
            await q.message.reply_text(T[lang]["write"]); return
        if action == "skip":
            mini_handle_choice(uid, key, ""); await ask_next_mini(context, q.message.chat_id, lang, uid); return

    # MENU shortcuts
    if kind == "menu":
        sub = parts[1]
        if sub == "h60":
            sessions.setdefault(uid, {})["awaiting_h60_text"] = True
            await q.message.reply_text(T[lang]["h60_intro"]); return
        if sub == "rem":
            # quick 4h reminder
            rid = schedule_oneoff_local(context.application, uid, 4, {"ru":"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ","uk":"–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è","en":"Check how I feel","es":"Revisar c√≥mo me siento"}[lang])
            await q.message.reply_text({"ru":"–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ ~4 —á–∞—Å–∞.","uk":"–ù–∞–≥–∞–¥–∞—é –∑–∞ ~4 –≥–æ–¥–∏–Ω–∏.","en":"I‚Äôll remind you in ~4 hours.","es":"Te recordar√© en ~4 horas."}[lang]); return
        if sub == "lab":
            await q.message.reply_text({"ru":"üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: –ø–æ–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –î–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ.","uk":"üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—è: –∫–æ—Ä–æ—Ç–∫—ñ –ø–æ—Ä–∞–¥–∏. –î–æ–¥–∞–º–æ –ø—ñ–∑–Ω—ñ—à–µ.","en":"üß™ Labs: short guidance for now. More later.","es":"üß™ Laboratorio: gu√≠a corta por ahora. M√°s tarde."}[lang]); return
        if sub == "er":
            await q.message.reply_text({"ru":"üöë –ï—Å–ª–∏ —Å–∏–ª—å–Ω–∞—è –±–æ–ª—å –≤ –≥—Ä—É–¥–∏, —Å–ª–∞–±–æ—Å—Ç—å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –ø–æ—Ç–µ—Ä—è —Å–æ–∑–Ω–∞–Ω–∏—è ‚Äî —Å—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é.","uk":"üöë –°–∏–ª—å–Ω–∏–π –±—ñ–ª—å —É –≥—Ä—É–¥—è—Ö, —Å–ª–∞–±–∫—ñ—Å—Ç—å –æ–¥–Ω—ñ—î—ó —Å—Ç–æ—Ä–æ–Ω–∏, –≤—Ç—Ä–∞—Ç–∞ —Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ ‚Äî –≤–∏–∫–ª–∏–∫–∞–π—Ç–µ —à–≤–∏–¥–∫—É.","en":"üöë Severe chest pain, one-sided weakness, fainting ‚Äî call emergency.","es":"üöë Dolor tor√°cico intenso, debilidad unilateral, desmayo ‚Äî emergencias."}[lang]); return

    # GM mood/skip/note
    if kind == "gm":
        sub = parts[1]
        if sub == "mood":
            mood = parts[2]
            daily_add(iso(utcnow()), uid, mood=mood, comment="")
            tip = tiny_care_tip(lang, mood, profiles_get(uid) or {})
            await q.message.reply_text(tip)
            streak_msg = streak_update(uid)
            if streak_msg: await q.message.reply_text(streak_msg)
            # Quick actions after mood
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton(T[lang]["act_rem_4h"],  callback_data="rem|4h"),
                 InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="rem|eve"),
                 InlineKeyboardButton(T[lang]["act_rem_morn"],callback_data="rem|morn")],
                [InlineKeyboardButton(T[lang]["act_ex_neck"], callback_data="yt|neck"),
                 InlineKeyboardButton(T[lang]["act_save_episode"], callback_data=f"ep|save|{episode_create(uid,'general',severity=5)}")]
            ])
            await q.message.reply_text(T[lang]["mood_thanks"], reply_markup=kb)
            return
        if sub == "note":
            sessions.setdefault(uid, {})["await_gm_note"] = True
            await q.message.reply_text(T[lang]["fb_write"]); return
        if sub == "skip":
            daily_add(iso(utcnow()), uid, mood="skip")
            await q.message.reply_text(T[lang]["thanks"]); return

    # Energy quick scale 1..5
    if kind == "energy":
        try:
            e = int(parts[1]); e = max(1, min(5, e))
        except: e = 3
        daily_add(iso(utcnow()), uid, energy=e)
        await q.message.reply_text(T[lang]["gm_energy_done"]); return

    # Evening
    if kind == "eve" and parts[1] == "tip":
        p = profiles_get(uid) or {}
        await q.message.reply_text(build_care_nudge(uid, lang)); return

    # Water nudge
    if kind == "water" and parts[1] == "nudge":
        await q.message.reply_text(T[lang]["hydrate_nudge"])
        tip = _challenge_tick(uid)
        if tip: await q.message.reply_text(tip)
        return

    # Reminders quick
    if kind == "rem":
        when = parts[1]
        if when == "4h":
            schedule_oneoff_local(context.application, uid, 4, {"ru":"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è","uk":"–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è","en":"Check-in on symptoms","es":"Revisar s√≠ntomas"}[lang])
        elif when == "eve":
            # schedule ~18:30 local
            h, m = hhmm_tuple(DEFAULT_EVENING_LOCAL)
            now = user_local_now(uid)
            target = now.replace(hour=h, minute=m) + timedelta(minutes=5)
            delay = max(0.5, (target - now).total_seconds()/3600.0)
            schedule_oneoff_local(context.application, uid, delay, {"ru":"–õ—ë–≥–∫–∞—è –≤–µ—á–µ—Ä–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞","uk":"–õ–µ–≥–∫–∞ –≤–µ—á—ñ—Ä–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞","en":"Gentle evening check","es":"Revisi√≥n vespertina suave"}[lang])
        elif when == "morn":
            h, m = hhmm_tuple(DEFAULT_CHECKIN_LOCAL)
            now = user_local_now(uid).replace(hour=h, minute=m) + timedelta(days=1)
            delay = max(0.5, (now - user_local_now(uid)).total_seconds()/3600.0)
            schedule_oneoff_local(context.application, uid, delay, {"ru":"–£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω","uk":"–†–∞–Ω–∫–æ–≤–∏–π —á–µ–∫-—ñ–Ω","en":"Morning check-in","es":"Check-in matutino"}[lang])
        await q.message.reply_text(T[lang]["thanks"]); return

    # Cycle tracking
    if kind == "cycle":
        sub = parts[1]
        if sub == "consent":
            if parts[2] == "yes":
                sessions.setdefault(uid, {})["await_cycle_last"] = True
                await q.message.reply_text(T[lang]["cycle_ask_last"]); return
            else:
                profiles_upsert(uid, {"cycle_enabled":"no"})
                await q.message.reply_text(T[lang]["thanks"]); return

    # Quiet hours (ask/save via text ‚Äì handled in on_text)
    if kind == "quiet":
        if parts[1] == "ask":
            sessions.setdefault(uid, {})["await_quiet"] = True
            await q.message.reply_text(T[lang]["ask_quiet"]); return

    # Episode save handled in Part 1 override too
    if kind == "ep" and parts[1] == "save":
        eid = parts[2]
        try: episode_set(eid, "status", "closed")
        except: pass
        await q.message.reply_text({"ru":"–≠–ø–∏–∑–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ","uk":"–ï–ø—ñ–∑–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ","en":"Episode saved ‚úÖ","es":"Episodio guardado ‚úÖ"}[lang]); return

    # YouTube neck routine
    if kind == "yt" and parts[1] == "neck":
        txt = {
            "ru":"üßò 3‚Äì5 –º–∏–Ω—É—Ç: –º—è–≥–∫–∏–µ –∫—Ä—É–≥–∏ –ø–ª–µ—á–∞–º–∏, –Ω–∞–∫–ª–æ–Ω—ã –≥–æ–ª–æ–≤—ã, ¬´–ø–æ–¥–±–æ—Ä –¥–≤–æ–π–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞¬ª, –ª—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ —Ç—Ä–∞–ø–µ—Ü–∏–π. –ë–µ–∑ –±–æ–ª–∏.",
            "uk":"üßò 3‚Äì5 —Ö–≤: –º‚Äô—è–∫—ñ –∫–æ–ª–∞ –ø–ª–µ—á–∏–º–∞, –Ω–∞—Ö–∏–ª–∏ –≥–æ–ª–æ–≤–∏, ¬´–ø—ñ–¥–±—ñ—Ä –ø—ñ–¥–±–æ—Ä—ñ–¥–¥—è¬ª, –ª–µ–≥–∫–∞ —Ä–æ–∑—Ç—è–∂–∫–∞ —Ç—Ä–∞–ø–µ—Ü—ñ–π. –ë–µ–∑ –±–æ–ª—é.",
            "en":"üßò 3‚Äì5 min: shoulder rolls, gentle neck tilts, chin tucks, light upper-trap stretch. Pain-free.",
            "es":"üßò 3‚Äì5 min: c√≠rculos de hombros, inclinaciones de cuello, retracciones de ment√≥n, estiramiento trapecio. Sin dolor.",
        }[lang]
        await q.message.reply_text(txt); return

# ---------- Text handler (autodetect + flows) ----------
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return
    uid = update.effective_user.id
    raw = (update.message.text or "").strip()

    # 1) soft language update
    lang = _update_msg_lang(uid, raw)

    # 2) guard: awaiting special inputs
    s = sessions.setdefault(uid, {})

    # mini-intake free-write
    if s.get("mini_wait_key"):
        key = s.pop("mini_wait_key")
        mini_handle_choice(uid, key, raw)
        await ask_next_mini(context, update.effective_chat.id, lang, uid)
        return

    # gm comment
    if s.get("await_gm_note"):
        s["await_gm_note"] = False
        daily_add(iso(utcnow()), uid, comment=raw)
        await update.message.reply_text(T[lang]["thanks"])
        await show_quickbar(context, update.effective_chat.id, lang, uid)
        return

    # cycle last date
    if s.get("await_cycle_last"):
        if re.match(r"^\d{4}-\d{2}-\d{2}$", raw):
            profiles_upsert(uid, {"cycle_enabled":"yes","cycle_last_date":raw})
            s["await_cycle_last"] = False
            s["await_cycle_len"] = True
            await update.message.reply_text(T[lang]["cycle_ask_len"])
        else:
            await update.message.reply_text({"ru":"–§–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î.","uk":"–§–æ—Ä–º–∞—Ç –†–†–†–†-–ú–ú-–î–î.","en":"Use YYYY-MM-DD.","es":"Formato AAAA-MM-DD."}[lang])
        return
    if s.get("await_cycle_len"):
        try:
            n = int(re.sub(r"\D+","", raw)); n = max(24, min(40, n))
            profiles_upsert(uid, {"cycle_avg_len":str(n)})
            s["await_cycle_len"] = False
            await update.message.reply_text(T[lang]["cycle_saved"])
        except Exception:
            await update.message.reply_text({"ru":"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (24‚Äì40).","uk":"–í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ (24‚Äì40).","en":"Enter a number (24‚Äì40).","es":"Introduce un n√∫mero (24‚Äì40)."}[lang])
        return

    # quiet hours
    if s.get("await_quiet"):
        q = _parse_quiet(raw)
        if q:
            profiles_upsert(uid, {"quiet_hours": q})
            s["await_quiet"] = False
            await update.message.reply_text(T[lang]["quiet_saved"].format(qh=q))
        else:
            await update.message.reply_text({"ru":"–§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú-–ß–ß:–ú–ú","uk":"–§–æ—Ä–º–∞—Ç –ì–ì:–•–•-–ì–ì:–•–•","en":"Format HH:MM-HH:MM","es":"Formato HH:MM-HH:MM"}[lang])
        return

    # 3) learn habits from free text
    try: learn_from_text(uid, raw)
    except Exception: pass

    # 4) Health60 awaited symptom text
    if s.get("awaiting_h60_text"):
        s["awaiting_h60_text"] = False
        plan = health60_make_plan(lang, raw, profiles_get(uid) or {})
        pref = personalized_prefix(lang, profiles_get(uid) or {})
        msg = (pref + ("\n\n" if pref else "") + plan).strip()
        await update.message.reply_text(msg)
        # feedback buttons
        fbkb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang]["fb_good"], callback_data="fb|good"),
                                      InlineKeyboardButton(T[lang]["fb_bad"],  callback_data="fb|bad")],
                                     [InlineKeyboardButton(T[lang]["fb_free"], callback_data="fb|free")]])
        await update.message.reply_text(T[lang]["ask_fb"], reply_markup=fbkb)
        await show_quickbar(context, update.effective_chat.id, lang, uid)
        return

    # 5) Lightweight triage entry from symptom-like messages
    low = raw.lower()
    symptomish = any(k in low for k in [
        "–±–æ–ª–∏—Ç","–±–æ–ª—å","—Ç–æ—à–Ω–æ","—Ä–≤–µ—Ç","—Ä–≤–æ—Ç–∞","–∫–∞—à–µ–ª—å","—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä","–º–∏–≥—Ä–µ–Ω—å","–≥–æ–ª–æ–≤–∞","–≥–æ–ª–æ–≤–Ω–∞—è",
        "pain","ache","nausea","vomit","cough","fever","headache","migraine","dolor","fiebre","n√°usea"
    ])
    if symptomish and not s.get("tri",{}).get("step"):
        await _tri_start(update.effective_chat.id, uid, lang, context.bot)
        if profile_is_incomplete(profiles_get(uid) or {}):
            kb = InlineKeyboardMarkup([[InlineKeyboardButton(
                {"ru":"üß© –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (40—Å)","uk":"üß© –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å (40—Å)","en":"üß© Fill profile (40s)","es":"üß© Completar perfil (40s)"}[lang],
                callback_data="intake:start")]])
            await update.message.reply_text({"ru":"–ß—Ç–æ–±—ã —Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-–æ–ø—Ä–æ—Å.",
                                             "uk":"–©–æ–± –ø–æ—Ä–∞–¥–∏ –±—É–ª–∏ —Ç–æ—á–Ω—ñ—à—ñ ‚Äî –º–æ–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ –º—ñ–Ω—ñ-–æ–ø–∏—Ç–Ω–∏–∫.",
                                             "en":"For sharper tips, you can take a quick mini-intake.",
                                             "es":"Para consejos m√°s precisos ‚Äî haz el mini-intake."}[lang], reply_markup=kb)
        return

    # 6) Router (LLM/offline) fallback for general questions
    data = llm_router_answer(raw, lang, profiles_get(uid) or {})
    reply = (personalized_prefix(lang, profiles_get(uid) or "") + ("\n\n" if personalized_prefix(lang, profiles_get(uid) or "") else "") + data.get("assistant_reply","")).strip()
    await update.message.reply_text(reply)
    await show_quickbar(context, update.effective_chat.id, lang, uid)

# ---------- Feedback (via callback) ----------
async def cb_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q: return
    await q.answer()
    uid = q.from_user.id; lang = _lang_for_cb(uid)
    data = (q.data or "")
    parts = data.split("|")
    if parts[0] != "fb": return
    if parts[1] in {"good","bad"}:
        feedback_add(iso(utcnow()), uid, q.from_user.full_name, q.from_user.username or "", parts[1], "")
        await q.message.reply_text(T[lang]["fb_thanks"])
    elif parts[1] == "free":
        sessions.setdefault(uid, {})["await_free_fb"] = True
        await q.message.reply_text(T[lang]["fb_write"])

async def on_text_feedback_free(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return
    uid = update.effective_user.id
    if sessions.setdefault(uid, {}).get("await_free_fb"):
        lang = _user_lang(uid)
        sessions[uid]["await_free_fb"] = False
        feedback_add(iso(utcnow()), uid, update.effective_user.full_name, update.effective_user.username or "", "free", (update.message.text or "").strip())
        await update.message.reply_text(T[lang]["fb_thanks"])

# ---------- Handlers wiring ----------
def build_app() -> Application:
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # Commands
    app.add_handler(CommandHandler("start",    cmd_start))
    app.add_handler(CommandHandler("help",     cmd_help))
    app.add_handler(CommandHandler("privacy",  cmd_privacy))
    app.add_handler(CommandHandler("pause",    cmd_pause))
    app.add_handler(CommandHandler("resume",   cmd_resume))
    app.add_handler(CommandHandler("delete_data", cmd_delete))
    app.add_handler(CommandHandler("profile",  cmd_profile))

    app.add_handler(CommandHandler("settz",    cmd_settz))
    app.add_handler(CommandHandler("checkin_on",  cmd_checkin_on))
    app.add_handler(CommandHandler("checkin_off", cmd_checkin_off))
    app.add_handler(CommandHandler("evening_on",  cmd_evening_on))
    app.add_handler(CommandHandler("evening_off", cmd_evening_off))
    app.add_handler(CommandHandler("quiet",    cmd_quiet))

    app.add_handler(CommandHandler("health60", cmd_health60))
    app.add_handler(CommandHandler("hydrate",  cmd_hydrate))
    app.add_handler(CommandHandler("skintip",  cmd_skintip))
    app.add_handler(CommandHandler("energy",   cmd_energy))
    app.add_handler(CommandHandler("cycle",    cmd_cycle))
    app.add_handler(CommandHandler("youth",    cmd_youth))

    app.add_handler(CommandHandler("ru", cmd_ru))
    app.add_handler(CommandHandler("en", cmd_en))
    app.add_handler(CommandHandler("uk", cmd_uk))
    app.add_handler(CommandHandler("es", cmd_es))

    # Callbacks
    app.add_handler(CallbackQueryHandler(cb_feedback, pattern=r"^fb\|"))
    app.add_handler(CallbackQueryHandler(cb_handler))  # catch-all extended (mini/menu/gm/tri/etc.)

    # Text handlers ‚Äî order matters
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text_feedback_free))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    return app

# ---------- Entry ----------
def main():
    app = build_app()
    logging.info("==> Running 'python main.py'")
    app.run_polling()
