# -*- coding: utf-8 -*-
# TendAI main.py ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–æ: –ª–∏–º–∏—Ç–µ—Ä/—Ç–∏—Ö–∏–µ —á–∞—Å—ã, —É—Ç—Ä–æ+–≤–µ—á–µ—Ä, Youth-–∫–æ–º–∞–Ω–¥—ã,
# –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ headers –¥–ª—è Sheets, Rules (evidence), –º—è–≥–∫–∏–π —Ñ–∏–¥–±–µ–∫, –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è (1 —Ä–∞–∑),
# —Ç—ë–ø–ª—ã–π —Ç–æ–Ω (–º—ã—Å–ª—å‚Üí–≤–æ–ø—Ä–æ—Å), 3 –ø—Ä–µ—Å–µ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã,
# –ê–í–¢–û-–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –û–ü–†–û–°–ù–ò–ö–ê –° –ü–ï–†–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø + —à–∞–≥–∏ height_cm/weight_kg/supplements

import os, re, json, uuid, logging, random
from datetime import datetime, timedelta, timezone, time as dtime, date
from typing import List, Tuple, Dict, Optional, Any
from difflib import SequenceMatcher

from dotenv import load_dotenv
from langdetect import detect, DetectorFactory

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# --- SAFE import of optional PRO-intake plugin ---
try:
    from intake_pro import register_intake_pro  # noqa: F401
    HAVE_INTAKE_PRO = True
except Exception:
    HAVE_INTAKE_PRO = False
    def register_intake_pro(app, gclient=None, on_complete_cb=None):
        logging.warning("intake_pro not found ‚Äî PRO-–æ–ø—Ä–æ—Å –æ—Ç–∫–ª—é—á—ë–Ω –Ω–∞ —ç—Ç–æ–º –¥–µ–ø–ª–æ–µ.")
        async def _fallback_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
            q = update.callback_query
            await q.answer()
            await q.message.reply_text(
                "PRO-–æ–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–º –¥–µ–ø–ª–æ–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile."
            )
        app.add_handler(CallbackQueryHandler(_fallback_cb, pattern=r"^intake:"))

from openai import OpenAI

# ---------- Google Sheets (robust + memory fallback) ----------
import gspread
from gspread.exceptions import SpreadsheetNotFound
import gspread.utils as gsu
from oauth2client.service_account import ServiceAccountCredentials

# ---------------- Boot & Config ----------------
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
DetectorFactory.seed = 0

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")

SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Sheets")
SHEET_ID = os.getenv("SHEET_ID", "")
ALLOW_CREATE_SHEET = os.getenv("ALLOW_CREATE_SHEET", "0") == "1"
DEFAULT_CHECKIN_LOCAL = "08:30"

oai: Optional[OpenAI] = None
try:
    if OPENAI_API_KEY:
        os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
    oai = OpenAI()
except Exception as e:
    logging.error(f"OpenAI init error: {e}")
    oai = None

# ---------------- i18n ----------------
SUPPORTED = {"ru", "en", "uk", "es"}

def norm_lang(code: Optional[str]) -> str:
    if not code:
        return "en"
    c = code.split("-")[0].lower()
    return c if c in SUPPORTED else "en"

T = {
    "en": {
        "welcome": "Hi! I‚Äôm TendAI ‚Äî your health & longevity assistant.\nDescribe what‚Äôs bothering you; I‚Äôll guide you. Let‚Äôs do a quick 40s intake to tailor advice.",
        "help": "Short checkups, 24‚Äì48h plans, reminders, daily check-ins.\nCommands: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +2 /health60 /energy /mood /water /skin /ru /uk /en /es",
        "privacy": "TendAI is not a medical service and can‚Äôt replace a doctor. We store minimal data for reminders. /delete_data to erase.",
        "paused_on": "Notifications paused. Use /resume to enable.",
        "paused_off": "Notifications resumed.",
        "deleted": "All your data was deleted. Use /start to begin again.",
        "ask_consent": "May I send you a follow-up to check how you feel later?",
        "yes":"Yes","no":"No",
        "unknown":"I need a bit more info: where exactly and for how long?",
        "profile_intro":"Quick intake (~40s). Use buttons or type your answer.",
        "p_step_1":"Step 1/10. Sex:",
        "p_step_2":"Step 2/10. Age:",
        "p_step_3":"Step 3/10. Height (cm):",
        "p_step_4":"Step 4/10. Weight (kg):",
        "p_step_5":"Step 5/10. Main goal:",
        "p_step_6":"Step 6/10. Chronic conditions:",
        "p_step_7":"Step 7/10. Meds:",
        "p_step_8":"Step 8/10. Supplements:",
        "p_step_9":"Step 9/10. Sleep (bed/wake, e.g., 23:30/07:00):",
        "p_step_10":"Step 10/10. Activity:",
        "write":"‚úçÔ∏è Write",
        "skip":"‚è≠Ô∏è Skip",
        "saved_profile":"Saved: ",
        "start_where":"Where do you want to start now? (symptom/sleep/nutrition/labs/habits/longevity)",
        "daily_gm":"Good morning! Quick daily check-in:",
        "daily_pm":"Evening check-in: how was your day?",
        "mood_good":"üòÉ Good","mood_ok":"üòê Okay","mood_bad":"üò£ Poor","mood_note":"‚úçÔ∏è Comment",
        "mood_thanks":"Thanks! Have a smooth day üëã",
        "triage_pain_q1":"Where does it hurt?",
        "triage_pain_q1_opts":["Head","Throat","Back","Belly","Other"],
        "triage_pain_q2":"What kind of pain?",
        "triage_pain_q2_opts":["Dull","Sharp","Pulsating","Pressing"],
        "triage_pain_q3":"How long has it lasted?",
        "triage_pain_q3_opts":["<3h","3‚Äì24h",">1 day",">1 week"],
        "triage_pain_q4":"Rate the pain (0‚Äì10):",
        "triage_pain_q5":"Any of these now?",
        "triage_pain_q5_opts":["High fever","Vomiting","Weakness/numbness","Speech/vision problems","Trauma","None"],
        "plan_header":"Your 24‚Äì48h plan:",
        "plan_accept":"Will you try this today?",
        "accept_opts":["‚úÖ Yes","üîÅ Later","‚úñÔ∏è No"],
        "remind_when":"When shall I check on you?",
        "remind_opts":["in 4h","this evening","tomorrow morning","no need"],
        "thanks":"Got it üôå",
        "checkin_ping":"Quick check-in: how is it now (0‚Äì10)?",
        "checkin_better":"Nice! Keep it up üí™",
        "checkin_worse":"Sorry to hear. If any red flags or pain ‚â•7/10 ‚Äî consider medical help.",
        "act_rem_2h":"‚è∞ Remind in 2h",
        "act_rem_4h":"‚è∞ Remind in 4h",
        "act_rem_eve":"‚è∞ This evening",
        "act_rem_morn":"‚è∞ Tomorrow morning",
        "act_save_episode":"üíæ Save as episode",
        "act_ex_neck":"üßò 5-min neck routine",
        "act_find_lab":"üß™ Find a lab",
        "act_er":"üöë Emergency info",
        "act_city_prompt":"Type your city/area so I can suggest a lab (text only).",
        "act_saved":"Saved.",
        "er_text":"If symptoms worsen, severe shortness of breath, chest pain, confusion, or persistent high fever ‚Äî seek urgent care/emergency.",
        "px":"Considering your profile: {sex}, {age}y; goal ‚Äî {goal}.",
        "back":"‚óÄ Back",
        "exit":"Exit",
        "ask_fb":"Was this helpful?",
        "fb_thanks":"Thanks for your feedback! ‚úÖ",
        "fb_write":"Write a short feedback message:",
        "fb_good":"üëç Like",
        "fb_bad":"üëé Dislike",
        "fb_free":"üìù Feedback",
        "h60_btn": "Health in 60 seconds",
        "h60_intro": "Write briefly what bothers you (e.g., ‚Äúheadache‚Äù, ‚Äúfatigue‚Äù, ‚Äústomach pain‚Äù). I‚Äôll give you 3 key tips in 60 seconds.",
        "h60_t1": "Possible causes",
        "h60_t2": "Do now (next 24‚Äì48h)",
        "h60_t3": "When to see a doctor",
        "h60_serious": "Serious to rule out",
        # Youth quick labels
        "energy_title": "Energy for today:",
        "water_prompt": "Drink 300‚Äì500 ml of water. Remind in 2 hours?",
        "skin_title": "Skin/Body tip:"
    },
    "ru": {
        "welcome":"–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç; —è –ø–æ–¥—Å–∫–∞–∂—É. –°–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å (~40—Å), —á—Ç–æ–±—ã —Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ.",
        "help":"–ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã.\n–ö–æ–º–∞–Ω–¥—ã: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +3 /health60 /energy /mood /water /skin /ru /uk /en /es",
        "privacy":"TendAI –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞. –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. /delete_data ‚Äî —É–¥–∞–ª–∏—Ç—å.",
        "paused_on":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–∞—É–∑—É. /resume ‚Äî –≤–∫–ª—é—á–∏—Ç—å.",
        "paused_off":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.",
        "deleted":"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        "ask_consent":"–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã?",
        "yes":"–î–∞","no":"–ù–µ—Ç",
        "unknown":"–ù—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: –≥–¥–µ –∏–º–µ–Ω–Ω–æ –∏ —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?",
        "profile_intro":"–ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å (~40—Å). –ú–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç.",
        "p_step_1":"–®–∞–≥ 1/10. –ü–æ–ª:",
        "p_step_2":"–®–∞–≥ 2/10. –í–æ–∑—Ä–∞—Å—Ç:",
        "p_step_3":"–®–∞–≥ 3/10. –†–æ—Å—Ç (—Å–º):",
        "p_step_4":"–®–∞–≥ 4/10. –í–µ—Å (–∫–≥):",
        "p_step_5":"–®–∞–≥ 5/10. –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:",
        "p_step_6":"–®–∞–≥ 6/10. –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏:",
        "p_step_7":"–®–∞–≥ 7/10. –õ–µ–∫–∞—Ä—Å—Ç–≤–∞:",
        "p_step_8":"–®–∞–≥ 8/10. –î–æ–±–∞–≤–∫–∏:",
        "p_step_9":"–®–∞–≥ 9/10. –°–æ–Ω (–æ—Ç–±–æ–π/–ø–æ–¥—ä—ë–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        "p_step_10":"–®–∞–≥ 10/10. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:",
        "write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
        "skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "saved_profile":"–°–æ—Ö—Ä–∞–Ω–∏–ª: ",
        "start_where":"–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/–ø–∏—Ç–∞–Ω–∏–µ/–∞–Ω–∞–ª–∏–∑—ã/–ø—Ä–∏–≤—ã—á–∫–∏/–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ)",
        "daily_gm":"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ë—ã—Å—Ç—Ä—ã–π —á–µ–∫-–∏–Ω:",
        "daily_pm":"–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω: –∫–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å?",
        "mood_good":"üòÉ –•–æ—Ä–æ—à–æ","mood_ok":"üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ","mood_bad":"üò£ –ü–ª–æ—Ö–æ","mood_note":"‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        "mood_thanks":"–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üëã",
        "triage_pain_q1":"–ì–¥–µ –±–æ–ª–∏—Ç?",
        "triage_pain_q1_opts":["–ì–æ–ª–æ–≤–∞","–ì–æ—Ä–ª–æ","–°–ø–∏–Ω–∞","–ñ–∏–≤–æ—Ç","–î—Ä—É–≥–æ–µ"],
        "triage_pain_q2":"–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏?",
        "triage_pain_q2_opts":["–¢—É–ø–∞—è","–û—Å—Ç—Ä–∞—è","–ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è","–î–∞–≤—è—â–∞—è"],
        "triage_pain_q3":"–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è?",
        "triage_pain_q3_opts":["<3—á","3‚Äì24—á",">1 –¥–Ω—è",">1 –Ω–µ–¥–µ–ª–∏"],
        "triage_pain_q4":"–û—Ü–µ–Ω–∏—Ç–µ –±–æ–ª—å (0‚Äì10):",
        "triage_pain_q5":"–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–µ–π—á–∞—Å?",
        "triage_pain_q5_opts":["–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞","–†–≤–æ—Ç–∞","–°–ª–∞–±–æ—Å—Ç—å/–æ–Ω–µ–º–µ–Ω–∏–µ","–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è","–¢—Ä–∞–≤–º–∞","–ù–µ—Ç"],
        "plan_header":"–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á–∞—Å–æ–≤:",
        "plan_accept":"–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
        "accept_opts":["‚úÖ –î–∞","üîÅ –ü–æ–∑–∂–µ","‚úñÔ∏è –ù–µ—Ç"],
        "remind_when":"–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "remind_opts":["—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞","–≤–µ—á–µ—Ä–æ–º","–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º","–Ω–µ –Ω–∞–¥–æ"],
        "thanks":"–ü—Ä–∏–Ω—è—Ç–æ üôå",
        "checkin_ping":"–ö–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ 0‚Äì10?",
        "checkin_better":"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üí™",
        "checkin_worse":"–ï—Å–ª–∏ –µ—Å—Ç—å ¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª –∏–ª–∏ –±–æ–ª—å ‚â•7/10 ‚Äî –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        "act_rem_2h":"‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 2 —á",
        "act_rem_4h":"‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 4 —á",
        "act_rem_eve":"‚è∞ –°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º",
        "act_rem_morn":"‚è∞ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º",
        "act_save_episode":"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–ø–∏–∑–æ–¥",
        "act_ex_neck":"üßò 5-–º–∏–Ω —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —à–µ–∏",
        "act_find_lab":"üß™ –ù–∞–π—Ç–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é",
        "act_er":"üöë –ö–æ–≥–¥–∞ —Å—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é",
        "act_city_prompt":"–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥/—Ä–∞–π–æ–Ω, —á—Ç–æ–±—ã –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é (—Ç–µ–∫—Å—Ç–æ–º).",
        "act_saved":"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
        "er_text":"–ï—Å–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç, —Å–∏–ª—å–Ω–∞—è –æ–¥—ã—à–∫–∞, –±–æ–ª—å –≤ –≥—Ä—É–¥–∏, —Å–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å, —Å—Ç–æ–π–∫–∞—è –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∫ –Ω–µ–æ—Ç–ª–æ–∂–∫–µ/—Å–∫–æ—Ä–æ–π.",
        "px":"–° —É—á—ë—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è: {sex}, {age} –ª–µ—Ç; —Ü–µ–ª—å ‚Äî {goal}.",
        "back":"‚óÄ –ù–∞–∑–∞–¥",
        "exit":"–í—ã–π—Ç–∏",
        "ask_fb":"–≠—Ç–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ?",
        "fb_thanks":"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! ‚úÖ",
        "fb_write":"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        "fb_good":"üëç –ù—Ä–∞–≤–∏—Ç—Å—è",
        "fb_bad":"üëé –ù–µ –ø–æ–ª–µ–∑–Ω–æ",
        "fb_free":"üìù –û—Ç–∑—ã–≤",
        "h60_btn": "–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥",
        "h60_intro": "–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞¬ª, ¬´—É—Å—Ç–∞–ª–æ—Å—Ç—å¬ª, ¬´–±–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ¬ª). –Ø –¥–∞–º 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–≤–µ—Ç–∞ –∑–∞ 60 —Å–µ–∫—É–Ω–¥.",
        "h60_t1": "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã",
        "h60_t2": "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å (24‚Äì48 —á)",
        "h60_t3": "–ö–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É",
        "h60_serious": "–ß—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ–µ –∏—Å–∫–ª—é—á–∏—Ç—å",
        "energy_title": "–≠–Ω–µ—Ä–≥–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
        "water_prompt": "–í—ã–ø–µ–π 300‚Äì500 –º–ª –≤–æ–¥—ã. –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞?",
        "skin_title": "–°–æ–≤–µ—Ç –¥–ª—è –∫–æ–∂–∏/—Ç–µ–ª–∞:"
    }
}
# –ù–∞—Å–ª–µ–¥—É–µ–º uk –æ—Ç ru –∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ª–∏—á–∏—è
T["uk"] = {**T["ru"], **{
    "help": "–ö–æ—Ä–æ—Ç–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ–¥–µ–Ω–Ω—ñ —á–µ–∫-—ñ–Ω–∏.\n–ö–æ–º–∞–Ω–¥–∏: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +2 /health60 /energy /mood /water /skin /ru /uk /en /es",
    "daily_pm":"–í–µ—á—ñ—Ä–Ω—ñ–π —á–µ–∫-—ñ–Ω: —è–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å?",
    "act_rem_2h": "‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ 2 –≥–æ–¥",
    "energy_title": "–ï–Ω–µ—Ä–≥—ñ—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:",
    "water_prompt": "–í–∏–ø–∏–π 300‚Äì500 –º–ª –≤–æ–¥–∏. –ù–∞–≥–∞–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏?",
    "skin_title": "–î–æ–≥–ª—è–¥ –∑–∞ —à–∫—ñ—Ä–æ—é/—Ç—ñ–ª–æ–º:"
}}
T["es"] = T["en"]

# ---------------- Helpers ----------------
def utcnow():
    return datetime.now(timezone.utc)

def iso(dt: Optional[datetime]) -> str:
    return "" if not dt else dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def detect_lang_from_text(text: str, fallback: str) -> str:
    s = (text or "").strip()
    if not s:
        return fallback
    low = s.lower()
    if re.search(r"[–∞-—è—ë—ñ—ó—î“ë]", low):
        return "uk" if re.search(r"[—ñ—ó—î“ë]", low) else "ru"
    try:
        return norm_lang(detect(s))
    except Exception:
        return fallback

def profile_is_incomplete(profile_row: dict) -> bool:
    keys = ["sex","age","goal"]
    return sum(1 for k in keys if str(profile_row.get(k) or "").strip()) < 2

# ===== ONBOARDING GATE =====
GATE_FLAG_KEY = "menu_unlocked"

def _is_menu_unlocked(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if context.user_data.get(GATE_FLAG_KEY):
        return True
    prof = profiles_get(update.effective_user.id) or {}
    return not profile_is_incomplete(prof)

async def gate_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    kb = [
        [InlineKeyboardButton("üß© –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å (40‚Äì60 —Å–µ–∫)" if lang!="en" else "üß© Take the 40‚Äì60s intake", callback_data="intake:start")],
        [InlineKeyboardButton("‚û°Ô∏è –ü–æ–∑–∂–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é" if lang!="en" else "‚û°Ô∏è Later ‚Äî open menu", callback_data="gate:skip")],
    ]
    text = ("–ß—Ç–æ–±—ã —Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å. –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ."
            if lang!="en" else
            "To personalize answers, please take a short intake. You can skip and do it later.")
    await update.effective_chat.send_message(text, reply_markup=InlineKeyboardMarkup(kb))

async def gate_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "gate:skip":
        context.user_data[GATE_FLAG_KEY] = True
        await q.edit_message_text("–û–∫, –æ—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶" if context.user_data.get("lang","en")!="en" else "OK, opening the menu‚Ä¶")
        render_cb = context.application.bot_data.get("render_menu_cb")
        if callable(render_cb):
            await render_cb(update, context)
        else:
            await context.application.bot.send_message(q.message.chat_id, "/start")

async def _ipro_save_to_sheets_and_open_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, profile: dict):
    uid = update.effective_user.id
    profiles_upsert(uid, {
        "sex": profile.get("sex") or "",
        "age": profile.get("age") or "",
        "goal": profile.get("goal") or "",
        "conditions": ", ".join(sorted(profile.get("chronic", []))) if isinstance(profile.get("chronic"), set) else (profile.get("chronic") or ""),
        "meds": profile.get("meds") or "",
        "activity": profile.get("hab_activity") or "",
        "sleep": profile.get("hab_sleep") or "",
        "notes": ", ".join(sorted(profile.get("complaints", []))) if isinstance(profile.get("complaints"), set) else (profile.get("complaints") or ""),
    })
    # –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–Ω–Ω–µ—Ä –≤ —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç
    users_set(uid, "profile_banner_shown", "no")
    context.user_data[GATE_FLAG_KEY] = True
    render_cb = context.application.bot_data.get("render_menu_cb")
    if callable(render_cb):
        await render_cb(update, context)
    else:
        await context.application.bot.send_message(update.effective_chat.id, "/start")

# ---------- Anti-duplicate questions ----------
def _ratio(a: str, b: str) -> float:
    return SequenceMatcher(None, (a or "").lower(), (b or "").lower()).ratio()

def is_duplicate_question(uid: int, text: str, thresh: float = 0.93) -> bool:
    s = sessions.setdefault(uid, {})
    asked = s.setdefault("asked_prompts", [])
    for prev in asked[-4:]:
        if _ratio(prev, text) >= thresh:
            return True
    asked.append(text)
    if len(asked) > 16:
        s["asked_prompts"] = asked[-16:]
    return False

async def send_unique(msg_obj, uid: int, text: str, reply_markup=None, force: bool = False):
    if force or not is_duplicate_question(uid, text):
        await msg_obj.reply_text(text, reply_markup=reply_markup)

# -------- Sheets (with memory fallback) --------
SHEETS_ENABLED = True
ss = None
ws_feedback = ws_users = ws_profiles = ws_episodes = ws_reminders = ws_daily = ws_rules = None

# === Canonical headers + safe reader ===
USERS_HEADERS = [
    "user_id","username","lang","consent","tz_offset","checkin_hour","paused",
    "quiet_hours","last_sent_utc","sent_today","streak","challenge_id","challenge_day",
    # –º—è–≥–∫–∏–π —Ñ–∏–¥–±–µ–∫ –∏ –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è
    "last_fb_asked","profile_banner_shown"
]
PROFILES_HEADERS = ["user_id","sex","age","goal","conditions","meds","allergies","sleep","activity","diet","notes","updated_at","goals","diet_focus","steps_target","cycle_enabled","cycle_last_date","cycle_avg_len",
                    # –Ω–æ–≤—ã–µ –ø–æ–ª—è
                    "height_cm","weight_kg","supplements"]
EPISODES_HEADERS = ["episode_id","user_id","topic","started_at","baseline_severity","red_flags","plan_accepted","target","reminder_at","next_checkin_at","status","last_update","notes"]
REMINDERS_HEADERS = ["id","user_id","text","when_utc","created_at","status"]
DAILY_HEADERS = ["timestamp","user_id","mood","comment"]
FEEDBACK_HEADERS = ["timestamp","user_id","name","username","rating","comment"]
RULES_HEADERS = ["rule_id","domain","segment","lang","text","citations"]

def ws_records(ws, expected_headers):
    try:
        return ws.get_all_records(expected_headers=expected_headers, default_blank="")
    except Exception as e:
        logging.error(f"ws_records fallback ({getattr(ws,'title','?')}): {e}")
        vals = ws.get_all_values()
        if not vals: return []
        body = vals[1:]
        out = []
        for row in body:
            row = (row + [""] * len(expected_headers))[:len(expected_headers)]
            out.append({h: row[i] for i, h in enumerate(expected_headers)})
        return out

# === –°–æ—Ö—Ä–∞–Ω—è–µ–º gspread client –∏ id —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è register_intake_pro ===
GSPREAD_CLIENT: Optional[gspread.client.Client] = None
SPREADSHEET_ID_FOR_INTAKE: str = ""

def _sheets_init():
    global SHEETS_ENABLED, ss, ws_feedback, ws_users, ws_profiles, ws_episodes, ws_reminders, ws_daily, ws_rules
    global GSPREAD_CLIENT, SPREADSHEET_ID_FOR_INTAKE
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if not creds_json:
            raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
        creds = json.loads(creds_json)
        credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds, scope)
        gclient = gspread.authorize(credentials)
        GSPREAD_CLIENT = gclient

        try:
            ss = gclient.open_by_key(SHEET_ID) if SHEET_ID else gclient.open(SHEET_NAME)
        except SpreadsheetNotFound:
            if ALLOW_CREATE_SHEET:
                ss = gclient.create(SHEET_NAME)
            else:
                raise

        try:
            SPREADSHEET_ID_FOR_INTAKE = ss.id
        except Exception:
            SPREADSHEET_ID_FOR_INTAKE = SHEET_ID or ""

        def _ensure_ws(title: str, headers: List[str]):
            try:
                ws = ss.worksheet(title)
            except gspread.WorksheetNotFound:
                ws = ss.add_worksheet(title=title, rows=1000, cols=max(20, len(headers)))
                ws.append_row(headers)
            # –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–∏
            vals = ws.get_all_values()
            if not vals:
                ws.append_row(headers)
            else:
                head = vals[0]
                if len(head) < len(headers):
                    pad = headers[len(head):]
                    ws.update(range_name=f"{gsu.rowcol_to_a1(1,len(head)+1)}:{gsu.rowcol_to_a1(1,len(headers))}",
                              values=[pad])
            return ws

        ws_feedback = _ensure_ws("Feedback", FEEDBACK_HEADERS)
        ws_users    = _ensure_ws("Users", USERS_HEADERS)
        ws_profiles = _ensure_ws("Profiles", PROFILES_HEADERS)
        ws_episodes = _ensure_ws("Episodes", EPISODES_HEADERS)
        ws_reminders= _ensure_ws("Reminders", REMINDERS_HEADERS)
        ws_daily    = _ensure_ws("DailyCheckins", DAILY_HEADERS)
        ws_rules    = _ensure_ws("Rules", RULES_HEADERS)
        logging.info("Google Sheets connected.")
    except Exception as e:
        SHEETS_ENABLED = False
        logging.error(f"SHEETS disabled (fallback to memory). Reason: {e}")

_sheets_init()

# --------- Memory fallback stores ----------
MEM_USERS: Dict[int, dict] = {}
MEM_PROFILES: Dict[int, dict] = {}
MEM_EPISODES: List[dict] = []
MEM_REMINDERS: List[dict] = []
MEM_FEEDBACK: List[dict] = []
MEM_DAILY: List[dict] = []
MEM_RULES: List[dict] = []

# --------- Sessions ----------
sessions: Dict[int, dict] = {}

# -------- Sheets wrappers --------
def _headers(ws):
    return ws.row_values(1)

def users_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        for r in ws_records(ws_users, USERS_HEADERS):
            if str(r.get("user_id")) == str(uid):
                return r
        return {}
    return MEM_USERS.get(uid, {})

# === PATCH 1: –º—è–≥–∫–∏–π merge –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ ===
def users_upsert(uid: int, username: str, lang: str):
    base = {
        "user_id": str(uid),
        "username": username or "",
        "lang": lang,
        "consent": "no",
        "tz_offset": "0",
        "checkin_hour": DEFAULT_CHECKIN_LOCAL,
        "paused": "no",
        "quiet_hours": "22:00-08:00",
        "last_sent_utc": "",
        "sent_today": "0",
        "streak": "0",
        "challenge_id": "",
        "challenge_day": "",
        "last_fb_asked": "",
        "profile_banner_shown": "no"
    }
    if SHEETS_ENABLED:
        vals = ws_records(ws_users, USERS_HEADERS)
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                merged = {h: r.get(h, "") for h in USERS_HEADERS}
                merged["user_id"] = str(uid)
                if username: merged["username"] = username
                if lang:     merged["lang"] = lang
                end_col = gsu.rowcol_to_a1(1, len(USERS_HEADERS)).rstrip("1")
                ws_users.update(
                    range_name=f"A{i}:{end_col}{i}",
                    values=[[merged.get(h, "") for h in USERS_HEADERS]]
                )
                return
        ws_users.append_row([base.get(h,"") for h in USERS_HEADERS])
    else:
        prev = MEM_USERS.get(uid, {})
        merged = {**base, **prev}
        if username: merged["username"] = username
        if lang:     merged["lang"] = lang
        MEM_USERS[uid] = merged

def users_set(uid: int, field: str, value: str):
    if SHEETS_ENABLED:
        vals = ws_records(ws_users, USERS_HEADERS)
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                hdr = USERS_HEADERS
                if field in hdr:
                    ws_users.update_cell(i, hdr.index(field)+1, value)
                return
    else:
        u = MEM_USERS.setdefault(uid, {})
        u[field] = value

def profiles_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        for r in ws_records(ws_profiles, PROFILES_HEADERS):
            if str(r.get("user_id")) == str(uid):
                return r
        return {}
    return MEM_PROFILES.get(uid, {})

def profiles_upsert(uid: int, data: dict):
    if SHEETS_ENABLED:
        hdr = PROFILES_HEADERS
        current, idx = None, None
        for i, r in enumerate(ws_records(ws_profiles, PROFILES_HEADERS), start=2):
            if str(r.get("user_id")) == str(uid):
                current, idx = r, i
                break
        if not current:
            current = {"user_id": str(uid)}
        for k,v in data.items():
            current[k] = "" if v is None else (", ".join(v) if isinstance(v,list) else str(v))
        current["updated_at"] = iso(utcnow())
        values = [current.get(h,"") for h in hdr]
        end_col = gsu.rowcol_to_a1(1, len(hdr)).rstrip("1")
        if idx:
            ws_profiles.update(range_name=f"A{idx}:{end_col}{idx}", values=[values])
        else:
            ws_profiles.append_row(values)
    else:
        row = MEM_PROFILES.setdefault(uid, {"user_id": str(uid)})
        for k,v in data.items():
            row[k] = "" if v is None else (", ".join(v) if isinstance(v,list) else str(v))
        row["updated_at"] = iso(utcnow())

def episode_create(uid: int, topic: str, severity: int, red: str) -> str:
    eid = f"{uid}-{uuid.uuid4().hex[:8]}"
    now = iso(utcnow())
    rec = {"episode_id":eid,"user_id":str(uid),"topic":topic,"started_at":now,
           "baseline_severity":str(severity),"red_flags":red,"plan_accepted":"0",
           "target":"<=3/10","reminder_at":"","next_checkin_at":"","status":"open",
           "last_update":now,"notes":""}
    if SHEETS_ENABLED:
        ws_episodes.append_row([rec.get(h,"") for h in EPISODES_HEADERS])
    else:
        MEM_EPISODES.append(rec)
    return eid

def episode_find_open(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED:
        for r in ws_records(ws_episodes, EPISODES_HEADERS):
            if r.get("user_id")==str(uid) and r.get("status")=="open":
                return r
        return None
    for r in MEM_EPISODES:
        if r["user_id"]==str(uid) and r["status"]=="open":
            return r
    return None

def episode_set(eid: str, field: str, value: str):
    if SHEETS_ENABLED:
        vals = ws_episodes.get_all_values(); hdr = vals[0]
        if field not in hdr:
            return
        col = hdr.index(field)+1
        for i in range(2, len(vals)+1):
            if ws_episodes.cell(i,1).value == eid:
                ws_episodes.update_cell(i,col,value)
                ws_episodes.update_cell(i,hdr.index("last_update")+1, iso(utcnow()))
                return
    else:
        for r in MEM_EPISODES:
            if r["episode_id"]==eid:
                r[field]=value; r["last_update"]=iso(utcnow()); return

def feedback_add(ts, uid, name, username, rating, comment):
    if SHEETS_ENABLED:
        ws_feedback.append_row([ts,str(uid),name,username or "",rating,comment])
    else:
        MEM_FEEDBACK.append({"timestamp":ts,"user_id":str(uid),"name":name,"username":username or "","rating":rating,"comment":comment})

def reminder_add(uid: int, text: str, when_utc: datetime):
    rid = f"{uid}-{uuid.uuid4().hex[:6]}"
    rec = {"id":rid,"user_id":str(uid),"text":text,"when_utc":iso(when_utc),"created_at":iso(utcnow()),"status":"scheduled"}
    if SHEETS_ENABLED:
        ws_reminders.append_row([rec.get(h,"") for h in REMINDERS_HEADERS])
    else:
        MEM_REMINDERS.append(rec)
    return rid

def reminders_all_records():
    if SHEETS_ENABLED:
        return ws_records(ws_reminders, REMINDERS_HEADERS)
    return MEM_REMINDERS.copy()

def reminders_mark_sent(rid: str):
    if SHEETS_ENABLED:
        vals = ws_reminders.get_all_values()
        for i in range(2, len(vals)+1):
            if ws_reminders.cell(i,1).value == rid:
                ws_reminders.update_cell(i,6,"sent"); return
    else:
        for r in MEM_REMINDERS:
            if r["id"]==rid:
                r["status"]="sent"; return

def daily_add(ts, uid, mood, comment):
    if SHEETS_ENABLED:
        ws_daily.append_row([ts,str(uid),mood,comment or ""])
    else:
        MEM_DAILY.append({"timestamp":ts,"user_id":str(uid),"mood":mood,"comment":comment or ""})

# --------- JobQueue helper ----------
def _has_jq_app(app) -> bool:
    return getattr(app, "job_queue", None) is not None

def _has_jq_ctx(context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        return getattr(context.application, "job_queue", None) is not None
    except Exception:
        return False

# --------- Scheduling (restore) ---------
def schedule_from_sheet_on_start(app):
    if not _has_jq_app(app):
        logging.warning("JobQueue not available ‚Äì skip scheduling on start.")
        return
    now = utcnow()
    src = ws_records(ws_episodes, EPISODES_HEADERS) if SHEETS_ENABLED else MEM_EPISODES
    for r in src:
        if r.get("status")!="open": continue
        eid = r.get("episode_id"); uid = int(r.get("user_id"))
        nca = r.get("next_checkin_at") or ""
        if not nca: continue
        try:
            dt_ = datetime.strptime(nca, "%Y-%m-%d %H:%M:%S%z")
        except:
            continue
        delay = max(60, (dt_-now).total_seconds())
        app.job_queue.run_once(job_checkin_episode, when=delay, data={"user_id":uid,"episode_id":eid})
    for r in reminders_all_records():
        if (r.get("status") or "")!="scheduled": continue
        uid = int(r.get("user_id")); rid=r.get("id")
        try:
            dt_ = datetime.strptime(r.get("when_utc"), "%Y-%m-%d %H:%M:%S%z")
        except:
            continue
        delay = max(60,(dt_-now).total_seconds())
        app.job_queue.run_once(job_oneoff_reminder, when=delay, data={"user_id":uid,"reminder_id":rid})
    src_u = ws_records(ws_users, USERS_HEADERS) if SHEETS_ENABLED else list(MEM_USERS.values())
    for u in src_u:
        if (u.get("paused") or "").lower()=="yes": continue
        uid = int(u.get("user_id"))
        tz_off = int(str(u.get("tz_offset") or "0"))
        hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
        schedule_daily_checkin(app, uid, tz_off, hhmm, norm_lang(u.get("lang") or "en"))
        # –≤–µ—á–µ—Ä–Ω–∏–π (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)
        schedule_morning_evening(app, uid, tz_off, norm_lang(u.get("lang") or "en"))

def hhmm_tuple(hhmm:str)->Tuple[int,int]:
    m = re.search(r'([01]?\d|2[0-3]):([0-5]\d)', hhmm.strip())
    return (int(m.group(1)), int(m.group(2))) if m else (8,30)

def local_to_utc_hour_min(tz_offset_hours:int, hhmm:str)->Tuple[int,int]:
    h,m = hhmm_tuple(hhmm); return ((h - tz_offset_hours) % 24, m)

def schedule_daily_checkin(app, uid:int, tz_off:int, hhmm_local:str, lang:str):
    if not _has_jq_app(app):
        logging.warning(f"JobQueue not available ‚Äì skip daily scheduling for uid={uid}.")
        return
    for j in app.job_queue.get_jobs_by_name(f"daily_{uid}"):
        j.schedule_removal()
    h_utc, m_utc = local_to_utc_hour_min(tz_off, hhmm_local)
    t = dtime(hour=h_utc, minute=m_utc, tzinfo=timezone.utc)
    app.job_queue.run_daily(job_daily_checkin, time=t, name=f"daily_{uid}", data={"user_id":uid,"lang":lang})

# === –í–µ—á–µ—Ä: –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–∂–æ–± –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ—á–µ—Ä–∞ ===
def schedule_morning_evening(app, uid:int, tz_off:int, lang:str, evening="20:30"):
    if not _has_jq_app(app): return
    for j in app.job_queue.get_jobs_by_name(f"daily_e_{uid}"):
        j.schedule_removal()
    h_e, m_e = hhmm_tuple(evening); h_e = (h_e - tz_off) % 24
    app.job_queue.run_daily(
        job_evening_checkin,
        dtime(hour=h_e, minute=m_e, tzinfo=timezone.utc),
        name=f"daily_e_{uid}",
        data={"user_id":uid,"lang":lang}
    )

# ------------- –õ–∏–º–∏—Ç–µ—Ä –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π + —Ç–∏—Ö–∏–µ —á–∞—Å—ã -------------
def _in_quiet(uid: int, now_utc: datetime) -> bool:
    u = users_get(uid)
    q = (u.get("quiet_hours") or "").strip()
    if not q: return False
    m = re.match(r'(\d{1,2}):(\d{2})-(\d{1,2}):(\d{2})', q)
    if not m: return False
    tz_off = int(str(u.get("tz_offset") or "0"))
    local = now_utc + timedelta(hours=tz_off)
    start = local.replace(hour=int(m.group(1)), minute=int(m.group(2)), second=0, microsecond=0)
    end   = local.replace(hour=int(m.group(3)), minute=int(m.group(4)), second=0, microsecond=0)
    if end <= start:
        return local >= start or local <= end
    return start <= local <= end

def can_send(uid: int) -> bool:
    u = users_get(uid)
    if (u.get("paused") or "").lower() == "yes": return False
    if _in_quiet(uid, utcnow()): return False
    sent_today = int(str(u.get("sent_today") or "0"))
    return sent_today < 2

def mark_sent(uid: int):
    u = users_get(uid)
    tz_off = int(str(u.get("tz_offset") or "0"))
    last = u.get("last_sent_utc") or ""
    today_local = (utcnow() + timedelta(hours=tz_off)).date()
    last_local  = None
    if last:
        try:
            last_local = (datetime.strptime(last, "%Y-%m-%d %H:%M:%S%z").astimezone(timezone.utc) + timedelta(hours=tz_off)).date()
        except:
            last_local = None
    sent = 0 if (not last_local or last_local != today_local) else int(str(u.get("sent_today") or "0"))
    users_set(uid, "sent_today", str(sent + 1))
    users_set(uid, "last_sent_utc", iso(utcnow()))

async def maybe_send(context: ContextTypes.DEFAULT_TYPE, uid: int, text: str, kb=None):
    if can_send(uid):
        try:
            await context.bot.send_message(uid, text, reply_markup=kb)
            mark_sent(uid)
        except Exception as e:
            logging.error(f"send fail: {e}")

# ------------- Jobs -------------
async def job_checkin_episode(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, eid = d.get("user_id"), d.get("episode_id")
    if not uid or not eid: return
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes": return
    lang = norm_lang(u.get("lang") or "en")
    kb = inline_numbers_0_10()
    try:
        await context.bot.send_message(uid, T[lang]["checkin_ping"], reply_markup=kb)
        episode_set(eid, "next_checkin_at", "")
    except Exception as e:
        logging.error(f"job_checkin_episode send error: {e}")

async def job_oneoff_reminder(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, rid = d.get("user_id"), d.get("reminder_id")
    text = T[norm_lang(users_get(uid).get("lang") or "en")]["thanks"]
    for r in reminders_all_records():
        if r.get("id")==rid:
            text = r.get("text") or text; break
    try:
        await context.bot.send_message(uid, text)
    except Exception as e:
        logging.error(f"reminder send error: {e}")
    reminders_mark_sent(rid)

# ===== LLM Router =====
SYS_ROUTER = (
    "You are TendAI ‚Äî a concise, warm, professional health & longevity assistant (not a doctor). "
    "Always answer strictly in {lang}. Keep replies short (<=6 lines + up to 4 bullets). "
    "Personalize using the provided profile (sex/age/goal/conditions). "
    "TRIAGE: ask 1‚Äì2 clarifiers first; advise ER only for clear red flags. "
    "Return JSON ONLY like: "
    "{\"intent\":\"symptom\"|\"nutrition\"|\"sleep\"|\"labs\"|\"habits\"|\"longevity\"|\"other\","
    "\"assistant_reply\": \"string\", \"followups\": [\"string\"], \"needs_more\": true, "
    "\"red_flags\": false, \"confidence\": 0.0}"
)

def llm_router_answer(text: str, lang: str, profile: dict) -> dict:
    if not oai:
        return {"intent":"other","assistant_reply":T[lang]["unknown"],"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}
    sys = SYS_ROUTER.replace("{lang}", lang) + f"\nUserProfile: {json.dumps(profile, ensure_ascii=False)}"
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.25,
            max_tokens=420,
            response_format={"type":"json_object"},
            messages=[{"role":"system","content":sys},{"role":"user","content":text}]
        )
        out = resp.choices[0].message.content.strip()
        data = json.loads(out)
        if "followups" not in data or data["followups"] is None:
            data["followups"] = []
        return data
    except Exception as e:
        logging.error(f"router LLM error: {e}")
        return {"intent":"other","assistant_reply":T[lang]["unknown"],"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}

# ===== Rules-based –ø–æ–¥—Å–∫–∞–∑–∫–∏ =====
def rules_match(seg: str, prof: dict) -> bool:
    if not seg:
        return True
    for part in seg.split("&"):
        m = re.match(r'(\w+)\s*(>=|<=|=|>|<)\s*([\w\-]+)', part.strip())
        if not m:
            return False
        k, op, v = m.groups()
        pv = (prof.get(k) or prof.get(k.lower()) or "")
        if k in ("age", "steps_target", "cycle_avg_len","height_cm","weight_kg"):
            try:
                pv = int(re.search(r'\d+', str(pv)).group())
                v = int(v)
            except Exception:
                return False
        else:
            pv = str(pv).lower()
            v = str(v).lower()
        if op == "=" and not (pv == v): return False
        if op == ">=" and not (pv >= v): return False
        if op == "<=" and not (pv <= v): return False
        if op == ">"  and not (pv >  v): return False
        if op == "<"  and not (pv <  v): return False
    return True

def _read_rules():
    if SHEETS_ENABLED:
        return ws_records(ws_rules, RULES_HEADERS)
    return MEM_RULES

def pick_nutrition_tips(lang: str, prof: dict, limit: int = 2) -> List[str]:
    tips = []
    for r in _read_rules():
        if (r.get("domain") or "").lower() != "nutrition":
            continue
        if (r.get("lang") or "en") != lang:
            continue
        if rules_match(r.get("segment") or "", prof):
            t = (r.get("text") or "").strip()
            if t:
                tips.append(t)
    random.shuffle(tips)
    return tips[:limit]

# ===== –ú–∏–Ω–∏-–ª–æ–≥–∏–∫–∞ —Ü–∏–∫–ª–∞ =====
def cycle_phase_for(uid: int) -> Optional[str]:
    prof = profiles_get(uid)
    if str(prof.get("cycle_enabled") or "").lower() not in {"1","yes","true"}:
        return None
    try:
        last = datetime.strptime(str(prof.get("cycle_last_date")), "%Y-%m-%d").date()
        avg  = int(str(prof.get("cycle_avg_len") or "28"))
    except Exception:
        return None
    day = ((utcnow().date() - last).days % max(avg, 21)) + 1
    if 1 <= day <= 5:   return "menses"
    if 6 <= day <= 13:  return "follicular"
    if 14 <= day <= 15: return "ovulation"
    return "luteal"

def cycle_tip(lang: str, phase: str) -> str:
    if lang not in T: lang = "en"
    base = {
        "menses": {
            "ru":"–§–∞–∑–∞ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏: –º—è–≥—á–µ –∫ —Å–µ–±–µ, –∂–µ–ª–µ–∑–æ/–±–µ–ª–æ–∫, —Å–æ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.",
            "en":"Menses phase: go gentle, prioritize iron/protein and sleep."
        },
        "follicular": {
            "ru":"–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞: –ª—É—á—à–µ –∑–∞—Ö–æ–¥—è—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.",
            "en":"Follicular phase: great for workouts and new tasks."
        },
        "ovulation": {
            "ru":"–û–≤—É–ª—è—Ü–∏—è: —Å–ª–µ–¥–∏ –∑–∞ —Å–Ω–æ–º –∏ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–µ–π.",
            "en":"Ovulation: watch sleep and hydration."
        },
        "luteal": {
            "ru":"–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è: –º–∞–≥–Ω–∏–π/–ø—Ä–æ–≥—É–ª–∫–∞, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–æ–Ω, –º–µ–Ω—å—à–µ –∫–æ—Ñ–µ–∏–Ω–∞.",
            "en":"Luteal: magnesium/walk, steady sleep, go easy on caffeine."
        }
    }
    return base.get(phase, {}).get(lang, "")

async def job_daily_checkin(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, lang = d.get("user_id"), d.get("lang","en")
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes":
        return
    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (—É—Ç—Ä–æ)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["mood_good"], callback_data="mood|good"),
         InlineKeyboardButton(T[lang]["mood_ok"], callback_data="mood|ok"),
         InlineKeyboardButton(T[lang]["mood_bad"], callback_data="mood|bad")],
        [InlineKeyboardButton(T[lang]["mood_note"], callback_data="mood|note")]
    ])
    await maybe_send(context, uid, T[lang]["daily_gm"], kb)

    # 1‚Äì2 —Å–æ–≤–µ—Ç–∞ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏–∑ Rules
    prof = profiles_get(uid)
    tips = pick_nutrition_tips(lang, prof, limit=2)
    if tips:
        await maybe_send(context, uid, "‚Ä¢ " + "\n‚Ä¢ ".join(tips))

    # –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —Ñ–∞–∑–µ —Ü–∏–∫–ª–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    phase = cycle_phase_for(uid)
    if phase:
        tip = cycle_tip(lang, phase)
        if tip:
            await maybe_send(context, uid, tip)

# –ù–æ–≤—ã–π –≤–µ—á–µ—Ä–Ω–∏–π –¥–∂–æ–± ‚Äî –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç
async def job_evening_checkin(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, lang = d.get("user_id"), d.get("lang","en")
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes":
        return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["mood_good"], callback_data="mood|good"),
         InlineKeyboardButton(T[lang]["mood_ok"],   callback_data="mood|ok"),
         InlineKeyboardButton(T[lang]["mood_bad"],  callback_data="mood|bad")],
        [InlineKeyboardButton(T[lang]["mood_note"], callback_data="mood|note")]
    ])
    await maybe_send(context, uid, T[lang]["daily_pm"], kb)

# ===== Serious keywords =====
SERIOUS_KWS = {
    "diabetes":["diabetes","–¥–∏–∞–±–µ—Ç","—Å–∞—Ö–∞—Ä–Ω—ã–π","—Ü—É–∫—Ä–æ–≤","–≥–ª—é–∫–æ–∑–∞","hba1c","–≥–ª–∏–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"],
    "hepatitis":["hepatitis","–≥–µ–ø–∞—Ç–∏—Ç","–ø–µ—á–µ–Ω—å hbs","hcv","alt","ast"],
    "cancer":["cancer","—Ä–∞–∫","–æ–Ω–∫–æ","–æ–Ω–∫–æ–ª–æ–≥","–æ–ø—É—Ö–æ–ª","–ø—É—Ö–ª–∏–Ω–∞","tumor"],
    "tb":["tuberculosis","tb","—Ç—É–±–µ—Ä–∫—É–ª","—Ç—É–±–µ—Ä–∫—É–ª—å–æ–∑"],
}

def detect_serious(text: str) -> Optional[str]:
    low = (text or "").lower()
    for cond, kws in SERIOUS_KWS.items():
        if any(k in low for k in kws):
            return cond
    return None

# ===== –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å/–±–∞–Ω–Ω–µ—Ä (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 1 —Ä–∞–∑) =====
def _ru_age_phrase(age_str: str) -> str:
    try:
        n = int(re.search(r"\d+", age_str).group())
    except Exception:
        return age_str
    last2 = n % 100
    last1 = n % 10
    if 11 <= last2 <= 14:
        word = "–ª–µ—Ç"
    elif last1 == 1:
        word = "–≥–æ–¥"
    elif 2 <= last1 <= 4:
        word = "–≥–æ–¥–∞"
    else:
        word = "–ª–µ—Ç"
    return f"{n} {word}"

def profile_banner(lang: str, profile: dict) -> str:
    sex = str(profile.get("sex") or "").strip().lower()
    age_raw = str(profile.get("age") or "").strip()
    goal = (profile.get("goal") or profile.get("goals") or "").strip()
    ht = (profile.get("height_cm") or "").strip()
    wt = (profile.get("weight_kg") or "").strip()
    if lang == "ru":
        sex_ru = {"male":"–º—É–∂—á–∏–Ω–∞","female":"–∂–µ–Ω—â–∏–Ω–∞","other":"—á–µ–ª–æ–≤–µ–∫"}.get(sex, "—á–µ–ª–æ–≤–µ–∫")
        age_ru = _ru_age_phrase(age_raw or "‚Äî")
        goal_ru = {"longevity":"–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ","energy":"—ç–Ω–µ—Ä–≥–∏—è","sleep":"—Å–æ–Ω","weight":"–ø–æ—Ö—É–¥–µ–Ω–∏–µ","strength":"—Å–∏–ª–∞"}.get(goal, goal or "‚Äî")
        hw = f", {ht}—Å–º/{wt}–∫–≥" if (ht or wt) else ""
        return f"{sex_ru}, {age_ru}{hw}; —Ü–µ–ª—å ‚Äî {goal_ru}"
    if lang == "uk":
        hw = f", {ht}—Å–º/{wt}–∫–≥" if (ht or wt) else ""
        return f"{sex or '‚Äî'}, {age_raw or '‚Äî'}{hw}; —Ü—ñ–ª—å ‚Äî {goal or '‚Äî'}"
    if lang == "es":
        hw = f", {ht}cm/{wt}kg" if (ht or wt) else ""
        return f"{sex or '‚Äî'}, {age_raw or '‚Äî'}{hw}; objetivo ‚Äî {goal or '‚Äî'}"
    # EN ‚Äî PATCH 2: —É–±—Ä–∞—Ç—å –ª–∏—à–Ω—é—é 'y' –ø–æ—Å–ª–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
    hw = f", {ht}cm/{wt}kg" if (ht or wt) else ""
    return f"{sex or '‚Äî'}, {age_raw or '‚Äî'}{hw}; goal ‚Äî {goal or '‚Äî'}"

def should_show_profile_banner(uid: int) -> bool:
    u = users_get(uid)
    return (u.get("profile_banner_shown") or "no") != "yes"

def apply_warm_tone(text: str, lang: str) -> str:
    return re.sub(r"\n{3,}", "\n\n", (text or "").strip())

def ask_feedback_soft(uid: int, context: ContextTypes.DEFAULT_TYPE, lang: str):
    try:
        u = users_get(uid)
        last = (u.get("last_fb_asked") or "").strip()
        today = (utcnow() + timedelta(hours=int(str(u.get("tz_offset") or "0")))).date().isoformat()
        if last == today:
            return
        kb = inline_feedback_kb(lang)
        context.application.create_task(context.bot.send_message(uid, T[lang]["ask_fb"], reply_markup=kb))
        users_set(uid, "last_fb_asked", today)
    except Exception as e:
        logging.warning(f"ask_feedback_soft error: {e}")

# ===== –ü–ª–∞–Ω—ã –∏ –∫–Ω–æ–ø–∫–∏ =====
def pain_plan(lang: str, red_flags_selected: List[str], profile: dict) -> List[str]:
    flg
# ------------- Jobs -------------
async def job_checkin_episode(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, eid = d.get("user_id"), d.get("episode_id")
    if not uid or not eid: return
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes": return
    lang = norm_lang(u.get("lang") or "en")
    kb = inline_numbers_0_10()
    try:
        await context.bot.send_message(uid, T[lang]["checkin_ping"], reply_markup=kb)
        episode_set(eid, "next_checkin_at", "")
    except Exception as e:
        logging.error(f"job_checkin_episode send error: {e}")

async def job_oneoff_reminder(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, rid = d.get("user_id"), d.get("reminder_id")
    text = T[norm_lang(users_get(uid).get("lang") or "en")]["thanks"]
    for r in reminders_all_records():
        if r.get("id")==rid:
            text = r.get("text") or text; break
    try:
        await context.bot.send_message(uid, text)
    except Exception as e:
        logging.error(f"reminder send error: {e}")
    reminders_mark_sent(rid)

# ===== LLM Router =====
SYS_ROUTER = (
    "You are TendAI ‚Äî a concise, warm, professional health & longevity assistant (not a doctor). "
    "Always answer strictly in {lang}. Keep replies short (<=6 lines + up to 4 bullets). "
    "Personalize using the provided profile (sex/age/goal/conditions). "
    "TRIAGE: ask 1‚Äì2 clarifiers first; advise ER only for clear red flags. "
    "Return JSON ONLY like: "
    "{\"intent\":\"symptom\"|\"nutrition\"|\"sleep\"|\"labs\"|\"habits\"|\"longevity\"|\"other\","
    "\"assistant_reply\": \"string\", \"followups\": [\"string\"], \"needs_more\": true, "
    "\"red_flags\": false, \"confidence\": 0.0}"
)

def llm_router_answer(text: str, lang: str, profile: dict) -> dict:
    if not oai:
        return {"intent":"other","assistant_reply":T[lang]["unknown"],"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}
    sys = SYS_ROUTER.replace("{lang}", lang) + f"\nUserProfile: {json.dumps(profile, ensure_ascii=False)}"
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.25,
            max_tokens=420,
            response_format={"type":"json_object"},
            messages=[{"role":"system","content":sys},{"role":"user","content":text}]
        )
        out = resp.choices[0].message.content.strip()
        data = json.loads(out)
        if "followups" not in data or data["followups"] is None:
            data["followups"] = []
        return data
    except Exception as e:
        logging.error(f"router LLM error: {e}")
        return {"intent":"other","assistant_reply":T[lang]["unknown"],"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}

# ===== Rules-based –ø–æ–¥—Å–∫–∞–∑–∫–∏ =====
def rules_match(seg: str, prof: dict) -> bool:
    if not seg:
        return True
    for part in seg.split("&"):
        m = re.match(r'(\w+)\s*(>=|<=|=|>|<)\s*([\w\-]+)', part.strip())
        if not m:
            return False
        k, op, v = m.groups()
        pv = (prof.get(k) or prof.get(k.lower()) or "")
        if k in ("age", "steps_target", "cycle_avg_len","height_cm","weight_kg"):
            try:
                pv = int(re.search(r'\d+', str(pv)).group())
                v = int(v)
            except Exception:
                return False
        else:
            pv = str(pv).lower()
            v = str(v).lower()
        if op == "=" and not (pv == v): return False
        if op == ">=" and not (pv >= v): return False
        if op == "<=" and not (pv <= v): return False
        if op == ">"  and not (pv >  v): return False
        if op == "<"  and not (pv <  v): return False
    return True

def _read_rules():
    if SHEETS_ENABLED:
        return ws_records(ws_rules, RULES_HEADERS)
    return MEM_RULES

def pick_nutrition_tips(lang: str, prof: dict, limit: int = 2) -> List[str]:
    tips = []
    for r in _read_rules():
        if (r.get("domain") or "").lower() != "nutrition":
            continue
        if (r.get("lang") or "en") != lang:
            continue
        if rules_match(r.get("segment") or "", prof):
            t = (r.get("text") or "").strip()
            if t:
                tips.append(t)
    random.shuffle(tips)
    return tips[:limit]

# ===== –ú–∏–Ω–∏-–ª–æ–≥–∏–∫–∞ —Ü–∏–∫–ª–∞ =====
def cycle_phase_for(uid: int) -> Optional[str]:
    prof = profiles_get(uid)
    if str(prof.get("cycle_enabled") or "").lower() not in {"1","yes","true"}:
        return None
    try:
        last = datetime.strptime(str(prof.get("cycle_last_date")), "%Y-%m-%d").date()
        avg  = int(str(prof.get("cycle_avg_len") or "28"))
    except Exception:
        return None
    day = ((utcnow().date() - last).days % max(avg, 21)) + 1
    if 1 <= day <= 5:   return "menses"
    if 6 <= day <= 13:  return "follicular"
    if 14 <= day <= 15: return "ovulation"
    return "luteal"

def cycle_tip(lang: str, phase: str) -> str:
    if lang not in T: lang = "en"
    base = {
        "menses": {
            "ru":"–§–∞–∑–∞ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏: –º—è–≥—á–µ –∫ —Å–µ–±–µ, –∂–µ–ª–µ–∑–æ/–±–µ–ª–æ–∫, —Å–æ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.",
            "en":"Menses phase: go gentle, prioritize iron/protein and sleep."
        },
        "follicular": {
            "ru":"–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞: –ª—É—á—à–µ –∑–∞—Ö–æ–¥—è—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.",
            "en":"Follicular phase: great for workouts and new tasks."
        },
        "ovulation": {
            "ru":"–û–≤—É–ª—è—Ü–∏—è: —Å–ª–µ–¥–∏ –∑–∞ —Å–Ω–æ–º –∏ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–µ–π.",
            "en":"Ovulation: watch sleep and hydration."
        },
        "luteal": {
            "ru":"–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è: –º–∞–≥–Ω–∏–π/–ø—Ä–æ–≥—É–ª–∫–∞, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–æ–Ω, –º–µ–Ω—å—à–µ –∫–æ—Ñ–µ–∏–Ω–∞.",
            "en":"Luteal: magnesium/walk, steady sleep, go easy on caffeine."
        }
    }
    return base.get(phase, {}).get(lang, "")

async def job_daily_checkin(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, lang = d.get("user_id"), d.get("lang","en")
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes":
        return
    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (—É—Ç—Ä–æ)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["mood_good"], callback_data="mood|good"),
         InlineKeyboardButton(T[lang]["mood_ok"], callback_data="mood|ok"),
         InlineKeyboardButton(T[lang]["mood_bad"], callback_data="mood|bad")],
        [InlineKeyboardButton(T[lang]["mood_note"], callback_data="mood|note")]
    ])
    await maybe_send(context, uid, T[lang]["daily_gm"], kb)

    # 1‚Äì2 —Å–æ–≤–µ—Ç–∞ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏–∑ Rules
    prof = profiles_get(uid)
    tips = pick_nutrition_tips(lang, prof, limit=2)
    if tips:
        await maybe_send(context, uid, "‚Ä¢ " + "\n‚Ä¢ ".join(tips))

    # –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —Ñ–∞–∑–µ —Ü–∏–∫–ª–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    phase = cycle_phase_for(uid)
    if phase:
        tip = cycle_tip(lang, phase)
        if tip:
            await maybe_send(context, uid, tip)

# –ù–æ–≤—ã–π –≤–µ—á–µ—Ä–Ω–∏–π –¥–∂–æ–± ‚Äî –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç
async def job_evening_checkin(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, lang = d.get("user_id"), d.get("lang","en")
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes":
        return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["mood_good"], callback_data="mood|good"),
         InlineKeyboardButton(T[lang]["mood_ok"],   callback_data="mood|ok"),
         InlineKeyboardButton(T[lang]["mood_bad"],  callback_data="mood|bad")],
        [InlineKeyboardButton(T[lang]["mood_note"], callback_data="mood|note")]
    ])
    await maybe_send(context, uid, T[lang]["daily_pm"], kb)

# ===== Serious keywords =====
SERIOUS_KWS = {
    "diabetes":["diabetes","–¥–∏–∞–±–µ—Ç","—Å–∞—Ö–∞—Ä–Ω—ã–π","—Ü—É–∫—Ä–æ–≤","–≥–ª—é–∫–æ–∑–∞","hba1c","–≥–ª–∏–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"],
    "hepatitis":["hepatitis","–≥–µ–ø–∞—Ç–∏—Ç","–ø–µ—á–µ–Ω—å hbs","hcv","alt","ast"],
    "cancer":["cancer","—Ä–∞–∫","–æ–Ω–∫–æ","–æ–Ω–∫–æ–ª–æ–≥","–æ–ø—É—Ö–æ–ª","–ø—É—Ö–ª–∏–Ω–∞","tumor"],
    "tb":["tuberculosis","tb","—Ç—É–±–µ—Ä–∫—É–ª","—Ç—É–±–µ—Ä–∫—É–ª—å–æ–∑"],
}

def detect_serious(text: str) -> Optional[str]:
    low = (text or "").lower()
    for cond, kws in SERIOUS_KWS.items():
        if any(k in low for k in kws):
            return cond
    return None

# ===== –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å/–±–∞–Ω–Ω–µ—Ä (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 1 —Ä–∞–∑) =====
def _ru_age_phrase(age_str: str) -> str:
    try:
        n = int(re.search(r"\d+", age_str).group())
    except Exception:
        return age_str
    last2 = n % 100
    last1 = n % 10
    if 11 <= last2 <= 14:
        word = "–ª–µ—Ç"
    elif last1 == 1:
        word = "–≥–æ–¥"
    elif 2 <= last1 <= 4:
        word = "–≥–æ–¥–∞"
    else:
        word = "–ª–µ—Ç"
    return f"{n} {word}"

def profile_banner(lang: str, profile: dict) -> str:
    sex = str(profile.get("sex") or "").strip().lower()
    age_raw = str(profile.get("age") or "").strip()
    goal = (profile.get("goal") or profile.get("goals") or "").strip()
    ht = (profile.get("height_cm") or "").strip()
    wt = (profile.get("weight_kg") or "").strip()
    if lang == "ru":
        sex_ru = {"male":"–º—É–∂—á–∏–Ω–∞","female":"–∂–µ–Ω—â–∏–Ω–∞","other":"—á–µ–ª–æ–≤–µ–∫"}.get(sex, "—á–µ–ª–æ–≤–µ–∫")
        age_ru = _ru_age_phrase(age_raw or "‚Äî")
        goal_ru = {"longevity":"–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ","energy":"—ç–Ω–µ—Ä–≥–∏—è","sleep":"—Å–æ–Ω","weight":"–ø–æ—Ö—É–¥–µ–Ω–∏–µ","strength":"—Å–∏–ª–∞"}.get(goal, goal or "‚Äî")
        hw = f", {ht}—Å–º/{wt}–∫–≥" if (ht or wt) else ""
        return f"{sex_ru}, {age_ru}{hw}; —Ü–µ–ª—å ‚Äî {goal_ru}"
    if lang == "uk":
        hw = f", {ht}—Å–º/{wt}–∫–≥" if (ht or wt) else ""
        return f"{sex or '‚Äî'}, {age_raw or '‚Äî'}{hw}; —Ü—ñ–ª—å ‚Äî {goal or '‚Äî'}"
    if lang == "es":
        hw = f", {ht}cm/{wt}kg" if (ht or wt) else ""
        return f"{sex or '‚Äî'}, {age_raw or '‚Äî'}{hw}; objetivo ‚Äî {goal or '‚Äî'}"
    # EN (fixed: removed stray 'y')
    hw = f", {ht}cm/{wt}kg" if (ht or wt) else ""
    return f"{sex or '‚Äî'}, {age_raw or '‚Äî'}{hw}; goal ‚Äî {goal or '‚Äî'}"

def should_show_profile_banner(uid: int) -> bool:
    u = users_get(uid)
    return (u.get("profile_banner_shown") or "no") != "yes"

def apply_warm_tone(text: str, lang: str) -> str:
    return re.sub(r"\n{3,}", "\n\n", (text or "").strip())

def ask_feedback_soft(uid: int, context: ContextTypes.DEFAULT_TYPE, lang: str):
    try:
        u = users_get(uid)
        last = (u.get("last_fb_asked") or "").strip()
        today = (utcnow() + timedelta(hours=int(str(u.get("tz_offset") or "0")))).date().isoformat()
        if last == today:
            return
        kb = inline_feedback_kb(lang)
        context.application.create_task(context.bot.send_message(uid, T[lang]["ask_fb"], reply_markup=kb))
        users_set(uid, "last_fb_asked", today)
    except Exception as e:
        logging.warning(f"ask_feedback_soft error: {e}")

# ===== –ü–ª–∞–Ω—ã –∏ –∫–Ω–æ–ø–∫–∏ =====
def pain_plan(lang: str, red_flags_selected: List[str], profile: dict) -> List[str]:
    flg = [s for s in red_flags_selected if s and str(s).lower() not in ["none","–Ω–µ—Ç","–Ω–µ–º–∞—î","ninguno","no"]]
    if flg:
        return {"ru":["‚ö†Ô∏è –ï—Å—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏. –õ—É—á—à–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –≤—Ä–∞—á—É/–≤ —Å–∫–æ—Ä—É—é."],
                "uk":["‚ö†Ô∏è –Ñ —Ç—Ä–∏–≤–æ–∂–Ω—ñ –æ–∑–Ω–∞–∫–∏. –í–∞—Ä—Ç–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è/—à–≤–∏–¥–∫–æ—ó."],
                "en":["‚ö†Ô∏è Red flags present. Please seek urgent medical evaluation."],
                "es":["‚ö†Ô∏è Se√±ales de alarma presentes. Busca evaluaci√≥n m√©dica urgente."]}[lang]
    age_num = 0
    try:
        age_num = int(re.search(r"\d+", str(profile.get("age") or "")).group(0))
    except Exception:
        age_num = 0
    extra = []
    if age_num >= 60:
        extra.append({"ru":"–í–∞–º 60+, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –ù–ü–í–ü; –ø–µ–π—Ç–µ –≤–æ–¥—É –∏ –ø—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É.",
                      "uk":"–í–∞–º 60+, –æ–±–µ—Ä–µ–∂–Ω–æ –∑ –ù–ü–ó–ó; –ø–∏–π—Ç–µ –≤–æ–¥—É, –∑–∞ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è ‚Äî –¥–æ –ª—ñ–∫–∞—Ä—è.",
                      "en":"Age 60+: be careful with NSAIDs; hydrate and seek care if worsening.",
                      "es":"Edad 60+: cuidado con AINEs; hidr√°tate y busca atenci√≥n si empeora."}[lang])
    core = {"ru":["1) –í–æ–¥–∞ 400‚Äì600 –º–ª –∏ 15‚Äì20 –º–∏–Ω —Ç–∏—à–∏–Ω—ã/–æ—Ç–¥—ã—Ö–∞.",
                  "2) –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –∏–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ —Å –µ–¥–æ–π.",
                  "3) –ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å, —É–º–µ–Ω—å—à–∏—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞ 30‚Äì60 –º–∏–Ω.","–¶–µ–ª—å: –∫ –≤–µ—á–µ—Ä—É –±–æ–ª—å ‚â§3/10."],
            "uk":["1) –í–æ–¥–∞ 400‚Äì600 –º–ª —ñ 15‚Äì20 —Ö–≤ —Å–ø–æ–∫–æ—é.",
                  "2) –Ø–∫—â–æ –Ω–µ–º–∞ –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω—å ‚Äî —ñ–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –∑ —ó–∂–µ—é.",
                  "3) –ü—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏, –º–µ–Ω—à–µ –µ–∫—Ä–∞–Ω—É 30‚Äì60 —Ö–≤.","–ú–µ—Ç–∞: –¥–æ –≤–µ—á–æ—Ä–∞ –±—ñ–ª—å ‚â§3/10."],
            "en":["1) Drink 400‚Äì600 ml water; rest 15‚Äì20 min.",
                  "2) If no contraindications ‚Äî ibuprofen 200‚Äì400 mg once with food.",
                  "3) Air the room; reduce screen time 30‚Äì60 min.","Goal: by evening pain ‚â§3/10."],
            "es":["1) Bebe 400‚Äì600 ml de agua; descansa 15‚Äì20 min.",
                  "2) Si no hay contraindicaciones ‚Äî ibuprofeno 200‚Äì400 mg una vez con comida.",
                  "3) Ventila la habitaci√≥n; reduce pantallas 30‚Äì60 min.","Meta: por la tarde dolor ‚â§3/10."]}[lang]
    return core + extra + [T[lang]["er_text"]]

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (6‚Äì7 –∫–Ω–æ–ø–æ–∫/—ç–∫—Ä–∞–Ω, 3 –ø—Ä–µ—Å–µ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π) =====
def inline_numbers_0_10() -> InlineKeyboardMarkup:
    rows = []
    row1 = [InlineKeyboardButton(str(n), callback_data=f"num|{n}") for n in range(0, 6)]
    row2 = [InlineKeyboardButton(str(n), callback_data=f"num|{n}") for n in range(6, 11)]
    rows.append(row1); rows.append(row2); rows.append([InlineKeyboardButton("‚óÄ", callback_data="pain|exit")])
    return InlineKeyboardMarkup(rows)

def inline_list(options: List[str], prefix: str) -> InlineKeyboardMarkup:
    rows, row = [], []
    for opt in options:
        row.append(InlineKeyboardButton(opt, callback_data=f"{prefix}|{opt}"))
        if len(row) == 3: rows.append(row); row = []
    if row: rows.append(row)
    return InlineKeyboardMarkup(rows)

def inline_topic_kb(lang: str) -> InlineKeyboardMarkup:
    label = {"ru":"üß© –û–ø—Ä–æ—Å 6 –ø—É–Ω–∫—Ç–æ–≤","uk":"üß© –û–ø–∏—Ç–Ω–∏–∫ (6)","en":"üß© Intake (6 Qs)","es":"üß© Intake (6)"}[lang]
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("ü©∫ Pain", callback_data="topic|pain"),
         InlineKeyboardButton("üò¥ Sleep", callback_data="topic|sleep"),
         InlineKeyboardButton("üçé Nutrition", callback_data="topic|nutrition")],
        [InlineKeyboardButton("üß™ Labs", callback_data="topic|labs"),
         InlineKeyboardButton("üîÅ Habits", callback_data="topic|habits"),
         InlineKeyboardButton("üß¨ Longevity", callback_data="topic|longevity")],
        [InlineKeyboardButton("üë§ Profile", callback_data="topic|profile")],
        [InlineKeyboardButton(label, callback_data="intake:start")]
    ])

def inline_accept(lang: str) -> InlineKeyboardMarkup:
    labels = T[lang]["accept_opts"]
    return InlineKeyboardMarkup([[InlineKeyboardButton(labels[0], callback_data="acc|yes"),
                                  InlineKeyboardButton(labels[1], callback_data="acc|later"),
                                  InlineKeyboardButton(labels[2], callback_data="acc|no")]])

def inline_remind(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚è∞ +4h" if lang=="en" else T[lang]["act_rem_4h"], callback_data="rem|4h"),
         InlineKeyboardButton("‚è∞ This evening" if lang=="en" else T[lang]["act_rem_eve"], callback_data="rem|evening"),
         InlineKeyboardButton("‚è∞ Tomorrow morning" if lang=="en" else T[lang]["act_rem_morn"], callback_data="rem|morning")]
    ])

def inline_feedback_kb(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["fb_good"], callback_data="fb|up"),
         InlineKeyboardButton(T[lang]["fb_bad"],  callback_data="fb|down")],
        [InlineKeyboardButton(T[lang]["fb_free"], callback_data="fb|text")]
    ])

def inline_actions(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚è∞ +4h" if lang=="en" else T[lang]["act_rem_4h"],  callback_data="act|rem|4h"),
         InlineKeyboardButton("‚è∞ This evening" if lang=="en" else T[lang]["act_rem_eve"],  callback_data="act|rem|evening"),
         InlineKeyboardButton("‚è∞ Tomorrow morning" if lang=="en" else T[lang]["act_rem_morn"], callback_data="act|rem|morning")],
        [InlineKeyboardButton(T[lang]["h60_btn"], callback_data="act|h60")],
        [InlineKeyboardButton(T[lang]["act_ex_neck"], callback_data="act|ex|neck")],
        [InlineKeyboardButton(T[lang]["act_find_lab"], callback_data="act|lab")],
        [InlineKeyboardButton(T[lang]["act_er"], callback_data="act|er")]
    ])

# ===== Youth-–ø–∞–∫–µ—Ç: –∫–æ–º–∞–Ω–¥—ã =====
async def cmd_energy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    tips = {
      "en": [
        "1) 10-min brisk walk now (raise pulse).",
        "2) 300‚Äì500 ml water + light protein.",
        "3) 20-min screen detox to refresh focus."
      ],
      "ru": [
        "1) –ë—ã—Å—Ç—Ä–∞—è —Ö–æ–¥—å–±–∞ 10 –º–∏–Ω (–ø—É–ª—å—Å —á—É—Ç—å –≤—ã—à–µ –æ–±—ã—á–Ω–æ–≥–æ).",
        "2) 300‚Äì500 –º–ª –≤–æ–¥—ã + –ª—ë–≥–∫–∏–π –±–µ–ª–æ–∫.",
        "3) 20 –º–∏–Ω –±–µ–∑ —ç–∫—Ä–∞–Ω–∞ ‚Äî —Ä–∞–∑–≥—Ä—É–∑–∫–∞ –≤–Ω–∏–º–∞–Ω–∏—è."
      ],
      "uk": [
        "1) –®–≤–∏–¥–∫–∞ —Ö–æ–¥—å–±–∞ 10 —Ö–≤ (–ø—É–ª—å—Å —Ç—Ä–æ—Ö–∏ –≤–∏—â–µ).",
        "2) 300‚Äì500 –º–ª –≤–æ–¥–∏ + –ª–µ–≥–∫–∏–π –±—ñ–ª–æ–∫.",
        "3) 20 —Ö–≤ –±–µ–∑ –µ–∫—Ä–∞–Ω–∞ ‚Äî –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É–≤–∞–≥–∏."
      ],
      "es": [
        "1) Camina r√°pido 10 min.",
        "2) 300‚Äì500 ml de agua + prote√≠na ligera.",
        "3) 20 min sin pantallas."
      ]
    }[lang]
    await update.message.reply_text(T[lang]["energy_title"] + "\n" + "\n".join(tips), reply_markup=inline_actions(lang))

async def cmd_water(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚è∞ +4h" if lang=="en" else T[lang]["act_rem_4h"], callback_data="act|rem|4h")]])
    await update.message.reply_text(T[lang]["water_prompt"], reply_markup=kb)

async def cmd_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["mood_good"], callback_data="mood|good"),
         InlineKeyboardButton(T[lang]["mood_ok"],   callback_data="mood|ok"),
         InlineKeyboardButton(T[lang]["mood_bad"],  callback_data="mood|bad")],
        [InlineKeyboardButton(T[lang]["mood_note"], callback_data="mood|note")]
    ])
    await update.message.reply_text(T[lang]["daily_gm"], reply_markup=kb)

async def cmd_skin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    tip = {
        "ru":"–£–º—ã–≤–∞–Ω–∏–µ 2√ó/–¥–µ–Ω—å —Ç—ë–ø–ª–æ–π –≤–æ–¥–æ–π, SPF —É—Ç—Ä–æ–º, 1% –Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥ –≤–µ—á–µ—Ä–æ–º.",
        "en":"Wash face 2√ó/day with lukewarm water, SPF in the morning, 1% niacinamide at night.",
        "uk":"–í–º–∏–≤–∞–Ω–Ω—è 2√ó/–¥–µ–Ω—å —Ç–µ–ø–ª–æ—é –≤–æ–¥–æ—é, SPF –≤—Ä–∞–Ω—Ü—ñ, 1% –Ω—ñ–∞—Ü–∏–Ω–∞–º—ñ–¥ –≤–≤–µ—á–µ—Ä—ñ.",
        "es":"Lava el rostro 2√ó/d√≠a con agua tibia, SPF por la ma√±ana, 1% niacinamida por la noche."
    }[lang]
    await update.message.reply_text(T[lang]["skin_title"] + "\n" + tip, reply_markup=inline_actions(lang))

# ===== Pain triage –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =====
def _kb_for_code(lang: str, code: str):
    if code == "painloc":
        kb = inline_list(T[lang]["triage_pain_q1_opts"], "painloc")
    elif code == "painkind":
        kb = inline_list(T[lang]["triage_pain_q2_opts"], "painkind")
    elif code == "paindur":
        kb = inline_list(T[lang]["triage_pain_q3_opts"], "paindur")
    elif code == "num":
        kb = inline_numbers_0_10()
    elif code == "painrf":
        kb = inline_list(T[lang]["triage_pain_q5_opts"], "painrf")
    else:
        kb = None
    if kb:
        rows = kb.inline_keyboard + [[InlineKeyboardButton(T[lang]["back"], callback_data="pain|exit")]]
        return InlineKeyboardMarkup(rows)
    return None

# ====== Health60 =====
async def cmd_health60(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user, "language_code", None))
    sessions.setdefault(uid, {})["awaiting_h60"] = True
    await update.message.reply_text(T[lang]["h60_intro"])

# ===== /intake –∫–Ω–æ–ø–∫–∞ =====
async def cmd_intake(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user, "language_code", None) or "en")
    txt  = {"ru":"üß© PRO-–æ–ø—Ä–æ—Å: 6 –∫–ª—é—á–µ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
            "uk":"üß© PRO-–æ–ø–∏—Ç–Ω–∏–∫: 6 –∫–ª—é—á–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å. –ü–æ—á–∏–Ω–∞—î–º–æ?",
            "en":"üß© PRO intake: 6 quick questions. Ready?",
            "es":"üß© PRO intake: 6 quick questions. Ready?"}[lang]
    start_label = {"ru":"‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å","uk":"‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏","en":"‚ñ∂Ô∏è Start","es":"‚ñ∂Ô∏è Start"}[lang]
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(start_label, callback_data="intake:start")]])
    await update.message.reply_text(txt, reply_markup=kb)

# ===== Profile (10 —à–∞–≥–æ–≤) =====
PROFILE_STEPS = [
    {"key":"sex","opts":{"ru":[("–ú—É–∂—á–∏–Ω–∞","male"),("–ñ–µ–Ω—â–∏–Ω–∞","female"),("–î—Ä—É–≥–æ–µ","other")],
                         "en":[("Male","male"),("Female","female"),("Other","other")],
                         "uk":[("–ß–æ–ª–æ–≤—ñ—á–∞","male"),("–ñ—ñ–Ω–æ—á–∞","female"),("–Ü–Ω—à–∞","other")],
                         "es":[("Hombre","male"),("Mujer","female"),("Otro","other")]}}
,
    {"key":"age","opts":{"ru":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
                         "en":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
                         "uk":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
                         "es":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")]}}
,
    {"key":"height_cm","opts":{"ru":[("160","160"),("170","170"),("180","180")],
                               "en":[("160","160"),("170","170"),("180","180")],
                               "uk":[("160","160"),("170","170"),("180","180")],
                               "es":[("160","160"),("170","170"),("180","180")]}}
,
    {"key":"weight_kg","opts":{"ru":[("60","60"),("75","75"),("90","90")],
                               "en":[("60","60"),("75","75"),("90","90")],
                               "uk":[("60","60"),("75","75"),("90","90")],
                               "es":[("60","60"),("75","75"),("90","90")]}}
,
    {"key":"goal","opts":{"ru":[("–ü–æ—Ö—É–¥–µ–Ω–∏–µ","weight"),("–≠–Ω–µ—Ä–≥–∏—è","energy"),("–°–æ–Ω","sleep"),("–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ","longevity"),("–°–∏–ª–∞","strength")],
                          "en":[("Weight","weight"),("Energy","energy"),("Sleep","sleep"),("Longevity","longevity"),("Strength","strength")],
                          "uk":[("–í–∞–≥–∞","weight"),("–ï–Ω–µ—Ä–≥—ñ—è","energy"),("–°–æ–Ω","sleep"),("–î–æ–≤–≥–æ–ª—ñ—Ç—Ç—è","longevity"),("–°–∏–ª–∞","strength")],
                          "es":[("Peso","weight"),("Energ√≠a","energy"),("Sue√±o","sleep"),("Longevidad","longevity"),("Fuerza","strength")]}}
,
    {"key":"conditions","opts":{"ru":[("–ù–µ—Ç","none"),("–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è","hypertension"),("–î–∏–∞–±–µ—Ç","diabetes"),("–©–∏—Ç–æ–≤–∏–¥–∫–∞","thyroid"),("–î—Ä—É–≥–æ–µ","other")],
                               "en":[("None","none"),("Hypertension","hypertension"),("Diabetes","diabetes"),("Thyroid","thyroid"),("Other","other")],
                               "uk":[("–ù–µ–º–∞—î","none"),("–ì—ñ–ø–µ—Ä—Ç–æ–Ω—ñ—è","hypertension"),("–î—ñ–∞–±–µ—Ç","diabetes"),("–©–∏—Ç–æ–ø–æ–¥—ñ–±–Ω–∞","thyroid"),("–Ü–Ω—à–µ","other")],
                               "es":[("Ninguna","none"),("Hipertensi√≥n","hypertension"),("Diabetes","diabetes"),("Tiroides","thyroid"),("Otra","other")]}}
,
    {"key":"meds","opts":{"ru":[("–ù–µ—Ç","none"),("–ú–∞–≥–Ω–∏–π","magnesium"),("–í–∏—Ç–∞–º–∏–Ω D","vitd"),("–ê–ª–ª–µ—Ä–≥–∏–∏ –µ—Å—Ç—å","allergies"),("–î—Ä—É–≥–æ–µ","other")],
                          "en":[("None","none"),("Magnesium","magnesium"),("Vitamin D","vitd"),("Allergies","allergies"),("Other","other")],
                          "uk":[("–ù–µ–º–∞—î","none"),("–ú–∞–≥–Ω—ñ–π","magnesium"),("–í—ñ—Ç–∞–º—ñ–Ω D","vitd"),("–ê–ª–µ—Ä–≥—ñ—ó","allergies"),("–Ü–Ω—à–µ","other")],
                          "es":[("Ninguno","none"),("Magnesio","magnesium"),("Vitamina D","vitd"),("Alergias","allergies"),("Otro","other")]}}
,
    {"key":"supplements","opts":{"ru":[("–ù–µ—Ç","none"),("–û–º–µ–≥–∞-3","omega3"),("–ö—Ä–µ–∞—Ç–∏–Ω","creatine"),("–ü—Ä–æ—Ç–µ–∏–Ω","protein"),("–î—Ä—É–≥–æ–µ","other")],
                                "en":[("None","none"),("Omega-3","omega3"),("Creatine","creatine"),("Protein","protein"),("Other","other")],
                                "uk":[("–ù–µ–º–∞—î","none"),("–û–º–µ–≥–∞-3","omega3"),("–ö—Ä–µ–∞—Ç–∏–Ω","creatine"),("–ü—Ä–æ—Ç–µ—ó–Ω","protein"),("–Ü–Ω—à–µ","other")],
                                "es":[("Ninguno","none"),("Omega-3","omega3"),("Creatina","creatine"),("Prote√≠na","protein"),("Otro","other")]}}
,
    {"key":"sleep","opts":{"ru":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
                           "en":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("Irregular","irregular")],
                           "uk":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
                           "es":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("Irregular","irregular")]}}
,
    {"key":"activity","opts":{"ru":[("<5–∫ —à–∞–≥–æ–≤","<5k"),("5‚Äì8–∫","5-8k"),("8‚Äì12–∫","8-12k"),("–°–ø–æ—Ä—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ","sport")],
                             "en":[("<5k steps","<5k"),("5‚Äì8k","5-8k"),("8‚Äì12k","8-12k"),("Regular sport","sport")],
                             "uk":[("<5–∫ –∫—Ä–æ–∫—ñ–≤","<5k"),("5‚Äì8–∫","5-8k"),("8‚Äì12–∫","8-12k"),("–°–ø–æ—Ä—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ","sport")],
                             "es":[("<5k pasos","<5k"),("5‚Äì8k","5-8k"),("8‚Äì12k","8-12k"),("Deporte regular","sport")]}}
]

def build_profile_kb(lang:str, key:str, opts:List[Tuple[str,str]])->InlineKeyboardMarkup:
    rows=[]; row=[]
    for label,val in opts:
        row.append(InlineKeyboardButton(label, callback_data=f"p|choose|{key}|{val}"))
        if len(row)==3: rows.append(row); row=[]
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(T[lang]["write"], callback_data=f"p|write|{key}"),
                 InlineKeyboardButton(T[lang]["skip"],  callback_data=f"p|skip|{key}")])
    return InlineKeyboardMarkup(rows)

async def start_profile_ctx(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    sessions[uid] = {"profile_active": True, "p_step": 0, "p_wait_key": None}
    await context.bot.send_message(chat_id, T[lang]["profile_intro"], reply_markup=ReplyKeyboardRemove())
    step = PROFILE_STEPS[0]
    kb = build_profile_kb(lang, step["key"], step["opts"][lang])
    await context.bot.send_message(chat_id, T[lang]["p_step_1"], reply_markup=kb)

async def advance_profile_ctx(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    s = sessions.get(uid, {})
    s["p_step"] += 1
    if s["p_step"] < len(PROFILE_STEPS):
        idx = s["p_step"]; step = PROFILE_STEPS[idx]
        kb = build_profile_kb(lang, step["key"], step["opts"][lang])
        key_to_idx = {"sex":1,"age":2,"height_cm":3,"weight_kg":4,"goal":5,"conditions":6,"meds":7,"supplements":8,"sleep":9,"activity":10}
        num = key_to_idx.get(step["key"], idx+1)
        await context.bot.send_message(chat_id, T[lang][f"p_step_{num}"], reply_markup=kb)
        return
    # —Ñ–∏–Ω–∞–ª
    prof = profiles_get(uid); summary=[]
    for k in ["sex","age","height_cm","weight_kg","goal","conditions","meds","supplements","sleep","activity","diet"]:
        v = prof.get(k) or sessions.get(uid,{}).get(k,"")
        if v: summary.append(f"{k}: {v}")
    profiles_upsert(uid, {})
    sessions[uid]["profile_active"] = False
    users_set(uid, "profile_banner_shown", "no")
    await context.bot.send_message(chat_id, T[lang]["saved_profile"] + "; ".join(summary))
    await context.bot.send_message(chat_id, T[lang]["start_where"], reply_markup=inline_topic_kb(lang))

# ===== –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ =====
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; uid = user.id
    text = (update.message.text or "").strip()
    logging.info(f"INCOMING uid={uid} text={text[:200]}")
    urec = users_get(uid)

    # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –º–µ–Ω—é, —Å–æ–≥–ª–∞—Å–∏–µ –∏ GATE (–æ–ø—Ä–æ—Å)
    if not urec:
        lang_guess = detect_lang_from_text(text, norm_lang(getattr(user, "language_code", None)))
        users_upsert(uid, user.username or "", lang_guess)
        sessions.setdefault(uid, {})["last_user_text"] = text
        await update.message.reply_text(T[lang_guess]["welcome"], reply_markup=ReplyKeyboardRemove())
        await update.message.reply_text(T[lang_guess]["start_where"], reply_markup=inline_topic_kb(lang_guess))
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang_guess]["yes"], callback_data="consent|yes"),
                                    InlineKeyboardButton(T[lang_guess]["no"],  callback_data="consent|no")]])
        await update.message.reply_text(T[lang_guess]["ask_consent"], reply_markup=kb)
        if _has_jq_ctx(context):
            schedule_daily_checkin(context.application, uid, 0, DEFAULT_CHECKIN_LOCAL, lang_guess)
            schedule_morning_evening(context.application, uid, 0, lang_guess)
        context.user_data["lang"] = lang_guess
        await gate_show(update, context)
        return

    saved_lang = norm_lang(urec.get("lang") or getattr(user,"language_code",None))
    detected_lang = detect_lang_from_text(text, saved_lang)
    if detected_lang != saved_lang:
        users_set(uid,"lang",detected_lang)
    lang = detected_lang
    sessions.setdefault(uid, {})["last_user_text"] = text

    sc = detect_serious(text)
    if sc:
        sessions.setdefault(uid,{})["mode"] = "serious"
        sessions[uid]["serious_condition"] = sc
        prof = profiles_get(uid)
        plan = pain_plan(lang, [], prof)
        await update.message.reply_text("\n".join(plan), reply_markup=inline_actions(lang))
        ask_feedback_soft(uid, context, lang)
        return

    if sessions.get(uid, {}).get("awaiting_daily_comment"):
        daily_add(iso(utcnow()), uid, "note", text)
        sessions[uid]["awaiting_daily_comment"] = False
        await update.message.reply_text(T[lang]["mood_thanks"]); return

    if sessions.get(uid, {}).get("awaiting_free_feedback"):
        sessions[uid]["awaiting_free_feedback"] = False
        feedback_add(iso(utcnow()), uid, "free", user.username, "", text)
        await update.message.reply_text(T[lang]["fb_thanks"]); return

    if sessions.get(uid, {}).get("awaiting_city"):
        sessions[uid]["awaiting_city"] = False
        await update.message.reply_text(T[lang]["thanks"]); return

    if sessions.get(uid, {}).get("awaiting_h60"):
        sessions[uid]["awaiting_h60"] = False
        prof = profiles_get(uid)
        low = text.lower()
        if any(word in low for word in ["–±–µ–ª–æ–∫","protein","–±–æ–ª—å—à–µ –±–µ–ª–∫–∞","‚Üë–±–µ–ª–æ–∫"]):
            if lang=="ru":
                msg = "–ü–æ–¥ —Ç–µ–±—è –ø–æ–¥–æ–π–¥—ë—Ç —Å–µ–≥–æ–¥–Ω—è:\n‚Ä¢ –¢–≤–æ—Ä–æ–≥ 200 –≥ + –æ–≥—É—Ä–µ—Ü\n‚Ä¢ –û–º–ª–µ—Ç 2 —è–π—Ü–∞ + –æ–≤–æ—â–∏\n‚Ä¢ –°–∞—Ä–¥–∏–Ω—ã 1 –±–∞–Ω–∫–∞ + —Å–∞–ª–∞—Ç\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –ø–æ–¥—Å—Ç—Ä–æ—é –¥–∞–ª—å—à–µ."
            elif lang=="uk":
                msg = "–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –ø—ñ–¥—ñ–π–¥–µ:\n‚Ä¢ –°–∏—Ä 200 –≥ + –æ–≥—ñ—Ä–æ–∫\n‚Ä¢ –û–º–ª–µ—Ç 2 —è–π—Ü—è + –æ–≤–æ—á—ñ\n‚Ä¢ –°–∞—Ä–¥–∏–Ω–∏ 1 –±–∞–Ω–∫–∞ + —Å–∞–ª–∞—Ç\n–û–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç ‚Äî –ø—ñ–¥–ª–∞—à—Ç—É—é –¥–∞–ª—ñ."
            else:
                msg = "Good picks for today:\n‚Ä¢ Cottage cheese 200 g + cucumber\n‚Ä¢ 2-egg omelet + veggies\n‚Ä¢ Sardines (1 can) + salad\nPick one ‚Äî I‚Äôll tailor next."
            await update.message.reply_text(msg, reply_markup=inline_actions(lang))
        else:
            await update.message.reply_text(T[lang]["unknown"], reply_markup=inline_actions(lang))
        ask_feedback_soft(uid, context, lang)
        return

    if sessions.get(uid, {}).get("p_wait_key"):
        key = sessions[uid]["p_wait_key"]; sessions[uid]["p_wait_key"] = None
        val = text
        if key in {"age","height_cm","weight_kg"}:
            m = re.search(r'\d{1,3}', text)
            if m: val = m.group(0)
        profiles_upsert(uid,{key:val}); sessions[uid][key]=val
        users_set(uid, "profile_banner_shown", "no")
        await advance_profile_ctx(context, update.effective_chat.id, lang, uid); return

    s = sessions.get(uid, {})
    if s.get("topic") == "pain":
        if re.search(r"\b(stop|exit|back|–Ω–∞–∑–∞–¥|–≤—ã—Ö–æ–¥|–≤—ã–π—Ç–∏)\b", text.lower()):
            sessions.pop(uid, None)
            await update.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
            return
        if s.get("step") == 1:
            await send_unique(update.message, uid, T[lang]["triage_pain_q2"], reply_markup=_kb_for_code(lang, "painkind")); return
        if s.get("step") == 2:
            await send_unique(update.message, uid, T[lang]["triage_pain_q3"], reply_markup=_kb_for_code(lang, "paindur")); return
        if s.get("step") == 3:
            await update.message.reply_text(T[lang]["triage_pain_q4"], reply_markup=_kb_for_code(lang, "num")); return
        if s.get("step") == 4:
            m = re.fullmatch(r"(?:10|[0-9])", text)
            if m:
                sev = int(m.group(0)); s.setdefault("answers", {})["severity"] = sev; s["step"] = 5
                await update.message.reply_text(T[lang]["triage_pain_q5"], reply_markup=_kb_for_code(lang, "painrf")); return
            await update.message.reply_text(T[lang]["triage_pain_q4"], reply_markup=_kb_for_code(lang, "num")); return

    if should_show_profile_banner(uid):
        prof = profiles_get(uid)
        banner = profile_banner(lang, prof)
        if banner.strip().strip("‚Äî"):
            await update.message.reply_text(banner)
        users_set(uid, "profile_banner_shown", "yes")

    prof = profiles_get(uid)
    data = llm_router_answer(text, lang, prof)

    msg = apply_warm_tone(data.get("assistant_reply") or T[lang]["unknown"], lang)
    await update.message.reply_text(msg, reply_markup=inline_actions(lang))
    ask_feedback_soft(uid, context, lang)
    for one in (data.get("followups") or [])[:2]:
        await send_unique(update.message, uid, apply_warm_tone(one, lang), force=True)
    return

# ===== Callback handler =====
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    data = (q.data or ""); uid = q.from_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    chat_id = q.message.chat.id

    if data.startswith("gate:"):
        await gate_cb(update, context); return

    if data.startswith("p|"):
        _, action, key, *rest = data.split("|")
        s = sessions.setdefault(uid, {"profile_active": True, "p_step": 0})
        if action == "choose":
            value = "|".join(rest) if rest else ""
            s[key] = value; profiles_upsert(uid, {key: value})
            users_set(uid, "profile_banner_shown", "no")
            await advance_profile_ctx(context, chat_id, lang, uid); return
        if action == "write":
            s["p_wait_key"] = key
            await q.message.reply_text({"ru":"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:","uk":"–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ:","en":"Type your answer:","es":"Escribe tu respuesta:"}[lang]); return
        if action == "skip":
            profiles_upsert(uid, {key: ""})
            await advance_profile_ctx(context, chat_id, lang, uid); return

    if data.startswith("consent|"):
        users_set(uid, "consent", "yes" if data.endswith("|yes") else "no")
        try: await q.edit_message_reply_markup(reply_markup=None)
        except: pass
        await q.message.reply_text(T[lang]["thanks"]); return

    if data.startswith("mood|"):
        mood = data.split("|",1)[1]
        if mood=="note":
            sessions.setdefault(uid,{})["awaiting_daily_comment"] = True
            await q.message.reply_text({"ru":"–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:","uk":"–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä:","en":"Short note:","es":"Nota corta:"}[lang]); return
        daily_add(iso(utcnow()), uid, mood, "")
        if mood in {"good","ok"}:
            txt = {"ru":"–û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –±—ã—Å—Ç—Ä–æ–µ ‚Äî —Å–æ–Ω –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏–µ?",
                   "uk":"–ö–ª–∞—Å! –î–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É –ø—ñ–¥–∫–∞–∑–∫—É ‚Äî —Å–æ–Ω —á–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è?",
                   "en":"Great! Quick tip ‚Äî sleep or nutrition?",
                   "es":"¬°Genial! Consejo r√°pido ‚Äî sue√±o o nutrici√≥n?"}[lang]
        else:
            txt = {"ru":"–ü–æ–Ω–∏–º–∞—é. –ß—Ç–æ –º–µ—à–∞–µ—Ç –±–æ–ª—å—à–µ ‚Äî —É—Å—Ç–∞–ª–æ—Å—Ç—å, —Å—Ç—Ä–µ—Å—Å –∏–ª–∏ –¥—Ä—É–≥–æ–µ?",
                   "uk":"–†–æ–∑—É–º—ñ—é. –©–æ –∑–∞–≤–∞–∂–∞—î –±—ñ–ª—å—à–µ ‚Äî –≤—Ç–æ–º–∞, —Å—Ç—Ä–µ—Å —á–∏ —ñ–Ω—à–µ?",
                   "en":"Got it. What‚Äôs bothering more ‚Äî fatigue, stress, or something else?",
                   "es":"Entiendo. ¬øM√°s fatiga, estr√©s u otra cosa?"}[lang]
        await q.message.reply_text(txt)
        await q.message.reply_text(T[lang]["mood_thanks"])
        return

    if data.startswith("topic|"):
        topic = data.split("|",1)[1]
        if topic=="profile":
            await start_profile_ctx(context, chat_id, lang, uid); return
        if topic=="pain":
            sessions[uid] = {"topic":"pain","step":1,"answers":{}}
            kb = _kb_for_code(lang, "painloc")
            await q.message.reply_text(T[lang]["triage_pain_q1"], reply_markup=kb); return
        last = sessions.get(uid,{}).get("last_user_text","")
        prof = profiles_get(uid)
        prompt = f"topic:{topic}\nlast_user: {last or '‚Äî'}"
        data_llm = llm_router_answer(prompt, lang, prof)
        reply = apply_warm_tone(data_llm.get("assistant_reply") or T[lang]["unknown"], lang)
        await q.message.reply_text(reply, reply_markup=inline_actions(lang))
        for one in (data_llm.get("followups") or [])[:2]:
            await send_unique(q.message, uid, apply_warm_tone(one, lang), force=True)
        return

    s = sessions.setdefault(uid, {})
    if data == "pain|exit":
        sessions.pop(uid, None)
        await q.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang)); return

    if data.startswith("painloc|"):
        s.update({"topic":"pain","step":2,"answers":{"loc": data.split("|",1)[1]}})
        await send_unique(q.message, uid, T[lang]["triage_pain_q2"], reply_markup=_kb_for_code(lang,"painkind")); return

    if data.startswith("painkind|"):
        s.setdefault("answers",{})["kind"] = data.split("|",1)[1]; s["step"]=3
        await send_unique(q.message, uid, T[lang]["triage_pain_q3"], reply_markup=_kb_for_code(lang,"paindur")); return

    if data.startswith("paindur|"):
        s.setdefault("answers",{})["duration"] = data.split("|",1)[1]; s["step"]=4
        await send_unique(q.message, uid, T[lang]["triage_pain_q4"], reply_markup=_kb_for_code(lang,"num")); return

    if data.startswith("num|"):
        if s.get("topic")=="pain" and s.get("step")==4:
            sev = int(data.split("|",1)[1])
            s.setdefault("answers",{})["severity"] = sev; s["step"]=5
            await send_unique(q.message, uid, T[lang]["triage_pain_q5"], reply_markup=_kb_for_code(lang,"painrf")); return

    if data.startswith("painrf|"):
        red = data.split("|",1)[1]
        s.setdefault("answers",{})["red"] = red
        sev = int(s["answers"].get("severity",5))
        eid = episode_create(uid, "pain", sev, red); s["episode_id"] = eid
        plan_lines = pain_plan(lang, [red], profiles_get(uid))
        text_plan = f"{T[lang]['plan_header']}\n" + "\n".join(plan_lines)
        await q.message.reply_text(text_plan)
        await q.message.reply_text(T[lang]["plan_accept"], reply_markup=inline_accept(lang))
        s["step"] = 6; return

    if data.startswith("acc|"):
        accepted = "1" if data.endswith("|yes") else "0"
        if s.get("episode_id"): episode_set(s["episode_id"], "plan_accepted", accepted)
        await q.message.reply_text(T[lang]["remind_when"], reply_markup=inline_remind(lang))
        s["step"] = 7; return

    if data.startswith("rem|"):
        choice = data.split("|",1)[1]
        hours = {"4h":4, "evening":6, "morning":16}.get(choice)
        if hours and s.get("episode_id"):
            next_time = utcnow() + timedelta(hours=hours)
            episode_set(s["episode_id"], "next_checkin_at", iso(next_time))
            if _has_jq_ctx(context):
                context.application.job_queue.run_once(job_checkin_episode, when=hours*3600,
                                                       data={"user_id":uid,"episode_id":s["episode_id"]})
            else:
                logging.warning("JobQueue not available ‚Äì episode follow-up not scheduled.")
        await q.message.reply_text(T[lang]["thanks"], reply_markup=inline_topic_kb(lang))
        sessions.pop(uid, None); return

    if data.startswith("act|"):
        parts = data.split("|"); kind = parts[1]
        if kind=="h60":
            sessions.setdefault(uid,{})["awaiting_h60"] = True
            await q.message.reply_text(T[lang]["h60_intro"]); return
        if kind=="rem":
            key = parts[2]; hours = {"4h":4, "evening":6, "morning":16}.get(key,4)
            when_ = utcnow() + timedelta(hours=hours)
            rid = reminder_add(uid, T[lang]["thanks"], when_)
            if _has_jq_ctx(context):
                context.application.job_queue.run_once(job_oneoff_reminder, when=hours*3600,
                                                       data={"user_id":uid,"reminder_id":rid})
            else:
                logging.warning("JobQueue not available ‚Äì one-off reminder not scheduled.")
            await q.message.reply_text(T[lang]["thanks"]); return
        if kind=="save":
            episode_create(uid, "general", 0, ""); await q.message.reply_text(T[lang]["act_saved"]); return
        if kind=="ex":
            txt = {"ru":"üßò 5 –º–∏–Ω—É—Ç —à–µ—è: 1) –º–µ–¥–ª–µ–Ω–Ω—ã–µ –Ω–∞–∫–ª–æ–Ω—ã –≤–ø–µ—Ä—ë–¥/–Ω–∞–∑–∞–¥ √ó5; 2) –ø–æ–≤–æ—Ä–æ—Ç—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã √ó5; 3) –ø–æ–ª—É–∫—Ä—É–≥–∏ –ø–æ–¥–±–æ—Ä–æ–¥–∫–æ–º √ó5; 4) –ª—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ —Ç—Ä–∞–ø–µ—Ü–∏–π 2√ó20 —Å–µ–∫.",
                   "uk":"üßò 5 —Ö–≤ —à–∏—è: 1) –ø–æ–≤—ñ–ª—å–Ω—ñ –Ω–∞—Ö–∏–ª–∏ –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥ √ó5; 2) –ø–æ–≤–æ—Ä–æ—Ç–∏ –≤ —Å—Ç–æ—Ä–æ–Ω–∏ √ó5; 3) –ø—ñ–≤–∫–æ–ª–∞ –ø—ñ–¥–±–æ—Ä—ñ–¥–¥—è–º √ó5; 4) –ª–µ–≥–∫–∞ —Ä–æ–∑—Ç—è–∂–∫–∞ —Ç—Ä–∞–ø–µ—Ü—ñ–π 2√ó20 —Å.",
                   "en":"üßò 5-min neck: 1) slow flex/extend √ó5; 2) rotations left/right √ó5; 3) chin semicircles √ó5; 4) gentle upper-trap stretch 2√ó20s.",
                   "es":"üßò Cuello 5 min: 1) flex/extensi√≥n lenta √ó5; 2) giros izq/der √ó5; 3) semic√≠rculos con la barbilla √ó5; 4) estiramiento trapecio sup. 2√ó20s."}[lang]
            await q.message.reply_text(txt); return
        if kind=="lab":
            sessions.setdefault(uid,{})["awaiting_city"] = True
            await q.message.reply_text(T[lang]["act_city_prompt"]); return
        if kind=="er":
            await q.message.reply_text(T[lang]["er_text"]); return

    if data.startswith("fb|"):
        sub = data.split("|",1)[1]
        if sub == "up":
            feedback_add(iso(utcnow()), uid, "feedback_yes", q.from_user.username, 1, "")
            await q.message.reply_text(T[lang]["fb_thanks"]); return
        if sub == "down":
            feedback_add(iso(utcnow()), uid, "feedback_no",  q.from_user.username, 0, "")
            await q.message.reply_text(T[lang]["fb_thanks"]); return
        if sub == "text":
            sessions.setdefault(uid,{})["awaiting_free_feedback"] = True
            await q.message.reply_text(T[lang]["fb_write"]); return

# ---------- Build & run ----------
async def post_init(app):
    me = await app.bot.get_me()
    logging.info(f"BOT READY: @{me.username} (id={me.id})")

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = norm_lang(getattr(user, "language_code", None))
    users_upsert(user.id, user.username or "", lang)
    context.user_data["lang"] = lang
    sessions.setdefault(user.id, {})["last_user_text"] = "/start"
    await update.message.reply_text(T[lang]["welcome"], reply_markup=ReplyKeyboardRemove())
    prof = profiles_get(user.id)
    if prof and should_show_profile_banner(user.id):
        await update.message.reply_text(profile_banner(lang, prof))
        users_set(user.id, "profile_banner_shown", "yes")
    await update.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
    if not profiles_get(user.id) and not context.user_data.get(GATE_FLAG_KEY):
        await gate_show(update, context)
    u = users_get(user.id)
    if (u.get("consent") or "").lower() not in {"yes","no"}:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang]["yes"], callback_data="consent|yes"),
                                    InlineKeyboardButton(T[lang]["no"],  callback_data="consent|no")]])
        await update.message.reply_text(T[lang]["ask_consent"], reply_markup=kb)
    tz_off = int(str(u.get("tz_offset") or "0"))
    hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, user.id, tz_off, hhmm, lang)  # —É—Ç—Ä–æ
        schedule_morning_evening(context.application, user.id, tz_off, lang)     # –≤–µ—á–µ—Ä
    else:
        logging.warning("JobQueue not available on /start ‚Äì daily check-ins not scheduled.")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or "en")
    await update.message.reply_text(T[lang]["help"])

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or "en")
    await update.message.reply_text(T[lang]["privacy"])

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "yes")
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text(T[lang]["paused_on"])

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "no")
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text(T[lang]["paused_off"])

# *** –û–ë–ù–û–í–õ–Å–ù–ù–´–ô /delete_data: —á–∏—Å—Ç–∏–º –≤—Å–µ –ª–∏—Å—Ç—ã –∏ —Å–Ω–∏–º–∞–µ–º –¥–∂–æ–±—ã
async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id

    if SHEETS_ENABLED:
        def _delete_where(ws, col_name, value):
            vals = ws.get_all_values()
            if not vals: return
            hdr = vals[0]
            try:
                col = hdr.index(col_name) + 1
            except ValueError:
                return
            rows = []
            for i in range(2, len(vals) + 1):
                try:
                    if ws.cell(i, col).value == str(value):
                        rows.append(i)
                except Exception:
                    continue
            for i in reversed(rows):
                ws.delete_rows(i)

        _delete_where(ws_users,    "user_id", uid)
        _delete_where(ws_profiles, "user_id", uid)
        _delete_where(ws_episodes, "user_id", uid)
        _delete_where(ws_reminders,"user_id", uid)
        _delete_where(ws_daily,    "user_id", uid)
        _delete_where(ws_feedback, "user_id", uid)
    else:
        MEM_USERS.pop(uid, None)
        MEM_PROFILES.pop(uid, None)
        global MEM_EPISODES, MEM_REMINDERS, MEM_DAILY, MEM_FEEDBACK
        MEM_EPISODES  = [r for r in MEM_EPISODES  if r["user_id"] != str(uid)]
        MEM_REMINDERS = [r for r in MEM_REMINDERS if r["user_id"] != str(uid)]
        MEM_DAILY     = [r for r in MEM_DAILY     if r["user_id"] != str(uid)]
        MEM_FEEDBACK  = [r for r in MEM_FEEDBACK  if r["user_id"] != str(uid)]

    # —Å–Ω–∏–º–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if _has_jq_ctx(context):
        for name in [f"daily_{uid}", f"daily_e_{uid}"]:
            for j in context.application.job_queue.get_jobs_by_name(name):
                j.schedule_removal()

    lang = norm_lang(getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(T[lang]["deleted"], reply_markup=ReplyKeyboardRemove())

async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user, "language_code", None))
    await start_profile_ctx(context, update.effective_chat.id, lang, uid)

# *** –û–ë–ù–û–í–õ–Å–ù–ù–´–ô /settz: –∫–ª–∏–ø–ø–∏–Ω–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚àí12‚Ä¶+14
async def cmd_settz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    parts = (update.message.text or "").split()
    if len(parts)<2 or not re.fullmatch(r"[+-]?\d{1,2}", parts[1]):
        await update.message.reply_text({"ru":"–§–æ—Ä–º–∞—Ç: /settz +3","uk":"–§–æ—Ä–º–∞—Ç: /settz +2",
                                         "en":"Usage: /settz +3","es":"Uso: /settz +3"}[lang]); return
    off = int(parts[1])
    off = max(-12, min(14, off))  # –∫–ª–∏–ø–ø–∏–º —Å–º–µ—â–µ–Ω–∏–µ
    users_set(uid, "tz_offset", str(off))
    hhmm = users_get(uid).get("checkin_hour") or DEFAULT_CHECKIN_LOCAL
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, uid, off, hhmm, lang)  # —É—Ç—Ä–æ
        schedule_morning_evening(context.application, uid, off, lang)      # –≤–µ—á–µ—Ä
    await update.message.reply_text({"ru":f"–°–¥–≤–∏–≥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {off}—á",
                                     "uk":f"–ó—Å—É–≤: {off} –≥–æ–¥",
                                     "en":f"Timezone offset: {off}h",
                                     "es":f"Desfase horario: {off}h"}[lang])

async def cmd_checkin_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    parts = (update.message.text or "").split(maxsplit=1)
    hhmm = DEFAULT_CHECKIN_LOCAL
    if len(parts)==2:
        m = re.search(r'([01]?\d|2[0-3]):([0-5]\d)', parts[1])
        if m: hhmm = m.group(0)
    users_set(uid,"checkin_hour",hhmm)
    tz_off = int(str(users_get(uid).get("tz_offset") or "0"))
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, uid, tz_off, hhmm, lang)  # —É—Ç—Ä–æ
        schedule_morning_evening(context.application, uid, tz_off, lang)      # –≤–µ—á–µ—Ä
    else:
        logging.warning("JobQueue not available ‚Äì daily check-in not scheduled.")
    await update.message.reply_text({"ru":f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤–∫–ª—é—á—ë–Ω ({hhmm}).",
                                     "uk":f"–©–æ–¥–µ–Ω–Ω–∏–π —á–µ–∫-—ñ–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–æ ({hhmm}).",
                                     "en":f"Daily check-in enabled ({hhmm}).",
                                     "es":f"Check-in diario activado ({hhmm})."}[lang])

async def cmd_checkin_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if _has_jq_ctx(context):
        for name in [f"daily_{uid}", f"daily_e_{uid}"]:
            for j in context.application.job_queue.get_jobs_by_name(name):
                j.schedule_removal()
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text({"ru":"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤—ã–∫–ª—é—á–µ–Ω.",
                                     "uk":"–©–æ–¥–µ–Ω–Ω–∏–π —á–µ–∫-—ñ–Ω –≤–∏–º–∫–Ω–µ–Ω–æ.",
                                     "en":"Daily check-in disabled.",
                                     "es":"Check-in diario desactivado."}[lang])

def build_app() -> "Application":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(post_init).build()
    # –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º PRO-–æ–ø—Ä–æ—Å–Ω–∏–∫
    try:
        register_intake_pro(app, GSPREAD_CLIENT, on_complete_cb=_ipro_save_to_sheets_and_open_menu)
        logging.info("Intake Pro registered.")
    except Exception as e:
        logging.warning(f"Intake Pro registration failed: {e}")
    # Commands
    app.add_handler(CommandHandler("start",        cmd_start))
    app.add_handler(CommandHandler("help",         cmd_help))
    app.add_handler(CommandHandler("privacy",      cmd_privacy))
    app.add_handler(CommandHandler("pause",        cmd_pause))
    app.add_handler(CommandHandler("resume",       cmd_resume))
    app.add_handler(CommandHandler("delete_data",  cmd_delete_data))  # –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    app.add_handler(CommandHandler("profile",      cmd_profile))
    app.add_handler(CommandHandler("settz",        cmd_settz))        # –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    app.add_handler(CommandHandler("checkin_on",   cmd_checkin_on))
    app.add_handler(CommandHandler("checkin_off",  cmd_checkin_off))
    app.add_handler(CommandHandler("health60",     cmd_health60))
    app.add_handler(CommandHandler("intake",       cmd_intake))
    # Youth
    app.add_handler(CommandHandler("energy",       cmd_energy))
    app.add_handler(CommandHandler("mood",         cmd_mood))
    app.add_handler(CommandHandler("water",        cmd_water))
    app.add_handler(CommandHandler("skin",         cmd_skin))
    # Lang toggles
    app.add_handler(CommandHandler("ru", lambda u,c: users_set(u.effective_user.id,"lang","ru") or u.message.reply_text("–û–∫, –¥–∞–ª—å—à–µ –æ—Ç–≤–µ—á–∞—é –ø–æ-—Ä—É—Å—Å–∫–∏.")))
    app.add_handler(CommandHandler("en", lambda u,c: users_set(u.effective_user.id,"lang","en")  or u.message.reply_text("OK, I‚Äôll reply in English.")))
    app.add_handler(CommandHandler("uk", lambda u,c: users_set(u.effective_user.id,"lang","uk")  or u.message.reply_text("–û–∫, –Ω–∞–¥–∞–ª—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏–º—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.")))
    app.add_handler(CommandHandler("es", lambda u,c: users_set(u.effective_user.id,"lang","es")  or u.message.reply_text("De acuerdo, responder√© en espa√±ol.")))
    # Gate & callbacks
    app.add_handler(CallbackQueryHandler(gate_cb, pattern=r"^gate:"))
    app.add_handler(CallbackQueryHandler(on_callback, pattern=r"^(?!intake:)"))
    # Text
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    return app

if __name__ == "__main__":
    if not TELEGRAM_TOKEN:
        logging.error("TELEGRAM_TOKEN is not set")
        raise SystemExit(1)
    application = build_app()
    try:
        schedule_from_sheet_on_start(application)
    except Exception as e:
        logging.warning(f"Scheduling restore failed: {e}")
    logging.info("Starting TendAI bot polling‚Ä¶")
    application.run_polling()
