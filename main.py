import os
import time
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CommandHandler,
    ContextTypes, filters, CallbackQueryHandler
)
from openai import OpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–∞–º—è—Ç—å –∏ —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
user_memory = {}
message_counter = {}

# –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–∏–º–ø—Ç–æ–º–∞–º
quick_mode_symptoms = {
    "–≥–æ–ª–æ–≤–∞": """üïê –ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥:
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Å—Ç—Ä–µ—Å—Å, –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ, –Ω–µ–¥–æ—Å—ã–ø  
ü©∫ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –≤—ã–ø–µ–π –≤–æ–¥—ã, –æ—Ç–¥–æ—Ö–Ω–∏, –ø—Ä–æ–≤–µ—Ç—Ä–∏ –∫–æ–º–Ω–∞—Ç—É  
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ –±–æ–ª—å –≤–Ω–µ–∑–∞–ø–Ω–∞—è, —Å–∏–ª—å–Ω–∞—è, —Å —Ç–æ—à–Ω–æ—Ç–æ–π –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –∑—Ä–µ–Ω–∏—è""",

    "–∂–∏–≤–æ—Ç": """üïê –ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥:
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –≥–∞—Å—Ç—Ä–∏—Ç, –ø–∏—Ç–∞–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å  
ü©∫ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: —Ç—ë–ø–ª–∞—è –≤–æ–¥–∞, –ø–æ–∫–æ–π, –∏—Å–∫–ª—é—á–∏ –µ–¥—É –Ω–∞ 2 —á–∞—Å–∞  
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ –±–æ–ª—å —Ä–µ–∑–∫–∞—è, —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π, —Ä–≤–æ—Ç–æ–π –∏–ª–∏ –¥–ª–∏—Ç—Å—è >1 –¥–Ω—è""",

    "—Å–ª–∞–±–æ—Å—Ç—å": """üïê –ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥:
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —É—Å—Ç–∞–ª–æ—Å—Ç—å, –≤–∏—Ä—É—Å, –∞–Ω–µ–º–∏—è  
ü©∫ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –æ—Ç–¥—ã—Ö, –ø–æ–µ—à—å, –≤—ã–ø–µ–π –≤–æ–¥—ã  
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ —Å–ª–∞–±–æ—Å—Ç—å –¥–ª–∏—Ç—Å—è >2 –¥–Ω–µ–π –∏–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç"""
}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è TendAI ü§ó –ß—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏ –≤–æ–ª–Ω—É–µ—Ç? –Ø –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å.")

# –ö–Ω–æ–ø–∫–∏ —Ñ–∏–¥–±–µ–∫–∞
def feedback_buttons():
    buttons = [
        [
            InlineKeyboardButton("üëç –î–∞", callback_data="feedback_yes"),
            InlineKeyboardButton("üëé –ù–µ—Ç", callback_data="feedback_no")
        ]
    ]
    return InlineKeyboardMarkup(buttons)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
async def feedback_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    feedback = query.data
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with open("feedback_log.txt", "a", encoding="utf-8") as f:
        f.write(f"{timestamp} | user_id={user_id} | feedback={feedback}\n")

    logging.info(f"[–û–¢–ó–´–í] {timestamp} | user_id={user_id} | feedback={feedback}")
    await query.edit_message_reply_markup(reply_markup=None)
    await query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ üôè")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text.strip().lower()
    message_counter[user_id] = message_counter.get(user_id, 0) + 1

    # –ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥
    if "#60—Å–µ–∫" in user_message or "/fast" in user_message:
        for keyword, answer in quick_mode_symptoms.items():
            if keyword in user_message:
                await update.message.reply_text(answer, reply_markup=feedback_buttons())
                return
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ —Å–∏–º–ø—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´#60—Å–µ–∫ –≥–æ–ª–æ–≤–∞¬ª –∏–ª–∏ ¬´/fast –∂–∏–≤–æ—Ç¬ª.", 
            reply_markup=feedback_buttons()
        )
        return

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è
    if "–≥–æ–ª–æ–≤–∞" in user_message:
        await update.message.reply_text(
            "–ì–¥–µ –∏–º–µ–Ω–Ω–æ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞? –õ–æ–±, –∑–∞—Ç—ã–ª–æ–∫, –≤–∏—Å–∫–∏?\n"
            "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏: —Ç—É–ø–∞—è, –æ—Å—Ç—Ä–∞—è, –ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è?\n"
            "–ï—Å—Ç—å –ª–∏ –µ—â—ë —Å–∏–º–ø—Ç–æ–º—ã ‚Äî —Ç–æ—à–Ω–æ—Ç–∞, —Å–≤–µ—Ç–æ–±–æ—è–∑–Ω—å?"
        )
        user_memory[user_id] = "–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å"
        return
    elif "–≥–æ—Ä–ª–æ" in user_message:
        await update.message.reply_text(
            "–ì–æ—Ä–ª–æ –±–æ–ª–∏—Ç –ø—Ä–∏ –≥–ª–æ—Ç–∞–Ω–∏–∏ –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ?\n"
            "–ï—Å—Ç—å –ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–ª–∏ –∫–∞—à–µ–ª—å?\n"
            "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ—Å—å?"
        )
        user_memory[user_id] = "–±–æ–ª—å –≤ –≥–æ—Ä–ª–µ"
        return
    elif "–∫–∞—à–µ–ª—å" in user_message:
        await update.message.reply_text(
            "–ö–∞—à–µ–ª—å —Å—É—Ö–æ–π –∏–ª–∏ —Å –º–æ–∫—Ä–æ—Ç–æ–π?\n"
            "–î–∞–≤–Ω–æ –ª–∏ –æ–Ω —É –≤–∞—Å?\n"
            "–ï—Å—Ç—å –ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –±–æ–ª—å –≤ –≥—Ä—É–¥–∏ –∏–ª–∏ –æ–¥—ã—à–∫–∞?"
        )
        user_memory[user_id] = "–∫–∞—à–µ–ª—å"
        return

    # –ü–∞–º—è—Ç—å
    memory_text = ""
    if user_id in user_memory:
        memory_text = f"(–¢—ã —Ä–∞–Ω–µ–µ —É–ø–æ–º–∏–Ω–∞–ª: {user_memory[user_id]})\n"

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    system_prompt = (
        "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. "
        "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏. "
        "–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ —Å–∏–º–ø—Ç–æ–º, –∑–∞–¥–∞–π 1-2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, —É–∫–∞–∂–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã (3‚Äì5 —Å–ª–æ–≤), "
        "—á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ–º–∞ –∏ –∫–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É. "
        "–ò–∑–±–µ–≥–∞–π –¥–ª–∏–Ω–Ω—ã—Ö –≤–≤–æ–¥–Ω—ã—Ö. –ü–∏—à–∏ –∫–∞–∫ –¥–æ–±—Ä—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π —á–µ–ª–æ–≤–µ–∫, –Ω–æ –ø–æ –¥–µ–ª—É. "
        "–¢—ã ‚Äî –±–æ—Ç TendAI, –Ω–µ –≤—Ä–∞—á, –Ω–æ —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–∏."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ],
            temperature=0.7,
            max_tokens=400
        )
        bot_reply = memory_text + response.choices[0].message.content.strip()
    except Exception as e:
        bot_reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}"

    await update.message.reply_text(bot_reply, reply_markup=feedback_buttons())

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(feedback_callback))

    print("TendAI –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            app.run_polling()
        except Exception as e:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
            time.sleep(5)
