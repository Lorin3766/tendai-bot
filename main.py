# main.py
import os
import re
import json
import logging
from datetime import datetime

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# --- Optional deps (no-crash) ---
try:
    from openai import OpenAI
except Exception:
    OpenAI = None

try:
    import gspread
    from oauth2client.service_account import ServiceAccountCredentials
except Exception:
    gspread = None
    ServiceAccountCredentials = None

# ============== Config & Setup ==============
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is missing")

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO
)

client = OpenAI(api_key=OPENAI_API_KEY) if (OPENAI_API_KEY and OpenAI) else None

# ------------- Google Sheets (optional) -------------
sheet = None
if gspread and ServiceAccountCredentials:
    creds_env = os.getenv("GOOGLE_CREDENTIALS_JSON")
    if creds_env:
        try:
            scope = ["https://spreadsheets.google.com/feeds",
                     "https://www.googleapis.com/auth/drive"]
            creds_dict = json.loads(creds_env)
            credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
            gclient = gspread.authorize(credentials)
            sheet = gclient.open("TendAI Feedback").worksheet("Feedback")
            logging.info("Google Sheets connected")
        except Exception as e:
            logging.exception(f"Sheets connect error: {e}")
    else:
        logging.info("GOOGLE_CREDENTIALS_JSON not set ‚Äî feedback rows will be skipped.")

def add_feedback_row(user, name, rating, comment):
    """
    Append full feedback row. Expected header:
    timestamp | user_id | name | username | rating | comment
    """
    if not sheet:
        return
    try:
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        username = user.username or ""
        sheet.append_row([ts, str(user.id), name, username, rating, comment or ""])
    except Exception:
        logging.exception("Failed to append feedback row")

# ============== Memory & Templates ==============
user_memory = {}        # user_id -> last simple symptom tag
pending_feedback = {}   # user_id -> {"name": "feedback_yes|feedback_no", "rating": 1|0}

quick_mode_symptoms = {
    "–≥–æ–ª–æ–≤–∞": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Å—Ç—Ä–µ—Å—Å, –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ, –Ω–µ–¥–æ—Å—ã–ø
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –≤—ã–ø–µ–π –≤–æ–¥—ã, –æ—Ç–¥–æ—Ö–Ω–∏, –ø—Ä–æ–≤–µ—Ç—Ä–∏ –∫–æ–º–Ω–∞—Ç—É
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ –±–æ–ª—å –≤–Ω–µ–∑–∞–ø–Ω–∞—è, —Å–∏–ª—å–Ω–∞—è, —Å —Ç–æ—à–Ω–æ—Ç–æ–π –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –∑—Ä–µ–Ω–∏—è""",

    "head": """[Quick Health Check]
üí° Possible causes: stress, dehydration, fatigue
ü™™ Try: rest, hydration, fresh air
üö® See a doctor if pain is sudden, severe, or with nausea/vision issues""",

    "–∂–∏–≤–æ—Ç": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –≥–∞—Å—Ç—Ä–∏—Ç, –ø–∏—Ç–∞–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: —Ç—ë–ø–ª–∞—è –≤–æ–¥–∞, –ø–æ–∫–æ–π, –∏—Å–∫–ª—é—á–∏ –µ–¥—É –Ω–∞ 2 —á–∞—Å–∞
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ –±–æ–ª—å —Ä–µ–∑–∫–∞—è, —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π, —Ä–≤–æ—Ç–æ–π –∏–ª–∏ –¥–ª–∏—Ç—Å—è >1 –¥–Ω—è""",

    "stomach": """[Quick Health Check]
üí° Possible causes: gastritis, poor diet, stress
ü™™ Try: warm water, rest, skip food for 2 hours
üö® See a doctor if pain is sharp, with fever or vomiting""",

    "—Å–ª–∞–±–æ—Å—Ç—å": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —É—Å—Ç–∞–ª–æ—Å—Ç—å, –≤–∏—Ä—É—Å, –∞–Ω–µ–º–∏—è
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –æ—Ç–¥—ã—Ö, –ø–æ–µ—à—å, –≤—ã–ø–µ–π –≤–æ–¥—ã
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ —Å–ª–∞–±–æ—Å—Ç—å –¥–ª–∏—Ç—Å—è >2 –¥–Ω–µ–π –∏–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç""",

    "weakness": """[Quick Health Check]
üí° Possible causes: fatigue, virus, low iron
ü™™ Try: rest, eat, hydrate
üö® Doctor: if weakness lasts >2 days or gets worse"""
}

def feedback_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üëç –î–∞", callback_data="feedback_yes"),
         InlineKeyboardButton("üëé –ù–µ—Ç", callback_data="feedback_no")]
    ])

# ====== Light language detection (no paid libs, no crashes) ======
try:
    from langdetect import detect as ld_detect
except Exception:
    ld_detect = None

def detect_lang(text: str, tg_lang: str | None = None) -> str:
    """langdetect if available -> heuristics (UK letters / any Cyrillic) -> Telegram UI lang -> en"""
    if ld_detect:
        try:
            return ld_detect(text)
        except Exception:
            pass
    t = text.lower()
    if any(ch in t for ch in "—ñ—ó—î“ë"):
        return "uk"
    if re.search(r"[–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î“ê“ë]", text):
        if sum(t.count(ch) for ch in "—ñ—ó—î“ë") >= 2:
            return "uk"
        return "ru"
    if tg_lang:
        if tg_lang.startswith("en"):
            return "en"
        if tg_lang.startswith(("uk", "ru")):
            return tg_lang[:2]
    return "en"

SYS_PROMPT = {
    "en": ("You are TendAI, a caring, concise health assistant. Reply in the user's language (English here). "
           "If a symptom appears: ask 1‚Äì2 clarifying questions, give 2‚Äì3 possible causes, simple home care, "
           "and when to see a doctor. Be calm and clear."),
    "ru": ("–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é TendAI. –û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
           "(–∑–¥–µ—Å—å ‚Äî —Ä—É—Å—Å–∫–∏–π). –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º: 1‚Äì2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, 2‚Äì3 –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã, "
           "—á—Ç–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ–º–∞ –∏ –∫–æ–≥–¥–∞ –∏–¥—Ç–∏ –∫ –≤—Ä–∞—á—É. –°–ø–æ–∫–æ–π–Ω–æ –∏ –ø–æ –¥–µ–ª—É."),
    "uk": ("–¢–∏ ‚Äî —Ç—É—Ä–±–æ—Ç–ª–∏–≤–∏–π —ñ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑—ñ –∑–¥–æ—Ä–æ–≤'—è TendAI. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –º–æ–≤–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "
           "(—Ç—É—Ç ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é). –Ø–∫—â–æ —î —Å–∏–º–ø—Ç–æ–º: 1‚Äì2 —É—Ç–æ—á–Ω—é–≤–∞–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, 2‚Äì3 –º–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏, "
           "—â–æ –∑—Ä–æ–±–∏—Ç–∏ –≤–¥–æ–º–∞ —ñ –∫–æ–ª–∏ –¥–æ –ª—ñ–∫–∞—Ä—è. –°–ø–æ–∫—ñ–π–Ω–æ —ñ –ø–æ —Å—É—Ç—ñ."),
}

FALLBACK = {
    "en": "I need a bit more information to help. Where exactly does it hurt? How long has it lasted?",
    "ru": "–ú–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å. –ì–¥–µ –∏–º–µ–Ω–Ω–æ –±–æ–ª–∏—Ç –∏ –∫–∞–∫ –¥–∞–≤–Ω–æ —ç—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?",
    "uk": "–ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏. –î–µ —Å–∞–º–µ –±–æ–ª–∏—Ç—å —ñ –≤—ñ–¥–∫–æ–ª–∏ —Ü–µ —Ç—Ä–∏–≤–∞—î?",
}

# ============== Lifecycle / Commands ==============
async def on_startup(app):
    me = await app.bot.get_me()
    logging.info(f"Running as @{me.username}")
    # —á–∏—Å—Ç–∏–º –≤–µ–±—Ö—É–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —á—Ç–æ–±—ã polling –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª
    await app.bot.delete_webhook(drop_pending_updates=True)
    logging.info("Webhook cleared")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è? –ï—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ?",
        reply_markup=feedback_buttons()
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

async def skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid in pending_feedback:
        data = pending_feedback.pop(uid)
        add_feedback_row(update.effective_user, data["name"], data["rating"], "")
        await update.message.reply_text("–û–∫–µ–π, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –°–ø–∞—Å–∏–±–æ! üôè")
    else:
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å üôÇ")

# ============== Feedback (buttons) ==============
async def feedback_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        q = update.callback_query
        await q.answer()
        user = q.from_user
        choice = q.data  # feedback_yes | feedback_no
        rating = 1 if choice == "feedback_yes" else 0

        pending_feedback[user.id] = {"name": choice, "rating": rating}

        # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∏—Å—Ö–æ–¥–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            await q.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass

        await q.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É üôè\n"
            "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç.\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
        )
    except Exception:
        logging.exception("feedback_callback error")

# ============== Main handler ==============
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id
        text = (update.message.text or "").strip()
        low = text.lower()
        tg_lang = getattr(user, "language_code", None)
        lang_code = detect_lang(text, tg_lang)

        logging.info(f"Message from {user_id} ({tg_lang}/{lang_code}): {text!r}")

        # 1) –û–∂–∏–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É
        if user_id in pending_feedback and not text.startswith("/"):
            data = pending_feedback.pop(user_id)
            add_feedback_row(user, data["name"], data["rating"], text)
            done_msg = {
                "en": "Comment saved, thank you! üôå",
                "ru": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å–ø–∞—Å–∏–±–æ! üôå",
                "uk": "–ö–æ–º–µ–Ω—Ç–∞—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –¥—è–∫—É—î–º–æ! üôå",
            }.get(lang_code, "Comment saved, thank you! üôå")
            await update.message.reply_text(done_msg)
            return

        # 2) –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
        if "#60—Å–µ–∫" in low or "/fast" in low:
            for k, reply in quick_mode_symptoms.items():
                if k in low:
                    await update.message.reply_text(reply, reply_markup=feedback_buttons())
                    return
            msg = {
                "en": "‚ùó Specify a symptom: ‚Äú/fast stomach‚Äù or ‚Äú#60sec head‚Äù.",
                "ru": "‚ùó –£–∫–∞–∂–∏ —Å–∏–º–ø—Ç–æ–º: ¬´#60—Å–µ–∫ –≥–æ–ª–æ–≤–∞¬ª –∏–ª–∏ ¬´/fast stomach¬ª.",
                "uk": "‚ùó –í–∫–∞–∂–∏ —Å–∏–º–ø—Ç–æ–º: ¬´#60—Å–µ–∫ –≥–æ–ª–æ–≤–∞¬ª –∞–±–æ ¬´/fast stomach¬ª.",
            }.get(lang_code, "‚ùó Specify a symptom: ‚Äú/fast stomach‚Äù or ‚Äú#60sec head‚Äù.")
            await update.message.reply_text(msg, reply_markup=feedback_buttons())
            return

        # 3) –ü—Ä–æ—Å—Ç—ã–µ –º–∏–Ω–∏-–¥–∏–∞–ª–æ–≥–∏ (—Ä—É/—É–∫/–∞–Ω–≥–ª)
        if "–≥–æ–ª–æ–≤–∞" in low or "headache" in low:
            msg = {
                "en": "Where exactly is the headache (forehead, back, temples)? What type (dull, sharp, pulsating)? Any nausea or light sensitivity?",
                "ru": "–ì–¥–µ –∏–º–µ–Ω–Ω–æ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞: –ª–æ–±, –∑–∞—Ç—ã–ª–æ–∫, –≤–∏—Å–∫–∏? –ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: —Ç—É–ø–∞—è, –æ—Å—Ç—Ä–∞—è, –ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è? –ï—Å—Ç—å –ª–∏ —Ç–æ—à–Ω–æ—Ç–∞/—Å–≤–µ—Ç–æ–±–æ—è–∑–Ω—å?",
                "uk": "–î–µ —Å–∞–º–µ –±–æ–ª–∏—Ç—å –≥–æ–ª–æ–≤–∞: –ª–æ–±, –ø–æ—Ç–∏–ª–∏—Ü—è, —Å–∫—Ä–æ–Ω—ñ? –Ø–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: —Ç—É–ø–∏–π, –≥–æ—Å—Ç—Ä–∏–π, –ø—É–ª—å—Å—ñ–≤–Ω–∏–π? –Ñ –Ω—É–¥–æ—Ç–∞/—Å–≤—ñ—Ç–ª–æ–±–æ—è–∑–Ω—å?",
            }.get(lang_code)
            await update.message.reply_text(msg)
            user_memory[user_id] = {
                "en": "headache", "ru": "–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å", "uk": "–≥–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å"
            }.get(lang_code, "headache")
            return

        if "–≥–æ—Ä–ª–æ" in low or "throat" in low:
            msg = {
                "en": "Does it hurt when swallowing or constantly? Any fever or cough? When did it start?",
                "ru": "–ë–æ–ª–∏—Ç –ø—Ä–∏ –≥–ª–æ—Ç–∞–Ω–∏–∏ –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ? –ï—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–ª–∏ –∫–∞—à–µ–ª—å? –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ—Å—å?",
                "uk": "–ë–æ–ª–∏—Ç—å –ø—ñ–¥ —á–∞—Å –∫–æ–≤—Ç–∞–Ω–Ω—è —á–∏ –ø–æ—Å—Ç—ñ–π–Ω–æ? –Ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∞–±–æ –∫–∞—à–µ–ª—å? –ö–æ–ª–∏ –ø–æ—á–∞–ª–æ—Å—è?",
            }.get(lang_code)
            await update.message.reply_text(msg)
            user_memory[user_id] = {"en":"sore throat","ru":"–±–æ–ª—å –≤ –≥–æ—Ä–ª–µ","uk":"–±—ñ–ª—å —É –≥–æ—Ä–ª—ñ"}.get(lang_code, "sore throat")
            return

        if "–∫–∞—à–µ–ª—å" in low or "cough" in low:
            msg = {
                "en": "Is the cough dry or productive? How long? Any fever, chest pain or shortness of breath?",
                "ru": "–ö–∞—à–µ–ª—å —Å—É—Ö–æ–π –∏–ª–∏ —Å –º–æ–∫—Ä–æ—Ç–æ–π? –î–∞–≤–Ω–æ? –ï—Å—Ç—å –ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –±–æ–ª—å –≤ –≥—Ä—É–¥–∏ –∏–ª–∏ –æ–¥—ã—à–∫–∞?",
                "uk": "–ö–∞—à–µ–ª—å —Å—É—Ö–∏–π —á–∏ –∑ –º–æ–∫—Ä–æ—Ç–æ—é? –î–∞–≤–Ω–æ? –Ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –±—ñ–ª—å —É –≥—Ä—É–¥—è—Ö –∞–±–æ –∑–∞–¥–∏—à–∫–∞?",
            }.get(lang_code)
            await update.message.reply_text(msg)
            user_memory[user_id] = {"en":"cough","ru":"–∫–∞—à–µ–ª—å","uk":"–∫–∞—à–µ–ª—å"}.get(lang_code, "cough")
            return

        # 4) –û—Ç–≤–µ—Ç –ò–ò (–∏–ª–∏ —Ñ–æ–ª–ª–±–µ–∫)
        reply_text = FALLBACK.get(lang_code, FALLBACK["en"])
        if client:
            try:
                system_prompt = SYS_PROMPT.get(lang_code, SYS_PROMPT["en"])
                resp = client.chat_completions.create(  # fallback if older SDK; try new:
                    model="gpt-4o-mini",
                    messages=[{"role":"system","content":system_prompt},
                              {"role":"user","content":text}],
                    temperature=0.6,
                    max_tokens=400
                )
                # Some SDKs use client.chat.completions.create; try both:
                if not hasattr(resp, "choices"):
                    resp = client.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=[{"role":"system","content":system_prompt},
                                  {"role":"user","content":text}],
                        temperature=0.6,
                        max_tokens=400
                    )
                reply_text = (resp.choices[0].message.content or "").strip()
                if user_id in user_memory:
                    prefix_map = {
                        "en": f"(You previously mentioned: {user_memory[user_id]})\n",
                        "ru": f"(–†–∞–Ω–µ–µ —É–ø–æ–º–∏–Ω–∞–ª: {user_memory[user_id]})\n",
                        "uk": f"(–†–∞–Ω—ñ—à–µ –∑–≥–∞–¥—É–≤–∞–≤: {user_memory[user_id]})\n",
                    }
                    reply_text = prefix_map.get(lang_code, "") + reply_text
            except Exception as e:
                logging.exception("OpenAI error")
                reply_text = f"{FALLBACK.get(lang_code, FALLBACK['en'])}\n\n(LLM error: {e})"

        await update.message.reply_text(reply_text, reply_markup=feedback_buttons())

    except Exception:
        logging.exception("handle_message fatal error")

# ============== Runner ==============
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("skip", skip_comment))
    app.add_handler(CallbackQueryHandler(feedback_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling(drop_pending_updates=True)
