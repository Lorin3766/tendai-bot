# -*- coding: utf-8 -*-
"""
TendAI Bot ‚Äî Part 1/2: Base & UX
- i18n —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω—ã)
- –≥–∏–±—Ä–∏–¥ –æ–±—â–µ–Ω–∏—è: –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π quickbar UI
- –º–∏–Ω–∏-–æ–ø—Ä–æ—Å–Ω–∏–∫ (–∏–Ω—Ç—Ä–æ) —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
- –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤—Ä–∞–ø–ø–µ—Ä—ã –∫ Google Sheets + –ø–∞–º—è—Ç—å
- –ø–æ–º–æ—â–Ω–∏–∫–∏ (–≤—Ä–µ–º—è, —Ç–∏—Ö–∏–µ —á–∞—Å—ã, –ø—Ä–µ—Ñ–∏–∫—Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏)
- –º–µ—Ç—Ä–∏–∫–∏ –∂–∏–∑–Ω–∏ (—è–¥—Ä–æ), –∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç—ã
- –∫–æ–º–∞–Ω–¥—ã-–æ–±–æ–ª–æ—á–∫–∏ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π post_init

–í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–≤–µ–¥–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫, Health60, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —É—Ç—Ä–µ–Ω–Ω–∏–µ/–≤–µ—á–µ—Ä–Ω–∏–µ –¥–∂–æ–±—ã,
–¥–µ—Ç–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ—á–∞—è –ª–æ–≥–∏–∫–∞ ‚Äî –≤ –ß–∞—Å—Ç–∏ 2.
"""

import os, re, json, uuid, logging, random
from datetime import datetime, timedelta, timezone, date, time as dtime
from typing import Optional, Dict, List, Tuple, Set

from dotenv import load_dotenv
from langdetect import detect, DetectorFactory

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ---------- (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) OpenAI –∫–ª–∏–µ–Ω—Ç ‚Äî –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –≤ –ß–∞—Å—Ç–∏ 2 ----------
try:
    from openai import OpenAI
except Exception:
    OpenAI = None  # —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ, –µ—Å–ª–∏ –ø–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

# ---------- Google Sheets (–Ω–∞–¥—ë–∂–Ω–æ + —Ñ–æ–ª–ª–±—ç–∫ –≤ –ø–∞–º—è—Ç—å) ----------
import gspread
import gspread.utils as gsu
from gspread.exceptions import SpreadsheetNotFound, WorksheetNotFound
from oauth2client.service_account import ServiceAccountCredentials


# ============================= BOOT =============================
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
DetectorFactory.seed = 0

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Sheets")
SHEET_ID = os.getenv("SHEET_ID", "")
ALLOW_CREATE_SHEET = os.getenv("ALLOW_CREATE_SHEET", "0") == "1"

DEFAULT_CHECKIN_LOCAL = os.getenv("DEFAULT_CHECKIN_LOCAL", "08:30")
DEFAULT_EVENING_LOCAL = os.getenv("DEFAULT_EVENING_LOCAL", "20:00")
DEFAULT_QUIET_HOURS = os.getenv("DEFAULT_QUIET_HOURS", "22:00-08:00")

# OpenAI (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ß–∞—Å—Ç–∏ 1)
oai = None
if OPENAI_API_KEY and OpenAI is not None:
    try:
        os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
        oai = OpenAI()
    except Exception as e:
        logging.warning(f"OpenAI init warning: {e}")


# ============================= i18n =============================
SUPPORTED = {"ru", "uk", "en", "es"}

def norm_lang(code: Optional[str]) -> str:
    if not code: return "en"
    c = code.split("-")[0].lower()
    return c if c in SUPPORTED else "en"

T: Dict[str, Dict[str, str]] = {
    "en": {
        # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ/—Å–ø—Ä–∞–≤–∫–∞
        "welcome": "Hi! I‚Äôm TendAI ‚Äî your friendly health & longevity buddy.\nTell me what‚Äôs up ‚Äî or tap a quick action below. I‚Äôll personalize with a 40s intake.",
        "help": "Short check-ins, 24‚Äì48h plans, reminders, daily care.\nCommands: /help /privacy /profile /health60 /mood /energy /hydrate /skintip /cycle /youth /ru /uk /en /es",
        "privacy": "TendAI is not a medical service. We store minimal data for reminders. Use /profile to update, /delete_data to erase.",
        # –≥–∏–±—Ä–∏–¥-–¥–∏–∞–ª–æ–≥ / quickbar
        "quick_title": "Quick actions",
        "qb_h60": "‚ö° Health in 60s",
        "qb_er": "üöë Emergency info",
        "qb_lab": "üß™ Lab",
        "qb_rem": "‚è∞ Reminder",
        # —É—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "gm_greet": "Good morning! üåû How do you feel today?",
        "gm_btn_excellent": "üëç Great",
        "gm_btn_ok": "üôÇ Okay",
        "gm_btn_tired": "üòê Tired",
        "gm_btn_pain": "ü§ï In pain",
        "gm_btn_skip": "‚è≠ Skip",
        # —ç–º–ø–∞—Ç–∏—è/—Å–æ—Ü.–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞/—é–º–æ—Ä/–º–µ—Ç—Ä–∏–∫–∏
        "thanks": "Got it üôå",
        "nudge_soft": "If you‚Äôre not sure, a glass of water and a short walk help many people.",
        "social_proof": "70% of users your age discovered a sleep trigger within 2 weeks.",
        "metrics_title": "Life stats",
        "metrics_today": "Today is your {n}-th day of life üéâ.",
        "metrics_pct": "You‚Äôre ~{p}% to 100 years.",
        "metrics_bar": "Progress: {bar} {p}%",
        # intake
        "intake_intro": "Mini-intake (~40s). Use buttons or write your answer.",
        "write": "‚úçÔ∏è Write",
        "skip": "‚è≠Ô∏è Skip",
        "saved_profile": "Saved: ",
        "start_where": "Where would you like to start? (symptom/sleep/nutrition/habits/longevity)",
    },
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–ù–∞–ø–∏—à–∏, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç, –∏–ª–∏ –Ω–∞–∂–º–∏ –±—ã—Å—Ç—Ä—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞–µ–º –ª—ë–≥–∫–∏–π –æ–ø—Ä–æ—Å (~40—Å).",
        "help": "–ö–æ—Ä–æ—Ç–∫–∏–µ —á–µ–∫-–∏–Ω—ã, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–±–æ—Ç–∞.\n–ö–æ–º–∞–Ω–¥—ã: /help /privacy /profile /health60 /mood /energy /hydrate /skintip /cycle /youth /ru /uk /en /es",
        "privacy": "TendAI –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞. –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. /profile ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å, /delete_data ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å—ë.",
        "quick_title": "–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
        "qb_h60": "‚ö° –ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫",
        "qb_er": "üöë –°—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é",
        "qb_lab": "üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è",
        "qb_rem": "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
        "gm_greet": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üåû –ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "gm_btn_excellent": "üëç –û—Ç–ª–∏—á–Ω–æ",
        "gm_btn_ok": "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
        "gm_btn_tired": "üòê –£—Å—Ç–∞–ª",
        "gm_btn_pain": "ü§ï –ë–æ–ª–∏—Ç",
        "gm_btn_skip": "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "thanks": "–ü—Ä–∏–Ω—è—Ç–æ üôå",
        "nudge_soft": "–ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å ‚Äî —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –∏ –∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ–º–æ–≥–∞—é—Ç –º–Ω–æ–≥–∏–º.",
        "social_proof": "70% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–∞—à–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å–Ω–∞ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏.",
        "metrics_title": "–ú–µ—Ç—Ä–∏–∫–∏ –∂–∏–∑–Ω–∏",
        "metrics_today": "–°–µ–≥–æ–¥–Ω—è –≤–∞—à {n}-–π –¥–µ–Ω—å –∂–∏–∑–Ω–∏ üéâ.",
        "metrics_pct": "–ü—Ä–æ–π–¥–µ–Ω–æ ~{p}% –∫ 100 –≥–æ–¥–∞–º.",
        "metrics_bar": "–ü—Ä–æ–≥—Ä–µ—Å—Å: {bar} {p}%",
        "intake_intro": "–ú–∏–Ω–∏-–æ–ø—Ä–æ—Å (~40—Å). –ú–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç.",
        "write": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
        "skip": "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "saved_profile": "–°–æ—Ö—Ä–∞–Ω–∏–ª: ",
        "start_where": "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/–ø–∏—Ç–∞–Ω–∏–µ/–ø—Ä–∏–≤—ã—á–∫–∏/–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ)",
    },
    "uk": {
        "welcome": "–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî —Ç—É—Ä–±–æ—Ç–ª–∏–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è.\n–ù–∞–ø–∏—à–∏, —â–æ —Ç—É—Ä–±—É—î, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ —à–≤–∏–¥–∫—É –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ. –î–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ –∑—Ä–æ–±–∏–º–æ –ª–µ–≥–∫–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (~40—Å).",
        "help": "–ö–æ—Ä–æ—Ç–∫—ñ —á–µ–∫-—ñ–Ω–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ–¥–µ–Ω–Ω–∞ —Ç—É—Ä–±–æ—Ç–∞.\n–ö–æ–º–∞–Ω–¥–∏: /help /privacy /profile /health60 /mood /energy /hydrate /skintip /cycle /youth /ru /uk /en /es",
        "privacy": "TendAI –Ω–µ –∑–∞–º—ñ–Ω—é—î –ª—ñ–∫–∞—Ä—è. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ–Ω—ñ–º—É–º –¥–∞–Ω–∏—Ö. /profile ‚Äî –æ–Ω–æ–≤–∏—Ç–∏, /delete_data ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏.",
        "quick_title": "–®–≤–∏–¥–∫—ñ –¥—ñ—ó",
        "qb_h60": "‚ö° –ó–¥–æ—Ä–æ–≤‚Äô—è –∑–∞ 60 —Å",
        "qb_er": "üöë –¢–µ—Ä–º—ñ–Ω–æ–≤–æ –≤ —à–≤–∏–¥–∫—É",
        "qb_lab": "üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—è",
        "qb_rem": "‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è",
        "gm_greet": "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! üåû –Ø–∫ —Å—å–æ–≥–æ–¥–Ω—ñ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è?",
        "gm_btn_excellent": "üëç –ß—É–¥–æ–≤–æ",
        "gm_btn_ok": "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
        "gm_btn_tired": "üòê –í—Ç–æ–º–∞",
        "gm_btn_pain": "ü§ï –ë—ñ–ª—å",
        "gm_btn_skip": "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "thanks": "–ü—Ä–∏–π–Ω—è—Ç–æ üôå",
        "nudge_soft": "–Ø–∫—â–æ –≤–∞–≥–∞—î—à—Å—è ‚Äî —Å–∫–ª—è–Ω–∫–∞ –≤–æ–¥–∏ –π –∫–æ—Ä–æ—Ç–∫–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –±–∞–≥–∞—Ç—å–æ–º.",
        "social_proof": "70% –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–≤–æ–≥–æ –≤—ñ–∫—É –∑–Ω–∞—Ö–æ–¥—è—Ç—å —Ç—Ä–∏–≥–µ—Ä–∏ —Å–Ω—É –∑–∞ 2 —Ç–∏–∂–Ω—ñ.",
        "metrics_title": "–ú–µ—Ç—Ä–∏–∫–∏ –∂–∏—Ç—Ç—è",
        "metrics_today": "–°—å–æ–≥–æ–¥–Ω—ñ —Ç–≤—ñ–π {n}-–π –¥–µ–Ω—å –∂–∏—Ç—Ç—è üéâ.",
        "metrics_pct": "–ü—Ä–æ–π–¥–µ–Ω–æ ~{p}% –¥–æ 100 —Ä–æ–∫—ñ–≤.",
        "metrics_bar": "–ü—Ä–æ–≥—Ä–µ—Å: {bar} {p}%",
        "intake_intro": "–ú—ñ–Ω—ñ-–æ–ø–∏—Ç–Ω–∏–∫ (~40—Å). –ú–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç.",
        "write": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏",
        "skip": "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "saved_profile": "–ó–±–µ—Ä—ñ–≥: ",
        "start_where": "–ó —á–æ–≥–æ –ø–æ—á–Ω–µ–º–æ? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è/–∑–≤–∏—á–∫–∏/–¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è)",
    },
}
T["es"] = T["en"]  # –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞


# ============================= CALLBACK KEYS =============================
CB_MENU_H60 = "menu|h60"
CB_MENU_ER  = "menu|er"
CB_MENU_LAB = "menu|lab"
CB_MENU_REM = "menu|rem"

# –ú–∏–Ω–∏-–æ–ø—Ä–æ—Å–Ω–∏–∫
CB_MINI_CHOOSE = "mini|choose|{key}|{val}"
CB_MINI_WRITE  = "mini|write|{key}"
CB_MINI_SKIP   = "mini|skip|{key}"

# –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω (–∫–Ω–æ–ø–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ –ß–∞—Å—Ç–∏ 2)
CB_GM_MOOD_PREFIX = "gm|mood|"
CB_GM_SKIP = "gm|skip"


# ============================= HELPERS =============================
def utcnow() -> datetime:
    return datetime.now(timezone.utc)

def iso(dt: Optional[datetime]) -> str:
    return "" if not dt else dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def detect_lang_from_text(text: str, fallback: str) -> str:
    s = (text or "").strip()
    if not s: return fallback
    low = s.lower()
    if re.search(r"[–∞-—è—ë—ñ—ó—î“ë]", low):
        # –≤–æ—Å—Ç–æ—á–Ω–æ—Å–ª–∞–≤—è–Ω—Å–∫–∏–µ –±—É–∫–≤—ã ‚Äî –±—ã—Å—Ç—Ä–æ–µ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ
        return "uk" if re.search(r"[—ñ—ó—î“ë]", low) else "ru"
    try:
        return norm_lang(detect(s))
    except Exception:
        return fallback

# –∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç
from difflib import SequenceMatcher
def _ratio(a: str, b: str) -> float:
    return SequenceMatcher(None, (a or "").lower(), (b or "").lower()).ratio()

sessions: Dict[int, dict] = {}
def is_duplicate_question(uid: int, text: str, thresh: float = 0.93) -> bool:
    s = sessions.setdefault(uid, {})
    asked = s.setdefault("asked_prompts", [])
    for prev in asked[-4:]:
        if _ratio(prev, text) >= thresh:
            return True
    asked.append(text)
    if len(asked) > 16:
        s["asked_prompts"] = asked[-16:]
    return False

async def send_unique(msg_obj, uid: int, text: str, reply_markup=None, force: bool = False):
    if force or not is_duplicate_question(uid, text):
        await msg_obj.reply_text(text, reply_markup=reply_markup)


# ============================= SHEETS + MEMORY =============================
SHEETS_ENABLED = True
ss = None
ws_users = ws_profiles = ws_daily = ws_feedback = ws_episodes = ws_challenges = ws_reminders = None

MEM_USERS: Dict[int, dict] = {}
MEM_PROFILES: Dict[int, dict] = {}
MEM_DAILY: List[dict] = []
MEM_FEEDBACK: List[dict] = []
MEM_EPISODES: List[dict] = []
MEM_CHALLENGES: List[dict] = []
MEM_REMINDERS: List[dict] = []

def _ws_headers(ws) -> List[str]:
    try:
        return ws.row_values(1) or []
    except Exception:
        return []

def _ws_ensure_columns(ws, desired_headers: List[str]):
    """
    –ù–∞–¥—ë–∂–Ω–æ —Å–æ–∑–¥–∞—ë–º —à–∞–ø–∫—É –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º —Å–µ—Ç–∫—É –ø–æ–¥ –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏.
    """
    try:
        current = _ws_headers(ws)
        if not current:
            if ws.col_count < len(desired_headers):
                ws.add_cols(len(desired_headers) - ws.col_count)
            ws.append_row(desired_headers)
            return
        if ws.col_count < len(desired_headers):
            ws.add_cols(len(desired_headers) - ws.col_count)
        missing = [h for h in desired_headers if h not in current]
        if missing:
            # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∞
            for h in missing:
                ws.update_cell(1, len(current) + 1, h)
                current.append(h)
    except Exception as e:
        logging.warning(f"ensure columns failed for {getattr(ws, 'title', '?')}: {e}")

def _sheets_init():
    global SHEETS_ENABLED, ss
    global ws_users, ws_profiles, ws_daily, ws_feedback, ws_episodes, ws_challenges, ws_reminders
    try:
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if not creds_json:
            raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = json.loads(creds_json)
        credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds, scope)
        gclient = gspread.authorize(credentials)

        try:
            ss_ = gclient.open_by_key(SHEET_ID) if SHEET_ID else gclient.open(SHEET_NAME)
        except SpreadsheetNotFound:
            if ALLOW_CREATE_SHEET:
                ss_ = gclient.create(SHEET_NAME)
            else:
                raise
        ss = ss_

        def _ensure_ws(title: str, headers: List[str]):
            try:
                ws = ss.worksheet(title)
            except WorksheetNotFound:
                ws = ss.add_worksheet(title=title, rows=4000, cols=max(60, len(headers)))
                ws.append_row(headers)
            if not _ws_headers(ws):
                ws.append_row(headers)
            _ws_ensure_columns(ws, headers)
            return ws

        # Users & Profiles ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        ws_users = _ensure_ws("Users", [
            "user_id","username","lang","tz_offset","paused","last_seen",
            "checkin_hour","evening_hour","last_auto_date","last_auto_count"
        ])
        ws_profiles = _ensure_ws("Profiles", [
            "user_id","sex","age","goal","goals",
            "conditions","surgeries","meds","allergies",
            "sleep","activity","diet","diet_focus","steps_target","habits",
            "ai_profile","quiet_hours","streak","streak_best","gm_last_date","birth_date",
            "city","notes","updated_at"
        ])
        ws_daily = _ensure_ws("DailyCheckins", ["timestamp","user_id","mood","energy","comment"])
        ws_feedback = _ensure_ws("Feedback", ["timestamp","user_id","name","username","rating","comment"])
        ws_episodes = _ensure_ws("Episodes", ["episode_id","user_id","topic","started_at","status","severity","notes"])
        ws_challenges = _ensure_ws("Challenges", ["user_id","challenge_id","name","start_date","length_days","days_done","status"])
        ws_reminders = _ensure_ws("Reminders", ["id","user_id","text","when_utc","created_at","status"])

        logging.info("Google Sheets connected.")
    except Exception as e:
        SHEETS_ENABLED = False
        logging.error(f"SHEETS disabled (fallback to memory). Reason: {e}")

_sheets_init()

def _headers(ws):  # –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ–ª–ø–µ—Ä
    return _ws_headers(ws)

# ---- Users ----
def users_get(uid: int) -> dict:
    if SHEETS_ENABLED and ws_users:
        for r in ws_users.get_all_records():
            if str(r.get("user_id")) == str(uid):
                return r
        return {}
    return MEM_USERS.get(uid, {})

def users_upsert(uid: int, username: str, lang: str):
    base = {
        "user_id": str(uid),
        "username": username or "",
        "lang": lang,
        "tz_offset": "0",
        "paused": "no",
        "last_seen": iso(utcnow()),
        "checkin_hour": DEFAULT_CHECKIN_LOCAL,
        "evening_hour": "",
        "last_auto_date": "",
        "last_auto_count": "0",
    }
    if SHEETS_ENABLED and ws_users:
        vals = ws_users.get_all_records()
        hdr = _headers(ws_users)
        end_col = gsu.rowcol_to_a1(1, len(hdr)).rstrip("1")
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                merged = {**r, **{k: base[k] for k in base if not str(r.get(k) or "").strip()}}
                ws_users.update(f"A{i}:{end_col}{i}", [[merged.get(h, "") for h in hdr]])
                return
        ws_users.append_row([base.get(h, "") for h in hdr])
    else:
        MEM_USERS[uid] = {**MEM_USERS.get(uid, {}), **base}

def users_set(uid: int, field: str, value: str):
    if SHEETS_ENABLED and ws_users:
        hdr = _headers(ws_users)
        if field not in hdr:
            _ws_ensure_columns(ws_users, hdr + [field])
            hdr = _headers(ws_users)
        vals = ws_users.get_all_records()
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                ws_users.update_cell(i, hdr.index(field) + 1, value)
                return
        # –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ –±—ã–ª–æ ‚Äî —Å–æ–∑–¥–∞–¥–∏–º —á–µ—Ä–µ–∑ upsert
        users_upsert(uid, "", "en")
        users_set(uid, field, value)
    else:
        u = MEM_USERS.setdefault(uid, {})
        u[field] = value

# ---- Profiles ----
def profiles_get(uid: int) -> dict:
    if SHEETS_ENABLED and ws_profiles:
        for r in ws_profiles.get_all_records():
            if str(r.get("user_id")) == str(uid):
                return r
        return {}
    return MEM_PROFILES.get(uid, {})

def profiles_upsert(uid: int, patch: Dict[str, str]):
    patch = {**patch, "updated_at": iso(utcnow())}
    if SHEETS_ENABLED and ws_profiles:
        vals = ws_profiles.get_all_records()
        hdr = _headers(ws_profiles)
        # —Ä–∞—Å—à–∏—Ä–∏–º —à–∞–ø–∫—É, –µ—Å–ª–∏ –≤ patch –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è
        new_headers = list(hdr)
        for k in patch.keys():
            if k not in new_headers:
                new_headers.append(k)
        if new_headers != hdr:
            _ws_ensure_columns(ws_profiles, new_headers)
            hdr = _headers(ws_profiles)
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                merged = {**r, **patch}
                end_col = gsu.rowcol_to_a1(1, len(hdr)).rstrip("1")
                ws_profiles.update(f"A{i}:{end_col}{i}", [[merged.get(h, "") for h in hdr]])
                return
        # –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∞–ø–ø–µ–Ω–¥–∏–º –Ω–æ–≤—É—é
        row = {"user_id": str(uid), **patch}
        ws_profiles.append_row([row.get(h, "") for h in hdr])
    else:
        base = MEM_PROFILES.get(uid, {})
        base.update(patch)
        MEM_PROFILES[uid] = base

# ---- Logs helpers ----
def daily_add(ts: str, uid: int, mood: str = "", comment: str = "", energy: Optional[int] = None):
    rec = {"timestamp": ts, "user_id": str(uid), "mood": mood, "energy": "" if energy is None else str(energy), "comment": comment}
    if SHEETS_ENABLED and ws_daily:
        hdr = _headers(ws_daily)
        ws_daily.append_row([rec.get(h, "") for h in hdr])
    else:
        MEM_DAILY.append(rec)

def feedback_add(ts: str, uid: int, name: str, username: str, rating: str, comment: str):
    rec = {"timestamp": ts, "user_id": str(uid), "name": name, "username": username, "rating": rating, "comment": comment}
    if SHEETS_ENABLED and ws_feedback:
        hdr = _headers(ws_feedback)
        ws_feedback.append_row([rec.get(h, "") for h in hdr])
    else:
        MEM_FEEDBACK.append(rec)


# ============================= PERSONALIZATION & TIME =============================
def profile_is_incomplete(p: dict) -> bool:
    needed = ["sex", "age", "goal"]
    return sum(1 for k in needed if str(p.get(k) or "").strip()) < 2

def personalized_prefix(lang: str, profile: dict) -> str:
    sex = (profile.get("sex") or "").strip()
    goal = (profile.get("goal") or "").strip()
    age_raw = str(profile.get("age") or "")
    m = re.search(r"\d+", age_raw)
    age = m.group(0) if m else ""
    if sum(bool(x) for x in (sex, age, goal)) >= 2:
        tpl_map = {
            "en": "Considering your profile: {sex}, {age}y; goal ‚Äî {goal}.",
            "ru": "–° —É—á—ë—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è: {sex}, {age} –ª–µ—Ç; —Ü–µ–ª—å ‚Äî {goal}.",
            "uk": "–ó —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ—Ñ—ñ–ª—é: {sex}, {age} —Ä.; –º–µ—Ç–∞ ‚Äî {goal}.",
            "es": "Perfil: {sex}, {age}y; objetivo ‚Äî {goal}.",
        }
        tpl = tpl_map.get(lang, tpl_map["en"])
        return tpl.format(sex=sex or "‚Äî", age=age or "‚Äî", goal=goal or "‚Äî")
    return ""

def _user_lang(uid: int, fallback: str = "en") -> str:
    return norm_lang(users_get(uid).get("lang") or fallback)

def _user_tz_off(uid: int) -> int:
    try:
        return int(str(users_get(uid).get("tz_offset") or "0"))
    except Exception:
        return 0

def user_local_now(uid: int) -> datetime:
    off = _user_tz_off(uid)
    return utcnow() + timedelta(hours=off)

def hhmm_tuple(hhmm: str) -> Tuple[int, int]:
    m = re.match(r"^\s*([01]?\d|2[0-3]):([0-5]\d)\s*$", hhmm or "")
    if not m: return (8, 30)
    return (int(m.group(1)), int(m.group(2)))

def local_to_utc_dt(uid: int, dt_local: datetime) -> datetime:
    return dt_local - timedelta(hours=_user_tz_off(uid))

def adjust_out_of_quiet(when_local: datetime, quiet: str) -> datetime:
    """
    –ï—Å–ª–∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ ¬´—Ç–∏—Ö–∏–µ —á–∞—Å—ã¬ª (HH:MM-HH:MM) ‚Äî —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
    """
    q = quiet or DEFAULT_QUIET_HOURS
    m = re.match(r"^\s*([01]?\d|2[0-3]):([0-5]\d)-([01]?\d|2[0-3]):([0-5]\d)\s*$", q)
    if not m: return when_local
    sh, sm, eh, em = map(int, [m.group(1), m.group(2), m.group(3), m.group(4)])
    start = when_local.replace(hour=sh, minute=sm, second=0, microsecond=0)
    end = when_local.replace(hour=eh, minute=em, second=0, microsecond=0)
    # ¬´—Ç–∏—Ö–∏–µ —á–∞—Å—ã¬ª –º–æ–≥—É—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
    in_quiet = (start <= when_local < end) if start < end else not (end <= when_local < start)
    if not in_quiet:
        return when_local
    # —Å–¥–≤–∏–Ω–µ–º –Ω–∞ –∫–æ–Ω–µ—Ü —Ç–∏—Ö–æ–≥–æ –æ–∫–Ω–∞
    target = end if start < end else end + timedelta(days=1)
    return target


# ============================= LIFE METRICS =============================
def life_metrics(profile: dict) -> Tuple[int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–¥–Ω–µ–π_–ø—Ä–æ–∂–∏—Ç–æ, –ø—Ä–æ—Ü–µ–Ω—Ç—ã_–∫_100_–≥–æ–¥–∞–º).
    –ï—Å–ª–∏ –Ω–µ—Ç birth_date ‚Äî –æ—Ü–µ–Ω–∏–≤–∞–µ–º –ø–æ age*365.
    """
    bd = (profile.get("birth_date") or "").strip()
    days = 0
    try:
        if re.match(r"^\d{4}-\d{2}-\d{2}$", bd):
            y, m, d = map(int, bd.split("-"))
            born = date(y, m, d)
            days = (date.today() - born).days
    except Exception:
        days = 0
    if days <= 0:
        try:
            age = int(re.findall(r"\d+", str(profile.get("age") or ""))[0])
        except Exception:
            age = 25
        days = max(1, age * 365)
    pct = min(100, int(round(days / 36500 * 100)))
    return days, pct

def progress_bar(percent: int, width: int = 12) -> str:
    p = max(0, min(100, int(percent)))
    blocks = int(round(p / 100 * width))
    return "‚ñà" * blocks + "‚ñë" * (width - blocks)


# ============================= MINI INTAKE =============================
MINI_KEYS = ["sex","age","goal","conditions","meds","activity","diet_focus","steps_target","habits","birth_date"]
MINI_FREE_KEYS: Set[str] = {"meds","birth_date"}

MINI_STEPS = {
    "sex": {
        "ru":[("–ú—É–∂—Å–∫–æ–π","male"),("–ñ–µ–Ω—Å–∫–∏–π","female"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("Male","male"),("Female","female"),("Other","other")],
        "uk":[("–ß–æ–ª–æ–≤—ñ—á–∞","male"),("–ñ—ñ–Ω–æ—á–∞","female"),("–Ü–Ω—à–∞","other")],
        "label":{"ru":"–ü–æ–ª:","en":"Sex:","uk":"–°—Ç–∞—Ç—å:"}
    },
    "age": {
        "ru":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "en":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "uk":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "label":{"ru":"–í–æ–∑—Ä–∞—Å—Ç:","en":"Age:","uk":"–í—ñ–∫:"}
    },
    "goal": {
        "ru":[("–≠–Ω–µ—Ä–≥–∏—è","energy"),("–°–æ–Ω","sleep"),("–ü–æ—Ö—É–¥–µ–Ω–∏–µ","weight"),("–°–∏–ª–∞","strength"),("–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ","longevity")],
        "en":[("Energy","energy"),("Sleep","sleep"),("Weight","weight"),("Strength","strength"),("Longevity","longevity")],
        "uk":[("–ï–Ω–µ—Ä–≥—ñ—è","energy"),("–°–æ–Ω","sleep"),("–í–∞–≥–∞","weight"),("–°–∏–ª–∞","strength"),("–î–æ–≤–≥–æ–ª—ñ—Ç—Ç—è","longevity")],
        "label":{"ru":"–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:","en":"Main goal:","uk":"–ì–æ–ª–æ–≤–Ω–∞ –º–µ—Ç–∞:"}
    },
    "conditions": {
        "ru":[("–ù–µ—Ç","none"),("–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥.","cvd"),("–©–ñ/—ç–Ω–¥–æ–∫—Ä.","endocrine"),("–ñ–ö–¢","gi"),("–ê–ª–ª–µ—Ä–≥–∏—è","allergy"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("None","none"),("Cardio/vascular","cvd"),("Thyroid/endocr.","endocrine"),("GI","gi"),("Allergy","allergy"),("Other","other")],
        "uk":[("–ù–µ–º–∞—î","none"),("–°–µ—Ä—Ü–µ–≤–æ-—Å—É–¥.","cvd"),("–©–ó/–µ–Ω–¥–æ–∫—Ä.","endocrine"),("–®–ö–¢","gi"),("–ê–ª–µ—Ä–≥—ñ—è","allergy"),("–Ü–Ω—à–µ","other")],
        "label":{"ru":"–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:","en":"Chronic conditions:","uk":"–•—Ä–æ–Ω—ñ—á–Ω—ñ —Å—Ç–∞–Ω–∏:"}
    },
    "meds": {
        "ru": [], "en": [], "uk": [],
        "label":{"ru":"–õ–µ–∫–∞—Ä—Å—Ç–≤–∞/–¥–æ–±–∞–≤–∫–∏/–∞–ª–ª–µ—Ä–≥–∏–∏ (–∫–æ—Ä–æ—Ç–∫–æ):","en":"Meds/supplements/allergies (short):","uk":"–õ—ñ–∫–∏/–¥–æ–±–∞–≤–∫–∏/–∞–ª–µ—Ä–≥—ñ—ó (–∫–æ—Ä–æ—Ç–∫–æ):"}
    },
    "activity": {
        "ru":[("–ú–∞–ª–æ","low"),("–£–º–µ—Ä–µ–Ω–Ω–æ","mid"),("–°–ø–æ—Ä—Ç","high")],
        "en":[("Low","low"),("Moderate","mid"),("Sport","high")],
        "uk":[("–ú–∞–ª–æ","low"),("–ü–æ–º—ñ—Ä–Ω–æ","mid"),("–°–ø–æ—Ä—Ç","high")],
        "label":{"ru":"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:","en":"Activity:","uk":"–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:"}
    },
    "diet_focus": {
        "ru":[("–°–±–∞–ª–∞–Ω—Å.","balanced"),("–ù–∏–∑–∫–æ—É–≥–ª.","lowcarb"),("–†–∞—Å—Ç–∏—Ç.","plant"),("–ù–µ—Ä–µ–≥—É–ª.","irregular")],
        "en":[("Balanced","balanced"),("Low-carb","lowcarb"),("Plant-based","plant"),("Irregular","irregular")],
        "uk":[("–ó–±–∞–ª–∞–Ω—Å.","balanced"),("–ú–∞–ª–æ–≤—É–≥–ª.","lowcarb"),("–†–æ—Å–ª–∏–Ω–Ω–µ","plant"),("–ù–µ—Ä–µ–≥—É–ª.","irregular")],
        "label":{"ru":"–ü–∏—Ç–∞–Ω–∏–µ —á–∞—â–µ –≤—Å–µ–≥–æ:","en":"Diet mostly:","uk":"–•–∞—Ä—á—É–≤–∞–Ω–Ω—è:"}
    },
    "steps_target": {
        "ru":[("<5–∫","5000"),("5‚Äì8–∫","8000"),("8‚Äì12–∫","12000"),("–°–ø–æ—Ä—Ç","15000")],
        "en":[("<5k","5000"),("5‚Äì8k","8000"),("8‚Äì12k","12000"),("Sport","15000")],
        "uk":[("<5–∫","5000"),("5‚Äì8–∫","8000"),("8‚Äì12–∫","12000"),("–°–ø–æ—Ä—Ç","15000")],
        "label":{"ru":"–®–∞–≥–∏/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:","en":"Steps/activity:","uk":"–ö—Ä–æ–∫–∏/–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:"}
    },
    "habits": {
        "ru":[("–ù–µ –∫—É—Ä—é","no_smoke"),("–ö—É—Ä—é","smoke"),("–ê–ª–∫–æ–≥–æ–ª—å —Ä–µ–¥–∫–æ","alc_low"),("–ê–ª–∫–æ–≥–æ–ª—å —á–∞—Å—Ç–æ","alc_high"),("–ö–æ—Ñ–µ–∏–Ω 0‚Äì1","caf_low"),("–ö–æ—Ñ–µ–∏–Ω 2‚Äì3","caf_mid"),("–ö–æ—Ñ–µ–∏–Ω 4+","caf_high")],
        "en":[("No smoking","no_smoke"),("Smoking","smoke"),("Alcohol rare","alc_low"),("Alcohol often","alc_high"),("Caffeine 0‚Äì1","caf_low"),("Caffeine 2‚Äì3","caf_mid"),("Caffeine 4+","caf_high")],
        "uk":[("–ù–µ –∫—É—Ä—é","no_smoke"),("–ö—É—Ä—é","smoke"),("–ê–ª–∫–æ–≥–æ–ª—å —Ä—ñ–¥–∫–æ","alc_low"),("–ê–ª–∫–æ–≥–æ–ª—å —á–∞—Å—Ç–æ","alc_high"),("–ö–æ—Ñ–µ—ó–Ω 0‚Äì1","caf_low"),("–ö–æ—Ñ–µ—ó–Ω 2‚Äì3","caf_mid"),("–ö–æ—Ñ–µ—ó–Ω 4+","caf_high")],
        "label":{"ru":"–ü—Ä–∏–≤—ã—á–∫–∏:","en":"Habits:","uk":"–ó–≤–∏—á–∫–∏:"}
    },
    "birth_date": {
        "ru": [], "en": [], "uk": [],
        "label":{"ru":"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î) ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é:","en":"Birth date (YYYY-MM-DD) ‚Äî optional:","uk":"–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–†–†–†–†-–ú–ú-–î–î) ‚Äî –æ–ø—Ü—ñ–π–Ω–æ:"}
    }
}

def build_mini_kb(lang: str, key: str) -> InlineKeyboardMarkup:
    opts = MINI_STEPS[key].get(lang, [])
    rows, row = [], []
    for label, val in opts:
        row.append(InlineKeyboardButton(label, callback_data=f"mini|choose|{key}|{val}"))
        if len(row) == 3:
            rows.append(row); row = []
    if row: rows.append(row)
    if key in MINI_FREE_KEYS or not opts:
        rows.append([InlineKeyboardButton(T[lang]["write"], callback_data=f"mini|write|{key}")])
    rows.append([InlineKeyboardButton(T[lang]["skip"], callback_data=f"mini|skip|{key}")])
    return InlineKeyboardMarkup(rows)

async def start_mini_intake(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    sessions[uid] = {"mini_active": True, "mini_step": 0, "mini_answers": {}}
    await context.bot.send_message(chat_id, T[lang]["intake_intro"], reply_markup=ReplyKeyboardRemove())
    await ask_next_mini(context, chat_id, lang, uid)

async def ask_next_mini(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    s = sessions.get(uid, {})
    step_idx = s.get("mini_step", 0)
    if step_idx >= len(MINI_KEYS):
        answers = s.get("mini_answers", {})
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
        prof_patch = {
            "sex": answers.get("sex",""),
            "age": answers.get("age",""),
            "goal": answers.get("goal",""),
            "conditions": answers.get("conditions",""),
            "meds": answers.get("meds",""),
            "activity": answers.get("activity",""),
            "diet_focus": answers.get("diet_focus",""),
            "steps_target": answers.get("steps_target",""),
            "habits": answers.get("habits",""),
            "birth_date": answers.get("birth_date",""),
        }
        profiles_upsert(uid, prof_patch)
        sessions[uid]["mini_active"] = False
        # –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é + quickbar
        await context.bot.send_message(chat_id, T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
        await show_quickbar(context, chat_id, lang)
        return
    key = MINI_KEYS[step_idx]
    label = MINI_STEPS[key]["label"][lang]
    await context.bot.send_message(chat_id, label, reply_markup=build_mini_kb(lang, key))

def mini_handle_choice(uid: int, key: str, value: str):
    s = sessions.setdefault(uid, {"mini_active": True, "mini_step": 0, "mini_answers": {}})
    s["mini_answers"][key] = value
    s["mini_step"] = int(s.get("mini_step", 0)) + 1


# ============================= QUICKBAR (UI) =============================
def quickbar_kb(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["qb_h60"], callback_data=CB_MENU_H60)],
        [InlineKeyboardButton(T[lang]["qb_er"],  callback_data=CB_MENU_ER),
         InlineKeyboardButton(T[lang]["qb_lab"], callback_data=CB_MENU_LAB)],
        [InlineKeyboardButton(T[lang]["qb_rem"], callback_data=CB_MENU_REM)]
    ])

async def show_quickbar(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str):
    try:
        await context.bot.send_message(chat_id, T[lang]["quick_title"], reply_markup=quickbar_kb(lang))
    except Exception as e:
        logging.warning(f"show_quickbar failed: {e}")

def inline_topic_kb(lang: str) -> InlineKeyboardMarkup:
    # –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–æ–≤ (–ø–æ–∫–∞ –±–µ–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è; –ª–æ–≥–∏–∫–∞ ‚Äî –≤ –ß–∞—Å—Ç–∏ 2)
    rows = [
        [InlineKeyboardButton("‚ö°", callback_data=CB_MENU_H60),
         InlineKeyboardButton("üöë", callback_data=CB_MENU_ER),
         InlineKeyboardButton("üß™", callback_data=CB_MENU_LAB),
         InlineKeyboardButton("‚è∞", callback_data=CB_MENU_REM)]
    ]
    return InlineKeyboardMarkup(rows)


# ============================= STATE HELPERS =============================
def update_last_seen(uid: int):
    users_set(uid, "last_seen", iso(utcnow()))

# ============================= COMMANDS (–æ–±–æ–ª–æ—á–∫–∏) =============================
async def post_init(app):
    me = await app.bot.get_me()
    logging.info(f"BOT READY: @{me.username} (id={me.id})")
    # –í –ß–∞—Å—Ç–∏ 2 –±—É–¥–µ—Ç: schedule_from_sheet_on_start(app)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = norm_lang(getattr(user, "language_code", None))
    users_upsert(user.id, user.username or "", lang)
    context.user_data["lang"] = lang
    update_last_seen(user.id)

    await update.message.reply_text(T[lang]["welcome"], reply_markup=ReplyKeyboardRemove())

    prof = profiles_get(user.id)
    if profile_is_incomplete(prof):
        await start_mini_intake(context, update.effective_chat.id, lang, user.id)
    else:
        await update.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
        await show_quickbar(context, update.effective_chat.id, lang)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = _user_lang(update.effective_user.id)
    await update.message.reply_text(T[lang]["help"])

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = _user_lang(update.effective_user.id)
    await update.message.reply_text(T[lang]["privacy"])

async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    # –∑–∞–ø—É—Å–∫–∞–µ–º intake –ø–æ –∫–Ω–æ–ø–∫–µ/–∫–æ–º–∞–Ω–¥–µ
    await start_mini_intake(context, update.effective_chat.id, lang, uid)

# –Ø–∑—ã–∫–∏
async def cmd_lang_ru(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "ru")
    context.user_data["lang"] = "ru"
    await update.message.reply_text("–Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π.")

async def cmd_lang_en(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "en")
    context.user_data["lang"] = "en"
    await update.message.reply_text("Language set: English.")

async def cmd_lang_uk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "uk")
    context.user_data["lang"] = "uk"
    await update.message.reply_text("–ú–æ–≤–∞: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞.")

async def cmd_lang_es(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "es")
    context.user_data["lang"] = "es"
    await update.message.reply_text("Idioma: espa√±ol (beta).")

# –û–±–æ–ª–æ—á–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ UI (–ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏–º –≤ –ß–∞—Å—Ç–∏ 2)
async def cmd_health60(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = _user_lang(update.effective_user.id)
    await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ –±–æ–ª–∏—Ç/–±–µ—Å–ø–æ–∫–æ–∏—Ç ‚Äî –∏ —è –¥–∞–º 3 —à–∞–≥–∞ –∑–∞ 60 —Å–µ–∫—É–Ω–¥.")
    await show_quickbar(context, update.effective_chat.id, lang)

async def cmd_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = _user_lang(update.effective_user.id)
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton(T[lang]["gm_btn_excellent"], callback_data=CB_GM_MOOD_PREFIX+"great"),
        InlineKeyboardButton(T[lang]["gm_btn_ok"],        callback_data=CB_GM_MOOD_PREFIX+"ok"),
        InlineKeyboardButton(T[lang]["gm_btn_tired"],     callback_data=CB_GM_MOOD_PREFIX+"tired"),
        InlineKeyboardButton(T[lang]["gm_btn_pain"],      callback_data=CB_GM_MOOD_PREFIX+"pain"),
        InlineKeyboardButton(T[lang]["gm_btn_skip"],      callback_data=CB_GM_SKIP),
    ]])
    await update.message.reply_text(T[lang]["gm_greet"], reply_markup=kb)
    await show_quickbar(context, update.effective_chat.id, lang)

async def cmd_energy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = _user_lang(update.effective_user.id)
    await update.message.reply_text("‚ö° –≠–Ω–µ—Ä–≥–∏—è: –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤ —É—Ç—Ä–µ–Ω–Ω–µ–º —á–µ–∫-–∏–Ω–µ (–≤ –ß–∞—Å—Ç–∏ 2).")
    await show_quickbar(context, update.effective_chat.id, lang)

async def cmd_hydrate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = _user_lang(update.effective_user.id)
    await update.message.reply_text("üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–∏—Ç—å –≤–æ–¥—É –≤–∫–ª—é—á—É –≤ –ß–∞—Å—Ç–∏ 2. –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ: –≤—ã–ø–µ–π—Ç–µ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã üôÇ")
    await show_quickbar(context, update.effective_chat.id, lang)

async def cmd_skintip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = _user_lang(update.effective_user.id)
    await update.message.reply_text("üß¥ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–æ–∂–µ –ø–æ–¥–∫–ª—é—á—É –≤ –ß–∞—Å—Ç–∏ 2.")
    await show_quickbar(context, update.effective_chat.id, lang)

async def cmd_cycle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = _user_lang(update.effective_user.id)
    await update.message.reply_text("ü©∏ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ –≤–∫–ª—é—á—É –≤ –ß–∞—Å—Ç–∏ 2 (–Ω—É–∂–Ω–æ 2 —à–∞–≥–∞ –≤–æ–ø—Ä–æ—Å–∞–º–∏).")
    await show_quickbar(context, update.effective_chat.id, lang)

async def cmd_youth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = _user_lang(update.effective_user.id)
    await update.message.reply_text("üéí Youth-–ø–∞–∫–µ—Ç (—á–µ–ª–ª–µ–Ω–¥–∂–∏, streak) –ø–æ–¥–∫–ª—é—á—É –≤ –ß–∞—Å—Ç–∏ 2.")
    await show_quickbar(context, update.effective_chat.id, lang)


# ============================= MESSAGE HANDLER =============================
async def msg_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    u = users_get(uid)
    lang = norm_lang(u.get("lang") or getattr(update.effective_user, "language_code", None) or "en")
    users_upsert(uid, update.effective_user.username or "", lang)  # —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–ø–∏—Å—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    update_last_seen(uid)
    text = (update.message.text or "").strip()

    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç ‚Äî —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏-–æ–ø—Ä–æ—Å–Ω–∏–∫ (–¢–ó)
    prof = profiles_get(uid)
    s = sessions.setdefault(uid, {})
    if profile_is_incomplete(prof) and not s.get("mini_active"):
        await start_mini_intake(context, update.effective_chat.id, lang, uid)
        return

    # –ó–∞—Ö–≤–∞—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∞–≥–∞ –º–∏–Ω–∏-–æ–ø—Ä–æ—Å–Ω–∏–∫–∞ (write)
    if s.get("mini_active") and s.get("mini_wait_key"):
        key = s["mini_wait_key"]
        s["mini_wait_key"] = None
        s["mini_answers"][key] = text
        s["mini_step"] = int(s.get("mini_step", 0)) + 1
        await ask_next_mini(context, update.effective_chat.id, lang, uid)
        return

    # –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º quickbar
    await send_unique(update.message, uid, T[lang]["nudge_soft"])
    await show_quickbar(context, update.effective_chat.id, lang)


# ============================= CALLBACKS (–ß–∞—Å—Ç—å 1: —Ç–æ–ª—å–∫–æ MINI) =============================
async def cb_mini_only(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    lang = _user_lang(uid)
    data = q.data or ""

    if not data.startswith("mini|"):
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ callback-–∏ –ø–æ–¥–∫–ª—é—á—É –≤ –ß–∞—Å—Ç–∏ 2
        return

    # mini|choose|{key}|{val}
    if data.startswith("mini|choose|"):
        _, _, key, val = data.split("|", 3)
        mini_handle_choice(uid, key, val)
        await ask_next_mini(context, update.effective_chat.id, lang, uid)
        return

    # mini|write|{key} ‚Äî –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç
    if data.startswith("mini|write|"):
        key = data.split("|", 2)[2]
        s = sessions.setdefault(uid, {"mini_active": True, "mini_step": 0, "mini_answers": {}})
        s["mini_wait_key"] = key
        try:
            await q.edit_message_text(T[lang]["write"] + "‚Ä¶")
        except Exception:
            pass
        return

    # mini|skip|{key}
    if data.startswith("mini|skip|"):
        s = sessions.setdefault(uid, {"mini_active": True, "mini_step": 0, "mini_answers": {}})
        s["mini_step"] = int(s.get("mini_step", 0)) + 1
        await ask_next_mini(context, update.effective_chat.id, lang, uid)
        return


# ============================= MAIN =============================
def main():
    if not TELEGRAM_TOKEN:
        logging.error("TELEGRAM_TOKEN is not set"); return

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    # –∫–æ–º–∞–Ω–¥—ã-–æ–±–æ–ª–æ—á–∫–∏
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("privacy", cmd_privacy))
    app.add_handler(CommandHandler("profile", cmd_profile))
    app.add_handler(CommandHandler("health60", cmd_health60))
    app.add_handler(CommandHandler("mood", cmd_mood))
    app.add_handler(CommandHandler("energy", cmd_energy))
    app.add_handler(CommandHandler("hydrate", cmd_hydrate))
    app.add_handler(CommandHandler("skintip", cmd_skintip))
    app.add_handler(CommandHandler("cycle", cmd_cycle))
    app.add_handler(CommandHandler("youth", cmd_youth))

    app.add_handler(CommandHandler("ru", cmd_lang_ru))
    app.add_handler(CommandHandler("uk", cmd_lang_uk))
    app.add_handler(CommandHandler("en", cmd_lang_en))
    app.add_handler(CommandHandler("es", cmd_lang_es))

    # callbacks: –≤ –ß–∞—Å—Ç–∏ 1 —Ç–æ–ª—å–∫–æ mini-–∏–Ω—Ç–µ–π–∫
    app.add_handler(CallbackQueryHandler(cb_mini_only), group=1)

    # —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, msg_text), group=2)

    logging.info("Starting polling‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö/–∑–∞–≥–ª—É—à–µ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ----------

def _user_lang(uid: int) -> str:
    try:
        return norm_lang((users_get(uid) or {}).get("lang") or "en")
    except Exception:
        return "en"

def _user_tz_off(uid: int) -> int:
    try:
        return int(str((users_get(uid) or {}).get("tz_offset") or "0"))
    except Exception:
        return 0

def hhmm_tuple(hhmm: str) -> Tuple[int, int]:
    m = re.match(r"^\s*([01]?\d|2[0-3]):([0-5]\d)\s*$", str(hhmm or ""))
    if not m:
        return (8, 30)
    return (int(m.group(1)), int(m.group(2)))

def user_local_now(uid: int) -> datetime:
    return utcnow() + timedelta(hours=_user_tz_off(uid))

def utc_to_local_dt(uid: int, dt_utc: datetime) -> datetime:
    return (dt_utc or utcnow()) + timedelta(hours=_user_tz_off(uid))

def local_to_utc_dt(uid: int, dt_local: datetime) -> datetime:
    return (dt_local or user_local_now(uid)) - timedelta(hours=_user_tz_off(uid))

def adjust_out_of_quiet(when_local: datetime, quiet_hours: str) -> datetime:
    """
    –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ ¬´—Ç–∏—Ö–∏–µ —á–∞—Å—ã¬ª (—Ñ–æ—Ä–º–∞—Ç HH:MM-HH:MM), –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∫–æ–Ω–µ—Ü —Ç–∏—Ö–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.
    """
    q = (quiet_hours or "").strip()
    m = re.match(r"^\s*([01]?\d:[0-5]\d)\s*-\s*([01]?\d:[0-5]\d)\s*$", q)
    if not m:
        return when_local
    start_h, start_m = hhmm_tuple(m.group(1))
    end_h, end_m   = hhmm_tuple(m.group(2))

    wd = when_local
    start_dt = wd.replace(hour=start_h, minute=start_m, second=0, microsecond=0)
    end_dt   = wd.replace(hour=end_h, minute=end_m, second=0, microsecond=0)

    if end_dt <= start_dt:
        # —Ç–∏—Ö–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª "–ø–µ—Ä–µ–ª–µ—Ç–∞–µ—Ç" —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
        in_quiet = (wd >= start_dt) or (wd < end_dt)
        if in_quiet:
            # –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∫–æ–Ω–µ—Ü –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º
            if wd >= start_dt:
                return end_dt + timedelta(days=1)
            else:
                return end_dt
        return wd
    else:
        # –æ–±—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if start_dt <= wd < end_dt:
            return end_dt
        return wd

def update_last_seen(uid: int):
    users_set(uid, "last_seen", iso(utcnow()))


# ---------- –ë–ª–æ–∫ ¬´–ü–∞–º—è—Ç—å¬ª (–ø—Ä–æ—Ñ–∏–ª–∏/–¥–Ω–µ–≤–Ω–∏–∫/—Ñ–∏–¥–±–µ–∫/—ç–ø–∏–∑–æ–¥—ã/—á–µ–ª–ª–µ–Ω–¥–∂–∏/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è) ----------

def _ensure_ws_row_by_uid(ws, uid: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (>=2) –¥–ª—è user_id; —Å–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    hdr = _headers(ws)
    vals = ws.get_all_records()
    for i, r in enumerate(vals, start=2):
        if str(r.get("user_id")) == str(uid):
            return i
    # –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É —Å user_id
    row = [""] * len(hdr)
    try:
        row[hdr.index("user_id")] = str(uid)
    except ValueError:
        _ws_ensure_columns(ws, hdr + ["user_id"])
        hdr = _headers(ws)
        row = [""] * len(hdr)
        row[hdr.index("user_id")] = str(uid)
    ws.append_row(row)
    return ws.row_count  # –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è

def profiles_upsert(uid: int, patch: Dict[str, str]):
    if SHEETS_ENABLED and ws_profiles:
        hdr = _headers(ws_profiles)
        need = set(patch.keys()) - set(hdr)
        if need:
            _ws_ensure_columns(ws_profiles, hdr + list(need))
            hdr = _headers(ws_profiles)
        row_i = _ensure_ws_row_by_uid(ws_profiles, uid)
        row_vals = ws_profiles.row_values(row_i) + [""] * (len(hdr) - len(ws_profiles.row_values(row_i)))
        # —Å–æ–±—Ä–∞—Ç—å –∫–∞–∫ dict -> list
        cur = {h: (row_vals[i] if i < len(row_vals) else "") for i, h in enumerate(hdr)}
        cur.update(patch)
        cur["user_id"] = str(uid)
        cur["updated_at"] = iso(utcnow())
        ws_profiles.update(f"A{row_i}:{gsu.rowcol_to_a1(row_i, len(hdr))}", [[cur.get(h, "") for h in hdr]])
    else:
        prof = MEM_PROFILES.setdefault(uid, {})
        prof.update(patch)
        prof["updated_at"] = iso(utcnow())

def feedback_add(ts: str, uid: int, name: str, username: str, rating: str, comment: str):
    if SHEETS_ENABLED and ws_feedback:
        ws_feedback.append_row([ts, str(uid), name or "", username or "", rating or "", comment or ""])
    else:
        MEM_FEEDBACK.append({"timestamp": ts, "user_id": str(uid), "name": name, "username": username,
                             "rating": rating, "comment": comment})

def daily_add(ts: str, uid: int, mood: str = "", comment: str = "", energy: Optional[int] = None):
    if SHEETS_ENABLED and ws_daily:
        ws_daily.append_row([ts, str(uid), mood or "", str(energy or ""), comment or ""])
    else:
        MEM_DAILY.append({"timestamp": ts, "user_id": str(uid), "mood": mood, "energy": energy, "comment": comment})

def episode_create(uid: int, topic: str, severity: int = 5, red: str = "") -> str:
    eid = str(uuid.uuid4())
    row = {
        "episode_id": eid, "user_id": str(uid), "topic": topic or "unspecified",
        "started_at": iso(utcnow()), "baseline_severity": str(severity),
        "red_flags": red or "", "plan_accepted": "", "target": "", "reminder_at": "",
        "next_checkin_at": "", "status": "open", "last_update": iso(utcnow()), "notes": ""
    }
    if SHEETS_ENABLED and ws_episodes:
        hdr = _headers(ws_episodes)
        _ws_ensure_columns(ws_episodes, hdr + list(row.keys()))
        ws_episodes.append_row([row.get(h, "") for h in _headers(ws_episodes)])
    else:
        MEM_EPISODES.append(row)
    return eid

def episode_find_open(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED and ws_episodes:
        recs = ws_episodes.get_all_records()
        opens = [r for r in recs if str(r.get("user_id")) == str(uid) and (r.get("status") or "") == "open"]
        return opens[-1] if opens else None
    else:
        opens = [r for r in MEM_EPISODES if r["user_id"] == str(uid) and r.get("status") == "open"]
        return opens[-1] if opens else None

def episode_set(eid: str, field: str, value: str):
    if SHEETS_ENABLED and ws_episodes:
        vals = ws_episodes.get_all_records()
        hdr = _headers(ws_episodes)
        if field not in hdr:
            _ws_ensure_columns(ws_episodes, hdr + [field])
            hdr = _headers(ws_episodes)
        for i, r in enumerate(vals, start=2):
            if str(r.get("episode_id")) == str(eid):
                ws_episodes.update_cell(i, hdr.index(field) + 1, value)
                ws_episodes.update_cell(i, hdr.index("last_update") + 1, iso(utcnow()))
                return
    else:
        for r in MEM_EPISODES:
            if r["episode_id"] == eid:
                r[field] = value
                r["last_update"] = iso(utcnow())
                return

def reminder_add(uid: int, text: str, when_utc: datetime) -> str:
    rid = str(uuid.uuid4())
    row = {"id": rid, "user_id": str(uid), "text": text, "when_utc": iso(when_utc), "created_at": iso(utcnow()), "status": "scheduled"}
    if SHEETS_ENABLED and ws_reminders:
        hdr = _headers(ws_reminders)
        _ws_ensure_columns(ws_reminders, hdr + list(row.keys()))
        ws_reminders.append_row([row.get(h, "") for h in _headers(ws_reminders)])
    else:
        MEM_REMINDERS.append(row)
    return rid

def reminder_mark_sent(reminder_id: str):
    if SHEETS_ENABLED and ws_reminders:
        vals = ws_reminders.get_all_records()
        hdr = _headers(ws_reminders)
        for i, r in enumerate(vals, start=2):
            if str(r.get("id")) == str(reminder_id):
                ws_reminders.update_cell(i, hdr.index("status") + 1, "sent")
                return
    else:
        for r in MEM_REMINDERS:
            if r["id"] == reminder_id:
                r["status"] = "sent"
                return

def challenge_get(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED and ws_challenges:
        for r in ws_challenges.get_all_records():
            if str(r.get("user_id")) == str(uid) and (r.get("status") or "") == "open":
                return r
        return None
    else:
        for r in MEM_CHALLENGES:
            if r.get("user_id") == str(uid) and r.get("status") == "open":
                return r
        return None

def challenge_start(uid: int, name: str = "hydrate7", length_days: int = 7):
    row = {"user_id": str(uid), "challenge_id": str(uuid.uuid4()), "name": name, "start_date": date.today().isoformat(),
           "length_days": str(length_days), "days_done": "0", "status": "open"}
    if SHEETS_ENABLED and ws_challenges:
        hdr = _headers(ws_challenges)
        _ws_ensure_columns(ws_challenges, hdr + list(row.keys()))
        ws_challenges.append_row([row.get(h, "") for h in _headers(ws_challenges)])
    else:
        MEM_CHALLENGES.append(row)

def challenge_inc(uid: int, name: str = "hydrate7"):
    if SHEETS_ENABLED and ws_challenges:
        vals = ws_challenges.get_all_records()
        hdr = _headers(ws_challenges)
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid) and (r.get("name") or "") == name and (r.get("status") or "") == "open":
                d = max(0, int(str(r.get("days_done") or "0"))) + 1
                ws_challenges.update_cell(i, hdr.index("days_done") + 1, str(d))
                if d >= int(str(r.get("length_days") or "7")):
                    ws_challenges.update_cell(i, hdr.index("status") + 1, "done")
                return d
        return 0
    else:
        for r in MEM_CHALLENGES:
            if r.get("user_id") == str(uid) and r.get("name") == name and r.get("status") == "open":
                r["days_done"] = str(int(r.get("days_done", "0")) + 1)
                if int(r["days_done"]) >= int(r.get("length_days", "7")):
                    r["status"] = "done"
                return int(r["days_done"])
        return 0


# ---------- –ú–µ—Ç—Ä–∏–∫–∏ –∂–∏–∑–Ω–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ ----------

def progress_bar(percent: float, width: int = 12) -> str:
    pct = max(0.0, min(1.0, percent))
    filled = int(round(pct * width))
    return "‚ñà" * filled + "‚ñë" * (width - filled)

def life_metrics(profile: dict) -> Tuple[int, float]:
    # –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è —Ç–æ—á–Ω–µ–µ; –∏–Ω–∞—á–µ –æ—Ü–µ–Ω–æ—á–Ω–æ –ø–æ age
    days = 0
    if profile:
        bd = (profile.get("birth_date") or "").strip()
        if re.match(r"^\d{4}-\d{2}-\d{2}$", bd):
            try:
                y, m, d = [int(x) for x in bd.split("-")]
                born = datetime(y, m, d, tzinfo=timezone.utc)
                days = max(0, (utcnow() - born).days)
            except Exception:
                days = 0
        if not days:
            try:
                a = int(re.findall(r"\d+", str(profile.get("age") or ""))[0])
                days = max(0, a * 365)
            except Exception:
                days = 0
    pct = min(1.0, days / 36500.0) if days else 0.0
    return (days, pct)

def _get_skin_tip(lang: str, sex: str, age: int) -> str:
    tips = {
        "ru": [
            "SPF –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ, –¥–∞–∂–µ –∑–∏–º–æ–π.",
            "–ú—è–≥–∫–æ–µ —É–º—ã–≤–∞–Ω–∏–µ, –±–µ–∑ –ø–µ—Ä–µ—Å—É—à–∏–≤–∞–Ω–∏—è.",
            "–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å 7‚Äì8 —á —Å–Ω–∞ ‚Äî –∫–æ–∂–∞ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç.",
            "–í–æ–¥–∞ –∏ –±–µ–ª–æ–∫ ‚Äî –±–∞–∑–∏—Å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."
        ],
        "uk": [
            "SPF —â–æ—Ä–∞–Ω–∫—É, –Ω–∞–≤—ñ—Ç—å —É–∑–∏–º–∫—É.",
            "–ù—ñ–∂–Ω–µ –≤–º–∏–≤–∞–Ω–Ω—è –±–µ–∑ –ø–µ—Ä–µ—Å—É—à–µ–Ω–Ω—è.",
            "7‚Äì8 –≥–æ–¥–∏–Ω —Å–Ω—É ‚Äî –Ω–∞–π–∫—Ä–∞—â–∏–π –±'—é—Ç—ñ-—Ö–∞–∫.",
            "–í–æ–¥–∞ —Ç–∞ –±—ñ–ª–æ–∫ ‚Äî –æ—Å–Ω–æ–≤–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è."
        ],
        "en": [
            "Daily SPF, even in winter.",
            "Gentle cleanse, avoid over-drying.",
            "Aim for 7‚Äì8h sleep ‚Äî skin loves it.",
            "Hydration + protein support repair."
        ],
        "es": [
            "SPF diario, incluso en invierno.",
            "Limpieza suave sin resecar.",
            "Duerme 7‚Äì8h: tu piel lo nota.",
            "Hidrataci√≥n y prote√≠na para reparar."
        ],
    }
    return random.choice(tips.get(lang, tips["en"]))

def _get_daily_tip(profile: dict, lang: str) -> str:
    pool = {
        "ru": [
            "2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–æ–≥—É–ª–∫–∏ –¥–Ω—ë–º —É–ª—É—á—à–∞—é—Ç —Å–æ–Ω.",
            "–°—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –ø–µ—Ä–µ–¥ —ç–∫—Ä–∞–Ω–æ–º ‚Äî –º–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–±–µ–¥–∞.",
            "5 –º–∏–Ω—É—Ç —Ä–∞—Å—Ç—è–∂–∫–∏ —à–µ–∏ —Å–Ω–∏–º—É—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.",
            "–ó–∞–º–µ–Ω–∏—Ç–µ –æ–¥–∏–Ω —Å–ª–∞–¥–∫–∏–π –ø–µ—Ä–µ–∫—É—Å –Ω–∞ –æ—Ä–µ—Ö–∏/–π–æ–≥—É—Ä—Ç."
        ],
        "uk": [
            "2‚Äì3 –∫–æ—Ä–æ—Ç–∫—ñ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏ –≤–¥–µ–Ω—å –ø–æ–∫—Ä–∞—â—É—é—Ç—å —Å–æ–Ω.",
            "–°–∫–ª—è–Ω–∫–∞ –≤–æ–¥–∏ –ø–µ—Ä–µ–¥ –µ–∫—Ä–∞–Ω–æ–º ‚Äî –º–∞–ª–µ–Ω—å–∫–∞ –ø–µ—Ä–µ–º–æ–≥–∞.",
            "5 —Ö–≤–∏–ª–∏–Ω —Ä–æ–∑—Ç—è–∂–∫–∏ —à–∏—ó –∑–Ω—ñ–º—É—Ç—å –Ω–∞–ø—Ä—É–∂–µ–Ω–Ω—è.",
            "–ó–∞–º—ñ–Ω—ñ—Ç—å —Å–æ–ª–æ–¥–∫–∏–π –ø–µ—Ä–µ–∫—É—Å –Ω–∞ –≥–æ—Ä—ñ—Ö–∏/–π–æ–≥—É—Ä—Ç."
        ],
        "en": [
            "Two short walks today can boost tonight‚Äôs sleep.",
            "A glass of water now is a tiny win.",
            "Five minutes of neck mobility eases tension.",
            "Swap one sweet snack for nuts/yogurt."
        ],
        "es": [
            "Dos paseos breves hoy mejoran el sue√±o.",
            "Un vaso de agua ahora es una mini victoria.",
            "Cinco minutos de cuello alivian tensi√≥n.",
            "Cambia un dulce por frutos secos/yogur."
        ],
    }
    return random.choice(pool.get(_user_lang(int(profile.get("user_id") or 0)), pool["en"]))


# ---------- Quickbar –∏ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–æ–≤ ----------

def quickbar_kb(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ö° " + (T[lang]["h60_btn"] if "h60_btn" in T[lang] else "Health in 60s"), callback_data="menu|h60"),
            InlineKeyboardButton("üöë " + ("–°—Ä–æ—á–Ω–æ" if lang=="ru" else "ER"), callback_data="menu|er"),
        ],
        [
            InlineKeyboardButton("üß™ " + ("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è" if lang!="en" else "Lab"), callback_data="menu|lab"),
            InlineKeyboardButton("‚è∞ " + (T[lang]["quick_rem"] if "quick_rem" in T[lang] else "Reminder"), callback_data="menu|rem"),
        ]
    ])

def inline_topic_kb(lang: str) -> InlineKeyboardMarkup:
    return quickbar_kb(lang)

async def show_quickbar(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str):
    try:
        await context.bot.send_message(chat_id, T[lang]["quick_title"], reply_markup=quickbar_kb(lang))
    except Exception as e:
        logging.warning(f"show_quickbar: {e}")


# ---------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∏ –¥–∂–æ–±—ã ----------

def _has_jq_ctx(context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        return bool(getattr(context, "application", None) and context.application.job_queue)
    except Exception:
        return False

def _mk_first_run(hh: int, mm: int, tz_off: int) -> float:
    now_utc = utcnow()
    target_local = (now_utc + timedelta(hours=tz_off)).replace(hour=hh, minute=mm, second=0, microsecond=0)
    if target_local <= (now_utc + timedelta(hours=tz_off)):
        target_local += timedelta(days=1)
    first_utc = target_local - timedelta(hours=tz_off)
    return max(1.0, (first_utc - now_utc).total_seconds())

def schedule_daily_checkin(app, uid: int, tz_off: int, hhmm: str, lang: str):
    for j in app.job_queue.get_jobs_by_name(f"daily_{uid}"):
        j.schedule_removal()
    hh, mm = hhmm_tuple(hhmm)
    app.job_queue.run_repeating(job_daily_checkin, interval=86400, first=_mk_first_run(hh, mm, tz_off),
                                name=f"daily_{uid}", data={"user_id": uid, "lang": lang})

def schedule_evening_checkin(app, uid: int, tz_off: int, hhmm: str, lang: str):
    for j in app.job_queue.get_jobs_by_name(f"evening_{uid}"):
        j.schedule_removal()
    hh, mm = hhmm_tuple(hhmm)
    app.job_queue.run_repeating(job_evening_checkin, interval=86400, first=_mk_first_run(hh, mm, tz_off),
                                name=f"evening_{uid}", data={"user_id": uid, "lang": lang})

def schedule_from_sheet_on_start(app):
    if not SHEETS_ENABLED or not ws_users:
        return
    try:
        for r in ws_users.get_all_records():
            uid = int(str(r.get("user_id") or "0")) if str(r.get("user_id") or "").isdigit() else None
            if not uid:
                continue
            lang = norm_lang(r.get("lang") or "en")
            tz  = int(str(r.get("tz_offset") or "0"))
            ch  = r.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL
            schedule_daily_checkin(app, uid, tz, ch, lang)
            eh  = (r.get("evening_hour") or "").strip()
            if eh:
                schedule_evening_checkin(app, uid, tz, eh, lang)
    except Exception as e:
        logging.warning(f"schedule_from_sheet_on_start: {e}")

async def job_oneoff_reminder(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid = d.get("user_id"); rid = d.get("reminder_id")
    if not uid or not rid:
        return
    try:
        # –Ω–∞–π–¥—ë–º —Ç–µ–∫—Å—Ç
        text = "‚è∞"
        if SHEETS_ENABLED and ws_reminders:
            vals = ws_reminders.get_all_records()
            for r in vals:
                if str(r.get("id")) == str(rid):
                    text = (r.get("text") or "‚è∞")
                    break
        else:
            for r in MEM_REMINDERS:
                if r["id"] == rid:
                    text = r.get("text") or "‚è∞"
                    break
        await context.bot.send_message(uid, text)
        reminder_mark_sent(rid)
    except Exception as e:
        logging.error(f"job_oneoff_reminder: {e}")

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º job_daily_checkin, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ üëç/üôÇ/üòê/ü§ï/‚è≠
async def job_daily_checkin(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid = d.get("user_id"); lang = norm_lang((d.get("lang") or "en"))
    if not uid:
        return
    u = users_get(uid)
    if (u.get("paused") or "").lower() == "yes":
        return

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üëç", callback_data="gm|mood|great"),
         InlineKeyboardButton("üôÇ", callback_data="gm|mood|ok"),
         InlineKeyboardButton("üòê", callback_data="gm|mood|tired"),
         InlineKeyboardButton("ü§ï", callback_data="gm|mood|pain")],
        [InlineKeyboardButton("‚è≠", callback_data="gm|skip")],
    ])
    try:
        # –ü—Ä–æ–±—Ä–æ—Å–∏–º –º–µ—Ç—Ä–∏–∫–∏ –∂–∏–∑–Ω–∏ –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        prof = profiles_get(uid) or {}
        dl, pct = life_metrics(prof)
        maybe_metrics = ""
        if random.random() < 0.2 and dl:
            bar = progress_bar(pct)
            if prof.get("birth_date"):
                maybe_metrics = f"\n{('–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π' if lang!='en' else 'Today is your')} {dl}-–π –¥–µ–Ω—å –∂–∏–∑–Ω–∏. {bar} {int(pct*100)}%."
            else:
                maybe_metrics = f"\n{('–û—Ü–µ–Ω–æ—á–Ω–æ, ' if lang!='en' else 'Approx., ')}{dl} –¥–Ω–µ–π. {bar} {int(pct*100)}%."
        await context.bot.send_message(uid, (T[lang]["daily_gm"] + maybe_metrics), reply_markup=kb)
    except Exception as e:
        logging.error(f"job_daily_checkin send error: {e}")


# ---------- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ----------

def _short_coach_reply(lang: str, mood: str, prof: dict) -> str:
    packs = {
        "ru": {
            "great": ["–ö—Ä—É—Ç–æ! –ó–∞–∫—Ä–µ–ø–∏–º ‚Äî 10 –º–∏–Ω—É—Ç –ø—Ä–æ–≥—É–ª–∫–∏ üåø", "–û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç. –°—Ç–∞–∫–∞–Ω –≤–æ–¥—ã? üíß"],
            "ok":    ["–ù–µ–ø–ª–æ—Ö–æ. 3 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–∞ ‚Äî –∏ –≤–ø–µ—Ä—ë–¥.", "–ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥: 5 –º–∏–Ω—É—Ç —à–µ–∏ üßò"],
            "tired": ["–ü–æ–Ω–∏–º–∞—é. –ü–æ–ø—Ä–æ–±—É–π 200‚Äì300 –º–ª –≤–æ–¥—ã –∏ 5 –º–∏–Ω –æ—Ç–¥—ã—Ö–∞.", "–ú–∏–Ω—É—Ç–∫–∞ –Ω–∞ –æ–∫–Ω–æ/–≤–æ–∑–¥—É—Ö ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç."],
            "pain":  ["–°–æ—á—É–≤—Å—Ç–≤—É—é. –û—Ü–µ–Ω–∏ –ø–æ 0‚Äì10 –∏ —Å–∫–∞–∂–∏, –≥–¥–µ –∏–º–µ–Ω–Ω–æ? –ï—Å–ª–∏ ‚â•7/10 ‚Äî –ª—É—á—à–µ –∫ –≤—Ä–∞—á—É.", "–ú–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞, –≤–æ–¥–∞ –∏ —Ç—ë–ø–ª—ã–π —à–∞—Ä—Ñ (–µ—Å–ª–∏ —à–µ—è/–≥–æ—Ä–ª–æ)."]
        },
        "en": {
            "great": ["Nice! Lock it in with a 10-min walk üåø", "Strong start. Glass of water? üíß"],
            "ok":    ["Not bad. 3 deep breaths ‚Äî go.", "Tiny win: 5-min neck reset üßò"],
            "tired": ["Got it. Try 200‚Äì300 ml water + 5-min break.", "Crack a window, short fresh-air reset."],
            "pain":  ["Sorry about that. Rate 0‚Äì10 & where? If ‚â•7/10 ‚Äî consider care.", "Brief rest + water; scarf/heat if neck/throat."]
        }
    }
    return random.choice(packs.get(lang, packs["en"]).get(mood, ["üëç"]))


def _ai_profile_autoupdate(uid: int):
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–≤—Ç–æ–∞–ø–¥–µ–π—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.
    –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª—è–µ–º –ª—ë–≥–∫–∏–π –Ω–∞–±—Ä–æ—Å–æ–∫, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å.
    """
    prof = profiles_get(uid) or {}
    streak = int(str(prof.get("streak") or "0") or 0)
    tips = []
    if streak >= 3:
        tips.append("good_streak")
    ai = {"hints": tips, "ts": iso(utcnow())}
    profiles_upsert(uid, {"ai_profile": json.dumps(ai, ensure_ascii=False)})


def _touch_streak(uid: int, acted: bool):
    """
    acted=True ‚Äî –±—ã–ª –æ—Ç–≤–µ—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∏–∫;
    acted=False ‚Äî skip, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º.
    """
    prof = profiles_get(uid) or {}
    today = (user_local_now(uid)).date().isoformat()
    last = (prof.get("gm_last_date") or "")
    streak = int(str(prof.get("streak") or "0") or 0)
    best   = int(str(prof.get("streak_best") or "0") or 0)
    if acted:
        if last == today:
            pass  # —É–∂–µ —Å—á–∏—Ç–∞–ª–∏
        else:
            # –µ—Å–ª–∏ –≤—á–µ—Ä–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –∏–Ω–∞—á–µ —Å 1
            try:
                y_date = (user_local_now(uid) - timedelta(days=1)).date().isoformat()
                if last == y_date:
                    streak += 1
                else:
                    streak = 1
            except Exception:
                streak = 1
        best = max(best, streak)
        profiles_upsert(uid, {"streak": str(streak), "streak_best": str(best), "gm_last_date": today})
    else:
        # skip ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—Ç–∏–º –¥–∞—Ç—É, –Ω–µ –º–µ–Ω—è—è streak
        if last != today:
            profiles_upsert(uid, {"gm_last_date": today})


# ---------- –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π cb_handler —Å –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≥–∏–±—Ä–∏–¥–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ----------

async def cb_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    lang = _user_lang(uid)
    data = (q.data or "")

    # Gate skip
    if data == "gate:skip":
        await gate_cb(update, context)
        return

    # Consent
    if data.startswith("consent|"):
        val = data.split("|",1)[1]
        users_set(uid, "consent", "yes" if val=="yes" else "no")
        await q.edit_message_text(T[lang]["thanks"])
        await show_quickbar(context, uid, lang)
        return

    # -------- MINI-INTAKE ----------
    if data.startswith("mini|"):
        _, action, key, *rest = data.split("|")
        if action == "choose":
            value = rest[0] if rest else ""
            mini_handle_choice(uid, key, value)
        elif action == "skip":
            s = sessions.setdefault(uid, {"mini_active": True, "mini_step": 0, "mini_answers": {}})
            s["mini_step"] = int(s.get("mini_step", 0)) + 1
        elif action == "write":
            s = sessions.setdefault(uid, {"mini_active": True, "mini_step": 0, "mini_answers": {}})
            s["mini_wait_key"] = key
            await q.edit_message_text(T[lang]["write"] + "‚Ä¶")
            return
        await ask_next_mini(context, update.effective_chat.id, lang, uid)
        return

    # -------- –ì–∏–±—Ä–∏–¥-–º–µ–Ω—é ----------
    if data.startswith("menu|"):
        act = data.split("|",1)[1]
        if act == "h60":
            sessions.setdefault(uid, {})["awaiting_h60_text"] = True
            await context.bot.send_message(uid, T[lang]["h60_intro"])
        elif act == "er":
            await context.bot.send_message(uid, T[lang]["er_text"])
        elif act == "lab":
            sessions.setdefault(uid, {})["await_lab_city"] = True
            await context.bot.send_message(uid, T[lang]["act_city_prompt"])
        elif act == "rem":
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton(T[lang]["act_rem_4h"],  callback_data="rem|4h")],
                [InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="rem|eve")],
                [InlineKeyboardButton(T[lang]["act_rem_morn"],callback_data="rem|morn")]
            ])
            await context.bot.send_message(uid, T[lang]["remind_when"], reply_markup=kb)
        elif act == "energy":
            row = [InlineKeyboardButton(str(i), callback_data=f"energy|rate|{i}") for i in range(1,6)]
            await context.bot.send_message(uid, T[lang]["gm_energy_q"], reply_markup=InlineKeyboardMarkup([row]))
        elif act == "hydrate":
            tip = T[lang]["hydrate_nudge"]
            daily_add(iso(utcnow()), uid, mood="", comment=tip, energy=None)
            # –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–∞ –≤–æ–¥—ã (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)
            d = challenge_get(uid)
            if d and (d.get("name") == "hydrate7") and (d.get("status") == "open"):
                done = challenge_inc(uid)
                await context.bot.send_message(uid, T[lang]["challenge_progress"].format(d=done, len=d.get("length_days","7")))
            await context.bot.send_message(uid, tip)
        elif act == "skintip":
            prof = profiles_get(uid) or {}
            age = int(re.search(r"\d+", str(prof.get("age") or "0")).group(0)) if re.search(r"\d+", str(prof.get("age") or "")) else 0
            sex = (prof.get("sex") or "").lower()
            tip = _get_skin_tip(lang, sex, age)
            await context.bot.send_message(uid, f"{T[lang]['daily_tip_prefix']} {tip}")
        await show_quickbar(context, uid, lang)
        return

    # -------- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –º–µ–Ω—é --------
    if data.startswith("rem|"):
        opt = data.split("|",1)[1]
        now_local = user_local_now(uid)
        if opt == "4h":
            when_local = now_local + timedelta(hours=4)
            adj = _schedule_oneoff_with_sheet(context, uid, when_local, T[lang]["thanks"])
            await context.bot.send_message(uid, _fmt_reminder_set(lang, adj, kind="4h"))
        elif opt == "eve":
            eh = users_get(uid).get("evening_hour") or DEFAULT_EVENING_LOCAL
            (hh, mm) = hhmm_tuple(eh)
            target = now_local.replace(hour=hh, minute=mm, second=0, microsecond=0)
            if target <= now_local:
                target = target + timedelta(days=1)
            adj = _schedule_oneoff_with_sheet(context, uid, target, T[lang]["thanks"])
            await context.bot.send_message(uid, _fmt_reminder_set(lang, adj, kind="evening"))
        elif opt == "morn":
            mh = users_get(uid).get("checkin_hour") or DEFAULT_CHECKIN_LOCAL
            (hh, mm) = hhmm_tuple(mh)
            target = now_local.replace(hour=hh, minute=mm, second=0, microsecond=0)
            if target <= now_local:
                target = target + timedelta(days=1)
            adj = _schedule_oneoff_with_sheet(context, uid, target, T[lang]["thanks"])
            await context.bot.send_message(uid, _fmt_reminder_set(lang, adj, kind="morning"))
        await show_quickbar(context, uid, lang)
        return

    # -------- Daily GM ----------
    if data.startswith("gm|"):
        _, sub, *rest = data.split("|")
        if sub == "mood":
            mood = rest[0] if rest else "ok"
            daily_add(iso(utcnow()), uid, mood=mood, comment="")
            _touch_streak(uid, acted=True)
            # –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ—É—á-–æ—Ç–≤–µ—Ç
            prof = profiles_get(uid) or {}
            msg = _short_coach_reply(lang, mood, prof)
            await q.edit_message_reply_markup(None)
            await context.bot.send_message(uid, msg)
            await show_quickbar(context, uid, lang)
        elif sub == "skip":
            _touch_streak(uid, acted=False)
            await q.edit_message_reply_markup(None)
            await context.bot.send_message(uid, T[lang]["thanks"])
            await show_quickbar(context, uid, lang)
        return

    # -------- –≠–Ω–µ—Ä–≥–∏—è ----------
    if data.startswith("energy|rate|"):
        try:
            val = int(data.split("|")[-1])
        except:
            val = None
        daily_add(iso(utcnow()), uid, mood="", comment="energy", energy=val)
        _touch_streak(uid, acted=True)
        await q.edit_message_reply_markup(None)
        await context.bot.send_message(uid, T[lang]["gm_energy_done"])
        await show_quickbar(context, uid, lang)
        return

    # -------- Youth / Cycle / Tips ----------
    if data.startswith("youth:"):
        act = data.split(":",1)[1]
        if act == "gm_evening":
            u = users_get(uid)
            off = _user_tz_off(uid)
            eh = (u.get("evening_hour") or DEFAULT_EVENING_LOCAL)
            users_set(uid, "evening_hour", eh)
            if _has_jq_ctx(context):
                schedule_evening_checkin(context.application, uid, off, eh, lang)
            await context.bot.send_message(uid, T[lang]["evening_set"].format(t=eh))
        elif act == "set_quiet":
            sessions.setdefault(uid, {})["await_quiet"] = True
            await context.bot.send_message(uid, T[lang]["ask_quiet"])
        elif act == "challenge":
            if challenge_get(uid):
                d = challenge_get(uid)
                await context.bot.send_message(uid, T[lang]["challenge_progress"].format(d=d.get("days_done","0"), len=d.get("length_days","7")))
            else:
                challenge_start(uid)
                await context.bot.send_message(uid, T[lang]["challenge_started"])
        elif act == "tip":
            prof = profiles_get(uid) or {}
            tip = _get_daily_tip(prof, lang)
            await context.bot.send_message(uid, f"{T[lang]['daily_tip_prefix']} {tip}")
        await show_quickbar(context, uid, lang)
        return

    # -------- Cycle consent ----------
    if data.startswith("cycle|consent|"):
        val = data.split("|")[-1]
        if val == "yes":
            sessions.setdefault(uid, {})["await_cycle_last"] = True
            await context.bot.send_message(uid, T[lang]["cycle_ask_last"])
        else:
            await context.bot.send_message(uid, T[lang]["thanks"])
        await show_quickbar(context, uid, lang)
        return

    # -------- Numeric check-in on episode ----------
    if data.startswith("num|"):
        try:
            val = int(data.split("|")[1])
        except:
            val = 5
        ep = episode_find_open(uid)
        if ep:
            if val <= 3:
                episode_set(ep["episode_id"], "status", "closed")
                await context.bot.send_message(uid, T[lang]["checkin_better"])
            else:
                await context.bot.send_message(uid, T[lang]["checkin_worse"])
        else:
            await context.bot.send_message(uid, T[lang]["thanks"])
        await show_quickbar(context, uid, lang)
        return

    # -------- Feedback ----------
    if data.startswith("fb|"):
        kind = data.split("|")[1]
        if kind in {"good","bad"}:
            feedback_add(iso(utcnow()), uid, name="", username=users_get(uid).get("username",""), rating=("1" if kind=="bad" else "5"), comment="")
            await q.edit_message_reply_markup(None)
            await context.bot.send_message(uid, T[lang]["fb_thanks"])
        elif kind == "free":
            sessions.setdefault(uid, {})["await_fb_msg"] = True
            await q.edit_message_text(T[lang]["fb_write"])
        await show_quickbar(context, uid, lang)
        return


# ---------- –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: –¥–æ–±–∞–≤–ª–µ–Ω—ã lab-–≥–æ—Ä–æ–¥ –∏ —Å–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ ----------

def _trim_to_5_lines(text: str) -> str:
    lines = (text or "").strip().splitlines()
    # –æ—Å—Ç–∞–≤–∏–º –Ω–µ –±–æ–ª–µ–µ 5 —Å—Ç—Ä–æ–∫
    lines = [l.strip() for l in lines if l.strip()]
    if len(lines) > 5:
        lines = lines[:5]
    return "\n".join(lines)

# –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º _process_health60, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —ç–ø–∏–∑–æ–¥
async def _process_health60(uid: int, lang: str, text: str, msg_obj):
    prof = profiles_get(uid) or {}
    prefix = personalized_prefix(lang, prof)
    plan = health60_make_plan(lang, text, prof)
    final = _trim_to_5_lines((prefix + "\n" if prefix else "") + plan)

    # –ª–æ–≥–∏—Ä—É–µ–º —ç–ø–∏–∑–æ–¥ –¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Ç–µ–º—ã
    topic_guess = "headache" if re.search(r"–≥–æ–ª–æ–≤|head", text.lower()) else ("belly" if re.search(r"–∂–∏–≤–æ—Ç|stomach|belly", text.lower()) else "symptom")
    eid = episode_create(uid, topic=topic_guess, severity=5, red="")
    sessions.setdefault(uid, {})["last_eid"] = eid

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["accept_opts"][0], callback_data="h60|accept|yes"),
         InlineKeyboardButton(T[lang]["accept_opts"][1], callback_data="h60|accept|later"),
         InlineKeyboardButton(T[lang]["accept_opts"][2], callback_data="h60|accept|no")],
        [InlineKeyboardButton(T[lang]["act_rem_4h"],  callback_data="h60|rem|4h"),
         InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="h60|rem|eve"),
         InlineKeyboardButton(T[lang]["act_rem_morn"],callback_data="h60|rem|morn")],
        [InlineKeyboardButton(T[lang]["act_save_episode"], callback_data="h60|episode|save"),
         InlineKeyboardButton(T[lang]["act_ex_neck"],      callback_data="h60|neck"),
         InlineKeyboardButton(T[lang]["act_er"],           callback_data="h60|er")]
    ])
    await msg_obj.reply_text(final, reply_markup=kb)
    _ai_profile_autoupdate(uid)

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º msg_text, –¥–æ–±–∞–≤–∏–≤ –æ–±—Ä–∞–±–æ—Ç–∫—É await_lab_city
async def msg_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    text = (update.message.text or "").strip()
    update_last_seen(uid)
    s = sessions.setdefault(uid, {})

    # Mini-intake free text capture
    if s.get("mini_active") and s.get("mini_wait_key"):
        key = s["mini_wait_key"]
        s["mini_wait_key"] = None
        s["mini_answers"][key] = text
        s["mini_step"] = int(s.get("mini_step", 0)) + 1
        # birth_date –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        if key == "birth_date":
            if not re.match(r"^\d{4}-\d{2}-\d{2}$", text):
                # –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –ª—É—á—à–µ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–∑–∂–µ
                pass
        await ask_next_mini(context, update.effective_chat.id, lang, uid)
        return

    # Lab city
    if s.get("await_lab_city"):
        s["await_lab_city"] = False
        profiles_upsert(uid, {"city": text})
        await update.message.reply_text(T[lang]["act_saved"])
        await show_quickbar(context, uid, lang)
        return

    # GM note
    if s.get("await_gm_note"):
        daily_add(iso(utcnow()), uid, mood="", comment=text, energy=None)
        s["await_gm_note"] = False
        await update.message.reply_text(T[lang]["mood_thanks"])
        await show_quickbar(context, uid, lang)
        return

    # Quiet hours
    if s.get("await_quiet"):
        qh = text if re.match(r"^\s*([01]?\d|2[0-3]):[0-5]\d-([01]?\d|2[0-3]):[0-5]\d\s*$", text) else DEFAULT_QUIET_HOURS
        profiles_upsert(uid, {"quiet_hours": qh})
        s["await_quiet"] = False
        await update.message.reply_text(T[lang]["quiet_saved"].format(qh=qh))
        await show_quickbar(context, uid, lang)
        return

    # Cycle flow
    if s.get("await_cycle_last"):
        if re.match(r"^\d{4}-\d{2}-\d{2}$", text):
            profiles_upsert(uid, {"cycle_last_date": text})
            s["await_cycle_last"] = False
            s["await_cycle_len"]  = True
            await update.message.reply_text(T[lang]["cycle_ask_len"])
        else:
            await update.message.reply_text(T[lang]["cycle_ask_last"])
        return
    if s.get("await_cycle_len"):
        try:
            n = int(re.findall(r"\d+", text)[0])
        except:
            n = 28
        profiles_upsert(uid, {"cycle_avg_len": str(max(21, min(40, n))), "cycle_enabled": "1"})
        s["await_cycle_len"] = False
        await update.message.reply_text(T[lang]["cycle_saved"])
        await show_quickbar(context, uid, lang)
        return

    # Feedback free-form
    if s.get("await_fb_msg"):
        feedback_add(iso(utcnow()), uid, name="", username=users_get(uid).get("username",""), rating="0", comment=text[:800])
        s["await_fb_msg"] = False
        await update.message.reply_text(T[lang]["fb_thanks"])
        await show_quickbar(context, uid, lang)
        return

    # Health60 awaiting
    if s.get("awaiting_h60_text"):
        s["awaiting_h60_text"] = False
        await _process_health60(uid, lang, text, update.message)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton(T[lang]["fb_good"], callback_data="fb|good"),
             InlineKeyboardButton(T[lang]["fb_bad"],  callback_data="fb|bad")],
            [InlineKeyboardButton(T[lang]["fb_free"], callback_data="fb|free")]
        ])
        await update.message.reply_text(T[lang]["ask_fb"], reply_markup=kb)
        await show_quickbar(context, uid, lang)
        return

    # Router default (concise assistant mode)
    prof = profiles_get(uid) or {}
    prefix = personalized_prefix(lang, prof)
    route = llm_router_answer(text, lang, prof)
    reply = route.get("assistant_reply") or T[lang]["unknown"]
    followups = route.get("followups") or []
    lines = [_trim_to_5_lines(reply)]
    if followups:
        short_f = [f for f in followups if f.strip()][:4]
        if short_f:
            lines.append("")
            lines.append("‚Äî " + "\n‚Äî ".join(short_f))
    final = (prefix + "\n" if prefix else "") + "\n".join([l for l in lines if l]).strip()
    await send_unique(update.message, uid, final)
    await show_quickbar(context, uid, lang)
