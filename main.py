# -*- coding: utf-8 -*-
# =========================
# TendAI ‚Äî FULL CODE (Part 1/2)
# Base, Storage, i18n, Intake, Care engine, Schedules (jobs), Commands
# =========================

import os, re, json, uuid, logging, random
from datetime import datetime, timedelta, timezone, date, time as dtime
from typing import List, Dict, Optional, Set, Tuple
from difflib import SequenceMatcher

from dotenv import load_dotenv
from langdetect import detect, DetectorFactory

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ---------- OpenAI (optional) ----------
from openai import OpenAI

# ---------- Google Sheets (robust + memory fallback) ----------
import gspread
import gspread.utils as gsu
from gspread.exceptions import SpreadsheetNotFound, WorksheetNotFound
from oauth2client.service_account import ServiceAccountCredentials


# ---------------- Boot & Config ----------------
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
DetectorFactory.seed = 0

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")

SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Sheets")
SHEET_ID = os.getenv("SHEET_ID", "")
ALLOW_CREATE_SHEET = os.getenv("ALLOW_CREATE_SHEET", "0") == "1"

DEFAULT_CHECKIN_LOCAL = "08:30"
DEFAULT_EVENING_LOCAL  = "20:00"
DEFAULT_MIDDAY_LOCAL   = "13:00"
DEFAULT_WEEKLY_LOCAL   = "10:00"  # –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
DEFAULT_QUIET_HOURS = "22:00-08:00"

AUTO_MAX_PER_DAY = 2  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∞–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# OpenAI client (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
oai: Optional[OpenAI] = None
try:
    if OPENAI_API_KEY:
        os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
        oai = OpenAI()
except Exception as e:
    logging.error(f"OpenAI init error: {e}")
    oai = None


# ---------------- i18n & text ----------------
SUPPORTED = {"ru", "en", "uk", "es"}

def norm_lang(code: Optional[str]) -> str:
    if not code: return "en"
    c = code.split("-")[0].lower()
    return c if c in SUPPORTED else "en"

T: Dict[str, Dict[str, str]] = {
    "en": {
        "welcome": "Hi! I‚Äôm TendAI ‚Äî a caring health & longevity assistant.\nShort, useful, friendly. Let‚Äôs do a 40s intake to personalize.",
        "help": "Short checkups, 24‚Äì48h plans, reminders, daily check-ins.\nCommands: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /evening_on 20:00 /evening_off /settz +2 /health60 /mood /energy /hydrate /skintip /cycle /youth /ru /uk /en /es",
        "privacy": "I‚Äôm not a medical service. Minimal data for reminders only. Use /delete_data to erase.",
        "quick_title": "Quick actions",
        "quick_h60": "‚ö° Health in 60s",
        "quick_er": "üöë Emergency info",
        "quick_lab": "üß™ Lab",
        "quick_rem": "‚è∞ Reminder",
        "profile_intro": "Quick intake (~40s). Use buttons or type.",
        "write": "‚úçÔ∏è Write", "skip": "‚è≠Ô∏è Skip",
        "start_where": "Where do you want to start? (symptom/sleep/nutrition/labs/habits/longevity)",
        "saved_profile": "Saved: ",
        "daily_gm": "Good morning! üåû How do you feel today?",
        "gm_excellent": "üëç Excellent", "gm_ok": "üôÇ Okay", "gm_tired": "üòê Tired", "gm_pain": "ü§ï In pain", "gm_skip": "‚è≠Ô∏è Skip today",
        "mood_note": "‚úçÔ∏è Comment", "mood_thanks": "Thanks! Have a smooth day üëã",
        "h60_btn": "Health in 60 seconds",
        "h60_intro": "Briefly write what‚Äôs bothering you (e.g., ‚Äúheadache‚Äù, ‚Äúfatigue‚Äù). I‚Äôll give 3 key tips in 60s.",
        "h60_t1": "Possible causes", "h60_t2": "Do now (next 24‚Äì48h)", "h60_t3": "When to see a doctor", "h60_serious":"Serious to rule out",
        "ask_fb":"Was this helpful?","fb_good":"üëç Like","fb_bad":"üëé Dislike","fb_free":"üìù Feedback","fb_write":"Write a short feedback:","fb_thanks":"Thanks for your feedback! ‚úÖ",
        "youth_pack":"Youth Pack","gm_energy":"‚ö° Energy","gm_energy_q":"Your energy (1‚Äì5)?","gm_energy_done":"Logged energy ‚Äî thanks!","gm_evening_btn":"‚è∞ Remind this evening",
        "hydrate_btn":"üíß Hydration","hydrate_nudge":"üíß Time for a glass of water","skintip_btn":"üß¥ Skin/Body tip","skintip_sent":"Tip sent.","daily_tip_prefix":"üçé Daily tip:",
        "challenge_btn":"üéØ 7-day hydration challenge","challenge_started":"Challenge started! I‚Äôll track your daily check-ins.","challenge_progress":"Challenge progress: {d}/{len} days.",
        "cycle_btn":"ü©∏ Cycle","cycle_consent":"Track your cycle for gentle timing tips?","cycle_ask_last":"Enter last period date (YYYY-MM-DD):","cycle_ask_len":"Average cycle length (e.g., 28):","cycle_saved":"Cycle tracking saved.",
        "quiet_saved":"Quiet hours saved: {qh}", "set_quiet_btn":"üåô Quiet hours", "ask_quiet":"Type quiet hours as HH:MM-HH:MM (local), e.g. 22:00-08:00",
        "evening_intro":"Evening check-in:","evening_tip_btn":"ü™Ñ Tip of the day","evening_set":"Evening check-in set to {t} (local).","evening_off":"Evening check-in disabled.",
        "ask_consent":"May I send a follow-up later to check how you feel?","yes":"Yes","no":"No",
        "unknown":"I need a bit more info: where exactly and how long?","thanks":"Got it üôå","back":"‚óÄ Back","exit":"Exit",
        "paused_on":"Notifications paused. Use /resume to enable.","paused_off":"Notifications resumed.","deleted":"All your data was deleted. Use /start to begin again.",
        "life_today":"Today is your {n}-th day of life üéâ. Target ‚Äî 36,500 (100y).","life_percent":"You‚Äôve already passed {p}% toward 100 years.","life_estimate":"(estimated by age, set birth_date for accuracy)",
        "px":"Considering your profile: {sex}, {age}y; goal ‚Äî {goal}.",
        "act_rem_4h":"‚è∞ Remind in 4h","act_rem_eve":"‚è∞ This evening","act_rem_morn":"‚è∞ Tomorrow morning","act_save_episode":"üíæ Save episode","act_ex_neck":"üßò 5-min neck routine","act_er":"üöë Emergency info",
    },
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–ö–æ—Ä–æ—Ç–∫–æ, –ø–æ–ª–µ–∑–Ω–æ –∏ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏. –î–∞–≤–∞–π—Ç–µ –º–∏–Ω–∏-–æ–ø—Ä–æ—Å (~40—Å) –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.",
        "help": "–ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã.\n–ö–æ–º–∞–Ω–¥—ã: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /evening_on 20:00 /evening_off /settz +3 /health60 /mood /energy /hydrate /skintip /cycle /youth /ru /uk /en /es",
        "privacy": "–Ø –Ω–µ –∑–∞–º–µ–Ω—è—é –≤—Ä–∞—á–∞. –î–∞–Ω–Ω—ã–µ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. /delete_data ‚Äî —É–¥–∞–ª–∏—Ç—å.",
        "quick_title":"–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è","quick_h60":"‚ö° –ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫","quick_er":"üöë –°—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é","quick_lab":"üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è","quick_rem":"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
        "profile_intro":"–ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å (~40—Å). –ú–æ–∂–Ω–æ –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º.","write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å","skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "start_where":"–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/–ø–∏—Ç–∞–Ω–∏–µ/–∞–Ω–∞–ª–∏–∑—ã/–ø—Ä–∏–≤—ã—á–∫–∏/–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ)","saved_profile":"–°–æ—Ö—Ä–∞–Ω–∏–ª: ",
        "daily_gm":"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üåû –ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?","gm_excellent":"üëç –û—Ç–ª–∏—á–Ω–æ","gm_ok":"üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ","gm_tired":"üòê –£—Å—Ç–∞–ª","gm_pain":"ü§ï –ë–æ–ª–∏—Ç","gm_skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "mood_note":"‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π","mood_thanks":"–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üëã",
        "h60_btn":"–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥","h60_intro":"–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞¬ª, ¬´—É—Å—Ç–∞–ª–æ—Å—Ç—å¬ª). –î–∞–º 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–≤–µ—Ç–∞ –∑–∞ 60 —Å–µ–∫.",
        "h60_t1":"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã","h60_t2":"–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å (24‚Äì48 —á)","h60_t3":"–ö–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É","h60_serious":"–ß—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ–µ –∏—Å–∫–ª—é—á–∏—Ç—å",
        "ask_fb":"–≠—Ç–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ?","fb_good":"üëç –ù—Ä–∞–≤–∏—Ç—Å—è","fb_bad":"üëé –ù–µ –ø–æ–ª–µ–∑–Ω–æ","fb_free":"üìù –û—Ç–∑—ã–≤","fb_write":"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤:","fb_thanks":"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! ‚úÖ",
        "youth_pack":"–ú–æ–ª–æ–¥—ë–∂–Ω—ã–π –ø–∞–∫–µ—Ç","gm_energy":"‚ö° –≠–Ω–µ—Ä–≥–∏—è","gm_energy_q":"–ö–∞–∫ —ç–Ω–µ—Ä–≥–∏—è (1‚Äì5)?","gm_energy_done":"–ó–∞–ø–∏—Å–∞–ª —ç–Ω–µ—Ä–≥–∏—é ‚Äî —Å–ø–∞—Å–∏–±–æ!","gm_evening_btn":"‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –≤–µ—á–µ—Ä–æ–º",
        "hydrate_btn":"üíß –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è","hydrate_nudge":"üíß –í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã","skintip_btn":"üß¥ –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–æ–∂–∏/—Ç–µ–ª–∞","skintip_sent":"–°–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.","daily_tip_prefix":"üçé –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–Ω—è:",
        "challenge_btn":"üéØ –ß–µ–ª–ª–µ–Ω–¥–∂ 7 –¥–Ω–µ–π (–≤–æ–¥–∞)","challenge_started":"–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞—Ç!","challenge_progress":"–ü—Ä–æ–≥—Ä–µ—Å—Å: {d}/{len} –¥–Ω–µ–π.",
        "cycle_btn":"ü©∏ –¶–∏–∫–ª","cycle_consent":"–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–∏–∫–ª –∏ –¥–∞–≤–∞—Ç—å –º—è–≥–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏?","cycle_ask_last":"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö (–ì–ì–ì–ì-–ú–ú-–î–î):","cycle_ask_len":"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28):","cycle_saved":"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
        "quiet_saved":"–¢–∏—Ö–∏–µ —á–∞—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {qh}","set_quiet_btn":"üåô –¢–∏—Ö–∏–µ —á–∞—Å—ã","ask_quiet":"–í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú (–ª–æ–∫–∞–ª—å–Ω–æ), –Ω–∞–ø—Ä. 22:00-08:00",
        "evening_intro":"–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω:","evening_tip_btn":"ü™Ñ –°–æ–≤–µ—Ç –¥–Ω—è","evening_set":"–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω –Ω–∞ {t} (–ª–æ–∫–∞–ª—å–Ω–æ).","evening_off":"–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω.",
        "ask_consent":"–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã?","yes":"–î–∞","no":"–ù–µ—Ç",
        "unknown":"–ù—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: –≥–¥–µ –∏–º–µ–Ω–Ω–æ –∏ –∫–∞–∫ –¥–æ–ª–≥–æ?","thanks":"–ü—Ä–∏–Ω—è—Ç–æ üôå","back":"‚óÄ –ù–∞–∑–∞–¥","exit":"–í—ã–π—Ç–∏",
        "paused_on":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–∞—É–∑—É. /resume ‚Äî –≤–∫–ª—é—á–∏—Ç—å.","paused_off":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.","deleted":"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        "life_today":"–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π {n}-–π –¥–µ–Ω—å –∂–∏–∑–Ω–∏ üéâ. –¶–µ–ª—å ‚Äî 36 500 (100 –ª–µ—Ç).","life_percent":"–¢—ã –ø—Ä–æ—à—ë–ª —É–∂–µ {p}% –ø—É—Ç–∏ –∫ 100 –≥–æ–¥–∞–º.","life_estimate":"(–æ—Ü–µ–Ω–æ—á–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É ‚Äî —É–∫–∞–∂–∏ birth_date –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)",
        "px":"–° —É—á—ë—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è: {sex}, {age} –ª–µ—Ç; —Ü–µ–ª—å ‚Äî {goal}.",
        "act_rem_4h":"‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 4 —á","act_rem_eve":"‚è∞ –°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º","act_rem_morn":"‚è∞ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º","act_save_episode":"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–ø–∏–∑–æ–¥","act_ex_neck":"üßò 5-–º–∏–Ω —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —à–µ–∏","act_er":"üöë –ö–æ–≥–¥–∞ —Å—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é",
    },
    "uk": {
        "welcome":"–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî —Ç—É—Ä–±–æ—Ç–ª–∏–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤‚Äô—è.\n–ó—Ä–æ–±—ñ–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ (~40—Å) –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó.",
        "help":"–ö–æ—Ä–æ—Ç–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ–¥–µ–Ω–Ω—ñ —á–µ–∫-—ñ–Ω–∏.\n–ö–æ–º–∞–Ω–¥–∏: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /evening_on 20:00 /evening_off /settz +2 /health60 /mood /energy /hydrate /skintip /cycle /youth /ru /uk /en /es",
        "privacy":"–Ø –Ω–µ –∑–∞–º—ñ–Ω—é—é –ª—ñ–∫–∞—Ä—è. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ª–∏—à–µ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å. /delete_data ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏.",
        "quick_title":"–®–≤–∏–¥–∫—ñ –¥—ñ—ó","quick_h60":"‚ö° –ó–¥–æ—Ä–æ–≤‚Äô—è –∑–∞ 60 —Å","quick_er":"üöë –ù–µ–≤—ñ–¥–∫–ª–∞–¥–Ω–æ","quick_lab":"üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—è","quick_rem":"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è",
        "profile_intro":"–®–≤–∏–¥–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ (~40—Å).","write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏","skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "start_where":"–ó —á–æ–≥–æ –ø–æ—á–Ω–µ–º–æ? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è/–∞–Ω–∞–ª—ñ–∑–∏/–∑–≤–∏—á–∫–∏/–¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è)","saved_profile":"–ó–±–µ—Ä—ñ–≥: ",
        "daily_gm":"–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! üåû –Ø–∫ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è —Å—å–æ–≥–æ–¥–Ω—ñ?","gm_excellent":"üëç –ß—É–¥–æ–≤–æ","gm_ok":"üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ","gm_tired":"üòê –í—Ç–æ–º–∞","gm_pain":"ü§ï –ë–æ–ª–∏—Ç—å","gm_skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "mood_note":"‚úçÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä","mood_thanks":"–î—è–∫—É—é! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üëã",
        "h60_btn":"–ó–¥–æ—Ä–æ–≤‚Äô—è –∑–∞ 60 —Å–µ–∫—É–Ω–¥","h60_intro":"–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à—ñ—Ç—å, —â–æ —Ç—É—Ä–±—É—î. –î–∞–º 3 –ø–æ—Ä–∞–¥–∏ –∑–∞ 60 —Å.",
        "h60_t1":"–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏","h60_t2":"–©–æ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞—Ä–∞–∑ (24‚Äì48 –≥–æ–¥)","h60_t3":"–ö–æ–ª–∏ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –ª—ñ–∫–∞—Ä—è","h60_serious":"–©–æ —Å–µ—Ä–π–æ–∑–Ω–µ –≤–∏–∫–ª—é—á–∏—Ç–∏",
        "ask_fb":"–¶–µ –±—É–ª–æ –∫–æ—Ä–∏—Å–Ω–æ?","fb_good":"üëç –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è","fb_bad":"üëé –ù–µ –∫–æ—Ä–∏—Å–Ω–æ","fb_free":"üìù –í—ñ–¥–≥—É–∫","fb_write":"–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ñ–¥–≥—É–∫:","fb_thanks":"–î—è–∫—É—é! ‚úÖ",
        "youth_pack":"–ú–æ–ª–æ–¥—ñ–∂–Ω–∏–π –ø–∞–∫–µ—Ç","gm_energy":"‚ö° –ï–Ω–µ—Ä–≥—ñ—è","gm_energy_q":"–ï–Ω–µ—Ä–≥—ñ—è (1‚Äì5)?","gm_energy_done":"–ó–∞–Ω–æ—Ç—É–≤–∞–≤ –µ–Ω–µ—Ä–≥—ñ—é ‚Äî –¥—è–∫—É—é!","gm_evening_btn":"‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏ –≤–≤–µ—á–µ—Ä—ñ",
        "hydrate_btn":"üíß –ì—ñ–¥—Ä–∞—Ç–∞—Ü—ñ—è","hydrate_nudge":"üíß –ß–∞—Å –¥–ª—è —Å–∫–ª—è–Ω–∫–∏ –≤–æ–¥–∏","skintip_btn":"üß¥ –ü–æ—Ä–∞–¥–∞ –¥–ª—è —à–∫—ñ—Ä–∏/—Ç—ñ–ª–∞","skintip_sent":"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ.","daily_tip_prefix":"üçé –ü—ñ–¥–∫–∞–∑–∫–∞ –¥–Ω—è:",
        "challenge_btn":"üéØ –ß–µ–ª–µ–Ω–¥–∂ 7 –¥–Ω—ñ–≤ (–≤–æ–¥–∞)","challenge_started":"–ß–µ–ª–µ–Ω–¥–∂ –∑–∞–ø—É—â–µ–Ω–æ!","challenge_progress":"–ü—Ä–æ–≥—Ä–µ—Å: {d}/{len} –¥–Ω—ñ–≤.",
        "cycle_btn":"ü©∏ –¶–∏–∫–ª","cycle_consent":"–í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Ü–∏–∫–ª —ñ –º‚Äô—è–∫—ñ –ø–æ—Ä–∞–¥–∏?","cycle_ask_last":"–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –º–µ–Ω—Å—Ç—Ä—É–∞—Ü—ñ–π (–†–†–†–†-–ú–ú-–î–î):","cycle_ask_len":"–°–µ—Ä–µ–¥–Ω—è –¥–æ–≤–∂–∏–Ω–∞ —Ü–∏–∫–ª—É (–Ω–∞–ø—Ä., 28):","cycle_saved":"–ó–±–µ—Ä–µ–∂–µ–Ω–æ.",
        "quiet_saved":"–¢–∏—Ö—ñ –≥–æ–¥–∏–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {qh}","set_quiet_btn":"üåô –¢–∏—Ö—ñ –≥–æ–¥–∏–Ω–∏","ask_quiet":"–í–≤–µ–¥—ñ—Ç—å –ì–ì:–•–•-–ì–ì:–•–• (–ª–æ–∫–∞–ª—å–Ω–æ), –Ω–∞–ø—Ä. 22:00-08:00",
        "evening_intro":"–í–µ—á—ñ—Ä–Ω—ñ–π —á–µ–∫-—ñ–Ω:","evening_tip_btn":"ü™Ñ –ü–æ—Ä–∞–¥–∞ –¥–Ω—è","evening_set":"–í–µ—á—ñ—Ä–Ω—ñ–π —á–µ–∫-—ñ–Ω –Ω–∞ {t} (–ª–æ–∫–∞–ª—å–Ω–æ).","evening_off":"–í–∏–º–∫–Ω–µ–Ω–æ.",
        "ask_consent":"–ú–æ–∂—É –Ω–∞–≥–∞–¥–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —è–∫ –≤–∏?","yes":"–¢–∞–∫","no":"–ù—ñ",
        "unknown":"–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: –¥–µ —Å–∞–º–µ —ñ —è–∫ –¥–æ–≤–≥–æ?","thanks":"–ü—Ä–∏–π–Ω—è—Ç–æ üôå","back":"‚óÄ –ù–∞–∑–∞–¥","exit":"–í–∏–π—Ç–∏",
        "paused_on":"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ. /resume ‚Äî —É–≤—ñ–º–∫–Ω—É—Ç–∏.","paused_off":"–ó–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ.","deleted":"–£—Å—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ. /start ‚Äî –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.",
        "life_today":"–°—å–æ–≥–æ–¥–Ω—ñ —Ç–≤—ñ–π {n}-–π –¥–µ–Ω—å –∂–∏—Ç—Ç—è üéâ. –ú–µ—Ç–∞ ‚Äî 36 500 (100 —Ä–æ–∫—ñ–≤).","life_percent":"–¢–∏ –ø—Ä–æ–π—à–æ–≤ {p}% —à–ª—è—Ö—É –¥–æ 100 —Ä–æ–∫—ñ–≤.","life_estimate":"(–æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –∑–∞ –≤—ñ–∫–æ–º ‚Äî –≤–∫–∞–∂–∏ birth_date –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ)",
        "px":"–ó —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ—Ñ—ñ–ª—é: {sex}, {age} —Ä.; –º–µ—Ç–∞ ‚Äî {goal}.",
        "act_rem_4h":"‚è∞ –ß–µ—Ä–µ–∑ 4 –≥–æ–¥","act_rem_eve":"‚è∞ –°—å–æ–≥–æ–¥–Ω—ñ –≤–≤–µ—á–µ—Ä—ñ","act_rem_morn":"‚è∞ –ó–∞–≤—Ç—Ä–∞ –∑—Ä–∞–Ω–∫—É","act_save_episode":"üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –µ–ø—ñ–∑–æ–¥","act_ex_neck":"üßò 5-—Ö–≤ –¥–ª—è —à–∏—ó","act_er":"üöë –ö–æ–ª–∏ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ",
    },
}
T["es"] = T["en"]

# --- Personalized prefix shown before LLM reply ---
def personalized_prefix(lang: str, profile: dict) -> str:
    sex = (profile.get("sex") or "").strip()
    goal = (profile.get("goal") or "").strip()
    age_raw = str(profile.get("age") or "")
    m = re.search(r"\d+", age_raw)
    age = m.group(0) if m else ""
    if sum(bool(x) for x in (sex, age, goal)) >= 2:
        tpl = (T.get(lang) or T["en"]).get("px", T["en"]["px"])
        return tpl.format(sex=sex or "‚Äî", age=age or "‚Äî", goal=goal or "‚Äî")
    return ""


# ---------------- Helpers ----------------
def utcnow() -> datetime: return datetime.now(timezone.utc)
def iso(dt: Optional[datetime]) -> str:
    return "" if not dt else dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def detect_lang_from_text(text: str, fallback: str) -> str:
    s = (text or "").strip()
    if not s: return fallback
    low = s.lower()
    if re.search(r"[–∞-—è—ë—ñ—ó—î“ë]", low):
        return "uk" if re.search(r"[—ñ—ó—î“ë]", low) else "ru"
    try:
        return norm_lang(detect(s))
    except Exception:
        return fallback

def profile_is_incomplete(profile_row: dict) -> bool:
    keys = ["sex","age","goal"]
    return sum(1 for k in keys if str(profile_row.get(k) or "").strip()) < 2

def age_to_band(age: int) -> str:
    if age <= 0: return "unknown"
    if age <= 25: return "18‚Äì25"
    if age <= 35: return "26‚Äì35"
    if age <= 45: return "36‚Äì45"
    if age <= 60: return "46‚Äì60"
    return "60+"

def _user_lang(uid: int) -> str:
    return norm_lang((users_get(uid) or {}).get("lang") or "en")


# ===== ONBOARDING GATE =====
GATE_FLAG_KEY = "menu_unlocked"

def _is_menu_unlocked(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if context.user_data.get(GATE_FLAG_KEY):
        return True
    prof = profiles_get(update.effective_user.id) or {}
    return not profile_is_incomplete(prof)

async def gate_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    kb = [
        [InlineKeyboardButton("üß© –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å (40‚Äì60 —Å–µ–∫)" if lang!="en" else "üß© Take the 40‚Äì60s intake", callback_data="intake:start")],
        [InlineKeyboardButton("‚û°Ô∏è –ü–æ–∑–∂–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é" if lang!="en" else "‚û°Ô∏è Later ‚Äî open menu", callback_data="gate:skip")],
    ]
    text = ("–ß—Ç–æ–±—ã —Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å. –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
            if lang!="en" else
            "To personalize answers, please take a short intake. You can skip.")
    await update.effective_chat.send_message(text, reply_markup=InlineKeyboardMarkup(kb))


# === MINI-INTAKE ===
MINI_KEYS = ["sex","age","goal","conditions","meds_allergies","activity","diet_focus","steps_target","habits","birth_date"]
MINI_FREE_KEYS: Set[str] = {"meds_allergies","birth_date"}
MINI_STEPS = {
    "sex": {
        "ru":[("–ú—É–∂—Å–∫–æ–π","male"),("–ñ–µ–Ω—Å–∫–∏–π","female"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("Male","male"),("Female","female"),("Other","other")],
        "uk":[("–ß–æ–ª–æ–≤—ñ—á–∞","male"),("–ñ—ñ–Ω–æ—á–∞","female"),("–Ü–Ω—à–∞","other")],
        "es":[("Hombre","male"),("Mujer","female"),("Otro","other")],
        "label":{"ru":"–ü–æ–ª:","en":"Sex:","uk":"–°—Ç–∞—Ç—å:","es":"Sexo:"}
    },
    "age": {
        "ru":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "en":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "uk":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "es":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "label":{"ru":"–í–æ–∑—Ä–∞—Å—Ç:","en":"Age:","uk":"–í—ñ–∫:","es":"Edad:"}
    },
    "goal": {
        "ru":[("–≠–Ω–µ—Ä–≥–∏—è","energy"),("–°–æ–Ω","sleep"),("–ü–æ—Ö—É–¥–µ–Ω–∏–µ","weight"),("–°–∏–ª–∞","strength"),("–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ","longevity")],
        "en":[("Energy","energy"),("Sleep","sleep"),("Weight","weight"),("Strength","strength"),("Longevity","longevity")],
        "uk":[("–ï–Ω–µ—Ä–≥—ñ—è","energy"),("–°–æ–Ω","sleep"),("–í–∞–≥–∞","weight"),("–°–∏–ª–∞","strength"),("–î–æ–≤–≥–æ–ª—ñ—Ç—Ç—è","longevity")],
        "es":[("Energ√≠a","energy"),("Sue√±o","sleep"),("Peso","weight"),("Fuerza","strength"),("Longevidad","longevity")],
        "label":{"ru":"–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:","en":"Main goal:","uk":"–ú–µ—Ç–∞:","es":"Objetivo:"}
    },
    "conditions": {
        "ru":[("–ù–µ—Ç","none"),("–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥.","cvd"),("–©–ñ/—ç–Ω–¥–æ–∫—Ä.","endocrine"),("–ñ–ö–¢","gi"),("–ê–ª–ª–µ—Ä–≥–∏—è","allergy"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("None","none"),("Cardio/vascular","cvd"),("Thyroid/endocrine","endocrine"),("GI","gi"),("Allergy","allergy"),("Other","other")],
        "uk":[("–ù–µ–º–∞—î","none"),("–°–µ—Ä—Ü–µ–≤–æ-—Å—É–¥.","cvd"),("–©–ó/–µ–Ω–¥–æ–∫—Ä.","endocrine"),("–®–ö–¢","gi"),("–ê–ª–µ—Ä–≥—ñ—è","allergy"),("–Ü–Ω—à–µ","other")],
        "es":[("Ninguno","none"),("Cardio","cvd"),("Tiroides","endocrine"),("GI","gi"),("Alergia","allergy"),("Otro","other")],
        "label":{"ru":"–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:","en":"Chronic conditions:","uk":"–•—Ä–æ–Ω—ñ—á–Ω—ñ —Å—Ç–∞–Ω–∏:","es":"Condiciones cr√≥nicas:"}
    },
    "meds_allergies": {
        "ru":[], "en":[], "uk":[], "es":[],
        "label":{"ru":"–õ–µ–∫–∞—Ä—Å—Ç–≤–∞/–¥–æ–±–∞–≤–∫–∏/–∞–ª–ª–µ—Ä–≥–∏–∏ (–∫–æ—Ä–æ—Ç–∫–æ):","en":"Meds/supplements/allergies (short):","uk":"–õ—ñ–∫–∏/–¥–æ–±–∞–≤–∫–∏/–∞–ª–µ—Ä–≥—ñ—ó (–∫–æ—Ä–æ—Ç–∫–æ):","es":"Medicamentos/suplementos/alergias (corto):"}
    },
    "activity": {
        "ru":[("–ù–∏–∑–∫–∞—è","low"),("–°—Ä–µ–¥–Ω—è—è","mid"),("–í—ã—Å–æ–∫–∞—è","high"),("–°–ø–æ—Ä—Ç","sport")],
        "en":[("Low","low"),("Medium","mid"),("High","high"),("Sport","sport")],
        "uk":[("–ù–∏–∑—å–∫–∞","low"),("–°–µ—Ä–µ–¥–Ω—è","mid"),("–í–∏—Å–æ–∫–∞","high"),("–°–ø–æ—Ä—Ç","sport")],
        "es":[("Baja","low"),("Media","mid"),("Alta","high"),("Deporte","sport")],
        "label":{"ru":"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:","en":"Activity:","uk":"–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:","es":"Actividad:"}
    },
    "diet_focus": {
        "ru":[("–°–±–∞–ª–∞–Ω—Å.","balanced"),("–ù–∏–∑–∫–æ—É–≥–ª.","lowcarb"),("–†–∞—Å—Ç–∏—Ç.","plant"),("–ù–µ—Ä–µ–≥—É–ª.","irregular")],
        "en":[("Balanced","balanced"),("Low-carb","lowcarb"),("Plant-based","plant"),("Irregular","irregular")],
        "uk":[("–ó–±–∞–ª–∞–Ω—Å.","balanced"),("–ú–∞–ª–æ–≤—É–≥–ª.","lowcarb"),("–†–æ—Å–ª–∏–Ω–Ω–µ","plant"),("–ù–µ—Ä–µ–≥—É–ª.","irregular")],
        "es":[("Equilibrada","balanced"),("Baja carb.","lowcarb"),("Vegetal","plant"),("Irregular","irregular")],
        "label":{"ru":"–ü–∏—Ç–∞–Ω–∏–µ —á–∞—â–µ –≤—Å–µ–≥–æ:","en":"Diet mostly:","uk":"–•–∞—Ä—á—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–∂–Ω–æ:","es":"Dieta:"}
    },
    "steps_target": {
        "ru":[("<5–∫","5000"),("5‚Äì8–∫","8000"),("8‚Äì12–∫","12000"),("–°–ø–æ—Ä—Ç","15000")],
        "en":[("<5k","5000"),("5‚Äì8k","8000"),("8‚Äì12k","12000"),("Sport","15000")],
        "uk":[("<5–∫","5000"),("5‚Äì8–∫","8000"),("8‚Äì12–∫","12000"),("–°–ø–æ—Ä—Ç","15000")],
        "es":[("<5k","5000"),("5‚Äì8k","8000"),("8‚Äì12k","12000"),("Deporte","15000")],
        "label":{"ru":"–®–∞–≥–∏/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:","en":"Steps/activity:","uk":"–ö—Ä–æ–∫–∏/–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:","es":"Pasos/actividad:"}
    },
    "habits": {
        "ru":[("–ù–µ –∫—É—Ä—é","no_smoke"),("–ö—É—Ä—é","smoke"),("–ê–ª–∫. —Ä–µ–¥–∫–æ","alc_low"),("–ê–ª–∫. —á–∞—Å—Ç–æ","alc_high"),("–ö–æ—Ñ–µ–∏–Ω 0‚Äì1","caf_low"),("–ö–æ—Ñ–µ–∏–Ω 2‚Äì3","caf_mid"),("–ö–æ—Ñ–µ–∏–Ω 4+","caf_high")],
        "en":[("No smoking","no_smoke"),("Smoking","smoke"),("Alcohol rare","alc_low"),("Alcohol often","alc_high"),("Caffeine 0‚Äì1","caf_low"),("Caffeine 2‚Äì3","caf_mid"),("Caffeine 4+","caf_high")],
        "uk":[("–ù–µ –∫—É—Ä—é","no_smoke"),("–ö—É—Ä—é","smoke"),("–ê–ª–∫. —Ä—ñ–¥–∫–æ","alc_low"),("–ê–ª–∫. —á–∞—Å—Ç–æ","alc_high"),("–ö–æ—Ñ–µ—ó–Ω 0‚Äì1","caf_low"),("–ö–æ—Ñ–µ—ó–Ω 2‚Äì3","caf_mid"),("–ö–æ—Ñ–µ—ó–Ω 4+","caf_high")],
        "es":[("No fuma","no_smoke"),("Fuma","smoke"),("Alcohol raro","alc_low"),("Alcohol a menudo","alc_high"),("Cafe√≠na 0‚Äì1","caf_low"),("Cafe√≠na 2‚Äì3","caf_mid"),("Cafe√≠na 4+","caf_high")],
        "label":{"ru":"–ü—Ä–∏–≤—ã—á–∫–∏ (–≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ):","en":"Habits (pick closest):","uk":"–ó–≤–∏—á–∫–∏ (–æ–±–µ—Ä—ñ—Ç—å –±–ª–∏–∂—á–µ):","es":"H√°bitos (elige):"}
    },
    "birth_date": {
        "ru":[], "en":[], "uk":[], "es":[],
        "label":{"ru":"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î) ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é:","en":"Birth date (YYYY-MM-DD) ‚Äî optional:","uk":"–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–†–†–†–†-–ú–ú-–î–î) ‚Äî –æ–ø—Ü—ñ–π–Ω–æ:","es":"Fecha de nacimiento (AAAA-MM-DD) ‚Äî opcional:"}
    },
}

async def start_mini_intake(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    sessions[uid] = {"mini_active": True, "mini_step": 0, "mini_answers": {}}
    await context.bot.send_message(chat_id, {
        "ru":"üîé –ú–∏–Ω–∏-–æ–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (4‚Äì6 –∫–ª–∏–∫–æ–≤).",
        "uk":"üîé –ú—ñ–Ω—ñ-–æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó (4‚Äì6 –∫–ª—ñ–∫—ñ–≤).",
        "en":"üîé Mini-intake for personalization (4‚Äì6 taps).",
        "es":"üîé Mini-intake para personalizaci√≥n (4‚Äì6 toques).",
    }[lang], reply_markup=ReplyKeyboardRemove())
    await ask_next_mini(context, chat_id, lang, uid)

def build_mini_kb(lang: str, key: str) -> InlineKeyboardMarkup:
    opts = MINI_STEPS[key].get(lang, [])
    rows, row = [], []
    for label, val in opts:
        row.append(InlineKeyboardButton(label, callback_data=f"mini|choose|{key}|{val}"))
        if len(row) == 3:
            rows.append(row); row=[]
    if row: rows.append(row)
    if key in MINI_FREE_KEYS or (not opts):
        rows.append([InlineKeyboardButton(T[lang]["write"], callback_data=f"mini|write|{key}")])
    rows.append([InlineKeyboardButton(T[lang]["skip"], callback_data=f"mini|skip|{key}")])
    return InlineKeyboardMarkup(rows)

async def ask_next_mini(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    s = sessions.get(uid, {})
    step_idx = s.get("mini_step", 0)
    if step_idx >= len(MINI_KEYS):
        answers = s.get("mini_answers", {})
        if answers.get("meds_allergies"):
            profiles_upsert(uid, {"meds":answers["meds_allergies"], "allergies":answers["meds_allergies"]})
        if answers.get("birth_date"):
            profiles_upsert(uid, {"birth_date": answers["birth_date"]})
        profiles_upsert(uid, answers)
        sessions[uid]["mini_active"] = False
        # –ø–µ—Ä–≤–∏—á–Ω—ã–π AI –ø—Ä–æ—Ñ–∏–ª—å
        profiles_upsert(uid, {"ai_profile": json.dumps({"v":1,"habits":answers.get("habits","")}, ensure_ascii=False)})
        await context.bot.send_message(chat_id, T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
        await show_quickbar(context, chat_id, lang)
        return
    key = MINI_KEYS[step_idx]
    label = MINI_STEPS[key]["label"][lang]
    await context.bot.send_message(chat_id, label, reply_markup=build_mini_kb(lang, key))

def mini_handle_choice(uid: int, key: str, value: str):
    s = sessions.setdefault(uid, {"mini_active": True, "mini_step": 0, "mini_answers": {}})
    s["mini_answers"][key] = value
    s["mini_step"] = int(s.get("mini_step", 0)) + 1


# ---------- Anti-duplicate ----------
def _ratio(a: str, b: str) -> float:
    return SequenceMatcher(None, (a or "").lower(), (b or "").lower()).ratio()

def is_duplicate_question(uid: int, text: str, thresh: float = 0.93) -> bool:
    s = sessions.setdefault(uid, {})
    asked = s.setdefault("asked_prompts", [])
    for prev in asked[-4:]:
        if _ratio(prev, text) >= thresh:
            return True
    asked.append(text)
    if len(asked) > 16:
        s["asked_prompts"] = asked[-16:]
    return False

async def send_unique(msg_obj, uid: int, text: str, reply_markup=None, force: bool = False):
    if force or not is_duplicate_question(uid, text):
        await msg_obj.reply_text(text, reply_markup=reply_markup)


# -------- Sheets (with memory fallback) --------
SHEETS_ENABLED = True
ss = None
ws_feedback = ws_users = ws_profiles = ws_episodes = ws_reminders = ws_daily = None
ws_rules = ws_challenges = None

GSPREAD_CLIENT: Optional[gspread.client.Client] = None
SPREADSHEET_ID_FOR_INTAKE: str = ""

def _ws_headers(ws):
    try: return ws.row_values(1) if ws else []
    except Exception: return []

def _ws_ensure_columns(ws, desired_headers: List[str]):
    try:
        current = _ws_headers(ws)
        if not current:
            if ws.col_count < len(desired_headers):
                ws.add_cols(len(desired_headers) - ws.col_count)
            ws.append_row(desired_headers); return
        if ws.col_count < len(desired_headers):
            ws.add_cols(len(desired_headers) - ws.col_count)
        missing = [h for h in desired_headers if h not in current]
        if missing:
            for h in missing:
                ws.update_cell(1, len(current)+1, h)
                current.append(h)
    except Exception as e:
        logging.warning(f"ensure columns failed for {getattr(ws,'title','?')}: {e}")

def _sheets_init():
    global SHEETS_ENABLED, ss, ws_feedback, ws_users, ws_profiles, ws_episodes, ws_reminders, ws_daily, ws_rules, ws_challenges
    global GSPREAD_CLIENT, SPREADSHEET_ID_FOR_INTAKE
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if not creds_json: raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
        creds = json.loads(creds_json)
        credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds, scope)
        gclient = gspread.authorize(credentials)
        GSPREAD_CLIENT = gclient

        try:
            ss = gclient.open_by_key(SHEET_ID) if SHEET_ID else gclient.open(SHEET_NAME)
        except SpreadsheetNotFound:
            if ALLOW_CREATE_SHEET: ss = gclient.create(SHEET_NAME)
            else: raise

        SPREADSHEET_ID_FOR_INTAKE = getattr(ss, "id", SHEET_ID or "")

        def _ensure_ws(title: str, headers: List[str]):
            try:
                ws = ss.worksheet(title)
            except WorksheetNotFound:
                ws = ss.add_worksheet(title=title, rows=4000, cols=max(60, len(headers)))
                ws.append_row(headers)
            if not ws.get_all_values(): ws.append_row(headers)
            _ws_ensure_columns(ws, headers)
            return ws

        ws_feedback   = _ensure_ws("Feedback",   ["timestamp","user_id","name","username","rating","comment"])
        ws_users      = _ensure_ws("Users",      ["user_id","username","lang","consent","tz_offset","checkin_hour","evening_hour","paused","last_seen","last_auto_date","last_auto_count","streak","streak_best","gm_last_date"])
        ws_profiles   = _ensure_ws("Profiles",   [
            "user_id","sex","age","goal","goals","conditions","meds","allergies",
            "sleep","activity","diet","diet_focus","steps_target","habits",
            "cycle_enabled","cycle_last_date","cycle_avg_len","last_cycle_tip_date",
            "quiet_hours","consent_flags","notes","updated_at","city","surgeries","ai_profile","birth_date"
        ])
        ws_episodes   = _ensure_ws("Episodes",   ["episode_id","user_id","topic","started_at","baseline_severity","red_flags","plan_accepted","target","reminder_at","next_checkin_at","status","last_update","notes"])
        ws_daily      = _ensure_ws("DailyCheckins",["timestamp","user_id","mood","energy","comment"])
        ws_rules      = _ensure_ws("Rules",      ["rule_id","topic","segment","trigger","advice_text","citation","last_updated","enabled"])
        ws_challenges = _ensure_ws("Challenges", ["user_id","challenge_id","name","start_date","length_days","days_done","status"])
        ws_reminders  = _ensure_ws("Reminders",  ["id","user_id","text","when_utc","created_at","status"])

        logging.info("Google Sheets connected.")
    except Exception as e:
        SHEETS_ENABLED = False
        logging.error(f"SHEETS disabled (fallback to memory). Reason: {e}")

_sheets_init()

# --------- Memory fallback stores ----------
MEM_USERS: Dict[int, dict] = {}
MEM_PROFILES: Dict[int, dict] = {}
MEM_EPISODES: List[dict] = []
MEM_REMINDERS: List[dict] = []
MEM_FEEDBACK: List[dict] = []
MEM_DAILY: List[dict] = []
MEM_CHALLENGES: List[dict] = []
MEM_RULES: List[dict] = []

# --------- Sessions (runtime) ----------
sessions: Dict[int, dict] = {}

# -------- Wrappers: Users / Profiles / Daily / Episodes / Reminders / Feedback / Challenges --------
def _headers(ws): return _ws_headers(ws)

def users_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        try:
            for r in ws_users.get_all_records():
                if str(r.get("user_id")) == str(uid):
                    return r
        except Exception as e:
            logging.warning(f"users_get fallback: {e}")
    return MEM_USERS.get(uid, {})

def users_upsert(uid: int, username: str, lang: str):
    base = {
        "user_id": str(uid), "username": username or "", "lang": lang, "consent": "no",
        "tz_offset": "0", "checkin_hour": DEFAULT_CHECKIN_LOCAL, "evening_hour": "",
        "paused": "no", "last_seen": iso(utcnow()), "last_auto_date": "", "last_auto_count": "0",
        "streak": "0","streak_best":"0","gm_last_date": "",
    }
    if SHEETS_ENABLED:
        try:
            vals = ws_users.get_all_records()
            hdr = _headers(ws_users)
            end_col = gsu.rowcol_to_a1(1, len(hdr)).rstrip("1")
            for i, r in enumerate(vals, start=2):
                if str(r.get("user_id")) == str(uid):
                    merged = {**r, **{k: base[k] for k in base if not str(r.get(k) or "").strip()}}
                    ws_users.update(f"A{i}:{end_col}{i}", [[merged.get(h, "") for h in hdr]])
                    return
            ws_users.append_row([base.get(h, "") for h in hdr]); return
        except Exception as e:
            logging.warning(f"users_upsert -> memory fallback: {e}")
    MEM_USERS[uid] = {**MEM_USERS.get(uid, {}), **base}

def users_set(uid: int, field: str, value: str):
    if SHEETS_ENABLED:
        try:
            vals = ws_users.get_all_records()
            for i, r in enumerate(vals, start=2):
                if str(r.get("user_id")) == str(uid):
                    hdr = _headers(ws_users)
                    if field not in hdr:
                        _ws_ensure_columns(ws_users, hdr + [field]); hdr = _headers(ws_users)
                    ws_users.update_cell(i, hdr.index(field)+1, value); return
        except Exception as e:
            logging.warning(f"users_set -> memory fallback: {e}")
    u = MEM_USERS.setdefault(uid, {}); u[field] = value

def profiles_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        try:
            for r in ws_profiles.get_all_records():
                if str(r.get("user_id")) == str(uid): return r
        except Exception as e:
            logging.warning(f"profiles_get fallback: {e}")
    return MEM_PROFILES.get(uid, {})

def profiles_upsert(uid: int, patch: dict):
    patch = dict(patch or {}); patch["user_id"] = str(uid); patch["updated_at"] = iso(utcnow())
    if SHEETS_ENABLED:
        try:
            vals = ws_profiles.get_all_records(); hdr = _headers(ws_profiles)
            if hdr:
                for k in patch.keys():
                    if k not in hdr:
                        _ws_ensure_columns(ws_profiles, hdr + [k]); hdr = _headers(ws_profiles)
            for i, r in enumerate(vals, start=2):
                if str(r.get("user_id")) == str(uid):
                    merged = {**r, **patch}
                    ws_profiles.update(f"A{i}:{gsu.rowcol_to_a1(i, len(hdr))}", [[merged.get(h, "") for h in hdr]]); return
            ws_profiles.append_row([patch.get(h, "") for h in hdr]); return
        except Exception as e:
            logging.warning(f"profiles_upsert -> memory fallback: {e}")
    MEM_PROFILES[uid] = {**MEM_PROFILES.get(uid, {}), **patch}

def feedback_add(ts: str, uid: int, name: str, username: str, rating: str, comment: str):
    row = {"timestamp":ts, "user_id":str(uid), "name":name, "username":username, "rating":rating, "comment":comment}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_feedback); ws_feedback.append_row([row.get(h, "") for h in hdr]); return
        except Exception as e:
            logging.warning(f"feedback_add -> memory fallback: {e}")
    MEM_FEEDBACK.append(row)

def daily_add(ts: str, uid: int, mood: str="", comment: str="", energy: Optional[int]=None):
    row = {"timestamp":ts, "user_id":str(uid), "mood":mood, "energy":("" if energy is None else str(energy)), "comment":comment}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_daily); ws_daily.append_row([row.get(h, "") for h in hdr]); return
        except Exception as e:
            logging.warning(f"daily_add -> memory fallback: {e}")
    MEM_DAILY.append(row)

def episode_create(uid: int, topic: str, severity: int=5, red: str="") -> str:
    eid = str(uuid.uuid4())
    row = {"episode_id":eid,"user_id":str(uid),"topic":topic,"started_at":iso(utcnow()),
           "baseline_severity":str(severity),"red_flags":red,"plan_accepted":"","target":"",
           "reminder_at":"","next_checkin_at":"","status":"open","last_update":iso(utcnow()),"notes":""}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_episodes); ws_episodes.append_row([row.get(h, "") for h in hdr])
        except Exception as e:
            logging.warning(f"episode_create -> memory fallback: {e}"); MEM_EPISODES.append(row)
    else: MEM_EPISODES.append(row)
    return eid

def episode_set(eid: str, key: str, val: str):
    if SHEETS_ENABLED:
        try:
            vals = ws_episodes.get_all_records(); hdr = _headers(ws_episodes)
            for i, r in enumerate(vals, start=2):
                if r.get("episode_id") == eid:
                    if key not in hdr: _ws_ensure_columns(ws_episodes, hdr + [key]); hdr=_headers(ws_episodes)
                    row = [r.get(h, "") if h!=key else val for h in hdr]
                    ws_episodes.update(f"A{i}:{gsu.rowcol_to_a1(i,len(hdr))}", [row]); return
        except Exception as e:
            logging.warning(f"episode_set -> memory fallback: {e}")
    for r in MEM_EPISODES:
        if r.get("episode_id")==eid:
            r[key]=val; return

def episode_find_open(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED:
        try:
            for r in ws_episodes.get_all_records():
                if str(r.get("user_id"))==str(uid) and (r.get("status")=="open"):
                    return r
        except Exception as e:
            logging.warning(f"episode_find_open fallback: {e}")
    for r in reversed(MEM_EPISODES):
        if r.get("user_id")==str(uid) and r.get("status")=="open":
            return r
    return None

def reminder_add(uid: int, text: str, when_utc: datetime) -> str:
    rid = str(uuid.uuid4())
    row = {"id":rid,"user_id":str(uid),"text":text,"when_utc":iso(when_utc),"created_at":iso(utcnow()),"status":"open"}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_reminders); ws_reminders.append_row([row.get(h, "") for h in hdr]); return rid
        except Exception as e:
            logging.warning(f"reminder_add -> memory fallback: {e}")
    MEM_REMINDERS.append(row); return rid

def challenge_get(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED:
        try:
            for r in ws_challenges.get_all_records():
                if r.get("user_id")==str(uid) and r.get("status")!="done":
                    return r
        except Exception as e:
            logging.warning(f"challenge_get fallback: {e}")
    for r in MEM_CHALLENGES:
        if r.get("user_id")==str(uid) and r.get("status")!="done":
            return r
    return None

def challenge_start(uid: int, name: str="water7", length_days: int=7):
    row = {"user_id":str(uid),"challenge_id":str(uuid.uuid4()),"name":name,"start_date":iso(utcnow()),
           "length_days":str(length_days),"days_done":"0","status":"active"}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_challenges); ws_challenges.append_row([row.get(h,"") for h in hdr]); return
        except Exception as e:
            logging.warning(f"challenge_start -> memory fallback: {e}")
    MEM_CHALLENGES.append(row)


# ---------- Quickbar & Menus ----------
def quickbar_kb(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["quick_h60"], callback_data="menu|h60")],
        [InlineKeyboardButton(T[lang]["quick_er"], callback_data="menu|er"),
         InlineKeyboardButton(T[lang]["quick_lab"], callback_data="menu|lab")],
        [InlineKeyboardButton(T[lang]["quick_rem"], callback_data="menu|rem")]
    ])

async def show_quickbar(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str):
    try:
        await context.bot.send_message(chat_id, T[lang]["quick_title"], reply_markup=quickbar_kb(lang))
    except Exception as e:
        logging.warning(f"show_quickbar failed: {e}")

def inline_topic_kb(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ö° " + T[lang]["h60_btn"], callback_data="menu|h60")],
        [InlineKeyboardButton("üß™ Lab", callback_data="menu|lab"),
         InlineKeyboardButton("ü©∫ Sleep", callback_data="menu|sleep")],
        [InlineKeyboardButton("ü•ó Food", callback_data="menu|food"),
         InlineKeyboardButton("üèÉ Habits", callback_data="menu|habits")],
    ])


# ---------- Time & Quiet hours ----------
def _user_tz_off(uid: int) -> int:
    try: return int((users_get(uid) or {}).get("tz_offset") or "0")
    except: return 0

def user_local_now(uid: int) -> datetime:
    return datetime.utcnow().replace(tzinfo=timezone.utc) + timedelta(hours=_user_tz_off(uid))

def hhmm_tuple(hhmm: str) -> Tuple[int,int]:
    m = re.match(r"^\s*([01]?\d|2[0-3]):([0-5]\d)\s*$", hhmm or "")
    if not m: return (8,30)
    return (int(m.group(1)), int(m.group(2)))

def local_to_utc_dt(uid: int, local_dt: datetime) -> datetime:
    return local_dt - timedelta(hours=_user_tz_off(uid))

def _user_quiet_hours(uid: int) -> str:
    prof = profiles_get(uid) or {}
    return (prof.get("quiet_hours") or DEFAULT_QUIET_HOURS).strip()

def adjust_out_of_quiet(local_dt: datetime, qh: str) -> datetime:
    m = re.match(r"^\s*([01]?\d|2[0-3]):[0-5]\d-([01]?\d|2[0-3]):[0-5]\d\s*$", qh or "")
    if not m: return local_dt
    start, end = qh.split("-")
    sh, sm = hhmm_tuple(start); eh, em = hhmm_tuple(end)
    st = local_dt.replace(hour=sh, minute=sm, second=0, microsecond=0)
    en = local_dt.replace(hour=eh, minute=em, second=0, microsecond=0)
    if st < en:
        in_quiet = (st <= local_dt < en)
    else:
        in_quiet = (local_dt >= st or local_dt < en)
    return en if in_quiet else local_dt

def _has_jq_ctx(context: ContextTypes.DEFAULT_TYPE) -> bool:
    try: return bool(context.application.job_queue)
    except Exception: return False


# ---------- Life metrics ----------
def life_metrics(profile: dict) -> Dict[str,int]:
    b = (profile or {}).get("birth_date","").strip()
    days = None
    if re.match(r"^\d{4}-\d{2}-\d{2}$", b):
        try:
            y,m,d = map(int, b.split("-"))
            bd = datetime(y,m,d,tzinfo=timezone.utc)
            days = (utcnow()-bd).days
        except Exception:
            days = None
    if days is None:
        try: a = int(re.search(r"\d+", str((profile or {}).get("age","") or "0")).group(0))
        except Exception: a = 0
        days = max(0, a*365)
    percent = min(100, round(days/36500*100, 1))
    return {"days_lived": days, "percent_to_100": percent}

def progress_bar(percent: float, width: int=12) -> str:
    fill = int(round(width*percent/100.0))
    return "‚ñà"*fill + "‚ñë"*(width-fill)


# ------------- LLM Router (concise) -------------
SYS_ROUTER = (
    "You are TendAI ‚Äî a concise, warm, professional health & longevity assistant (not a doctor). "
    "Always answer strictly in {lang}. Keep replies short (<=6 lines + up to 4 bullets). "
    "Personalize using the profile (sex/age/goal/conditions, diet_focus, steps_target). "
    "TRIAGE: ask 1‚Äì2 clarifiers first; recommend ER only for clear red flags. "
    "Return JSON ONLY: {\"intent\":\"symptom|nutrition|sleep|labs|habits|longevity|other\","
    "\"assistant_reply\":\"...\",\"followups\":[\"...\"],\"needs_more\":true,\"red_flags\":false,\"confidence\":0.0}"
)

def llm_router_answer(text: str, lang: str, profile: dict) -> dict:
    if not oai:
        # –±–∞–∑–æ–≤—ã–π —Ñ–æ–ª–±–µ–∫-—É—Ç–æ—á–Ω–µ–Ω–∏–µ
        clar = {
            "ru":"–ì–¥–µ –∏–º–µ–Ω–Ω–æ –±–æ–ª–∏—Ç –∏ —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è? –ï—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/—Ç—Ä–∞–≤–º–∞?",
            "uk":"–î–µ —Å–∞–º–µ –±–æ–ª–∏—Ç—å —ñ —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î? –Ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/—Ç—Ä–∞–≤–º–∞?",
            "en":"Where exactly is the pain and for how long? Any fever/trauma?",
            "es":"¬øD√≥nde exactamente y desde cu√°ndo? ¬øFiebre/trauma?",
        }[lang]
        return {"intent":"other","assistant_reply":clar,"followups":[clar],"needs_more":True,"red_flags":False,"confidence":0.3}
    sys = SYS_ROUTER.replace("{lang}", lang) + f"\nUserProfile: {json.dumps(profile, ensure_ascii=False)}"
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL, temperature=0.25, max_tokens=420,
            response_format={"type":"json_object"},
            messages=[{"role":"system","content":sys},{"role":"user","content":text}]
        )
        data = json.loads(resp.choices[0].message.content.strip())
        if "followups" not in data or data["followups"] is None:
            data["followups"] = []
        return data
    except Exception as e:
        logging.error(f"router LLM error: {e}")
        clar = {
            "ru":"–ì–¥–µ –∏–º–µ–Ω–Ω–æ –∏ –∫–∞–∫ –¥–∞–≤–Ω–æ? –ï—Å—Ç—å –ª–∏ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Ç—Ä–∞–≤–º–∞?",
            "uk":"–î–µ —Å–∞–º–µ —ñ —è–∫ –¥–∞–≤–Ω–æ? –Ñ –ø–æ—á–µ—Ä–≤–æ–Ω—ñ–Ω–Ω—è/—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/—Ç—Ä–∞–≤–º–∞?",
            "en":"Where exactly and since when? Any redness, fever or injury?",
            "es":"¬øD√≥nde exactamente y desde cu√°ndo? ¬øEnrojecimiento, fiebre o lesi√≥n?",
        }[lang]
        return {"intent":"other","assistant_reply":clar,"followups":[clar],"needs_more":True,"red_flags":False,"confidence":0.3}


# ===== Health60 =====
def _fmt_bullets(items: list) -> str:
    return "\n".join([f"‚Ä¢ {x}" for x in items if isinstance(x, str) and x.strip()])

SYS_H60 = (
    "You are TendAI ‚Äî a concise, warm, professional assistant (not a doctor). "
    "Answer strictly in {lang}. JSON ONLY: {\"causes\":[\"...\"],\"serious\":\"...\",\"do_now\":[\"...\"],\"see_doctor\":[\"...\"]}. "
    "Rules: 2‚Äì4 simple causes; exactly 1 serious item to rule out; 3‚Äì5 concrete do_now steps; 2‚Äì3 see_doctor cues."
)

def health60_make_plan(lang: str, symptom_text: str, profile: dict) -> str:
    fallback_map = {
        "ru": (f"{T['ru']['h60_t1']}:\n‚Ä¢ –ë—ã—Ç–æ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã\n{T['ru']['h60_serious']}: ‚Ä¢ –ò—Å–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∫–∏–µ, –Ω–æ —Å–µ—Ä—å—ë–∑–Ω—ã–µ –ø—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏\n\n"
               f"{T['ru']['h60_t2']}:\n‚Ä¢ –í–æ–¥–∞ 300‚Äì500 –º–ª\n‚Ä¢ –û—Ç–¥—ã—Ö 15‚Äì20 –º–∏–Ω\n‚Ä¢ –ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ\n\n"
               f"{T['ru']['h60_t3']}:\n‚Ä¢ –£—Ö—É–¥—à–µ–Ω–∏–µ\n‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏\n‚Ä¢ –ë–æ–ª—å ‚â•7/10"),
        "uk": (f"{T['uk']['h60_t1']}:\n‚Ä¢ –ü–æ–±—É—Ç–æ–≤—ñ –ø—Ä–∏—á–∏–Ω–∏\n{T['uk']['h60_serious']}: ‚Ä¢ –í–∏–∫–ª—é—á–∏—Ç–∏ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ, –∞–ª–µ —Å–µ—Ä–π–æ–∑–Ω—ñ –ø—Ä–∏ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—ñ\n\n"
               f"{T['uk']['h60_t2']}:\n‚Ä¢ –í–æ–¥–∞ 300‚Äì500 –º–ª\n‚Ä¢ –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ 15‚Äì20 —Ö–≤\n‚Ä¢ –ü—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è\n\n"
               f"{T['uk']['h60_t3']}:\n‚Ä¢ –ü–æ–≥—ñ—Ä—à–µ–Ω–Ω—è\n‚Ä¢ –í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–ø—Ä–∞–ø–æ—Ä—Ü—ñ\n‚Ä¢ –ë—ñ–ª—å ‚â•7/10"),
        "en": (f"{T['en']['h60_t1']}:\n‚Ä¢ Everyday causes\n{T['en']['h60_serious']}: ‚Ä¢ Rule out rare but serious if worsening\n\n"
               f"{T['en']['h60_t2']}:\n‚Ä¢ Drink 300‚Äì500 ml water\n‚Ä¢ 15‚Äì20 min rest\n‚Ä¢ Ventilate\n\n"
               f"{T['en']['h60_t3']}:\n‚Ä¢ Worsening\n‚Ä¢ High fever/red flags\n‚Ä¢ Pain ‚â•7/10"),
    }
    fallback = fallback_map.get(lang, fallback_map["en"])
    if not oai: return fallback
    sys = SYS_H60.replace("{lang}", lang)
    user = {"symptom": (symptom_text or "").strip()[:500],
            "profile": {k: profile.get(k, "") for k in ["sex","age","goal","conditions","meds","sleep","activity","diet","diet_focus","steps_target"]}}
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL, temperature=0.2, max_tokens=420,
            response_format={"type":"json_object"},
            messages=[{"role":"system","content":sys},{"role":"user","content":json.dumps(user, ensure_ascii=False)}]
        )
        data = json.loads(resp.choices[0].message.content.strip())
        causes  = _fmt_bullets(data.get("causes") or [])
        serious = (data.get("serious") or "").strip()
        do_now  = _fmt_bullets(data.get("do_now") or [])
        see_doc = _fmt_bullets(data.get("see_doctor") or [])
        parts = []
        if causes:  parts.append(f"{T[lang]['h60_t1']}:\n{causes}")
        if serious: parts.append(f"{T[lang]['h60_serious']}: {serious}")
        if do_now:  parts.append(f"\n{T[lang]['h60_t2']}:\n{do_now}")
        if see_doc: parts.append(f"\n{T[lang]['h60_t3']}:\n{see_doc}")
        return "\n".join(parts).strip()
    except Exception as e:
        logging.error(f"health60 LLM error: {e}")
        return fallback


# ---------- Lightweight content helpers ----------
def _get_skin_tip(lang: str, sex: str, age: int) -> str:
    pool_ru = [
        "–ú—è–≥–∫–æ–µ SPF –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —Å–∞–º–∞—è –Ω–µ–¥–æ–æ—Ü–µ–Ω—ë–Ω–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫–æ–∂—É.",
        "–î—É—à: —Ç—ë–ø–ª–∞—è –≤–æ–¥–∞, –Ω–µ –≥–æ—Ä—è—á–∞—è; 3‚Äì5 –º–∏–Ω—É—Ç ‚Äî –∫–æ–∂–∞ —Å–∫–∞–∂–µ—Ç —Å–ø–∞—Å–∏–±–æ.",
        "–£–º—ã–≤–∞–ª–∫–∞ –±–µ–∑ SLS, —É–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–æ–¥—ã."
    ]
    pool_en = [
        "Daily light SPF is the most underrated skin investment.",
        "Keep showers warm, not hot; 3‚Äì5 minutes protects your skin barrier.",
        "Use a gentle cleanser and moisturize right after water."
    ]
    pools = {"ru": pool_ru, "uk": pool_ru, "en": pool_en, "es": pool_en}
    return random.choice(pools.get(lang, pool_en))

def _get_daily_tip(profile: dict, lang: str) -> str:
    base = {
        "ru": ["1 –º–∏–Ω—É—Ç—É –¥—ã—Ö–∞–Ω–∏—è 4-6 ‚Äî –∏ –ø—É–ª—å—Å —Å–ø–æ–∫–æ–π–Ω–µ–µ.", "–°—Ç–∞–∫–∞–Ω –≤–æ–¥—ã —Ä—è–¥–æ–º ‚Äî –≥–ª–æ—Ç–æ–∫ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–∞–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—à—å —Ç–µ–ª–µ—Ñ–æ–Ω."],
        "uk": ["1 —Ö–≤–∏–ª–∏–Ω–∞ –¥–∏—Ö–∞–Ω–Ω—è 4-6 ‚Äî –ø—É–ª—å—Å —Å–ø–æ–∫—ñ–π–Ω—ñ—à–∏–π.", "–°–∫–ª—è–Ω–∫–∞ –≤–æ–¥–∏ –ø–æ—Ä—É—á ‚Äî –∫–æ–≤—Ç–æ–∫ —â–æ—Ä–∞–∑—É —è–∫ —Ä–æ–∑–±–ª–æ–∫–æ–≤—É—î—à —Ç–µ–ª–µ—Ñ–æ–Ω."],
        "en": ["Try 1 minute of 4-6 breathing ‚Äî heart rate calms down.", "Keep a glass of water nearby ‚Äî sip when you unlock your phone."]
    }
    return random.choice(base.get(lang, base["en"]))


# ---------- CARE engine (habits memory & nudges) ----------
def _ai_obj(profile: dict) -> dict:
    try:
        raw = profile.get("ai_profile") or "{}"
        return json.loads(raw) if isinstance(raw, str) else (raw or {})
    except Exception:
        return {}

def _ai_get(profile: dict, key: str, default=None):
    return _ai_obj(profile).get(key, default)

def _ai_set(uid: int, key: str, value):
    p = profiles_get(uid) or {}
    obj = _ai_obj(p); obj[key] = value
    profiles_upsert(uid, {"ai_profile": json.dumps(obj, ensure_ascii=False)})

def learn_from_text(uid: int, text: str):
    """–æ—á–µ–Ω—å –ª—ë–≥–∫–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ ‚Äî –Ω–∞—Ä–∞—â–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫, —Ç—Ä–∏–≥–≥–µ—Ä—ã"""
    low = (text or "").lower()
    p = profiles_get(uid) or {}
    obj = _ai_obj(p)
    def inc(k, dv=1):
        obj[k] = int(obj.get(k, 0)) + dv
    # –ø—Ä–æ—Å—Ç—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    if any(w in low for w in ["–∫–æ—Ñ–µ","coffee","espresso","–∫–∞–ø—É—á–∏–Ω–æ","latte"]): inc("caf_mentions")
    if any(w in low for w in ["–≥–æ–ª–æ–≤–∞","headache","–º–∏–≥—Ä–µ–Ω—å","migraine"]): inc("headache_mentions")
    if any(w in low for w in ["—Å–æ–Ω","sleep","insomnia","–±–µ—Å—Å–æ–Ω"]): inc("sleep_mentions")
    if any(w in low for w in ["–≤–æ–¥–∞","hydrate","–∂–∞–∂–¥–∞","water"]): inc("water_prompt")
    profiles_upsert(uid, {"ai_profile": json.dumps(obj, ensure_ascii=False)})

def life_stage_from_profile(profile: dict) -> str:
    try:
        a = int(re.search(r"\d+", str(profile.get("age","") or "0")).group(0))
    except Exception:
        a = 0
    if a <= 25: return "20s"
    if a <= 40: return "30s"
    if a <= 55: return "40s-50s"
    return "60+"

def build_care_nudge(uid: int, lang: str) -> str:
    p = profiles_get(uid) or {}
    stage = life_stage_from_profile(p)
    ai = _ai_obj(p)
    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    if int(ai.get("headache_mentions",0)) >= 2:
        return {"ru":"–ó–∞–º–µ—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏: –∫–æ—Ñ–µ–∏–Ω, —ç–∫—Ä–∞–Ω, –Ω–µ–¥–æ—Å—ã–ø ‚Äî —Å–µ–≥–æ–¥–Ω—è –ø–æ–ø—Ä–æ–±—É–π 10-–º–∏–Ω –ø—Ä–æ–≥—É–ª–∫—É –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                "uk":"–ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É –Ω–∞ —Ç—Ä–∏–≥–µ—Ä–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –±–æ–ª—é: –∫–æ—Ñ–µ—ó–Ω, –µ–∫—Ä–∞–Ω, –Ω–µ–¥–æ—Å–∏–ø ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ 10-—Ö–≤ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
                "en":"Track headache triggers: caffeine, screens, poor sleep ‚Äî try a 10-min walk phone-free today.",
                "es":"Detecta desencadenantes de dolor de cabeza: cafe√≠na, pantallas, sue√±o ‚Äî camina 10 min sin m√≥vil."}[lang]
    if stage=="20s":
        return {"ru":"‚ö° –ú–∏–Ω–∏-—á–µ–ª–ª–µ–Ω–¥–∂: 2 —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã –¥–æ –ø–æ–ª—É–¥–Ω—è ‚Äî –æ—Ç–º–µ—Ç—å —Ä–µ–∞–∫—Ü–∏—é —ç–Ω–µ—Ä–≥–∏–∏.",
                "uk":"‚ö° –ú—ñ–Ω—ñ-—á–µ–ª–µ–Ω–¥–∂: 2 —Å–∫–ª—è–Ω–∫–∏ –≤–æ–¥–∏ –¥–æ –ø–æ–ª—É–¥–Ω—è ‚Äî –≤—ñ–¥–º—ñ—Ç—å –µ–Ω–µ—Ä–≥—ñ—é.",
                "en":"‚ö° Mini-challenge: 2 glasses of water before noon ‚Äî notice energy boost.",
                "es":"‚ö° Mini-reto: 2 vasos de agua antes del mediod√≠a ‚Äî nota la energ√≠a."}[lang]
    # –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
    return f"{T[lang]['daily_tip_prefix']} {_get_daily_tip(p, lang)}"


# ---------- Auto-message limiter ----------
def _auto_limit_ok(uid: int) -> bool:
    u = users_get(uid) or {}
    today = datetime.utcnow().date().isoformat()
    cnt = int(str(u.get("last_auto_count") or "0"))
    d   = (u.get("last_auto_date") or "")
    return (d != today) or (cnt < AUTO_MAX_PER_DAY)

def _auto_inc(uid: int):
    u = users_get(uid) or {}
    today = datetime.utcnow().date().isoformat()
    if (u.get("last_auto_date") or "") != today:
        users_set(uid, "last_auto_date", today); users_set(uid, "last_auto_count", "1"); return
    try: cnt = int(str(u.get("last_auto_count") or "0")) + 1
    except: cnt = 1
    users_set(uid, "last_auto_count", str(cnt))


# ---------- Scheduling ----------
def schedule_from_sheet_on_start(app: Application):  # placeholder if –Ω—É–∂–Ω–æ
    logging.info("schedule_from_sheet_on_start: ok")

def _schedule_at_local(app: Application, uid: int, hhmm: str, data: dict, func, days: Optional[List[int]]=None):
    """days=None => daily; days=[6] => weekly on Sunday (0=Mon)"""
    try:
        off = _user_tz_off(uid)
        h,m = hhmm_tuple(hhmm)
        # Run daily or weekly
        if days is None:
            app.job_queue.run_daily(func, time=dtime(hour=h, minute=m), name=f"daily-{func.__name__}-{uid}",
                                    data=data)
        else:
            for d in days:
                app.job_queue.run_daily(func, time=dtime(hour=h, minute=m), days=(d,),
                                        name=f"weekly-{func.__name__}-{uid}-{d}", data=data)
    except Exception as e:
        logging.warning(f"_schedule_at_local error: {e}")

def schedule_daily_checkin(app: Application, uid: int, tz_off: int, hhmm: str, lang: str):
    _schedule_at_local(app, uid, hhmm, {"t":"gm","user_id":uid}, job_scheduled_ping)

def schedule_evening_checkin(app: Application, uid: int, tz_off: int, hhmm: str, lang: str):
    _schedule_at_local(app, uid, hhmm, {"t":"eve","user_id":uid}, job_scheduled_ping)

def schedule_midday_care(app: Application, uid: int, tz_off: int, hhmm: str=DEFAULT_MIDDAY_LOCAL, lang: str="en"):
    _schedule_at_local(app, uid, hhmm, {"t":"care","user_id":uid}, job_daily_care)

def schedule_weekly_report(app: Application, uid: int, tz_off: int, hhmm: str=DEFAULT_WEEKLY_LOCAL, weekday: int=6, lang: str="en"):
    _schedule_at_local(app, uid, hhmm, {"t":"weekly","user_id":uid}, job_weekly_report, days=[weekday])

async def job_oneoff_reminder(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}; uid = d.get("user_id")
    try:
        await context.bot.send_message(uid, T[_user_lang(uid)]["thanks"])
    except Exception: pass

async def job_scheduled_ping(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}; uid = d.get("user_id"); t = d.get("t")
    lang = _user_lang(uid)
    if not _auto_limit_ok(uid): return
    if t=="gm":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton(T[lang]["gm_excellent"], callback_data="gm|mood|excellent"),
             InlineKeyboardButton(T[lang]["gm_ok"],        callback_data="gm|mood|ok")],
            [InlineKeyboardButton(T[lang]["gm_tired"],     callback_data="gm|mood|tired"),
             InlineKeyboardButton(T[lang]["gm_pain"],      callback_data="gm|mood|pain")],
            [InlineKeyboardButton(T[lang]["gm_skip"],      callback_data="gm|skip")]
        ])
        await context.bot.send_message(uid, T[lang]["daily_gm"], reply_markup=kb)
        _auto_inc(uid)
    elif t=="eve":
        await context.bot.send_message(uid, T[lang]["evening_intro"])
        _auto_inc(uid)

async def job_daily_care(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}; uid = d.get("user_id")
    lang = _user_lang(uid)
    if not _auto_limit_ok(uid): return
    tip = build_care_nudge(uid, lang)
    await context.bot.send_message(uid, tip)
    _auto_inc(uid)

async def job_weekly_report(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}; uid = d.get("user_id")
    lang = _user_lang(uid)
    # –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –Ω–µ–¥–µ–ª–µ –∏–∑ –ø–∞–º—è—Ç–∏ (MEM_DAILY)
    last7 = [r for r in MEM_DAILY if r.get("user_id")==str(uid)][-7:]
    good = sum(1 for r in last7 if r.get("mood") in {"excellent","ok"})
    txt = {
        "ru": f"–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏: {len(last7)} —á–µ–∫-–∏–Ω–æ–≤, {good} ‚Äî –æ–∫/–æ—Ç–ª–∏—á–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∏–º –º—è–≥–∫–æ üòä",
        "uk": f"–ü—ñ–¥—Å—É–º–∫–∏ —Ç–∏–∂–Ω—è: {len(last7)} —á–µ–∫-—ñ–Ω—ñ–≤, {good} ‚Äî –æ–∫/—á—É–¥–æ–≤–æ. –ü—Ä–æ–¥–æ–≤–∂–∏–º–æ –º‚Äô—è–∫–æ üòä",
        "en": f"Weekly wrap: {len(last7)} check-ins, {good} felt ok/great. Keeping it gentle üòä",
        "es": f"Semana: {len(last7)} check-ins, {good} ok/genial. Suave y constante üòä",
    }[lang]
    await context.bot.send_message(uid, txt)


# ------------- Commands (UI only; behavior completed in Part 2: on_text/callbacks) -------------
async def post_init(app: Application):
    me = await app.bot.get_me()
    logging.info(f"BOT READY: @{me.username} (id={me.id})")
    try:
        schedule_from_sheet_on_start(app)
    except Exception as e:
        logging.warning(f"schedule_from_sheet_on_start failed: {e}")

def update_last_seen(uid: int):
    users_set(uid, "last_seen", iso(utcnow()))

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    # –∞–≤—Ç–æ-–¥–µ—Ç–µ–∫—Ç —è–∑—ã–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ –ø–æ Telegram
    det = detect_lang_from_text((update.message.text or ""), getattr(user, "language_code", None) or "en")
    lang = norm_lang(det)
    users_upsert(user.id, user.username or "", lang)
    context.user_data["lang"] = lang
    sessions.setdefault(user.id, {})["last_user_text"] = "/start"
    update_last_seen(user.id)

    await update.message.reply_text(T[lang]["welcome"], reply_markup=ReplyKeyboardRemove())

    prof = profiles_get(user.id) or {}
    if profile_is_incomplete(prof):
        await start_mini_intake(context, update.effective_chat.id, lang, user.id)
    else:
        await update.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
        await show_quickbar(context, update.effective_chat.id, lang)

    u = users_get(user.id)
    if (u.get("consent") or "").lower() not in {"yes","no"}:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang]["yes"], callback_data="consent|yes"),
                                    InlineKeyboardButton(T[lang]["no"],  callback_data="consent|no")]])
        await update.message.reply_text(T[lang]["ask_consent"], reply_markup=kb)

    tz_off = int(str(u.get("tz_offset") or "0"))
    hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, user.id, tz_off, hhmm, lang)
        eh = (u.get("evening_hour") or DEFAULT_EVENING_LOCAL).strip()
        schedule_evening_checkin(context.application, user.id, tz_off, eh, lang)
        schedule_midday_care(context.application, user.id, tz_off, DEFAULT_MIDDAY_LOCAL, lang)
        schedule_weekly_report(context.application, user.id, tz_off, DEFAULT_WEEKLY_LOCAL, 6, lang)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = _user_lang(update.effective_user.id)
    update_last_seen(update.effective_user.id)
    await update.message.reply_text(T[lang]["help"])

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = _user_lang(update.effective_user.id)
    update_last_seen(update.effective_user.id)
    await update.message.reply_text(T[lang]["privacy"])

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "yes")
    lang = _user_lang(uid); update_last_seen(uid)
    await update.message.reply_text(T[lang]["paused_on"])

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "no")
    lang = _user_lang(uid); update_last_seen(uid)
    await update.message.reply_text(T[lang]["paused_off"])

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    update_last_seen(uid)
    if SHEETS_ENABLED:
        try:
            vals = ws_users.get_all_values()
            for i in range(2, len(vals)+1):
                if ws_users.cell(i,1).value == str(uid):
                    ws_users.delete_rows(i); break
            try:
                vals = ws_profiles.get_all_values()
                idxs = []
                for i in range(2, len(vals)+1):
                    if ws_profiles.cell(i,1).value == str(uid):
                        idxs.append(i)
                for shift, i in enumerate(idxs):
                    ws_profiles.delete_rows(i - shift)
            except Exception:
                pass
        except Exception as e:
            logging.warning(f"delete_data sheets err: {e}")
    else:
        MEM_USERS.pop(uid, None); MEM_PROFILES.pop(uid, None)
        global MEM_EPISODES, MEM_REMINDERS, MEM_DAILY
        MEM_EPISODES = [r for r in MEM_EPISODES if r["user_id"]!=str(uid)]
        MEM_REMINDERS = [r for r in MEM_REMINDERS if r["user_id"]!=str(uid)]
        MEM_DAILY = [r for r in MEM_DAILY if r["user_id"]!=str(uid)]
    lang = norm_lang(getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(T[lang]["deleted"], reply_markup=ReplyKeyboardRemove())

# Timezone & check-ins
async def cmd_settz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    txt = (update.message.text or "").strip()
    m = re.search(r"(-?\+?\d{1,2})", txt)
    if not m:
        await update.message.reply_text("Usage: /settz +2  |  –ü—Ä–∏–º–µ—Ä: /settz +3")
        return
    try:
        off = int(m.group(1)); off = max(-12, min(14, off))
        users_set(uid, "tz_offset", str(off))
        await update.message.reply_text(f"UTC offset set: {off:+d}")
        u = users_get(uid); hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
        if _has_jq_ctx(context):
            schedule_daily_checkin(context.application, uid, off, hhmm, lang)
            eh = (u.get("evening_hour") or DEFAULT_EVENING_LOCAL).strip()
            schedule_evening_checkin(context.application, uid, off, eh, lang)
            schedule_midday_care(context.application, uid, off, DEFAULT_MIDDAY_LOCAL, lang)
            schedule_weekly_report(context.application, uid, off, DEFAULT_WEEKLY_LOCAL, 6, lang)
    except Exception as e:
        logging.error(f"/settz error: {e}")
        await update.message.reply_text("Failed to set timezone offset.")

async def cmd_checkin_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    txt = (update.message.text or "").strip()
    m = re.search(r"([01]?\d|2[0-3]):([0-5]\d)", txt)
    hhmm = m.group(0) if m else DEFAULT_CHECKIN_LOCAL
    users_set(uid, "checkin_hour", hhmm); users_set(uid, "paused", "no")
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, uid, _user_tz_off(uid), hhmm, lang)
    await update.message.reply_text(f"Daily check-in set to {hhmm} (local).")

async def cmd_checkin_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    users_set(uid, "paused", "yes")
    await update.message.reply_text("Daily check-in disabled.")

async def cmd_evening_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    txt = (update.message.text or "").strip()
    m = re.search(r"([01]?\d|2[0-3]):([0-5]\d)", txt)
    hhmm = m.group(0) if m else DEFAULT_EVENING_LOCAL
    users_set(uid, "evening_hour", hhmm)
    if _has_jq_ctx(context):
        schedule_evening_checkin(context.application, uid, _user_tz_off(uid), hhmm, lang)
    await update.message.reply_text(T[lang]["evening_set"].format(t=hhmm))

async def cmd_evening_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    users_set(uid, "evening_hour", "")
    await update.message.reply_text(T[lang]["evening_off"])

# Lang switches
async def cmd_lang_ru(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "ru"); context.user_data["lang"] = "ru"
    await update.message.reply_text("–Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π.")
async def cmd_lang_en(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "en"); context.user_data["lang"] = "en"
    await update.message.reply_text("Language set: English.")
async def cmd_lang_uk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "uk"); context.user_data["lang"] = "uk"
    await update.message.reply_text("–ú–æ–≤–∞: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞.")
async def cmd_lang_es(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "es"); context.user_data["lang"] = "es"
    await update.message.reply_text("Idioma: espa√±ol (beta).")

# Youth / Health60 / Hydration / Skin / Cycle shells
async def cmd_health60(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    sessions.setdefault(uid, {})["awaiting_h60_text"] = True
    await update.message.reply_text(T[lang]["h60_intro"])
    await show_quickbar(context, update.effective_chat.id, lang)

async def cmd_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["gm_excellent"], callback_data="gm|mood|excellent"),
         InlineKeyboardButton(T[lang]["gm_ok"],        callback_data="gm|mood|ok")],
        [InlineKeyboardButton(T[lang]["gm_tired"],     callback_data="gm|mood|tired"),
         InlineKeyboardButton(T[lang]["gm_pain"],      callback_data="gm|mood|pain")],
        [InlineKeyboardButton(T[lang]["gm_skip"],      callback_data="gm|skip")],
        [InlineKeyboardButton(T[lang]["mood_note"],    callback_data="gm|note")]
    ])
    await update.message.reply_text(T[lang]["daily_gm"], reply_markup=kb)

async def cmd_energy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    row = [InlineKeyboardButton(str(i), callback_data=f"energy|rate|{i}") for i in range(1,6)]
    kb = InlineKeyboardMarkup([row])
    await update.message.reply_text(T[lang]["gm_energy_q"], reply_markup=kb)

async def cmd_hydrate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    await update.message.reply_text(T[lang]["hydrate_nudge"])
    daily_add(iso(utcnow()), uid, comment="hydrate_button")
    await show_quickbar(context, update.effective_chat.id, lang)

async def cmd_skintip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    p = profiles_get(uid) or {}
    age = 0
    try: age = int(re.search(r"\d+", str(p.get("age","") or "0")).group(0))
    except: pass
    tip = _get_skin_tip(lang, (p.get("sex") or ""), age)
    await update.message.reply_text(tip)

async def cmd_cycle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang]["yes"], callback_data="cycle|yes"),
                                InlineKeyboardButton(T[lang]["no"],  callback_data="cycle|no")]])
    await update.message.reply_text(T[lang]["cycle_consent"], reply_markup=kb)

async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    p = profiles_get(uid) or {}
    pref = personalized_prefix(lang, p)
    lm  = life_metrics(p)
    bar = progress_bar(lm["percent_to_100"])
    txt = {
        "ru": f"{pref}\n{T['ru']['life_today'].format(n=lm['days_lived'])}\n{T['ru']['life_percent'].format(p=lm['percent_to_100'])}\n{bar} {lm['percent_to_100']}%",
        "uk": f"{pref}\n{T['uk']['life_today'].format(n=lm['days_lived'])}\n{T['uk']['life_percent'].format(p=lm['percent_to_100'])}\n{bar} {lm['percent_to_100']}%",
        "en": f"{pref}\n{T['en']['life_today'].format(n=lm['days_lived'])}\n{T['en']['life_percent'].format(p=lm['percent_to_100'])}\n{bar} {lm['percent_to_100']}%",
        "es": f"{pref}\n{T['en']['life_today'].format(n=lm['days_lived'])}\n{T['en']['life_percent'].format(p=lm['percent_to_100'])}\n{bar} {lm['percent_to_100']}%",
    }[lang]
    await update.message.reply_text(txt)
    # ---------- Rules (evidence-based) ----------
def rules_lookup(topic: str, segment: str, lang: str) -> Optional[str]:
    """–ò—â–µ–º –≥–æ—Ç–æ–≤—ã–π —Å–æ–≤–µ—Ç –∏–∑ –ª–∏—Å—Ç–∞ Rules (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞)."""
    try:
        if SHEETS_ENABLED and ws_rules:
            rows = ws_rules.get_all_records()
            for r in rows:
                if (r.get("enabled","").strip().lower() in {"1","true","yes"}) and \
                   (r.get("topic","").strip().lower() == (topic or "").strip().lower()):
                    seg = (r.get("segment") or "").strip().lower()
                    if not seg or seg == (segment or "").strip().lower():
                        txt = (r.get("advice_text") or "").strip()
                        if not txt:
                            continue
                        # –Ø–∑—ã–∫: –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ã `[[ru:...]]`, `[[en:...]]`
                        m = re.search(r"\[\[\s*"+re.escape(lang)+r"\s*:(.*?)\]\]", txt, re.DOTALL)
                        if m:
                            return m.group(1).strip()
                        return txt
    except Exception as e:
        logging.warning(f"rules_lookup fallback: {e}")
    return None


# ---------- Gentle one-liners (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏) ----------
def tiny_care_tip(lang: str, mood: str, profile: dict) -> str:
    age_s = str(profile.get("age",""))
    goal = (profile.get("goal") or "").lower()
    # –ü—Ä–æ—Å—Ç–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    if lang == "ru":
        if mood == "excellent": return "üî• –û—Ç–ª–∏—á–Ω–æ! –°–æ—Ö—Ä–∞–Ω–∏–º —Ä–∏—Ç–º ‚Äî 5 –º–∏–Ω—É—Ç –¥–≤–∏–∂–µ–Ω–∏—è –∫ –∫–æ—Ñ–µ?"
        if mood == "ok":        return "üôÇ –ß—É—Ç—å –¥–æ–±–∞–≤–∏–º —ç–Ω–µ—Ä–≥–∏–∏: 300 –º–ª –≤–æ–¥—ã –∏ 1 –º–∏–Ω—É—Ç—É –¥—ã—Ö–∞–Ω–∏—è 4‚Äì6."
        if mood == "tired":     return "üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å: –∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ 5‚Äì7 –º–∏–Ω –∏ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –ø–æ–º–æ–≥—É—Ç."
        if mood == "pain":      return "ü§ï –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –±–æ–ª—å—é. –ï—Å–ª–∏ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è ‚Äî –æ—Ç–≤–µ—á–∞–π ¬´‚ö° 60 —Å–µ–∫¬ª –¥–ª—è –ø–ª–∞–Ω–∞."
        return "üëç –ë–µ—Ä–µ–∂—ë–º —Ç–µ–º–ø –∏ –≤–æ–¥—É —Ä—è–¥–æ–º."
    if lang == "uk":
        if mood == "excellent": return "üî• –ö—Ä—É—Ç–æ! 5 —Ö–≤–∏–ª–∏–Ω —Ä—É—Ö—É –¥–æ –∫–∞–≤–∏?"
        if mood == "ok":        return "üôÇ 300 –º–ª –≤–æ–¥–∏ —ñ 1 —Ö–≤ –¥–∏—Ö–∞–Ω–Ω—è 4‚Äì6 ‚Äî —ñ–Ω–∞–∫—à–µ."
        if mood == "tired":     return "üò¥ –í—Ç–æ–º–∞: –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞ 5‚Äì7 —Ö–≤ + —Å–∫–ª—è–Ω–∫–∞ –≤–æ–¥–∏."
        if mood == "pain":      return "ü§ï –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ –±–æ–ª–µ–º. –Ø–∫—â–æ –ø–æ—Å–∏–ª—é—î—Ç—å—Å—è ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ ¬´‚ö° 60 c¬ª."
        return "üëç –ë–µ—Ä–µ–∂–µ–º–æ —Ç–µ–º–ø —ñ –≤–æ–¥—É –ø–æ—Ä—É—á."
    # en/es (–∫–æ—Ä–æ—Ç–∫–æ)
    if mood == "excellent": return "üî• Nice! Lock the win ‚Äî 5 min walk before coffee?"
    if mood == "ok":        return "üôÇ 300 ml water + 1-min 4‚Äì6 breathing."
    if mood == "tired":     return "üò¥ Try 5‚Äì7 min walk + water."
    if mood == "pain":      return "ü§ï If worsening, tap ‚Äú‚ö° 60s‚Äù for a quick plan."
    return "üëç Keep the pace and keep water nearby."


# ---------- Challenge: water7 ----------
def _challenge_tick(uid: int) -> Optional[str]:
    ch = challenge_get(uid)
    if not ch:
        return None
    try:
        done = int(ch.get("days_done") or "0")
        length = int(ch.get("length_days") or "7")
    except Exception:
        done, length = 0, 7
    done = min(length, done + 1)
    # Update in sheet/memory
    if SHEETS_ENABLED and ws_challenges:
        try:
            vals = ws_challenges.get_all_records()
            for i, r in enumerate(vals, start=2):
                if r.get("user_id")==str(uid) and r.get("challenge_id")==ch.get("challenge_id"):
                    ws_challenges.update_cell(i, ( _headers(ws_challenges).index("days_done")+1 ), str(done))
                    if done >= length:
                        ws_challenges.update_cell(i, ( _headers(ws_challenges).index("status")+1 ), "done")
                    break
        except Exception as e:
            logging.warning(f"challenge_tick -> memory fallback: {e}")
            ch["days_done"] = str(done)
            if done >= length: ch["status"] = "done"
    else:
        ch["days_done"] = str(done)
        if done >= length: ch["status"] = "done"
    return f"{T[_user_lang(uid)]['challenge_progress'].format(d=done, len=length)}"


# ---------- Quiet hours & limiter ----------
def _auto_allowed(uid: int) -> bool:
    today = datetime.utcnow().date().isoformat()
    u = users_get(uid) or {}
    last = (u.get("last_auto_date") or "")
    cnt = int(str(u.get("last_auto_count") or "0") or "0")
    if last != today:
        users_set(uid, "last_auto_date", today)
        users_set(uid, "last_auto_count", "0")
        cnt = 0
    return cnt < AUTO_MAX_PER_DAY

def _auto_inc(uid: int):
    today = datetime.utcnow().date().isoformat()
    u = users_get(uid) or {}
    last = (u.get("last_auto_date") or "")
    cnt = int(str(u.get("last_auto_count") or "0") or "0")
    if last != today:
        users_set(uid, "last_auto_date", today); users_set(uid, "last_auto_count", "1")
    else:
        users_set(uid, "last_auto_count", str(cnt+1))


# ---------- Scheduling (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è) ----------
def _remove_jobs(app, name: str):
    if not getattr(app, "job_queue", None):
        return
    for j in list(app.job_queue.jobs()):
        if j.name == name:
            j.schedule_removal()

def _run_daily(app, name: str, hour_local: int, minute_local: int, tz_off: int, data: dict, callback):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –æ—Ñ—Å–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ DST)."""
    if not getattr(app, "job_queue", None):
        return
    _remove_jobs(app, name)
    utc_h = (hour_local - tz_off) % 24
    t = dtime(hour=utc_h, minute=minute_local, tzinfo=timezone.utc)
    app.job_queue.run_daily(callback, time=t, data=data, name=name)

def schedule_daily_checkin(app, uid: int, tz_off: int, hhmm: str, lang: str):
    h, m = hhmm_tuple(hhmm)
    _run_daily(app, f"gm_{uid}", h, m, tz_off, {"user_id": uid, "kind": "gm"}, job_gm)

def schedule_evening_checkin(app, uid: int, tz_off: int, hhmm: str, lang: str):
    h, m = hhmm_tuple(hhmm)
    _run_daily(app, f"eve_{uid}", h, m, tz_off, {"user_id": uid, "kind": "eve"}, job_evening)


async def job_gm(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid = d.get("user_id")
    lang = _user_lang(uid)
    if not _auto_allowed(uid):  # –ª–∏–º–∏—Ç–µ—Ä
        return
    local_now = user_local_now(uid)
    if adjust_out_of_quiet(local_now, _user_quiet_hours(uid)) != local_now:
        return  # —Ç–∏—Ö–∏–µ —á–∞—Å—ã
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["gm_excellent"], callback_data="gm|mood|excellent"),
         InlineKeyboardButton(T[lang]["gm_ok"],        callback_data="gm|mood|ok")],
        [InlineKeyboardButton(T[lang]["gm_tired"],     callback_data="gm|mood|tired"),
         InlineKeyboardButton(T[lang]["gm_pain"],      callback_data="gm|mood|pain")],
        [InlineKeyboardButton(T[lang]["gm_skip"],      callback_data="gm|skip")],
        [InlineKeyboardButton(T[lang]["mood_note"],    callback_data="gm|note")]
    ])
    try:
        await context.bot.send_message(uid, T[lang]["daily_gm"], reply_markup=kb)
        _auto_inc(uid)
    except Exception as e:
        logging.warning(f"job_gm send failed: {e}")

async def job_evening(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid = d.get("user_id")
    lang = _user_lang(uid)
    if not _auto_allowed(uid):
        return
    local_now = user_local_now(uid)
    if adjust_out_of_quiet(local_now, _user_quiet_hours(uid)) != local_now:
        return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["evening_tip_btn"], callback_data="eve|tip")],
        [InlineKeyboardButton(T[lang]["hydrate_btn"],     callback_data="water|nudge")]
    ])
    try:
        await context.bot.send_message(uid, T[lang]["evening_intro"], reply_markup=kb)
        _auto_inc(uid)
    except Exception as e:
        logging.warning(f"job_evening send failed: {e}")

async def job_oneoff_reminder(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid = d.get("user_id")
    rid = d.get("reminder_id")
    lang = _user_lang(uid)
    # —á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    text = None
    if SHEETS_ENABLED and ws_reminders:
        try:
            vals = ws_reminders.get_all_records()
            for r in vals:
                if r.get("id")==rid:
                    text = r.get("text"); break
        except Exception:
            pass
    if not text:
        for r in MEM_REMINDERS:
            if r.get("id")==rid: text = r.get("text"); break
    try:
        await context.bot.send_message(uid, f"‚è∞ {text or T[lang]['thanks']}")
    except Exception:
        pass


# ---------- Reminders helpers ----------
def schedule_oneoff_local(app, uid: int, local_after_hours: float, text: str):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ N —á–∞—Å–æ–≤ (–ª–æ–∫–∞–ª—å–Ω–æ, —Å —Ç–∏—Ö–∏–º–∏ —á–∞—Å–∞–º–∏)."""
    now_local = user_local_now(uid)
    when_local = now_local + timedelta(hours=local_after_hours)
    when_local = adjust_out_of_quiet(when_local, _user_quiet_hours(uid))
    when_utc = local_to_utc_dt(uid, when_local)
    rid = reminder_add(uid, text, when_utc)
    if getattr(app, "job_queue", None):
        app.job_queue.run_once(job_oneoff_reminder, when=(when_utc - utcnow()), data={"user_id":uid, "reminder_id":rid})
    return rid


# ---------- Command stubs (—É–ª—É—á—à–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏) ----------
async def cmd_hydrate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    await update.message.reply_text(T[lang]["hydrate_nudge"])
    tip = _get_daily_tip(profiles_get(uid) or {}, lang)
    await show_quickbar(context, update.effective_chat.id, lang)
    if random.random() < 0.4:  # –ª—ë–≥–∫–∏–π –±–æ–Ω—É—Å-—Å–æ–≤–µ—Ç –∏–∑ –ø—Ä–∞–≤–∏–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
        adv = rules_lookup("hydration", "", lang)
        if adv:
            await update.message.reply_text(f"{T[lang]['daily_tip_prefix']} {adv}")

async def cmd_skintip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    p = profiles_get(uid) or {}
    try: age = int(re.search(r"\d+", str(p.get("age","") or "0")).group(0))
    except Exception: age = 30
    await update.message.reply_text(_get_skin_tip(lang, (p.get("sex") or ""), age))

async def cmd_evening_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    txt = (update.message.text or "").strip()
    m = re.search(r"([01]?\d|2[0-3]):([0-5]\d)", txt)
    hhmm = m.group(0) if m else DEFAULT_EVENING_LOCAL
    users_set(uid, "evening_hour", hhmm)
    if _has_jq_ctx(context):
        schedule_evening_checkin(context.application, uid, _user_tz_off(uid), hhmm, lang)
    await update.message.reply_text(T[lang]["evening_set"].format(t=hhmm))

async def cmd_evening_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    users_set(uid, "evening_hour", "")
    _remove_jobs(context.application, f"eve_{uid}")
    await update.message.reply_text(T[lang]["evening_off"])

async def cmd_quiet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    txt = (update.message.text or "").strip()
    m = re.search(r"([01]?\d|2[0-3]):([0-5]\d)-([01]?\d|2[0-3]):([0-5]\d)", txt)
    if not m:
        await update.message.reply_text(T[lang]["ask_quiet"]); return
    qh = m.group(0)
    profiles_upsert(uid, {"quiet_hours": qh})
    await update.message.reply_text(T[lang]["quiet_saved"].format(qh=qh))


# ---------- Cycle text handlers ----------
def _calc_cycle_phase(last: str, avg_len: int, today: Optional[date]=None) -> str:
    try:
        y,m,d = map(int, last.split("-"))
        lmp = date(y,m,d)
        t = today or datetime.utcnow().date()
        day = (t - lmp).days % max(24, min(40, avg_len or 28))
        if day <= 5:   return "menstruation"
        if day <= 13:  return "follicular"
        if day <= 16:  return "ovulation"
        return "luteal"
    except Exception:
        return "unknown"

def _cycle_tip(lang: str, phase: str) -> str:
    tips_ru = {
        "menstruation":"–ú—è–≥–∫–∏–π —Ä–µ–∂–∏–º: –≤–æ–¥–∞, —Å–æ–Ω, –ª—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞.",
        "follicular":"–•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –∑–∞–¥–∞—á —Å —Ñ–æ–∫—É—Å–æ–º.",
        "ovulation":"–ë–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏ ‚Äî –Ω–æ —Å–ª–µ–¥–∏ –∑–∞ —Å–Ω–æ–º –∏ –≤–æ–¥–æ–π.",
        "luteal":"–î–æ–±–∞–≤—å –º–∞–≥–Ω–∏–π/–æ–º–µ–≥–∞ –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é —Å –≤—Ä–∞—á–æ–º, –±–µ—Ä–µ–≥–∏ —Ä–∏—Ç–º."
    }
    tips_en = {
        "menstruation":"Gentle mode: hydration, sleep, light stretching.",
        "follicular":"Great window for training and focus tasks.",
        "ovulation":"Energy is up ‚Äî guard sleep and hydration.",
        "luteal":"Consider magnesium/omega (doctor-approved), keep the pace."
    }
    src = tips_ru if lang in {"ru","uk"} else tips_en
    return src.get(phase, src["follicular"])


# ---------- Callback handler ----------
async def cb_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q: return
    await q.answer()
    uid = q.from_user.id
    lang = _user_lang(uid)
    data = (q.data or "")
    parts = data.split("|")
    kind = parts[0]

    # --- MINI INTAKE ---
    if kind == "mini":
        action = parts[1]
        key = parts[2]
        if action == "choose":
            value = parts[3]
            mini_handle_choice(uid, key, value)
            await ask_next_mini(context, q.message.chat_id, lang, uid)
        elif action == "write":
            sessions.setdefault(uid, {})["awaiting_mini_free"] = key
            await q.message.reply_text(T[lang]["write"])
        elif action == "skip":
            mini_handle_choice(uid, key, "")
            await ask_next_mini(context, q.message.chat_id, lang, uid)
        return

    # --- CONSENT ---
    if kind == "consent":
        ans = parts[1]
        users_set(uid, "consent", "yes" if ans=="yes" else "no")
        await q.message.reply_text(T[lang]["thanks"])
        await show_quickbar(context, q.message.chat_id, lang)
        return

    # --- MENU ---
    if kind == "menu":
        menu_item = parts[1]
        if menu_item == "h60":
            sessions.setdefault(uid, {})["awaiting_h60_text"] = True
            await q.message.reply_text(T[lang]["h60_intro"])
        elif menu_item == "rem":
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton(T[lang]["act_rem_4h"], callback_data="rem|4h")],
                [InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="rem|eve")],
                [InlineKeyboardButton(T[lang]["act_rem_morn"], callback_data="rem|morn")],
            ])
            await q.message.reply_text("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", reply_markup=kb)
        elif menu_item == "er":
            await q.message.reply_text("üöë –ï—Å–ª–∏ —Å–∏–ª—å–Ω–∞—è/–≤–Ω–µ–∑–∞–ø–Ω–∞—è –±–æ–ª—å, –ø–æ—Ç–µ—Ä—è —Å–æ–∑–Ω–∞–Ω–∏—è, –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ, –ø–∞—Ä–∞–ª–∏—á ‚Äî –≤—ã–∑—ã–≤–∞–π—Ç–µ —Å–∫–æ—Ä—É—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.")
        elif menu_item == "lab":
            await q.message.reply_text("üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: –¥–æ–±–∞–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–∑–∂–µ. –ü–æ–∫–∞: –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏, —Ñ–µ—Ä—Ä–∏—Ç–∏–Ω, B12, D25-OH ‚Äî –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é —Å –≤—Ä–∞—á–æ–º.")
        await show_quickbar(context, q.message.chat_id, lang)
        return

    # --- REMINDERS QUICK ---
    if kind == "rem":
        what = parts[1]
        if what == "4h":
            schedule_oneoff_local(context.application, uid, 4, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è")
        elif what == "eve":
            schedule_oneoff_local(context.application, uid, 8, "–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω")
        elif what == "morn":
            schedule_oneoff_local(context.application, uid, 16, "–£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω")
        await q.message.reply_text("‚úîÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
        return

    # --- GM Mood ---
    if kind == "gm":
        sub = parts[1]
        if sub == "note":
            sessions.setdefault(uid, {})["awaiting_mood_note"] = True
            await q.message.reply_text(T[lang]["fb_write"])
            return
        if sub == "skip":
            await q.message.reply_text("–û–∫! –£–≤–∏–¥–∏–º—Å—è –ø–æ–∑–∂–µ.")
            return
        if sub == "mood":
            mood = parts[2]
            daily_add(iso(utcnow()), uid, mood=mood)
            tip = tiny_care_tip(lang, mood, profiles_get(uid) or {})
            await q.message.reply_text(tip)
            # –ë–æ–Ω—É—Å: —Ç–∏–∫ —á–µ–ª–µ–Ω–¥–∂–∞ –≤–æ–¥—ã
            ch = _challenge_tick(uid)
            if ch:
                await q.message.reply_text(ch)
            await show_quickbar(context, q.message.chat_id, lang)
            return

    # --- Energy rate ---
    if kind == "energy":
        if parts[1] == "rate":
            try: val = int(parts[2])
            except: val = None
            daily_add(iso(utcnow()), uid, energy=val)
            await q.message.reply_text(T[lang]["gm_energy_done"])
            await show_quickbar(context, q.message.chat_id, lang)
            return

    # --- Evening nudges/tips ---
    if kind == "eve" and parts[1] == "tip":
        prof = profiles_get(uid) or {}
        adv = rules_lookup("daily_tip", age_to_band(int(re.search(r"\d+", str(prof.get("age","") or "0")).group(0) if re.search(r"\d+", str(prof.get("age","") or "0")) else 30)), lang) \
              or _get_daily_tip(prof, lang)
        await q.message.reply_text(f"{T[lang]['daily_tip_prefix']} {adv}")
        return

    # --- Water nudge (challenge start) ---
    if kind == "water" and parts[1] == "nudge":
        await q.message.reply_text(T[lang]["hydrate_nudge"])
        if not challenge_get(uid):
            challenge_start(uid)
            await q.message.reply_text(T[lang]["challenge_started"])
        else:
            ch = _challenge_tick(uid)
            if ch: await q.message.reply_text(ch)
        return

    # --- Cycle consent ---
    if kind == "cycle":
        ans = parts[1]
        if ans == "yes":
            sessions.setdefault(uid, {})["awaiting_cycle_date"] = True
            await q.message.reply_text(T[lang]["cycle_ask_last"])
        else:
            profiles_upsert(uid, {"cycle_enabled":"no"})
            await q.message.reply_text("–û–∫, –±–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–∏–∫–ª–∞.")
        return


# ---------- Text handler (—Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ + —É—Ç–æ—á–Ω–µ–Ω–∏—è) ----------
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return
    uid = update.effective_user.id
    users_upsert(uid, update.effective_user.username or "", _user_lang(uid))
    lang = _user_lang(uid)
    txt = (update.message.text or "").strip()
    update_last_seen(uid)

    # 0) –ú–∏–Ω–∏-–æ–ø—Ä–æ—Å –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç –∏ –æ–ø—Ä–æ—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
    prof = profiles_get(uid) or {}
    if profile_is_incomplete(prof) and not sessions.get(uid, {}).get("mini_active"):
        await start_mini_intake(context, update.effective_chat.id, lang, uid)
        return

    s = sessions.setdefault(uid, {})

    # 1) –í–≤–æ–¥ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –º–∏–Ω–∏-–æ–ø—Ä–æ—Å–∞
    if s.get("awaiting_mini_free"):
        key = s.pop("awaiting_mini_free")
        mini_handle_choice(uid, key, txt)
        await ask_next_mini(context, update.effective_chat.id, lang, uid)
        return

    # 2) –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ GM
    if s.get("awaiting_mood_note"):
        s.pop("awaiting_mood_note", None)
        daily_add(iso(utcnow()), uid, comment=txt)
        await update.message.reply_text(T[lang]["mood_thanks"])
        await show_quickbar(context, update.effective_chat.id, lang)
        return

    # 3) –¶–∏–∫–ª: –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏
    if s.get("awaiting_cycle_date"):
        if not re.match(r"^\d{4}-\d{2}-\d{2}$", txt):
            await update.message.reply_text(T[lang]["cycle_ask_last"]); return
        profiles_upsert(uid, {"cycle_last_date": txt})
        s.pop("awaiting_cycle_date", None)
        s["awaiting_cycle_len"] = True
        await update.message.reply_text(T[lang]["cycle_ask_len"])
        return

    # 4) –¶–∏–∫–ª: —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞
    if s.get("awaiting_cycle_len"):
        try:
            avg = int(re.search(r"\d+", txt).group(0))
        except Exception:
            await update.message.reply_text(T[lang]["cycle_ask_len"]); return
        profiles_upsert(uid, {"cycle_avg_len": str(avg), "cycle_enabled":"yes"})
        await update.message.reply_text(T[lang]["cycle_saved"])
        s.pop("awaiting_cycle_len", None)
        phase = _calc_cycle_phase((profiles_get(uid) or {}).get("cycle_last_date",""), avg)
        await update.message.reply_text(_cycle_tip(lang, phase))
        return

    # 5) Health60 –∑–∞–ø—Ä–æ—Å
    if s.get("awaiting_h60_text"):
        s.pop("awaiting_h60_text", None)
        ep_id = episode_create(uid, topic=txt.strip()[:120], severity=5)
        plan = health60_make_plan(lang, txt, profiles_get(uid) or {})
        await update.message.reply_text(plan)
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥ –ø–ª–∞–Ω–æ–º
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton(T[lang]["act_rem_4h"],     callback_data="rem|4h")],
            [InlineKeyboardButton(T[lang]["act_save_episode"], callback_data=f"ep|save|{ep_id}")],
            [InlineKeyboardButton(T[lang]["act_ex_neck"],    callback_data="yt|neck")]
        ])
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏—è:", reply_markup=kb)
        await show_quickbar(context, update.effective_chat.id, lang)
        return

    # 6) –£—Ç–æ—á–Ω–µ–Ω–∏—è –¥–ª—è –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≥–¥–µ/–∫–∞–∫ –¥–∞–≤–Ω–æ?)
    if len(txt) < 6:
        await update.message.reply_text(T[lang]["unknown"])
        await show_quickbar(context, update.effective_chat.id, lang)
        return

    # 7) –°–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ ‚Üí —Ä–æ—É—Ç–µ—Ä (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    r = llm_router_answer(txt, lang, profiles_get(uid) or {})
    msg = r.get("assistant_reply") or T[lang]["unknown"]
    if (r.get("red_flags") is True):
        msg = "üöë –í–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏. –ï—Å–ª–∏ —É—Ö—É–¥—à–∞–µ—Ç—Å—è ‚Äî –≤—ã–∑—ã–≤–∞–π—Ç–µ —Å–∫–æ—Ä—É—é."
    if (r.get("followups") or []) and (r.get("needs_more")):
        msg = msg + "\n\n" + _fmt_bullets(r["followups"][:3])
    pref = personalized_prefix(lang, profiles_get(uid) or {})
    if pref:
        msg = pref + "\n\n" + msg
    await update.message.reply_text(msg)
    await show_quickbar(context, update.effective_chat.id, lang)


# ---------- Extra callbacks not covered above ----------
# (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ: –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ –±—É–¥—É—â–µ–µ)
# ep|save|<id>, yt|neck –∏ –ø—Ä.
async def _cb_fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q: return
    await q.answer()
    await q.message.reply_text(T[_user_lang(q.from_user.id)]["thanks"])


# ---------- Build & Run ----------
def build_app():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN is missing")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.post_init = post_init

    # Commands
    app.add_handler(CommandHandler("start",        cmd_start))
    app.add_handler(CommandHandler("help",         cmd_help))
    app.add_handler(CommandHandler("privacy",      cmd_privacy))
    app.add_handler(CommandHandler("pause",        cmd_pause))
    app.add_handler(CommandHandler("resume",       cmd_resume))
    app.add_handler(CommandHandler("delete_data",  cmd_delete_data))

    app.add_handler(CommandHandler("settz",        cmd_settz))
    app.add_handler(CommandHandler("checkin_on",   cmd_checkin_on))
    app.add_handler(CommandHandler("checkin_off",  cmd_checkin_off))
    app.add_handler(CommandHandler("evening_on",   cmd_evening_on))
    app.add_handler(CommandHandler("evening_off",  cmd_evening_off))
    app.add_handler(CommandHandler("quiet",        cmd_quiet))

    app.add_handler(CommandHandler("ru",           cmd_lang_ru))
    app.add_handler(CommandHandler("en",           cmd_lang_en))
    app.add_handler(CommandHandler("uk",           cmd_lang_uk))
    app.add_handler(CommandHandler("es",           cmd_lang_es))

    app.add_handler(CommandHandler("health60",     cmd_health60))
    app.add_handler(CommandHandler("mood",         cmd_mood))
    app.add_handler(CommandHandler("energy",       cmd_energy))
    app.add_handler(CommandHandler("hydrate",      cmd_hydrate))
    app.add_handler(CommandHandler("skintip",      cmd_skintip))

    # Menu/callbacks
    app.add_handler(CallbackQueryHandler(cb_handler), group=2)
    app.add_handler(CallbackQueryHandler(_cb_fallback), group=3)

    # Free text (–ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text), group=1)

    return app


def main():
    app = build_app()
    logging.info("==> Starting TendAI bot (polling)‚Ä¶")
    app.run_polling(close_loop=False)


if __name__ == "__main__":
    main()
