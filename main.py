import os
import json
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CommandHandler,
    ContextTypes, filters, CallbackQueryHandler
)
from openai import OpenAI
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ---------- –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ----------
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO
)

client = OpenAI(api_key=OPENAI_API_KEY)

# ---------- Google Sheets ----------
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_env = os.getenv("GOOGLE_CREDENTIALS_JSON")
if not creds_env:
    logging.warning("GOOGLE_CREDENTIALS_JSON –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∫–Ω–æ–ø–∫–∏-–æ—Ç–∑—ã–≤—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
    sheet = None
else:
    try:
        creds_dict = json.loads(creds_env)
        credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client_sheet = gspread.authorize(credentials)
        sheet = client_sheet.open("TendAI Feedback").worksheet("Feedback")
        logging.info("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets: {e}")
        sheet = None

def add_feedback(user_id, feedback_text):
    if not sheet:
        return
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([timestamp, str(user_id), feedback_text])

# ---------- –ü–∞–º—è—Ç—å ----------
user_memory = {}
message_counter = {}

# ---------- –ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã ----------
quick_mode_symptoms = {
    "–≥–æ–ª–æ–≤–∞": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Å—Ç—Ä–µ—Å—Å, –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ, –Ω–µ–¥–æ—Å—ã–ø
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –≤—ã–ø–µ–π –≤–æ–¥—ã, –æ—Ç–¥–æ—Ö–Ω–∏, –ø—Ä–æ–≤–µ—Ç—Ä–∏ –∫–æ–º–Ω–∞—Ç—É
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ –±–æ–ª—å –≤–Ω–µ–∑–∞–ø–Ω–∞—è, —Å–∏–ª—å–Ω–∞—è, —Å —Ç–æ—à–Ω–æ—Ç–æ–π –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –∑—Ä–µ–Ω–∏—è""",
    "head": """[Quick Health Check]
üí° Possible causes: stress, dehydration, fatigue
ü™™ Try: rest, hydration, fresh air
üö® See a doctor if pain is sudden, severe, or with nausea/vision issues""",
    "–∂–∏–≤–æ—Ç": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –≥–∞—Å—Ç—Ä–∏—Ç, –ø–∏—Ç–∞–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: —Ç—ë–ø–ª–∞—è –≤–æ–¥–∞, –ø–æ–∫–æ–π, –∏—Å–∫–ª—é—á–∏ –µ–¥—É –Ω–∞ 2 —á–∞—Å–∞
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ –±–æ–ª—å —Ä–µ–∑–∫–∞—è, —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π, —Ä–≤–æ—Ç–æ–π –∏–ª–∏ –¥–ª–∏—Ç—Å—è >1 –¥–Ω—è""",
    "stomach": """[Quick Health Check]
üí° Possible causes: gastritis, poor diet, stress
ü™™ Try: warm water, rest, skip food for 2 hours
üö® See a doctor if pain is sharp, with fever or vomiting""",
    "—Å–ª–∞–±–æ—Å—Ç—å": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —É—Å—Ç–∞–ª–æ—Å—Ç—å, –≤–∏—Ä—É—Å, –∞–Ω–µ–º–∏—è
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –æ—Ç–¥—ã—Ö, –ø–æ–µ—à—å, –≤—ã–ø–µ–π –≤–æ–¥—ã
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ —Å–ª–∞–±–æ—Å—Ç—å –¥–ª–∏—Ç—Å—è >2 –¥–Ω–µ–π –∏–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç""",
    "weakness": """[Quick Health Check]
üí° Possible causes: fatigue, virus, low iron
ü™™ Try: rest, eat, hydrate
üö® Doctor: if weakness lasts >2 days or gets worse"""
}

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è TendAI ü§ó –ß—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏ –≤–æ–ª–Ω—É–µ—Ç? –Ø –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å.")

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

# ---------- –ö–Ω–æ–ø–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ ----------
def feedback_buttons():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üëç –î–∞", callback_data="feedback_yes"),
                                  InlineKeyboardButton("üëé –ù–µ—Ç", callback_data="feedback_no")]])

async def feedback_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    feedback = query.data
    try:
        add_feedback(user_id, feedback)
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")
    await query.edit_message_reply_markup(reply_markup=None)
    await query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ üôè")

# ---------- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ----------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        user_message = (update.message.text or "").strip()
        user_lower = user_message.lower()
        message_counter[user_id] = message_counter.get(user_id, 0) + 1
        logging.info(f"Message from {user_id}: {user_message!r}")

        # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
        if "#60—Å–µ–∫" in user_lower or "/fast" in user_lower:
            for keyword, reply in quick_mode_symptoms.items():
                if keyword in user_lower:
                    await update.message.reply_text(reply, reply_markup=feedback_buttons())
                    return
            await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Å–∏–º–ø—Ç–æ–º: ¬´#60—Å–µ–∫ –≥–æ–ª–æ–≤–∞¬ª –∏–ª–∏ ¬´/fast stomach¬ª.", reply_markup=feedback_buttons())
            return

        # –ú–∏–Ω–∏-–¥–∏–∞–ª–æ–≥–∏ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º
        if "–≥–æ–ª–æ–≤–∞" in user_lower or "headache" in user_lower:
            await update.message.reply_text(
                "–ì–¥–µ –∏–º–µ–Ω–Ω–æ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞ ‚Äî –ª–æ–±, –∑–∞—Ç—ã–ª–æ–∫, –≤–∏—Å–∫–∏?\n"
                "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏: —Ç—É–ø–∞—è, –æ—Å—Ç—Ä–∞—è, –ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è?\n"
                "–ï—Å—Ç—å –ª–∏ —Ç–æ—à–Ω–æ—Ç–∞ –∏–ª–∏ —Å–≤–µ—Ç–æ–±–æ—è–∑–Ω—å?"
            )
            user_memory[user_id] = "–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å"
            return

        if "–≥–æ—Ä–ª–æ" in user_lower or "throat" in user_lower:
            await update.message.reply_text(
                "–ì–æ—Ä–ª–æ –±–æ–ª–∏—Ç –ø—Ä–∏ –≥–ª–æ—Ç–∞–Ω–∏–∏ –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ?\n"
                "–ï—Å—Ç—å –ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–ª–∏ –∫–∞—à–µ–ª—å?\n"
                "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ—Å—å?"
            )
            user_memory[user_id] = "–±–æ–ª—å –≤ –≥–æ—Ä–ª–µ"
            return

        if "–∫–∞—à–µ–ª—å" in user_lower or "cough" in user_lower:
            await update.message.reply_text(
                "–ö–∞—à–µ–ª—å —Å—É—Ö–æ–π –∏–ª–∏ —Å –º–æ–∫—Ä–æ—Ç–æ–π?\n"
                "–î–∞–≤–Ω–æ –ª–∏ –æ–Ω —É –≤–∞—Å?\n"
                "–ï—Å—Ç—å –ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –±–æ–ª—å –≤ –≥—Ä—É–¥–∏ –∏–ª–∏ –æ–¥—ã—à–∫–∞?"
            )
            user_memory[user_id] = "–∫–∞—à–µ–ª—å"
            return

        memory_text = ""
        if user_id in user_memory:
            memory_text = f"(–¢—ã —Ä–∞–Ω–µ–µ —É–ø–æ–º–∏–Ω–∞–ª: {user_memory[user_id]})\n"

        system_prompt = (
            "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é –ø–æ –∏–º–µ–Ω–∏ TendAI.\n"
            "–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≥–æ–≤–æ—Ä–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n"
            "–û—Ç–≤–µ—á–∞–π –ø–æ —Å—É—Ç–∏, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤. –ü—Ä–∏ —Å–∏–º–ø—Ç–æ–º–µ ‚Äî 1‚Äì2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, 2‚Äì3 –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã,\n"
            "—á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–æ–º–∞, –∏ –∫–æ–≥–¥–∞ –∏–¥—Ç–∏ –∫ –≤—Ä–∞—á—É. –ï—Å–ª–∏ –±–æ–ª–∏ –Ω–µ—Ç ‚Äî –Ω–µ –Ω–∞–≥–Ω–µ—Ç–∞–π."
        )

        # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å –∏ –ª–æ–≤–∏–º –æ—à–∏–±–∫–∏
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_message}
                ],
                temperature=0.6,
                max_tokens=400,
                timeout=30
            )
            bot_reply = memory_text + (response.choices[0].message.content or "").strip()
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ OpenAI")
            bot_reply = f"–°–µ—Ä–≤–∏—Å –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

        await update.message.reply_text(bot_reply, reply_markup=feedback_buttons())
    except Exception:
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_message")

# ---------- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ----------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.exception("Unhandled error", exc_info=context.error)

# ---------- –£–¥–∞–ª—è–µ–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling ----------
async def on_startup(app):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        info = await app.bot.get_webhook_info()
        logging.info(f"Webhook cleared. Current webhook: {info.url!r}")
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(on_startup).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(feedback_callback))
    app.add_error_handler(error_handler)
    app.run_polling(drop_pending_updates=True, allowed_updates=Update.ALL_TYPES)
