# -*- coding: utf-8 -*-
import os, re, json, uuid, logging
from datetime import datetime, timedelta, timezone, time as dtime
from typing import List, Tuple, Dict, Optional
from difflib import SequenceMatcher

from dotenv import load_dotenv
from langdetect import detect, DetectorFactory

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

from openai import OpenAI
# === PRO-INTAKE ===
from intake_pro import register_intake_pro

# ---------- Google Sheets (robust + memory fallback) ----------
import gspread
from gspread.exceptions import SpreadsheetNotFound
import gspread.utils as gsu
from oauth2client.service_account import ServiceAccountCredentials


# ---------------- Boot & Config ----------------
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
DetectorFactory.seed = 0

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")

SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Sheets")
SHEET_ID = os.getenv("SHEET_ID", "")
ALLOW_CREATE_SHEET = os.getenv("ALLOW_CREATE_SHEET", "0") == "1"
DEFAULT_CHECKIN_LOCAL = "08:30"

oai: Optional[OpenAI] = None
try:
    if OPENAI_API_KEY:
        os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
    oai = OpenAI()
except Exception as e:
    logging.error(f"OpenAI init error: {e}")
    oai = None


# ---------------- i18n ----------------
SUPPORTED = {"ru", "en", "uk", "es"}

def norm_lang(code: Optional[str]) -> str:
    if not code:
        return "en"
    c = code.split("-")[0].lower()
    return c if c in SUPPORTED else "en"

T = {
    "en": {
        "welcome": "Hi! I‚Äôm TendAI ‚Äî your health & longevity assistant.\nDescribe what‚Äôs bothering you; I‚Äôll guide you. Let‚Äôs do a quick 40s intake to tailor advice.",
        "help": "Short checkups, 24‚Äì48h plans, reminders, daily check-ins.\nCommands: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +2 /health60 /ru /uk /en /es",
        "privacy": "TendAI is not a medical service and can‚Äôt replace a doctor. We store minimal data for reminders. /delete_data to erase.",
        "paused_on": "Notifications paused. Use /resume to enable.",
        "paused_off": "Notifications resumed.",
        "deleted": "All your data was deleted. Use /start to begin again.",
        "ask_consent": "May I send you a follow-up to check how you feel later?",
        "yes":"Yes","no":"No",
        "unknown":"I need a bit more info: where exactly and for how long?",
        "profile_intro":"Quick intake (~40s). Use buttons or type your answer.",
        "p_step_1":"Step 1/8. Sex:",
        "p_step_2":"Step 2/8. Age:",
        "p_step_3":"Step 3/8. Main goal:",
        "p_step_4":"Step 4/8. Chronic conditions:",
        "p_step_5":"Step 5/8. Meds/supplements/allergies:",
        "p_step_6":"Step 6/8. Sleep (bed/wake, e.g., 23:30/07:00):",
        "p_step_7":"Step 7/8. Activity:",
        "p_step_8":"Step 8/8. Diet most of the time:",
        "write":"‚úçÔ∏è Write",
        "skip":"‚è≠Ô∏è Skip",
        "saved_profile":"Saved: ",
        "start_where":"Where do you want to start now? (symptom/sleep/nutrition/labs/habits/longevity)",
        "daily_gm":"Good morning! Quick daily check-in:",
        "mood_good":"üòÉ Good","mood_ok":"üòê Okay","mood_bad":"üò£ Poor","mood_note":"‚úçÔ∏è Comment",
        "mood_thanks":"Thanks! Have a smooth day üëã",
        "triage_pain_q1":"Where does it hurt?",
        "triage_pain_q1_opts":["Head","Throat","Back","Belly","Other"],
        "triage_pain_q2":"What kind of pain?",
        "triage_pain_q2_opts":["Dull","Sharp","Pulsating","Pressing"],
        "triage_pain_q3":"How long has it lasted?",
        "triage_pain_q3_opts":["<3h","3‚Äì24h",">1 day",">1 week"],
        "triage_pain_q4":"Rate the pain (0‚Äì10):",
        "triage_pain_q5":"Any of these now?",
        "triage_pain_q5_opts":["High fever","Vomiting","Weakness/numbness","Speech/vision problems","Trauma","None"],
        "plan_header":"Your 24‚Äì48h plan:",
        "plan_accept":"Will you try this today?",
        "accept_opts":["‚úÖ Yes","üîÅ Later","‚úñÔ∏è No"],
        "remind_when":"When shall I check on you?",
        "remind_opts":["in 4h","this evening","tomorrow morning","no need"],
        "thanks":"Got it üôå",
        "checkin_ping":"Quick check-in: how is it now (0‚Äì10)?",
        "checkin_better":"Nice! Keep it up üí™",
        "checkin_worse":"Sorry to hear. If any red flags or pain ‚â•7/10 ‚Äî consider medical help.",
        "act_rem_4h":"‚è∞ Remind in 4h",
        "act_rem_eve":"‚è∞ This evening",
        "act_rem_morn":"‚è∞ Tomorrow morning",
        "act_save_episode":"üíæ Save as episode",
        "act_ex_neck":"üßò 5-min neck routine",
        "act_find_lab":"üß™ Find a lab",
        "act_er":"üöë Emergency info",
        "act_city_prompt":"Type your city/area so I can suggest a lab (text only).",
        "act_saved":"Saved.",
        "er_text":"If symptoms worsen, severe shortness of breath, chest pain, confusion, or persistent high fever ‚Äî seek urgent care/emergency.",
        "px":"Considering your profile: {sex}, {age}y; goal ‚Äî {goal}.",
        "back":"‚óÄ Back",
        "exit":"Exit",
        # feedback
        "ask_fb":"Was this helpful?",
        "fb_thanks":"Thanks for your feedback! ‚úÖ",
        "fb_write":"Write a short feedback message:",
        "fb_good":"üëç Like",
        "fb_bad":"üëé Dislike",
        "fb_free":"üìù Feedback",
        # Health60
        "h60_btn": "Health in 60 seconds",
        "h60_intro": "Write briefly what bothers you (e.g., ‚Äúheadache‚Äù, ‚Äúfatigue‚Äù, ‚Äústomach pain‚Äù). I‚Äôll give you 3 key tips in 60 seconds.",
        "h60_t1": "Possible causes",
        "h60_t2": "Do now (next 24‚Äì48h)",
        "h60_t3": "When to see a doctor",
        "h60_serious": "Serious to rule out",
    },
    "ru": {
        "welcome":"–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç; —è –ø–æ–¥—Å–∫–∞–∂—É. –°–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å (~40—Å), —á—Ç–æ–±—ã —Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ.",
        "help":"–ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã.\n–ö–æ–º–∞–Ω–¥—ã: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +3 /health60 /ru /uk /en /es",
        "privacy":"TendAI –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞. –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. /delete_data ‚Äî —É–¥–∞–ª–∏—Ç—å.",
        "paused_on":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–∞—É–∑—É. /resume ‚Äî –≤–∫–ª—é—á–∏—Ç—å.",
        "paused_off":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.",
        "deleted":"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        "ask_consent":"–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã?",
        "yes":"–î–∞","no":"–ù–µ—Ç",
        "unknown":"–ù—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: –≥–¥–µ –∏–º–µ–Ω–Ω–æ –∏ —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?",
        "profile_intro":"–ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å (~40—Å). –ú–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç.",
        "p_step_1":"–®–∞–≥ 1/8. –ü–æ–ª:",
        "p_step_2":"–®–∞–≥ 2/8. –í–æ–∑—Ä–∞—Å—Ç:",
        "p_step_3":"–®–∞–≥ 3/8. –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:",
        "p_step_4":"–®–∞–≥ 4/8. –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏:",
        "p_step_5":"–®–∞–≥ 5/8. –õ–µ–∫–∞—Ä—Å—Ç–≤–∞/–¥–æ–±–∞–≤–∫–∏/–∞–ª–ª–µ—Ä–≥–∏–∏:",
        "p_step_6":"–®–∞–≥ 6/8. –°–æ–Ω (–æ—Ç–±–æ–π/–ø–æ–¥—ä—ë–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        "p_step_7":"–®–∞–≥ 7/8. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:",
        "p_step_8":"–®–∞–≥ 8/8. –ü–∏—Ç–∞–Ω–∏–µ —á–∞—â–µ –≤—Å–µ–≥–æ:",
        "write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
        "skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "saved_profile":"–°–æ—Ö—Ä–∞–Ω–∏–ª: ",
        "start_where":"–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/–ø–∏—Ç–∞–Ω–∏–µ/–∞–Ω–∞–ª–∏–∑—ã/–ø—Ä–∏–≤—ã—á–∫–∏/–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ)",
        "daily_gm":"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ë—ã—Å—Ç—Ä—ã–π —á–µ–∫-–∏–Ω:",
        "mood_good":"üòÉ –•–æ—Ä–æ—à–æ","mood_ok":"üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ","mood_bad":"üò£ –ü–ª–æ—Ö–æ","mood_note":"‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        "mood_thanks":"–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üëã",
        "triage_pain_q1":"–ì–¥–µ –±–æ–ª–∏—Ç?",
        "triage_pain_q1_opts":["–ì–æ–ª–æ–≤–∞","–ì–æ—Ä–ª–æ","–°–ø–∏–Ω–∞","–ñ–∏–≤–æ—Ç","–î—Ä—É–≥–æ–µ"],
        "triage_pain_q2":"–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏?",
        "triage_pain_q2_opts":["–¢—É–ø–∞—è","–û—Å—Ç—Ä–∞—è","–ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è","–î–∞–≤—è—â–∞—è"],
        "triage_pain_q3":"–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è?",
        "triage_pain_q3_opts":["<3—á","3‚Äì24—á",">1 –¥–Ω—è",">1 –Ω–µ–¥–µ–ª–∏"],
        "triage_pain_q4":"–û—Ü–µ–Ω–∏—Ç–µ –±–æ–ª—å (0‚Äì10):",
        "triage_pain_q5":"–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–µ–π—á–∞—Å?",
        "triage_pain_q5_opts":["–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞","–†–≤–æ—Ç–∞","–°–ª–∞–±–æ—Å—Ç—å/–æ–Ω–µ–º–µ–Ω–∏–µ","–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è","–¢—Ä–∞–≤–º–∞","–ù–µ—Ç"],
        "plan_header":"–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á–∞—Å–æ–≤:",
        "plan_accept":"–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
        "accept_opts":["‚úÖ –î–∞","üîÅ –ü–æ–∑–∂–µ","‚úñÔ∏è –ù–µ—Ç"],
        "remind_when":"–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "remind_opts":["—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞","–≤–µ—á–µ—Ä–æ–º","–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º","–Ω–µ –Ω–∞–¥–æ"],
        "thanks":"–ü—Ä–∏–Ω—è—Ç–æ üôå",
        "checkin_ping":"–ö–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ 0‚Äì10?",
        "checkin_better":"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üí™",
        "checkin_worse":"–ï—Å–ª–∏ –µ—Å—Ç—å ¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª –∏–ª–∏ –±–æ–ª—å ‚â•7/10 ‚Äî –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        "act_rem_4h":"‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 4 —á",
        "act_rem_eve":"‚è∞ –°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º",
        "act_rem_morn":"‚è∞ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º",
        "act_save_episode":"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–ø–∏–∑–æ–¥",
        "act_ex_neck":"üßò 5-–º–∏–Ω —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —à–µ–∏",
        "act_find_lab":"üß™ –ù–∞–π—Ç–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é",
        "act_er":"üöë –ö–æ–≥–¥–∞ —Å—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é",
        "act_city_prompt":"–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥/—Ä–∞–π–æ–Ω, —á—Ç–æ–±—ã –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é (—Ç–µ–∫—Å—Ç–æ–º).",
        "act_saved":"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
        "er_text":"–ï—Å–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç, —Å–∏–ª—å–Ω–∞—è –æ–¥—ã—à–∫–∞, –±–æ–ª—å –≤ –≥—Ä—É–¥–∏, —Å–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å, —Å—Ç–æ–π–∫–∞—è –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∫ –Ω–µ–æ—Ç–ª–æ–∂–∫–µ/—Å–∫–æ—Ä–æ–π.",
        "px":"–° —É—á—ë—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è: {sex}, {age} –ª–µ—Ç; —Ü–µ–ª—å ‚Äî {goal}.",
        "back":"‚óÄ –ù–∞–∑–∞–¥",
        "exit":"–í—ã–π—Ç–∏",
        # feedback
        "ask_fb":"–≠—Ç–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ?",
        "fb_thanks":"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! ‚úÖ",
        "fb_write":"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        "fb_good":"üëç –ù—Ä–∞–≤–∏—Ç—Å—è",
        "fb_bad":"üëé –ù–µ –ø–æ–ª–µ–∑–Ω–æ",
        "fb_free":"üìù –û—Ç–∑—ã–≤",
        # Health60
        "h60_btn": "–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥",
        "h60_intro": "–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞¬ª, ¬´—É—Å—Ç–∞–ª–æ—Å—Ç—å¬ª, ¬´–±–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ¬ª). –Ø –¥–∞–º 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–≤–µ—Ç–∞ –∑–∞ 60 —Å–µ–∫—É–Ω–¥.",
        "h60_t1": "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã",
        "h60_t2": "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å (24‚Äì48 —á)",
        "h60_t3": "–ö–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É",
        "h60_serious": "–ß—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ–µ –∏—Å–∫–ª—é—á–∏—Ç—å",
    },
    "uk": {
        "welcome":"–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è.\n–†–æ–∑–∫–∞–∂–∏, —â–æ —Ç—É—Ä–±—É—î; —è –ø—ñ–¥–∫–∞–∂—É. –°–ø–µ—Ä—à—É —à–≤–∏–¥–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ (~40—Å) –¥–ª—è —Ç–æ—á–Ω—ñ—à–∏—Ö –ø–æ—Ä–∞–¥.",
        "help":"–ö–æ—Ä–æ—Ç–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ–¥–µ–Ω–Ω—ñ —á–µ–∫-—ñ–Ω–∏.\n–ö–æ–º–∞–Ω–¥–∏: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +2 /health60 /ru /uk /en /es",
        "privacy":"TendAI –Ω–µ –∑–∞–º—ñ–Ω—é—î –ª—ñ–∫–∞—Ä—è. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ–Ω—ñ–º—É–º –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å. /delete_data ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏.",
        "paused_on":"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ. /resume ‚Äî —É–≤—ñ–º–∫–Ω—É—Ç–∏.",
        "paused_off":"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω–µ–Ω—ñ.",
        "deleted":"–£—Å—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ. /start ‚Äî –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.",
        "ask_consent":"–ú–æ–∂—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—ñ–∑–Ω—ñ—à–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ –≤–∏?",
        "yes":"–¢–∞–∫","no":"–ù—ñ",
        "unknown":"–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ: –¥–µ —Å–∞–º–µ —ñ —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î?",
        "profile_intro":"–®–≤–∏–¥–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ (~40—Å). –ú–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –ø–∏—Å–∞—Ç–∏ —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç.",
        "p_step_1":"–ö—Ä–æ–∫ 1/8. –°—Ç–∞—Ç—å:",
        "p_step_2":"–ö—Ä–æ–∫ 2/8. –í—ñ–∫:",
        "p_step_3":"–ö—Ä–æ–∫ 3/8. –ì–æ–ª–æ–≤–Ω–∞ –º–µ—Ç–∞:",
        "p_step_4":"–ö—Ä–æ–∫ 4/8. –•—Ä–æ–Ω—ñ—á–Ω—ñ —Ö–≤–æ—Ä–æ–±–∏:",
        "p_step_5":"–ö—Ä–æ–∫ 5/8. –õ—ñ–∫–∏/–¥–æ–±–∞–≤–∫–∏/–∞–ª–µ—Ä–≥—ñ—ó:",
        "p_step_6":"–ö—Ä–æ–∫ 6/8. –°–æ–Ω (–≤—ñ–¥–±—ñ–π/–ø—ñ–¥–π–æ–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        "p_step_7":"–ö—Ä–æ–∫ 7/8. –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:",
        "p_step_8":"–ö—Ä–æ–∫ 8/8. –•–∞—Ä—á—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–∂–Ω–æ:",
        "write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏",
        "skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "saved_profile":"–ó–±–µ—Ä—ñ–≥: ",
        "start_where":"–ó —á–æ–≥–æ –ø–æ—á–Ω–µ–º–æ? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è/–∞–Ω–∞–ª—ñ–∑–∏/–∑–≤–∏—á–∫–∏/–¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è)",
        "daily_gm":"–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! –®–≤–∏–¥–∫–∏–π —á–µ–∫-—ñ–Ω:",
        "mood_good":"üòÉ –î–æ–±—Ä–µ","mood_ok":"üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ","mood_bad":"üò£ –ü–æ–≥–∞–Ω–æ","mood_note":"‚úçÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä",
        "mood_thanks":"–î—è–∫—É—é! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üëã",
        "triage_pain_q1":"–î–µ –±–æ–ª–∏—Ç—å?",
        "triage_pain_q1_opts":["–ì–æ–ª–æ–≤–∞","–ì–æ—Ä–ª–æ","–°–ø–∏–Ω–∞","–ñ–∏–≤—ñ—Ç","–Ü–Ω—à–µ"],
        "triage_pain_q2":"–Ø–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª—é?",
        "triage_pain_q2_opts":["–¢—É–ø–∏–π","–ì–æ—Å—Ç—Ä–∏–π","–ü—É–ª—å—Å—É—é—á–∏–π","–¢–∏—Å–Ω—É—á–∏–π"],
        "triage_pain_q3":"–Ø–∫ –¥–æ–≤–≥–æ —Ç—Ä–∏–≤–∞—î?",
        "triage_pain_q3_opts":["<3–≥–æ–¥","3‚Äì24–≥–æ–¥",">1 –¥–Ω—è",">1 —Ç–∏–∂–Ω—è"],
        "triage_pain_q4":"–û—Ü—ñ–Ω—ñ—Ç—å –±—ñ–ª—å (0‚Äì10):",
        "triage_pain_q5":"–Ñ —â–æ—Å—å —ñ–∑ —Ü—å–æ–≥–æ –∑–∞—Ä–∞–∑?",
        "triage_pain_q5_opts":["–í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞","–ë–ª—é–≤–∞–Ω–Ω—è","–°–ª–∞–±–∫—ñ—Å—Ç—å/–æ–Ω—ñ–º—ñ–Ω–Ω—è","–ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–æ–≤–æ—é/–∑–æ—Ä–æ–º","–¢—Ä–∞–≤–º–∞","–ù–µ–º–∞—î"],
        "plan_header":"–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥:",
        "plan_accept":"–ì–æ—Ç–æ–≤—ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "accept_opts":["‚úÖ –¢–∞–∫","üîÅ –ü—ñ–∑–Ω—ñ—à–µ","‚úñÔ∏è –ù—ñ"],
        "remind_when":"–ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏ —Ç–∞ —Å–ø–∏—Ç–∞—Ç–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è?",
        "remind_opts":["—á–µ—Ä–µ–∑ 4 –≥–æ–¥","—É–≤–µ—á–µ—Ä—ñ","–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ","–Ω–µ —Ç—Ä–µ–±–∞"],
        "thanks":"–ü—Ä–∏–π–Ω—è—Ç–æ üôå",
        "checkin_ping":"–ö–æ—Ä–æ—Ç–∫–æ: —è–∫ –∑–∞—Ä–∞–∑ –∑–∞ —à–∫–∞–ª–æ—é 0‚Äì10?",
        "checkin_better":"–ß—É–¥–æ–≤–æ! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ üí™",
        "checkin_worse":"–Ø–∫—â–æ —î ¬´—á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ¬ª –∞–±–æ –±—ñ–ª—å ‚â•7/10 ‚Äî –∫—Ä–∞—â–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.",
        "act_rem_4h":"‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ 4 –≥–æ–¥",
        "act_rem_eve":"‚è∞ –°—å–æ–≥–æ–¥–Ω—ñ –≤–≤–µ—á–µ—Ä—ñ",
        "act_rem_morn":"‚è∞ –ó–∞–≤—Ç—Ä–∞ –∑—Ä–∞–Ω–∫—É",
        "act_save_episode":"üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –µ–ø—ñ–∑–æ–¥",
        "act_ex_neck":"üßò 5-—Ö–≤ –≤–ø—Ä–∞–≤–∏ –¥–ª—è —à–∏—ó",
        "act_find_lab":"üß™ –ó–Ω–∞–π—Ç–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—é",
        "act_er":"üöë –ö–æ–ª–∏ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –≤ —à–≤–∏–¥–∫—É",
        "act_city_prompt":"–ù–∞–ø–∏—à—ñ—Ç—å –º—ñ—Å—Ç–æ/—Ä–∞–π–æ–Ω, —â–æ–± –ø–æ—Ä–∞–¥–∏—Ç–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—é (—Ç–µ–∫—Å—Ç–æ–º).",
        "act_saved":"–ó–±–µ—Ä–µ–∂–µ–Ω–æ.",
        "er_text":"–Ø–∫—â–æ –ø–æ—Å–∏–ª—é—î—Ç—å—Å—è, —Å–∏–ª—å–Ω–∞ –∑–∞–¥–∏—à–∫–∞, –±—ñ–ª—å —É –≥—Ä—É–¥—è—Ö, —Å–ø–ª—É—Ç–∞–Ω—ñ—Å—Ç—å, —Ç—Ä–∏–≤–∞–ª–∞ –≤–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –¥–æ –Ω–µ–≤—ñ–¥–∫–ª–∞–¥–Ω–æ—ó/—à–≤–∏–¥–∫–æ—ó.",
        "px":"–ó —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ—Ñ—ñ–ª—é: {sex}, {age} —Ä.; –º–µ—Ç–∞ ‚Äî {goal}.",
        "back":"‚óÄ –ù–∞–∑–∞–¥",
        "exit":"–í–∏–π—Ç–∏",
        # feedback
        "ask_fb":"–ß–∏ –±—É–ª–æ —Ü–µ –∫–æ—Ä–∏—Å–Ω–æ?",
        "fb_thanks":"–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫! ‚úÖ",
        "fb_write":"–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ñ–¥–≥—É–∫ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:",
        "fb_good":"üëç –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è",
        "fb_bad":"üëé –ù–µ –∫–æ—Ä–∏—Å–Ω–æ",
        "fb_free":"üìù –í—ñ–¥–≥—É–∫",
        # Health60
        "h60_btn": "–ó–¥–æ—Ä–æ–≤‚Äô—è –∑–∞ 60 —Å–µ–∫—É–Ω–¥",
        "h60_intro": "–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à—ñ—Ç—å, —â–æ —Ç—É—Ä–±—É—î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: ¬´–±–æ–ª–∏—Ç—å –≥–æ–ª–æ–≤–∞¬ª, ¬´–≤—Ç–æ–º–∞¬ª, ¬´–±—ñ–ª—å —É –∂–∏–≤–æ—Ç—ñ¬ª). –î–∞–º 3 –∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏ –∑–∞ 60 —Å–µ–∫—É–Ω–¥.",
        "h60_t1": "–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏",
        "h60_t2": "–©–æ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞—Ä–∞–∑ (24‚Äì48 –≥–æ–¥)",
        "h60_t3": "–ö–æ–ª–∏ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è",
        "h60_serious": "–©–æ —Å–µ—Ä–π–æ–∑–Ω–µ –≤–∏–∫–ª—é—á–∏—Ç–∏",
    },
}
T["es"] = T["en"]

# ---------------- Helpers ----------------
def utcnow():
    return datetime.now(timezone.utc)

def iso(dt: Optional[datetime]) -> str:
    return "" if not dt else dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def detect_lang_from_text(text: str, fallback: str) -> str:
    s = (text or "").strip()
    if not s:
        return fallback
    low = s.lower()
    if re.search(r"[–∞-—è—ë—ñ—ó—î“ë]", low):
        return "uk" if re.search(r"[—ñ—ó—î“ë]", low) else "ru"
    try:
        return norm_lang(detect(s))
    except Exception:
        return fallback

def profile_is_incomplete(profile_row: dict) -> bool:
    keys = ["sex","age","goal"]
    return sum(1 for k in keys if str(profile_row.get(k) or "").strip()) < 2

# ===== ONBOARDING GATE =====
GATE_FLAG_KEY = "menu_unlocked"

def _is_menu_unlocked(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if context.user_data.get(GATE_FLAG_KEY):
        return True
    prof = profiles_get(update.effective_user.id) or {}
    return not profile_is_incomplete(prof)

async def gate_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    kb = [
        [InlineKeyboardButton("üß© –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å (40‚Äì60 —Å–µ–∫)" if lang!="en" else "üß© Take the 40‚Äì60s intake", callback_data="intake:start")],
        [InlineKeyboardButton("‚û°Ô∏è –ü–æ–∑–∂–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é" if lang!="en" else "‚û°Ô∏è Later ‚Äî open menu", callback_data="gate:skip")],
    ]
    text = (
        "–ß—Ç–æ–±—ã —Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å. –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ."
        if lang!="en" else
        "To personalize answers, please take a short intake. You can skip and do it later."
    )
    await update.effective_chat.send_message(text, reply_markup=InlineKeyboardMarkup(kb))

async def gate_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "gate:skip":
        context.user_data[GATE_FLAG_KEY] = True
        await q.edit_message_text("–û–∫, –æ—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶" if context.user_data.get("lang","en")!="en" else "OK, opening the menu‚Ä¶")
        render_cb = context.application.bot_data.get("render_menu_cb")
        if callable(render_cb):
            await render_cb(update, context)
        else:
            await context.application.bot.send_message(q.message.chat_id, "/start")

async def _ipro_save_to_sheets_and_open_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, profile: dict):
    uid = update.effective_user.id
    profiles_upsert(uid, {
        "sex": profile.get("sex") or "",
        "age": profile.get("age") or "",
        "goal": profile.get("goal") or "",
        "conditions": ", ".join(sorted(profile.get("chronic", []))) if isinstance(profile.get("chronic"), set) else (profile.get("chronic") or ""),
        "meds": profile.get("meds") or "",
        "activity": profile.get("hab_activity") or "",
        "sleep": profile.get("hab_sleep") or "",
        "notes": ", ".join(sorted(profile.get("complaints", []))) if isinstance(profile.get("complaints"), set) else (profile.get("complaints") or ""),
    })
    context.user_data[GATE_FLAG_KEY] = True
    render_cb = context.application.bot_data.get("render_menu_cb")
    if callable(render_cb):
        await render_cb(update, context)
    else:
        await context.application.bot.send_message(update.effective_chat.id, "/start")
# ===== /ONBOARDING GATE =====

# ---------- Anti-duplicate questions ----------
def _ratio(a: str, b: str) -> float:
    return SequenceMatcher(None, (a or "").lower(), (b or "").lower()).ratio()

def is_duplicate_question(uid: int, text: str, thresh: float = 0.93) -> bool:
    s = sessions.setdefault(uid, {})
    asked = s.setdefault("asked_prompts", [])
    for prev in asked[-4:]:
        if _ratio(prev, text) >= thresh:
            return True
    asked.append(text)
    if len(asked) > 16:
        s["asked_prompts"] = asked[-16:]
    return False

async def send_unique(msg_obj, uid: int, text: str, reply_markup=None, force: bool = False):
    if force or not is_duplicate_question(uid, text):
        await msg_obj.reply_text(text, reply_markup=reply_markup)

# -------- Sheets (with memory fallback) --------
SHEETS_ENABLED = True
ss = None
ws_feedback = ws_users = ws_profiles = ws_episodes = ws_reminders = ws_daily = None

# === keep client/id for intake_pro ===
GSPREAD_CLIENT: Optional[gspread.client.Client] = None
SPREADSHEET_ID_FOR_INTAKE: str = ""

def _headers(ws):
    return ws.row_values(1)

# --------- Memory fallback stores ----------
MEM_USERS: Dict[int, dict] = {}
MEM_PROFILES: Dict[int, dict] = {}
MEM_EPISODES: List[dict] = []
MEM_REMINDERS: List[dict] = []
MEM_FEEDBACK: List[dict] = []
MEM_DAILY: List[dict] = []

# ---- NEW: in-memory row indexes for precise updates (and fewer reads) ----
USERS_ROW: Dict[str, int] = {}     # "user_id" -> row in Users
PROFILES_ROW: Dict[str, int] = {}  # "user_id" -> row in Profiles

def _sheets_init():
    global SHEETS_ENABLED, ss, ws_feedback, ws_users, ws_profiles, ws_episodes, ws_reminders, ws_daily
    global GSPREAD_CLIENT, SPREADSHEET_ID_FOR_INTAKE, USERS_ROW, PROFILES_ROW, MEM_USERS, MEM_PROFILES
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if not creds_json:
            raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
        creds = json.loads(creds_json)
        credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds, scope)
        gclient = gspread.authorize(credentials)
        GSPREAD_CLIENT = gclient

        try:
            ss = gclient.open_by_key(SHEET_ID) if SHEET_ID else gclient.open(SHEET_NAME)
        except SpreadsheetNotFound:
            if ALLOW_CREATE_SHEET:
                ss = gclient.create(SHEET_NAME)
            else:
                raise

        try:
            SPREADSHEET_ID_FOR_INTAKE = ss.id
        except Exception:
            SPREADSHEET_ID_FOR_INTAKE = SHEET_ID or ""

        def _ensure_ws(title: str, headers: List[str]):
            try:
                ws = ss.worksheet(title)
            except gspread.WorksheetNotFound:
                ws = ss.add_worksheet(title=title, rows=2000, cols=max(20, len(headers)))
                ws.append_row(headers)
            vals = ws.get_all_values()
            if not vals:
                ws.append_row(headers)
            return ws

        ws_feedback = _ensure_ws("Feedback", ["timestamp","user_id","name","username","rating","comment"])
        ws_users    = _ensure_ws("Users",    ["user_id","username","lang","consent","tz_offset","checkin_hour","paused"])
        ws_profiles = _ensure_ws("Profiles", ["user_id","sex","age","goal","conditions","meds","allergies",
                                              "sleep","activity","diet","notes","updated_at"])
        ws_episodes = _ensure_ws("Episodes", ["episode_id","user_id","topic","started_at","baseline_severity","red_flags",
                                              "plan_accepted","target","reminder_at","next_checkin_at","status","last_update","notes"])
        ws_reminders= _ensure_ws("Reminders",["id","user_id","text","when_utc","created_at","status"])
        ws_daily    = _ensure_ws("DailyCheckins",["timestamp","user_id","mood","comment"])

        # ---- PRIME CACHES (single read per sheet on boot) ----
        try:
            vals = ws_users.get_all_values()
            hdr = vals[0] if vals else []
            USERS_ROW = {}
            MEM_USERS = {}
            for i in range(1, len(vals)):  # starting at row 2
                row = vals[i]
                rec = {hdr[j]: (row[j] if j < len(row) else "") for j in range(len(hdr))}
                uid = rec.get("user_id") or ""
                if uid:
                    USERS_ROW[uid] = i + 1
                    try:
                        MEM_USERS[int(uid)] = rec
                    except:
                        pass
        except Exception as e:
            logging.warning(f"Users cache prime failed: {e}")

        try:
            vals = ws_profiles.get_all_values()
            hdr = vals[0] if vals else []
            PROFILES_ROW = {}
            MEM_PROFILES = {}
            for i in range(1, len(vals)):
                row = vals[i]
                rec = {hdr[j]: (row[j] if j < len(row) else "") for j in range(len(hdr))}
                uid = rec.get("user_id") or ""
                if uid:
                    PROFILES_ROW[uid] = i + 1
                    try:
                        MEM_PROFILES[int(uid)] = rec
                    except:
                        pass
        except Exception as e:
            logging.warning(f"Profiles cache prime failed: {e}")

        logging.info("Google Sheets connected.")
    except Exception as e:
        SHEETS_ENABLED = False
        logging.error(f"SHEETS disabled (fallback to memory). Reason: {e}")

_sheets_init()

# --------- Sessions ----------
sessions: Dict[int, dict] = {}

# -------- Sheets wrappers (use memory-first, write-through) --------
def users_get(uid: int) -> dict:
    return MEM_USERS.get(uid, {})

def users_upsert(uid: int, username: str, lang: str):
    base = {
        "user_id": str(uid),
        "username": username or "",
        "lang": lang,
        "consent": (MEM_USERS.get(uid, {}).get("consent") or "no"),
        "tz_offset": (MEM_USERS.get(uid, {}).get("tz_offset") or "0"),
        "checkin_hour": (MEM_USERS.get(uid, {}).get("checkin_hour") or DEFAULT_CHECKIN_LOCAL),
        "paused": (MEM_USERS.get(uid, {}).get("paused") or "no")
    }
    MEM_USERS[uid] = base

    if not SHEETS_ENABLED:
        return
    try:
        hdr = _headers(ws_users)
        row_idx = USERS_ROW.get(str(uid))
        values = [[base.get(h, "") for h in hdr]]
        if row_idx:
            rng = f"A{row_idx}:{gsu.rowcol_to_a1(1, len(hdr)).rstrip('1')}{row_idx}"
            ws_users.update(values, range_name=rng)  # NEW order: values first
        else:
            ws_users.append_row([base.get(h, "") for h in hdr])
            # approximate last row; acceptable for append-only
            USERS_ROW[str(uid)] = ws_users.row_count
    except Exception as e:
        logging.warning(f"users_upsert sheet write failed, keeping memory only: {e}")

def users_set(uid: int, field: str, value: str):
    u = MEM_USERS.setdefault(uid, {"user_id": str(uid)})
    u[field] = value

    if not SHEETS_ENABLED:
        return
    try:
        hdr = _headers(ws_users)
        if field not in hdr:
            return
        row_idx = USERS_ROW.get(str(uid))
        if row_idx:
            col = hdr.index(field) + 1
            ws_users.update_cell(row_idx, col, value)
        else:
            users_upsert(uid, u.get("username",""), u.get("lang","en"))
    except Exception as e:
        logging.warning(f"users_set sheet write failed, keeping memory only: {e}")

def profiles_get(uid: int) -> dict:
    return MEM_PROFILES.get(uid, {})

def profiles_upsert(uid: int, data: dict):
    row = MEM_PROFILES.setdefault(uid, {"user_id": str(uid)})
    for k, v in data.items():
        row[k] = "" if v is None else (", ".join(v) if isinstance(v, list) else str(v))
    row["updated_at"] = iso(utcnow())

    if not SHEETS_ENABLED:
        return
    try:
        hdr = _headers(ws_profiles)
        values = [row.get(h, "") for h in hdr]
        end_col = gsu.rowcol_to_a1(1, len(hdr)).rstrip("1")
        idx = PROFILES_ROW.get(str(uid))
        if idx:
            ws_profiles.update([values], range_name=f"A{idx}:{end_col}{idx}")  # NEW order
        else:
            ws_profiles.append_row(values)
            PROFILES_ROW[str(uid)] = ws_profiles.row_count
    except Exception as e:
        logging.warning(f"profiles_upsert sheet write failed, keeping memory only: {e}")

def episode_create(uid: int, topic: str, severity: int, red: str) -> str:
    eid = f"{uid}-{uuid.uuid4().hex[:8]}"
    now = iso(utcnow())
    rec = {"episode_id":eid,"user_id":str(uid),"topic":topic,"started_at":now,
           "baseline_severity":str(severity),"red_flags":red,"plan_accepted":"0",
           "target":"<=3/10","reminder_at":"","next_checkin_at":"","status":"open",
           "last_update":now,"notes":""}
    if SHEETS_ENABLED:
        ws_episodes.append_row([rec[k] for k in _headers(ws_episodes)])
    else:
        MEM_EPISODES.append(rec)
    return eid

def episode_find_open(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED:
        for r in ws_episodes.get_all_records():
            if r.get("user_id")==str(uid) and r.get("status")=="open":
                return r
        return None
    for r in MEM_EPISODES:
        if r["user_id"]==str(uid) and r["status"]=="open":
            return r
    return None

def episode_set(eid: str, field: str, value: str):
    if SHEETS_ENABLED:
        vals = ws_episodes.get_all_values(); hdr = vals[0]
        if field not in hdr:
            return
        col = hdr.index(field)+1
        for i in range(2, len(vals)+1):
            if ws_episodes.cell(i,1).value == eid:
                ws_episodes.update_cell(i,col,value)
                ws_episodes.update_cell(i,hdr.index("last_update")+1, iso(utcnow()))
                return
    else:
        for r in MEM_EPISODES:
            if r["episode_id"]==eid:
                r[field]=value; r["last_update"]=iso(utcnow()); return

def feedback_add(ts, uid, name, username, rating, comment):
    if SHEETS_ENABLED:
        ws_feedback.append_row([ts,str(uid),name,username or "",rating,comment])
    else:
        MEM_FEEDBACK.append({"timestamp":ts,"user_id":str(uid),"name":name,"username":username or "","rating":rating,"comment":comment})

def reminder_add(uid: int, text: str, when_utc: datetime):
    rid = f"{uid}-{uuid.uuid4().hex[:6]}"
    rec = {"id":rid,"user_id":str(uid),"text":text,"when_utc":iso(when_utc),"created_at":iso(utcnow()),"status":"scheduled"}
    if SHEETS_ENABLED:
        ws_reminders.append_row([rec[k] for k in _headers(ws_reminders)])
    else:
        MEM_REMINDERS.append(rec)
    return rid

def reminders_all_records():
    if SHEETS_ENABLED:
        return ws_reminders.get_all_records()
    return MEM_REMINDERS.copy()

def reminders_mark_sent(rid: str):
    if SHEETS_ENABLED:
        vals = ws_reminders.get_all_values()
        for i in range(2, len(vals)+1):
            if ws_reminders.cell(i,1).value == rid:
                ws_reminders.update_cell(i,6,"sent"); return
    else:
        for r in MEM_REMINDERS:
            if r["id"]==rid:
                r["status"]="sent"; return

def daily_add(ts, uid, mood, comment):
    if SHEETS_ENABLED:
        ws_daily.append_row([ts,str(uid),mood,comment or ""])
    else:
        MEM_DAILY.append({"timestamp":ts,"user_id":str(uid),"mood":mood,"comment":comment or ""})


# --------- JobQueue helper ----------
def _has_jq_app(app) -> bool:
    return getattr(app, "job_queue", None) is not None

def _has_jq_ctx(context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        return getattr(context.application, "job_queue", None) is not None
    except Exception:
        return False

# --------- Scheduling ---------
def schedule_from_sheet_on_start(app):
    if not _has_jq_app(app):
        logging.warning("JobQueue not available ‚Äì skip scheduling on start.")
        return

    now = utcnow()
    src = ws_episodes.get_all_records() if SHEETS_ENABLED else MEM_EPISODES
    for r in src:
        if r.get("status")!="open":
            continue
        eid = r.get("episode_id"); uid = int(r.get("user_id"))
        nca = r.get("next_checkin_at") or ""
        if not nca:
            continue
        try:
            dt_ = datetime.strptime(nca, "%Y-%m-%d %H:%M:%S%z")
        except:
            continue
        delay = max(60, (dt_-now).total_seconds())
        app.job_queue.run_once(job_checkin_episode, when=delay, data={"user_id":uid,"episode_id":eid})

    for r in reminders_all_records():
        if (r.get("status") or "")!="scheduled":
            continue
        uid = int(r.get("user_id")); rid=r.get("id")
        try:
            dt_ = datetime.strptime(r.get("when_utc"), "%Y-%m-%d %H:%M:%S%z")
        except:
            continue
        delay = max(60,(dt_-now).total_seconds())
        app.job_queue.run_once(job_oneoff_reminder, when=delay, data={"user_id":uid,"reminder_id":rid})

    # use memory cache even when sheets are enabled (avoid extra read)
    src_u = list(MEM_USERS.values())
    for u in src_u:
        if (u.get("paused") or "").lower()=="yes":
            continue
        uid = int(u.get("user_id"))
        tz_off = int(str(u.get("tz_offset") or "0"))
        hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
        schedule_daily_checkin(app, uid, tz_off, hhmm, norm_lang(u.get("lang") or "en"))

def hhmm_tuple(hhmm:str)->Tuple[int,int]:
    m = re.search(r'([01]?\d|2[0-3]):([0-5]\d)', hhmm.strip())
    return (int(m.group(1)), int(m.group(2))) if m else (8,30)

def local_to_utc_hour_min(tz_offset_hours:int, hhmm:str)->Tuple[int,int]:
    h,m = hhmm_tuple(hhmm); return ((h - tz_offset_hours) % 24, m)

def schedule_daily_checkin(app, uid:int, tz_off:int, hhmm_local:str, lang:str):
    if not _has_jq_app(app):
        logging.warning(f"JobQueue not available ‚Äì skip daily scheduling for uid={uid}.")
        return
    for j in app.job_queue.get_jobs_by_name(f"daily_{uid}"):
        j.schedule_removal()
    h_utc, m_utc = local_to_utc_hour_min(tz_off, hhmm_local)
    t = dtime(hour=h_utc, minute=m_utc, tzinfo=timezone.utc)
    app.job_queue.run_daily(job_daily_checkin, time=t, name=f"daily_{uid}", data={"user_id":uid,"lang":lang})

# ------------- Jobs -------------
async def job_checkin_episode(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, eid = d.get("user_id"), d.get("episode_id")
    if not uid or not eid:
        return
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes":
        return
    lang = norm_lang(u.get("lang") or "en")
    kb = inline_numbers_0_10()
    try:
        await context.bot.send_message(uid, T[lang]["checkin_ping"], reply_markup=kb)
        episode_set(eid, "next_checkin_at", "")
    except Exception as e:
        logging.error(f"job_checkin_episode send error: {e}")

async def job_oneoff_reminder(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, rid = d.get("user_id"), d.get("reminder_id")
    text = T[norm_lang(users_get(uid).get("lang") or "en")]["thanks"]
    for r in reminders_all_records():
        if r.get("id")==rid:
            text = r.get("text") or text; break
    try:
        await context.bot.send_message(uid, text)
    except Exception as e:
        logging.error(f"reminder send error: {e}")
    reminders_mark_sent(rid)

async def job_daily_checkin(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, lang = d.get("user_id"), d.get("lang","en")
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes":
        return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["mood_good"], callback_data="mood|good"),
         InlineKeyboardButton(T[lang]["mood_ok"], callback_data="mood|ok"),
         InlineKeyboardButton(T[lang]["mood_bad"], callback_data="mood|bad")],
        [InlineKeyboardButton(T[lang]["mood_note"], callback_data="mood|note")]
    ])
    try:
        await context.bot.send_message(uid, T[lang]["daily_gm"], reply_markup=kb)
    except Exception as e:
        logging.error(f"daily checkin error: {e}")

# ------------- LLM Router (with personalization) -------------
SYS_ROUTER = (
    "You are TendAI ‚Äî a concise, warm, professional health & longevity assistant (not a doctor). "
    "Always answer strictly in {lang}. Keep replies short (<=6 lines + up to 4 bullets). "
    "Personalize recommendations using the provided profile (sex/age/goal/conditions). "
    "TRIAGE: ask 1‚Äì2 clarifiers first; advise ER only for clear red flags with high confidence. "
    "Return JSON ONLY like: "
    "{\"intent\":\"symptom\"|\"nutrition\"|\"sleep\"|\"labs\"|\"habits\"|\"longevity\"|\"other\","
    "\"assistant_reply\": \"string\", \"followups\": [\"string\"], \"needs_more\": true, "
    "\"red_flags\": false, \"confidence\": 0.0}"
)

def llm_router_answer(text: str, lang: str, profile: dict) -> dict:
    if not oai:
        return {"intent":"other","assistant_reply":T[lang]["unknown"],"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}

    sys = SYS_ROUTER.replace("{lang}", lang) + f"\nUserProfile: {json.dumps(profile, ensure_ascii=False)}"
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.25,
            max_tokens=420,
            response_format={"type":"json_object"},
            messages=[
                {"role":"system","content":sys},
                {"role":"user","content":text}
            ]
        )
        out = resp.choices[0].message.content.strip()
        data = json.loads(out)
        if "followups" not in data or data["followups"] is None:
            data["followups"] = []
        return data
    except Exception as e:
        logging.error(f"router LLM error: {e}")
        return {"intent":"other","assistant_reply":T[lang]["unknown"],"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}

# ===== LLM ORCHESTRATOR FOR PAIN TRIAGE =====
def _kb_for_code(lang: str, code: str):
    if code == "painloc":
        kb = inline_list(T[lang]["triage_pain_q1_opts"], "painloc")
    elif code == "painkind":
        kb = inline_list(T[lang]["triage_pain_q2_opts"], "painkind")
    elif code == "paindur":
        kb = inline_list(T[lang]["triage_pain_q3_opts"], "paindur")
    elif code == "num":
        kb = inline_numbers_0_10()
    elif code == "painrf":
        kb = inline_list(T[lang]["triage_pain_q5_opts"], "painrf")
    else:
        kb = None
    if kb:
        rows = kb.inline_keyboard + [[InlineKeyboardButton(T[lang]["back"], callback_data="pain|exit")]]
        return InlineKeyboardMarkup(rows)
    return None

def llm_decide_next_pain_step(user_text: str, lang: str, state: dict) -> Optional[dict]:
    if not oai:
        return None

    known = state.get("answers", {})
    opts = {
        "loc": T[lang]["triage_pain_q1_opts"],
        "kind": T[lang]["triage_pain_q2_opts"],
        "duration": T[lang]["triage_pain_q3_opts"],
        "red": T[lang]["triage_pain_q5_opts"],
    }
    sys = (
        "You are a clinical triage step planner. "
        f"Language: {lang}. Reply in the user's language. "
        "You get partial fields for a PAIN complaint and a new user message. "
        "Extract any fields present from the message. Keep labels EXACTLY as in the allowed options. "
        "Field keys: loc, kind, duration, severity (0-10), red. "
        "Then decide the NEXT missing field to ask (order: loc -> kind -> duration -> severity -> red). "
        "Return STRICT JSON ONLY with keys updates, ask, kb. "
        "kb must be one of: painloc, painkind, paindur, num, painrf, done. "
        "If enough info to produce a plan (we have severity and red), set kb='done' and ask=''.\n\n"
        f"Allowed options:\nloc: {opts['loc']}\nkind: {opts['kind']}\nduration: {opts['duration']}\nred: {opts['red']}\n"
    )
    user = {"known": known, "message": user_text}
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.1,
            max_tokens=220,
            response_format={"type":"json_object"},
            messages=[
                {"role":"system","content":sys},
                {"role":"user","content":json.dumps(user, ensure_ascii=False)}
            ]
        )
        out = resp.choices[0].message.content.strip()
        data = json.loads(out)
        if "updates" in data and isinstance(data["updates"], dict) and "severity" in data["updates"]:
            try:
                sv = int(data["updates"]["severity"])
                data["updates"]["severity"] = max(0, min(10, sv))
            except:
                data["updates"].pop("severity", None)
        return data
    except Exception as e:
        logging.error(f"llm_decide_next_pain_step error: {e}")
        return None

# ----- Synonyms fallback for pain triage -----
PAIN_LOC_SYNS = {
    "ru": {
        "–ì–æ–ª–æ–≤–∞": ["–≥–æ–ª–æ–≤–∞","–≥–æ–ª–æ–≤–µ","–≥–æ–ª–æ–≤–Ω–∞—è","–º–∏–≥—Ä–µ–Ω—å","–≤–∏—Å–æ–∫","—Ç–µ–º—è","–ª–æ–±"],
        "–ì–æ—Ä–ª–æ": ["–≥–æ—Ä–ª–æ","–≤ –≥–æ—Ä–ª–µ","–∞–Ω–≥–∏–Ω–∞","—Ç–æ–Ω–∑–∏–ª–ª–∏—Ç"],
        "–°–ø–∏–Ω–∞": ["—Å–ø–∏–Ω–∞","–≤ —Å–ø–∏–Ω–µ","–ø–æ—è—Å–Ω–∏—Ü–∞","–ø–æ—è—Å–Ω–∏—á","–ª–æ–ø–∞—Ç–∫","–ø–æ–∑–≤–æ–Ω","—Å–∑–∞–¥–∏"],
        "–ñ–∏–≤–æ—Ç": ["–∂–∏–≤–æ—Ç","–≤–Ω–∏–∑—É –∂–∏–≤–æ—Ç–∞","—ç–ø–∏–≥–∞—Å—Ç—Ä","–∂–µ–ª—É–¥–æ–∫","–∫–∏—à","–ø–æ–¥—Ä–µ–±–µ—Ä"],
        "–î—Ä—É–≥–æ–µ": ["–¥—Ä—É–≥–æ–µ"]
    },
    "uk": {
        "–ì–æ–ª–æ–≤–∞": ["–≥–æ–ª–æ–≤–∞","–≤ –≥–æ–ª–æ–≤—ñ","–º—ñ–≥—Ä–µ–Ω—å","—Å–∫—Ä–æ–Ω—è","–ª–æ–±"],
        "–ì–æ—Ä–ª–æ": ["–≥–æ—Ä–ª–æ","–≤ –≥–æ—Ä–ª—ñ","–∞–Ω–≥—ñ–Ω–∞","—Ç–æ–Ω–∑–∏–ª—ñ—Ç"],
        "–°–ø–∏–Ω–∞": ["—Å–ø–∏–Ω–∞","–ø–æ–ø–µ—Ä–µ–∫","–ª–æ–ø–∞—Ç–∫","—Ö—Ä–µ–±–µ—Ç"],
        "–ñ–∏–≤—ñ—Ç": ["–∂–∏–≤—ñ—Ç","–≤–Ω–∏–∑—É –∂–∏–≤–æ—Ç–∞","—à–ª—É–Ω–æ–∫","–∫–∏—à"],
        "–Ü–Ω—à–µ": ["—ñ–Ω—à–µ"]
    },
    "en": {
        "Head": ["head","headache","migraine","temple","forehead"],
        "Throat": ["throat","sore throat","tonsil"],
        "Back": ["back","lower back","spine","shoulder blade"],
        "Belly": ["belly","stomach","abdomen","tummy","epigastr"],
        "Other": ["other"]
    },
    "es": {
        "Head": ["cabeza","dolor de cabeza","migra√±a","sien","frente"],
        "Throat": ["garganta","dolor de garganta","am√≠gdala"],
        "Back": ["espalda","lumbar","columna","om√≥plato"],
        "Belly": ["vientre","est√≥mago","abdomen","barriga","epigastrio"],
        "Other": ["otro","otra","otros"]
    }
}

PAIN_KIND_SYNS = {
    "ru": {
        "–¢—É–ø–∞—è": ["—Ç—É–ø","–Ω–æ—é—â","—Ç—è–Ω—É—â"],
        "–û—Å—Ç—Ä–∞—è": ["–æ—Å—Ç—Ä","–∫–æ–ª—é—â","—Ä–µ–∂—É—â"],
        "–ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è": ["–ø—É–ª—å—Å"],
        "–î–∞–≤—è—â–∞—è": ["–¥–∞–≤–∏—Ç","—Å–¥–∞–≤–ª–∏–≤","—Å—Ç—è–≥–∏–≤"]
    },
    "uk": {
        "–¢—É–ø–∏–π": ["—Ç—É–ø","–Ω–∏—é—á"],
        "–ì–æ—Å—Ç—Ä–∏–π": ["–≥–æ—Å—Ç—Ä","–∫–æ–ª—é—á","—Ä—ñ–∂—É—á"],
        "–ü—É–ª—å—Å—É—é—á–∏–π": ["–ø—É–ª—å—Å"],
        "–¢–∏—Å–Ω—É—á–∏–π": ["—Ç–∏—Å–Ω","—Å—Ç–∏—Å–∫–∞—î"]
    },
    "en": {
        "Dull": ["dull","aching","pulling"],
        "Sharp": ["sharp","stabbing","cutting"],
        "Pulsating": ["puls","throbb"],
        "Pressing": ["press","tight","squeez"]
    },
    "es": {
        "Dull": ["sordo","leve","molesto"],
        "Sharp": ["agudo","punzante","cortante"],
        "Pulsating": ["puls√°til","palpitante"],
        "Pressing": ["opresivo","presi√≥n","apretado"]
    }
}

RED_FLAG_SYNS = {
    "ru": {
        "–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": ["–≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø","–∂–∞—Ä","39","40"],
        "–†–≤–æ—Ç–∞": ["—Ä–≤–æ—Ç–∞","—Ç–æ—à–Ω–∏—Ç –∏ —Ä–≤","–±–ª—é—ë—Ç","–±–ª—é–µ—Ç"],
        "–°–ª–∞–±–æ—Å—Ç—å/–æ–Ω–µ–º–µ–Ω–∏–µ": ["–æ–Ω–µ–º","—Å–ª–∞–±–æ—Å—Ç—å –≤ –∫–æ–Ω–µ—á","–ø—Ä–æ–≤–∏—Å–ª–æ","–∞—Å–∏–º–º–µ—Ç—Ä–∏—è"],
        "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è": ["—Ä–µ—á—å","–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–µ","–∑—Ä–µ–Ω–∏–µ","–¥–≤–æ–∏—Ç","–∏—Å–∫—Ä—ã"],
        "–¢—Ä–∞–≤–º–∞": ["—Ç—Ä–∞–≤–º–∞","—É–¥–∞—Ä","–ø–∞–¥–µ–Ω–∏–µ","–∞–≤–∞—Ä–∏—è"],
        "–ù–µ—Ç": ["–Ω–µ—Ç","–Ω–∏—á–µ–≥–æ","none","–Ω–µ–º–∞","–≤—ñ–¥—Å—É—Ç"]
    },
    "uk": {
        "–í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": ["–≤–∏—Å–æ–∫–∞ —Ç–µ–º–ø","–∂–∞—Ä","39","40"],
        "–ë–ª—é–≤–∞–Ω–Ω—è": ["–±–ª—é–≤–∞–Ω","—Ä–≤–æ—Ç–∞"],
        "–°–ª–∞–±–∫—ñ—Å—Ç—å/–æ–Ω—ñ–º—ñ–Ω–Ω—è": ["–æ–Ω—ñ–º","—Å–ª–∞–±–∫","–ø—Ä–æ–≤–∏—Å–ª–æ"],
        "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–æ–≤–æ—é/–∑–æ—Ä–æ–º": ["–º–æ–≤–∞","–≥–æ–≤–æ—Ä–∏—Ç–∏","–∑—ñ—Ä","–¥–≤–æ—ó—Ç—å"],
        "–¢—Ä–∞–≤–º–∞": ["—Ç—Ä–∞–≤–º–∞","—É–¥–∞—Ä","–ø–∞–¥—ñ–Ω–Ω—è","–∞–≤–∞—Ä—ñ—è"],
        "–ù–µ–º–∞—î": ["–Ω–µ–º–∞","–Ω—ñ","–≤—ñ–¥—Å—É—Ç","none"]
    },
    "en": {
        "High fever": ["high fever","fever","39","102"],
        "Vomiting": ["vomit","throwing up"],
        "Weakness/numbness": ["numb","weakness","droop"],
        "Speech/vision problems": ["speech","vision","double"],
        "Trauma": ["trauma","injury","fall","accident"],
        "None": ["none","no"]
    },
    "es": {
        "High fever": ["fiebre alta","fiebre","39","40"],
        "Vomiting": ["v√≥mito","vomitar"],
        "Weakness/numbness": ["debilidad","entumecimiento","ca√≠da facial"],
        "Speech/vision problems": ["habla","visi√≥n","doble"],
        "Trauma": ["trauma","lesi√≥n","ca√≠da","accidente"],
        "None": ["ninguno","no"]
    }
}

def _match_from_syns(text: str, lang: str, syns: dict) -> Optional[str]:
    s = (text or "").lower()
    for label, keys in syns.get(lang, {}).items():
        for kw in keys:
            if re.search(rf"\b{re.escape(kw)}\b", s):
                return label
    best = ("", 0.0)
    for label, keys in syns.get(lang, {}).items():
        for kw in keys:
            r = SequenceMatcher(None, kw, s).ratio()
            if r > best[1]:
                best = (label, r)
    return best[0] if best[1] >= 0.72 else None

def _classify_duration(text: str, lang: str) -> Optional[str]:
    s = (text or "").lower()
    if re.search(r"\b([0-2]?\d)\s*(–º–∏–Ω|—Ö–≤|min)\b", s):
        return {"ru":"<3—á","uk":"<3–≥–æ–¥","en":"<3h","es":"<3h"}[lang]
    if re.search(r"\b([0-9]|1\d|2[0-4])\s*(—á–∞—Å|–≥–æ–¥|hour|hr|hora|horas)\b", s):
        n = int(re.search(r"\d+", s).group(0))
        return {"ru":"<3—á" if n<3 else "3‚Äì24—á",
                "uk":"<3–≥–æ–¥" if n<3 else "3‚Äì24–≥–æ–¥",
                "en":"<3h" if n<3 else "3‚Äì24h",
                "es":"<3h" if n<3 else "3‚Äì24h"}[lang]
    if re.search(r"\b(–¥–µ–Ω—å|–¥–Ω—è|day|d√≠a)\b", s):
        return {"ru":">1 –¥–Ω—è","uk":">1 –¥–Ω—è","en":">1 day","es":">1 day"}[lang]
    if re.search(r"\b(—Ç–∏–∂|–Ω–µ–¥–µ–ª|week|semana)\b", s):
        return {"ru":">1 –Ω–µ–¥–µ–ª–∏","uk":">1 —Ç–∏–∂–Ω—è","en":">1 week","es":">1 week"}[lang]
    if re.search(r"\b(—á–∞—Å|–≥–æ–¥|hour|hr|hora)\b", s):
        return {"ru":"3‚Äì24—á","uk":"3‚Äì24–≥–æ–¥","en":"3‚Äì24h","es":"3‚Äì24h"}[lang]
    return None

# -------- Health60 (quick triage) --------
SYS_H60 = (
    "You are TendAI ‚Äî a concise, warm, professional health & longevity assistant (not a doctor). "
    "Always answer strictly in {lang}. Keep it short and practical. "
    "Given a symptom text and a brief user profile, produce a compact JSON ONLY with keys: "
    "{\"causes\": [\"...\"], \"serious\": \"...\", \"do_now\": [\"...\"], \"see_doctor\": [\"...\"]}. "
    "Rules: 2‚Äì4 simple causes (lay language), exactly 1 serious item to rule out, "
    "3‚Äì5 \"do_now\" concrete steps for the next 24‚Äì48h, 2‚Äì3 \"see_doctor\" cues (when to seek care). "
    "No extra keys, no prose outside JSON."
)

def _fmt_bullets(items: list) -> str:
    return "\n".join([f"‚Ä¢ {x}" for x in items if isinstance(x, str) and x.strip()])

def health60_make_plan(lang: str, symptom_text: str, profile: dict) -> str:
    fallback_map = {
        "ru": (
            f"{T['ru']['h60_t1']}:\n‚Ä¢ –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –±—ã—Ç–æ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã\n"
            f"{T['ru']['h60_serious']}: ‚Ä¢ –ò—Å–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∫–∏–µ, –Ω–æ —Å–µ—Ä—å—ë–∑–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏\n\n"
            f"{T['ru']['h60_t2']}:\n‚Ä¢ –í–æ–¥–∞ 300‚Äì500 –º–ª\n‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–¥—ã—Ö 15‚Äì20 –º–∏–Ω\n‚Ä¢ –ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ, –º–µ–Ω—å—à–µ —ç–∫—Ä–∞–Ω–æ–≤\n\n"
            f"{T['ru']['h60_t3']}:\n‚Ä¢ –£—Å–∏–ª–µ–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤\n‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª\n‚Ä¢ –ë–æ–ª—å ‚â•7/10"
        ),
        "uk": (
            f"{T['uk']['h60_t1']}:\n‚Ä¢ –ù–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ –ø–æ–±—É—Ç–æ–≤—ñ –ø—Ä–∏—á–∏–Ω–∏\n"
            f"{T['uk']['h60_serious']}: ‚Ä¢ –í–∏–∫–ª—é—á–∏—Ç–∏ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ, –∞–ª–µ —Å–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–∞–Ω–∏ –ø—Ä–∏ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—ñ\n\n"
            f"{T['uk']['h60_t2']}:\n‚Ä¢ –í–æ–¥–∞ 300‚Äì500 –º–ª\n‚Ä¢ –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ 15‚Äì20 —Ö–≤\n‚Ä¢ –ü—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è, –º–µ–Ω—à–µ –µ–∫—Ä–∞–Ω—ñ–≤\n\n"
            f"{T['uk']['h60_t3']}:\n‚Ä¢ –ü–æ—Å–∏–ª–µ–Ω–Ω—è —Å–∏–º–ø—Ç–æ–º—ñ–≤\n‚Ä¢ –í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/¬´—á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ¬ª\n‚Ä¢ –ë—ñ–ª—å ‚â•7/10"
        ),
        "en": (
            f"{T['en']['h60_t1']}:\n‚Ä¢ Most likely everyday causes\n"
            f"{T['en']['h60_serious']}: ‚Ä¢ Rule out rare but serious issues if worsening\n\n"
            f"{T['en']['h60_t2']}:\n‚Ä¢ Drink 300‚Äì500 ml water\n‚Ä¢ 15‚Äì20 min rest\n‚Ä¢ Ventilate, reduce screens\n\n"
            f"{T['en']['h60_t3']}:\n‚Ä¢ Worsening symptoms\n‚Ä¢ High fever/red flags\n‚Ä¢ Pain ‚â•7/10"
        ),
    }
    fallback = fallback_map.get(lang, fallback_map["en"])

    if not oai:
        return fallback

    sys = SYS_H60.replace("{lang}", lang)
    user = {
        "symptom": (symptom_text or "").strip()[:500],
        "profile": {k: profile.get(k, "") for k in ["sex","age","goal","conditions","meds","sleep","activity","diet"]}
    }
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.2,
            max_tokens=420,
            response_format={"type": "json_object"},
            messages=[
                {"role":"system","content": sys},
                {"role":"user","content": json.dumps(user, ensure_ascii=False)}
            ]
        )
        data = json.loads(resp.choices[0].message.content.strip())
        causes = _fmt_bullets(data.get("causes") or [])
        serious = (data.get("serious") or "").strip()
        do_now = _fmt_bullets(data.get("do_now") or [])
        see_doc = _fmt_bullets(data.get("see_doctor") or [])

        parts = []
        if causes:
            parts.append(f"{T[lang]['h60_t1']}:\n{causes}")
        if serious:
            parts.append(f"{T[lang]['h60_serious']}: {serious}")
        if do_now:
            parts.append(f"\n{T[lang]['h60_t2']}:\n{do_now}")
        if see_doc:
            parts.append(f"\n{T[lang]['h60_t3']}:\n{see_doc}")
        return "\n".join(parts).strip()
    except Exception as e:
        logging.error(f"health60 LLM error: {e}")
        return fallback

# ------------- Commands & init -------------
async def post_init(app):
    me = await app.bot.get_me()
    logging.info(f"BOT READY: @{me.username} (id={me.id})")

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = norm_lang(getattr(user, "language_code", None))
    users_upsert(user.id, user.username or "", lang)
    context.user_data["lang"] = lang
    sessions.setdefault(user.id, {})["last_user_text"] = "/start"

    await update.message.reply_text(T[lang]["welcome"], reply_markup=ReplyKeyboardRemove())
    await update.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang))

    if not profiles_get(user.id) and not context.user_data.get(GATE_FLAG_KEY):
        await gate_show(update, context)

    u = users_get(user.id)
    if (u.get("consent") or "").lower() not in {"yes","no"}:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang]["yes"], callback_data="consent|yes"),
                                    InlineKeyboardButton(T[lang]["no"], callback_data="consent|no")]])
        await update.message.reply_text(T[lang]["ask_consent"], reply_markup=kb)

    tz_off = int(str(u.get("tz_offset") or "0"))
    hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, user.id, tz_off, hhmm, lang)
    else:
        logging.warning("JobQueue not available on /start ‚Äì daily check-in not scheduled.")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or "en")
    await update.message.reply_text(T[lang]["help"])

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or "en")
    await update.message.reply_text(T[lang]["privacy"])

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "yes")
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text(T[lang]["paused_on"])

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "no")
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text(T[lang]["paused_off"])

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if SHEETS_ENABLED:
        vals = ws_users.get_all_values()
        for i in range(2, len(vals)+1):
            if ws_users.cell(i,1).value == str(uid):
                ws_users.delete_rows(i); break
    else:
        MEM_USERS.pop(uid, None); MEM_PROFILES.pop(uid, None)
        global MEM_EPISODES, MEM_REMINDERS, MEM_DAILY
        MEM_EPISODES = [r for r in MEM_EPISODES if r["user_id"]!=str(uid)]
        MEM_REMINDERS = [r for r in MEM_REMINDERS if r["user_id"]!=str(uid)]
        MEM_DAILY = [r for r in MEM_DAILY if r["user_id"]!=str(uid)]
    lang = norm_lang(getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(T[lang]["deleted"], reply_markup=ReplyKeyboardRemove())

async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user, "language_code", None))
    await start_profile_ctx(context, update.effective_chat.id, lang, uid)

async def cmd_settz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    parts = (update.message.text or "").split()
    if len(parts)<2 or not re.fullmatch(r"[+-]?\d{1,2}", parts[1]):
        await update.message.reply_text({"ru":"–§–æ—Ä–º–∞—Ç: /settz +3","uk":"–§–æ—Ä–º–∞—Ç: /settz +2",
                                         "en":"Usage: /settz +3","es":"Uso: /settz +3"}[lang]); return
    off = int(parts[1]); users_set(uid,"tz_offset",str(off))
    hhmm = users_get(uid).get("checkin_hour") or DEFAULT_CHECKIN_LOCAL
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, uid, off, hhmm, lang)
    await update.message.reply_text({"ru":f"–°–¥–≤–∏–≥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {off}—á",
                                     "uk":f"–ó—Å—É–≤: {off} –≥–æ–¥",
                                     "en":f"Timezone offset: {off}h",
                                     "es":f"Desfase horario: {off}h"}[lang])

async def cmd_checkin_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    parts = (update.message.text or "").split(maxsplit=1)
    hhmm = DEFAULT_CHECKIN_LOCAL
    if len(parts)==2:
        m = re.search(r'([01]?\d|2[0-3]):([0-5]\d)', parts[1])
        if m:
            hhmm = m.group(0)
    users_set(uid,"checkin_hour",hhmm)
    tz_off = int(str(users_get(uid).get("tz_offset") or "0"))
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, uid, tz_off, hhmm, lang)
    else:
        logging.warning("JobQueue not available ‚Äì daily check-in not scheduled.")
    await update.message.reply_text({"ru":f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤–∫–ª—é—á—ë–Ω ({hhmm}).",
                                     "uk":f"–©–æ–¥–µ–Ω–Ω–∏–π —á–µ–∫-—ñ–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–æ ({hhmm}).",
                                     "en":f"Daily check-in enabled ({hhmm}).",
                                     "es":f"Check-in diario activado ({hhmm})."}[lang])

async def cmd_checkin_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if _has_jq_ctx(context):
        for j in context.application.job_queue.get_jobs_by_name(f"daily_{uid}"):
            j.schedule_removal()
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text({"ru":"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤—ã–∫–ª—é—á–µ–Ω.",
                                     "uk":"–©–æ–¥–µ–Ω–Ω–∏–π —á–µ–∫-—ñ–Ω –≤–∏–º–∫–Ω–µ–Ω–æ.",
                                     "en":"Daily check-in disabled.",
                                     "es":"Check-in diario desactivado."}[lang])

async def cmd_health60(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user, "language_code", None))
    sessions.setdefault(uid, {})["awaiting_h60"] = True
    await update.message.reply_text(T[lang]["h60_intro"])

async def cmd_ru(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "ru")
    await update.message.reply_text("–û–∫, –¥–∞–ª—å—à–µ –æ—Ç–≤–µ—á–∞—é –ø–æ-—Ä—É—Å—Å–∫–∏.")

async def cmd_en(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "en")
    await update.message.reply_text("OK, I‚Äôll reply in English.")

async def cmd_uk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "uk")
    await update.message.reply_text("–û–∫, –Ω–∞–¥–∞–ª—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏–º—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.")

async def cmd_es(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "es")
    await update.message.reply_text("De acuerdo, responder√© en espa√±ol.")

# === –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /intake (PRO-–æ–ø—Ä–æ—Å 6 –≤–æ–ø—Ä–æ—Å–æ–≤) ===
async def cmd_intake(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user, "language_code", None) or "en")
    txt  = {"ru":"üß© PRO-–æ–ø—Ä–æ—Å: 6 –∫–ª—é—á–µ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
            "uk":"üß© PRO-–æ–ø–∏—Ç–Ω–∏–∫: 6 –∫–ª—é—á–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å. –ü–æ—á–∏–Ω–∞—î–º–æ?",
            "en":"üß© PRO intake: 6 quick questions. Ready?",
            "es":"üß© PRO intake: 6 quick questions. Ready?"}[lang]
    start_label = {"ru":"‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å","uk":"‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏","en":"‚ñ∂Ô∏è Start","es":"‚ñ∂Ô∏è Start"}[lang]
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(start_label, callback_data="intake:start")]])
    await update.message.reply_text(txt, reply_markup=kb)


# ------------- Pain / Profile helpers -------------
def detect_or_choose_topic(lang: str, text: str) -> Optional[str]:
    return None

async def start_profile_ctx(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    sessions[uid] = {"profile_active": True, "p_step": 0, "p_wait_key": None}
    await context.bot.send_message(chat_id, T[lang]["profile_intro"], reply_markup=ReplyKeyboardRemove())
    step = PROFILE_STEPS[0]
    kb = build_profile_kb(lang, step["key"], step["opts"][lang])
    await context.bot.send_message(chat_id, T[lang]["p_step_1"], reply_markup=kb)

async def advance_profile_ctx(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    s = sessions.get(uid, {})
    s["p_step"] += 1
    if s["p_step"] < len(PROFILE_STEPS):
        idx = s["p_step"]; step = PROFILE_STEPS[idx]
        kb = build_profile_kb(lang, step["key"], step["opts"][lang])
        await context.bot.send_message(chat_id, T[lang][f"p_step_{idx+1}"], reply_markup=kb)
        return
    prof = profiles_get(uid); summary=[]
    for k in ["sex","age","goal","conditions","meds","sleep","activity","diet"]:
        v = prof.get(k) or sessions.get(uid,{}).get(k,"")
        if v: summary.append(f"{k}: {v}")
    profiles_upsert(uid, {})
    sessions[uid]["profile_active"] = False
    await context.bot.send_message(chat_id, T[lang]["saved_profile"] + "; ".join(summary))
    await context.bot.send_message(chat_id, T[lang]["start_where"], reply_markup=inline_topic_kb(lang))

def personalized_prefix(lang: str, profile: dict) -> str:
    sex = profile.get("sex") or ""
    age = profile.get("age") or ""
    goal = profile.get("goal") or ""
    if not (sex or age or goal):
        return ""
    return T[lang]["px"].format(sex=sex or "‚Äî", age=age or "‚Äî", goal=goal or "‚Äî")

# ------------- Plans / Serious conditions -------------
def pain_plan(lang: str, red_flags_selected: List[str], profile: dict) -> List[str]:
    flg = [s for s in red_flags_selected if s and str(s).lower() not in ["none","–Ω–µ—Ç","–Ω–µ–º–∞—î","ninguno","no"]]
    if flg:
        return {
            "ru":["‚ö†Ô∏è –ï—Å—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏. –õ—É—á—à–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –≤—Ä–∞—á—É/–≤ —Å–∫–æ—Ä—É—é."],
            "uk":["‚ö†Ô∏è –Ñ —Ç—Ä–∏–≤–æ–∂–Ω—ñ –æ–∑–Ω–∞–∫–∏. –í–∞—Ä—Ç–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è/—à–≤–∏–¥–∫–æ—ó."],
            "en":["‚ö†Ô∏è Red flags present. Please seek urgent medical evaluation."],
            "es":["‚ö†Ô∏è Se√±ales de alarma presentes. Busca evaluaci√≥n m√©dica urgente."]
        }[lang]
    age = int(re.search(r"\d+", str(profile.get("age") or "0")).group(0)) if re.search(r"\d+", str(profile.get("age") or "")) else 0
    extra = []
    if age >= 60:
        extra.append({
            "ru":"–í–∞–º 60+, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –ù–ü–í–ü; –ø–µ–π—Ç–µ –≤–æ–¥—É –∏ –ø—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É.",
            "uk":"–í–∞–º 60+, –æ–±–µ—Ä–µ–∂–Ω–æ –∑ –ù–ü–ó–ó; –ø–∏–π—Ç–µ –≤–æ–¥—É, –∑–∞ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è ‚Äî –¥–æ –ª—ñ–∫–∞—Ä—è.",
            "en":"Age 60+: be careful with NSAIDs; hydrate and seek care if worsening.",
            "es":"Edad 60+: cuidado con AINEs; hidr√°tate y busca atenci√≥n si empeora."
        }[lang])
    core = {
        "ru":[
            "1) –í–æ–¥–∞ 400‚Äì600 –º–ª –∏ 15‚Äì20 –º–∏–Ω —Ç–∏—à–∏–Ω—ã/–æ—Ç–¥—ã—Ö–∞.",
            "2) –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –∏–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ —Å –µ–¥–æ–π.",
            "3) –ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å, —É–º–µ–Ω—å—à–∏—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞ 30‚Äì60 –º–∏–Ω.",
            "–¶–µ–ª—å: –∫ –≤–µ—á–µ—Ä—É –±–æ–ª—å ‚â§3/10."
        ],
        "uk":[
            "1) –í–æ–¥–∞ 400‚Äì600 –º–ª —ñ 15‚Äì20 —Ö–≤ —Å–ø–æ–∫–æ—é.",
            "2) –Ø–∫—â–æ –Ω–µ–º–∞ –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω—å ‚Äî —ñ–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –∑ —ó–∂–µ—é.",
            "3) –ü—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏, –º–µ–Ω—à–µ –µ–∫—Ä–∞–Ω—É 30‚Äì60 —Ö–≤.",
            "–ú–µ—Ç–∞: –¥–æ –≤–µ—á–æ—Ä–∞ –±—ñ–ª—å ‚â§3/10."
        ],
        "en":[
            "1) Drink 400‚Äì600 ml water; rest 15‚Äì20 min.",
            "2) If no contraindications ‚Äî ibuprofen 200‚Äì400 mg once with food.",
            "3) Air the room; reduce screen time 30‚Äì60 min.",
            "Goal: by evening pain ‚â§3/10."
        ],
        "es":[
            "1) Bebe 400‚Äì600 ml de agua; descansa 15‚Äì20 min.",
            "2) Si no hay contraindicaciones ‚Äî ibuprofeno 200‚Äì400 mg una vez con comida.",
            "3) Ventila la habitaci√≥n; reduce pantallas 30‚Äì60 min.",
            "Meta: por la tarde dolor ‚â§3/10."
        ],
    }[lang]
    return core + extra + [T[lang]["er_text"]]

SERIOUS_KWS = {
    "diabetes": ["diabetes","–¥–∏–∞–±–µ—Ç","—Å–∞—Ö–∞—Ä–Ω—ã–π","—Ü—É–∫—Ä–æ–≤", "–≥–ª—é–∫–æ–∑–∞", "hba1c", "–≥–ª–∏–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π","–≥–ª—é–∫–æ–∑–∞"],
    "hepatitis": ["hepatitis","–≥–µ–ø–∞—Ç–∏—Ç","–ø–µ—á–µ–Ω—å hbs","hcv","alt","ast"],
    "cancer": ["cancer","—Ä–∞–∫","–æ–Ω–∫–æ","–æ–Ω–∫–æ–ª–æ–≥","–æ–ø—É—Ö–æ–ª","–ø—É—Ö–ª–∏–Ω–∞","tumor"],
    "tb": ["tuberculosis","tb","—Ç—É–±–µ—Ä–∫—É–ª","—Ç—É–±–µ—Ä–∫—É–ª—å–æ–∑"],
}

def detect_serious(text: str) -> Optional[str]:
    low = (text or "").lower()
    for cond, kws in SERIOUS_KWS.items():
        if any(k in low for k in kws):
            return cond
    return None

def serious_plan(lang: str, cond: str, profile: dict) -> List[str]:
    age = int(re.search(r"\d+", str(profile.get("age") or "0")).group(0)) if re.search(r"\d+", str(profile.get("age") or "")) else 0
    if cond=="diabetes":
        base = {
            "ru":[
                "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –¥–∏–∞–±–µ—Ç/–∫–æ–Ω—Ç—Ä–æ–ª—å: –∞–Ω–∞–ª–∏–∑—ã ‚Äî –≥–ª—é–∫–æ–∑–∞ –Ω–∞—Ç–æ—â–∞–∫, HbA1c, –ª–∏–ø–∏–¥–æ–≥—Ä–∞–º–º–∞, –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω.",
                "–í—Ä–∞—á: —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥ –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì2 –Ω–µ–¥–µ–ª—å.",
                "–ü–æ—Ä–æ–≥ —Å—Ä–æ—á–Ω–æ: —Å–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å, –∂–∞–∂–¥–∞/–º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏–µ + —Ä–≤–æ—Ç–∞, –≥–ª—é–∫–æ–∑–∞ > 16 –º–º–æ–ª—å/–ª ‚Äî –Ω–µ–æ—Ç–ª–æ–∂–∫–∞.",
            ],
            "uk":[
                "–ü—ñ–¥–æ–∑—Ä–∞ –Ω–∞ –¥—ñ–∞–±–µ—Ç/–∫–æ–Ω—Ç—Ä–æ–ª—å: –∞–Ω–∞–ª—ñ–∑–∏ ‚Äî –≥–ª—é–∫–æ–∑–∞ –Ω–∞—Ç—â–µ, HbA1c, –ª—ñ–ø—ñ–¥–æ–≥—Ä–∞–º–∞, –∫—Ä–µ–∞—Ç–∏–Ω—ñ–Ω.",
                "–õ—ñ–∫–∞—Ä: –µ–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥ —É–ø—Ä–æ–¥–æ–≤–∂ 1‚Äì2 —Ç–∏–∂–Ω—ñ–≤.",
                "–¢–µ—Ä–º—ñ–Ω–æ–≤–æ: —Å–ø–ª—É—Ç–∞–Ω—ñ—Å—Ç—å, —Å–∏–ª—å–Ω–∞ —Å–ø—Ä–∞–≥–∞/—Å–µ—á–æ–≤–∏–¥—ñ–ª–µ–Ω–Ω—è + –±–ª—é–≤–∞–Ω–Ω—è, –≥–ª—é–∫–æ–∑–∞ > 16 –º–º–æ–ª—å/–ª ‚Äî –Ω–µ–≤—ñ–¥–∫–ª–∞–¥–Ω–∞.",
            ],
            "en":[
                "Suspected diabetes/control: labs ‚Äî fasting glucose, HbA1c, lipid panel, creatinine.",
                "Doctor: endocrinologist within 1‚Äì2 weeks.",
                "Urgent: confusion, polyuria/polydipsia with vomiting, glucose > 300 mg/dL ‚Äî emergency.",
            ],
            "es":[
                "Sospecha de diabetes/control: an√°lisis ‚Äî glucosa en ayunas, HbA1c, perfil lip√≠dico, creatinina.",
                "M√©dico: endocrin√≥logo en 1‚Äì2 semanas.",
                "Urgente: confusi√≥n, poliuria/polidipsia con v√≥mitos, glucosa > 300 mg/dL ‚Äî emergencia.",
            ],
        }[lang]
        if age>=40:
            base += [{"ru":f"–í–æ–∑—Ä–∞—Å—Ç {age}+: —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω —Å–∫—Ä–∏–Ω–∏–Ω–≥ —Ä–µ—Ç–∏–Ω–æ–ø–∞—Ç–∏–∏ –∏ –ø–æ—á–µ–∫.",
                      "uk":f"–í—ñ–∫ {age}+: —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Å–∫—Ä–∏–Ω—ñ–Ω–≥ —Ä–µ—Ç–∏–Ω–æ–ø–∞—Ç—ñ—ó —Ç–∞ –Ω–∏—Ä–æ–∫.",
                      "en":f"Age {age}+: screen for retinopathy and kidney disease.",
                      "es":f"Edad {age}+: cribado de retinopat√≠a y ri√±√≥n."}[lang]]
        return base + [T[lang]["er_text"]]
    if cond=="hepatitis":
        return {
            "ru":[ "–í–æ–∑–º–æ–∂–µ–Ω –≥–µ–ø–∞—Ç–∏—Ç: –∞–Ω–∞–ª–∏–∑—ã ‚Äî ALT/AST, –±–∏–ª–∏—Ä—É–±–∏–Ω, HBsAg, –∞–Ω—Ç–∏-HCV.",
                   "–í—Ä–∞—á: –≥–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥/–∏–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç –≤ 1‚Äì2 –Ω–µ–¥–µ–ª–∏.",
                   "–°—Ä–æ—á–Ω–æ: –∂–µ–ª—Ç—É—Ö–∞, —Ç—ë–º–Ω–∞—è –º–æ—á–∞, —Å–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å ‚Äî –Ω–µ–æ—Ç–ª–æ–∂–∫–∞."],
            "uk":[ "–ô–º–æ–≤—ñ—Ä–Ω–∏–π –≥–µ–ø–∞—Ç–∏—Ç: –∞–Ω–∞–ª—ñ–∑–∏ ‚Äî ALT/AST, –±—ñ–ª—ñ—Ä—É–±—ñ–Ω, HBsAg, anti-HCV.",
                   "–õ—ñ–∫–∞—Ä: –≥–∞—Å—Ç—Ä–æ–µ–Ω—Ç–µ—Ä–æ–ª–æ–≥/—ñ–Ω—Ñ–µ–∫—Ü—ñ–æ–Ω—ñ—Å—Ç –∑–∞ 1‚Äì2 —Ç–∏–∂–Ω—ñ.",
                   "–¢–µ—Ä–º—ñ–Ω–æ–≤–æ: –∂–æ–≤—Ç—è–Ω–∏—Ü—è, —Ç–µ–º–Ω–∞ —Å–µ—á–∞, —Å–ø–ª—É—Ç–∞–Ω—ñ—Å—Ç—å ‚Äî –Ω–µ–≤—ñ–¥–∫–ª–∞–¥–Ω–∞."],
            "en":[ "Possible hepatitis: labs ‚Äî ALT/AST, bilirubin, HBsAg, anti-HCV.",
                   "Doctor: GI/hepatology or ID in 1‚Äì2 weeks.",
                   "Urgent: jaundice, dark urine, confusion ‚Äî emergency."],
            "es":[ "Posible hepatitis: an√°lisis ‚Äî ALT/AST, bilirrubina, HBsAg, anti-HCV.",
                   "M√©dico: GI/hepatolog√≠a o infecciosas en 1‚Äì2 semanas.",
                   "Urgente: ictericia, orina oscura, confusi√≥n ‚Äî emergencia."],
        }[lang] + [T[lang]["er_text"]]
    if cond=="cancer":
        return {
            "ru":[ "–¢–µ–º–∞ –æ–Ω–∫–æ–ª–æ–≥–∏–∏: –æ—Ü–µ–Ω–∫–∞ —É –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ –æ–Ω–∫–æ–ª–æ–≥–∞ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ (1‚Äì2 –Ω–µ–¥–µ–ª–∏).",
                   "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ö–¢/–ú–†–¢/–±–∏–æ–ø—Å–∏–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏.",
                   "–°—Ä–æ—á–Ω–æ: –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ, –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∞—è –æ–¥—ã—à–∫–∞/–±–æ–ª—å, —Ä–µ–∑–∫–∞—è —Å–ª–∞–±–æ—Å—Ç—å ‚Äî –Ω–µ–æ—Ç–ª–æ–∂–∫–∞."],
            "uk":[ "–û–Ω–∫–æ—Ç–µ–º–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –æ–Ω–∫–æ–ª–æ–≥–∞ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ (1‚Äì2 —Ç–∏–∂–Ω—ñ).",
                   "–ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ –≤–∏–ø–∏—Å–∫–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ö–¢/–ú–†–¢/–±—ñ–æ–ø—Å—ñ—ó –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.",
                   "–¢–µ—Ä–º—ñ–Ω–æ–≤–æ: –∫—Ä–æ–≤–æ—Ç–µ—á–∞, –Ω–∞—Ä–æ—Å—Ç–∞—é—á–∞ –∑–∞–¥–∏—à–∫–∞/–±—ñ–ª—å, —Ä—ñ–∑–∫–∞ —Å–ª–∞–±–∫—ñ—Å—Ç—å ‚Äî –Ω–µ–≤—ñ–¥–∫–ª–∞–¥–Ω–∞."],
            "en":[ "Oncology topic: see an oncologist asap (1‚Äì2 weeks).",
                   "Prepare records and any CT/MRI/biopsy results.",
                   "Urgent: bleeding, worsening dyspnea/pain, profound weakness ‚Äî emergency."],
            "es":[ "Oncolog√≠a: valoraci√≥n por onc√≥logo lo antes posible (1‚Äì2 semanas).",
                   "Prepare informes y resultados de TC/RM/biopsia si hay.",
                   "Urgente: sangrado, disnea/dolor en aumento, gran debilidad ‚Äî emergencia."],
        }[lang] + [T[lang]["er_text"]]
    if cond=="tb":
        return {
            "ru":[ "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —Ç—É–±–µ—Ä–∫—É–ª—ë–∑: —Ñ–ª—é–æ—Ä–æ–≥—Ä–∞—Ñ–∏—è/—Ä–µ–Ω—Ç–≥–µ–Ω, –∞–Ω–∞–ª–∏–∑ –º–æ–∫—Ä–æ—Ç—ã (–º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—è/–ü–¶–†).",
                   "–í—Ä–∞—á: —Ñ—Ç–∏–∑–∏–∞—Ç—Ä.",
                   "–°—Ä–æ—á–Ω–æ: –∫—Ä–æ–≤–æ—Ö–∞—Ä–∫–∞–Ω—å–µ, –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å –æ–¥—ã—à–∫–æ–π ‚Äî –Ω–µ–æ—Ç–ª–æ–∂–∫–∞."],
            "uk":[ "–ü—ñ–¥–æ–∑—Ä–∞ –Ω–∞ —Ç—É–±–µ—Ä–∫—É–ª—å–æ–∑: —Ñ–ª—é–æ—Ä–æ–≥—Ä–∞—Ñ—ñ—è/—Ä–µ–Ω—Ç–≥–µ–Ω, –∞–Ω–∞–ª—ñ–∑ –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è (–º—ñ–∫—Ä–æ—Å–∫–æ–ø—ñ—è/–ü–õ–†).",
                   "–õ—ñ–∫–∞—Ä: —Ñ—Ç–∏–∑—ñ–∞—Ç—Ä.",
                   "–¢–µ—Ä–º—ñ–Ω–æ–≤–æ: –∫—Ä–æ–≤–æ—Ö–∞—Ä–∫–∞–Ω–Ω—è, –≤–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑ –∑–∞–¥–∏—à–∫–æ—é ‚Äî –Ω–µ–≤—ñ–¥–∫–ª–∞–¥–Ω–∞."],
            "en":[ "Suspected TB: chest X-ray and sputum tests (microscopy/PCR).",
                   "Doctor: TB specialist.",
                   "Urgent: hemoptysis, high fever with breathlessness ‚Äî emergency."],
            "es":[ "Sospecha de TB: radiograf√≠a de t√≥rax y esputo (microscop√≠a/PCR).",
                   "M√©dico: especialista en TB.",
                   "Urgente: hemoptisis, fiebre alta con disnea ‚Äî emergencia."],
        }[lang] + [T[lang]["er_text"]]
    return [T[lang]["unknown"]]

# ------------- Profile (intake ‚Äî —Å—Ç–∞—Ä—ã–π 8 —à–∞–≥–æ–≤ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) -------------
PROFILE_STEPS = [
    {"key":"sex","opts":{
        "ru":[("–ú—É–∂—Å–∫–æ–π","male"),("–ñ–µ–Ω—Å–∫–∏–π","female"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("Male","male"),("Female","female"),("Other","other")],
        "uk":[("–ß–æ–ª–æ–≤—ñ—á–∞","male"),("–ñ—ñ–Ω–æ—á–∞","female"),("–Ü–Ω—à–∞","other")],
        "es":[("Hombre","male"),("Mujer","female"),("Otro","other")],
    }},
    {"key":"age","opts":{
        "ru":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "en":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "uk":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "es":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
    }},
    {"key":"goal","opts":{
        "ru":[("–ü–æ—Ö—É–¥–µ–Ω–∏–µ","weight"),("–≠–Ω–µ—Ä–≥–∏—è","energy"),("–°–æ–Ω","sleep"),("–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ","longevity"),("–°–∏–ª–∞","strength")],
        "en":[("Weight","weight"),("Energy","energy"),("Sleep","sleep"),("Longevity","longevity"),("Strength","strength")],
        "uk":[("–í–∞–≥–∞","weight"),("–ï–Ω–µ—Ä–≥—ñ—è","energy"),("–°–æ–Ω","sleep"),("–î–æ–≤–≥–æ–ª—ñ—Ç—Ç—è","longevity"),("–°–∏–ª–∞","strength")],
        "es":[("Peso","weight"),("Energ√≠a","energy"),("Sue√±o","sleep"),("Longevidad","longevity"),("Fuerza","strength")],
    }},
    {"key":"conditions","opts":{
        "ru":[("–ù–µ—Ç","none"),("–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è","hypertension"),("–î–∏–∞–±–µ—Ç","diabetes"),("–©–∏—Ç–æ–≤–∏–¥–∫–∞","thyroid"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("None","none"),("Hypertension","hypertension"),("Diabetes","diabetes"),("Thyroid","thyroid"),("Other","other")],
        "uk":[("–ù–µ–º–∞—î","none"),("–ì—ñ–ø–µ—Ä—Ç–æ–Ω—ñ—è","hypertension"),("–î—ñ–∞–±–µ—Ç","diabetes"),("–©–∏—Ç–æ–ø–æ–¥—ñ–±–Ω–∞","thyroid"),("–Ü–Ω—à–µ","other")],
        "es":[("Ninguna","none"),("Hipertensi√≥n","hypertension"),("Diabetes","diabetes"),("Tiroides","thyroid"),("Otra","other")],
    }},
    {"key":"meds","opts":{
        "ru":[("–ù–µ—Ç","none"),("–ú–∞–≥–Ω–∏–π","magnesium"),("–í–∏—Ç–∞–º–∏–Ω D","vitd"),("–ê–ª–ª–µ—Ä–≥–∏–∏ –µ—Å—Ç—å","allergies"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("None","none"),("Magnesium","magnesium"),("Vitamin D","vitd"),("Allergies","allergies"),("Other","other")],
        "uk":[("–ù–µ–º–∞—î","none"),("–ú–∞–≥–Ω—ñ–π","magnesium"),("–í—ñ—Ç–∞–º—ñ–Ω D","vitd"),("–ê–ª–µ—Ä–≥—ñ—ó","allergies"),("–Ü–Ω—à–µ","other")],
        "es":[("Ninguno","none"),("Magnesio","magnesium"),("Vitamina D","vitd"),("Alergias","allergies"),("Otro","other")],
    }},
    {"key":"sleep","opts":{
        "ru":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
        "en":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("Irregular","irregular")],
        "uk":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
        "es":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("Irregular","irregular")],
    }},
    {"key":"activity","opts":{
        "ru":[("<5–∫ —à–∞–≥–æ–≤","<5k"),("5‚Äì8–∫","5-8k"),("8‚Äì12–∫","8-12k"),("–°–ø–æ—Ä—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ","sport")],
        "en":[("<5k steps","<5k"),("5‚Äì8k","5-8k"),("8‚Äì12k","8-12k"),("Regular sport","sport")],
        "uk":[("<5–∫ –∫—Ä–æ–∫—ñ–≤","<5k"),("5‚Äì8–∫","5-8k"),("8‚Äì12–∫","8-12k"),("–°–ø–æ—Ä—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ","sport")],
        "es":[("<5k pasos","<5k"),("5‚Äì8k","5-8k"),("8‚Äì12k","8-12k"),("Deporte regular","sport")],
    }},
    {"key":"diet","opts":{
        "ru":[("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ","balanced"),("–ù–∏–∑–∫–æ—É–≥–ª/–∫–µ—Ç–æ","lowcarb"),("–í–µ–≥–µ—Ç–∞—Ä/–≤–µ–≥–∞–Ω","plant"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
        "en":[("Balanced","balanced"),("Low-carb/keto","lowcarb"),("Vegetarian/vegan","plant"),("Irregular","irregular")],
        "uk":[("–ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ","balanced"),("–ú–∞–ª–æ–≤—É–≥–ª/–∫–µ—Ç–æ","lowcarb"),("–í–µ–≥–µ—Ç–∞—Ä/–≤–µ–≥–∞–Ω","plant"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
        "es":[("Equilibrada","balanced"),("Baja en carb/keto","lowcarb"),("Vegetariana/vegana","plant"),("Irregular","irregular")],
    }},
]

def build_profile_kb(lang:str, key:str, opts:List[Tuple[str,str]])->InlineKeyboardMarkup:
    rows=[]; row=[]
    for label,val in opts:
        row.append(InlineKeyboardButton(label, callback_data=f"p|choose|{key}|{val}"))
        if len(row)==3:
            rows.append(row); row=[]
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(T[lang]["write"], callback_data=f"p|write|{key}"),
                 InlineKeyboardButton(T[lang]["skip"], callback_data=f"p|skip|{key}")])
    return InlineKeyboardMarkup(rows)
# ------------- Text handler -------------
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; uid = user.id
    text = (update.message.text or "").strip()
    logging.info(f"INCOMING uid={uid} text={text[:200]}")

    # –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    urec = users_get(uid)
    if not urec:
        lang_guess = detect_lang_from_text(text, norm_lang(getattr(user, "language_code", None)))
        users_upsert(uid, user.username or "", lang_guess)
        sessions.setdefault(uid, {})["last_user_text"] = text
        await update.message.reply_text(T[lang_guess]["welcome"], reply_markup=ReplyKeyboardRemove())
        await update.message.reply_text(T[lang_guess]["start_where"], reply_markup=inline_topic_kb(lang_guess))
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang_guess]["yes"], callback_data="consent|yes"),
                                    InlineKeyboardButton(T[lang_guess]["no"], callback_data="consent|no")]])
        await update.message.reply_text(T[lang_guess]["ask_consent"], reply_markup=kb)
        if _has_jq_ctx(context):
            schedule_daily_checkin(context.application, uid, 0, DEFAULT_CHECKIN_LOCAL, lang_guess)
        # –í–º–µ—Å—Ç–æ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è ‚Äî –º—è–≥–∫–∞—è ¬´—à—Ç–æ—Ä–∫–∞¬ª
        await gate_show(update, context)
        return

    # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞
    saved_lang = norm_lang(urec.get("lang") or getattr(user,"language_code",None))
    detected_lang = detect_lang_from_text(text, saved_lang)
    if detected_lang != saved_lang:
        users_set(uid,"lang",detected_lang)
    lang = detected_lang
    sessions.setdefault(uid, {})["last_user_text"] = text

    # —Å–µ—Ä—å—ë–∑–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã
    sc = detect_serious(text)
    if sc:
        sessions.setdefault(uid,{})["mode"] = "serious"
        sessions[uid]["serious_condition"] = sc
        prof = profiles_get(uid)
        prefix = personalized_prefix(lang, prof)
        plan = serious_plan(lang, sc, prof)
        msg = (prefix + "\n" if prefix else "") + "\n".join(plan)
        await update.message.reply_text(msg, reply_markup=inline_actions(lang))
        try:
            await update.message.reply_text(T[lang]["ask_fb"], reply_markup=inline_feedback_kb(lang))
        except Exception:
            pass
        return

    # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω ‚Äî –∑–∞–º–µ—Ç–∫–∞
    if sessions.get(uid, {}).get("awaiting_daily_comment"):
        daily_add(iso(utcnow()), uid, "note", text)
        sessions[uid]["awaiting_daily_comment"] = False
        await update.message.reply_text(T[lang]["mood_thanks"]); return

    # —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–∑—ã–≤
    if sessions.get(uid, {}).get("awaiting_free_feedback"):
        sessions[uid]["awaiting_free_feedback"] = False
        feedback_add(iso(utcnow()), uid, "free", user.username, "", text)
        await update.message.reply_text(T[lang]["fb_thanks"]); return

    # ¬´–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è¬ª ‚Äî –≥–æ—Ä–æ–¥
    if sessions.get(uid, {}).get("awaiting_city"):
        sessions[uid]["awaiting_city"] = False
        await update.message.reply_text(T[lang]["thanks"]); return

    # Health60 ‚Äî –∂–¥—ë–º —Å–∏–º–ø—Ç–æ–º
    if sessions.get(uid, {}).get("awaiting_h60"):
        sessions[uid]["awaiting_h60"] = False
        prof = profiles_get(uid)
        prefix = personalized_prefix(lang, prof)
        plan = health60_make_plan(lang, text, prof)
        msg = ((prefix + "\n") if prefix else "") + plan
        await update.message.reply_text(msg, reply_markup=inline_actions(lang))
        try:
            await update.message.reply_text(T[lang]["ask_fb"], reply_markup=inline_feedback_kb(lang))
        except Exception:
            pass
        return

    # —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è intake (—Å—Ç–∞—Ä—ã–π 8-—à–∞–≥. –ø—Ä–æ—Ñ–∏–ª—å)
    if sessions.get(uid, {}).get("p_wait_key"):
        key = sessions[uid]["p_wait_key"]; sessions[uid]["p_wait_key"] = None
        val = text
        if key=="age":
            m = re.search(r'\d{2}', text)
            if m: val = m.group(0)
        profiles_upsert(uid,{key:val}); sessions[uid][key]=val
        await advance_profile_ctx(context, update.effective_chat.id, lang, uid); return

    # ===== LLM-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–Ω—É—Ç—Ä–∏ pain-—Ç—Ä–∏–∞–∂–∞ =====
    s = sessions.get(uid, {})
    if s.get("topic") == "pain":
        if re.search(r"\b(stop|exit|back|–Ω–∞–∑–∞–¥|–≤—ã—Ö–æ–¥|–≤—ã–π—Ç–∏)\b", text.lower()):
            sessions.pop(uid, None)
            await update.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
            return

        data = llm_decide_next_pain_step(text, lang, s)
        if data and isinstance(data, dict):
            s.setdefault("answers", {}).update({k: v for k, v in (data.get("updates") or {}).items() if v not in (None, "")})
            filled = s["answers"]
            if "red" in filled and "severity" in filled:
                sev = int(filled.get("severity", 5))
                red = str(filled.get("red") or "None")
                eid = episode_create(uid, "pain", sev, red); s["episode_id"] = eid
                plan_lines = pain_plan(lang, [red], profiles_get(uid))
                prefix = personalized_prefix(lang, profiles_get(uid))
                text_plan = (prefix + "\n" if prefix else "") + f"{T[lang]['plan_header']}\n" + "\n".join(plan_lines)
                await update.message.reply_text(text_plan)
                await update.message.reply_text(T[lang]["plan_accept"], reply_markup=inline_accept(lang))
                try:
                    await update.message.reply_text(T[lang]["ask_fb"], reply_markup=inline_feedback_kb(lang))
                except Exception:
                    pass
                s["step"] = 6
                return

            ask = data.get("ask") or ""
            kb_code = data.get("kb")
            if kb_code and kb_code != "done":
                s["step"] = {"painloc": 1, "painkind": 2, "paindur": 3, "num": 4, "painrf": 5}.get(kb_code, s.get("step", 1))
                await send_unique(
                    update.message,
                    uid,
                    ask or {
                        "painloc": T[lang]["triage_pain_q1"],
                        "painkind": T[lang]["triage_pain_q2"],
                        "paindur": T[lang]["triage_pain_q3"],
                        "num": T[lang]["triage_pain_q4"],
                        "painrf": T[lang]["triage_pain_q5"],
                    }[kb_code],
                    reply_markup=_kb_for_code(lang, kb_code),
                    force=True,
                )
                return

        # Fallback –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
        if s.get("step") == 1:
            label = _match_from_syns(text, lang, PAIN_LOC_SYNS)
            if label:
                s.setdefault("answers", {})["loc"] = label
                s["step"] = 2
                await send_unique(update.message, uid, T[lang]["triage_pain_q2"], reply_markup=_kb_for_code(lang, "painkind"))
                return
            await send_unique(update.message, uid, T[lang]["triage_pain_q1"], reply_markup=_kb_for_code(lang, "painloc"))
            return

        if s.get("step") == 2:
            label = _match_from_syns(text, lang, PAIN_KIND_SYNS)
            if label:
                s.setdefault("answers", {})["kind"] = label
                s["step"] = 3
                await send_unique(update.message, uid, T[lang]["triage_pain_q3"], reply_markup=_kb_for_code(lang, "paindur"))
                return
            await send_unique(update.message, uid, T[lang]["triage_pain_q2"], reply_markup=_kb_for_code(lang, "painkind"))
            return

        if s.get("step") == 3:
            label = _classify_duration(text, lang)
            if label:
                s.setdefault("answers", {})["duration"] = label
                s["step"] = 4
                await update.message.reply_text(T[lang]["triage_pain_q4"], reply_markup=_kb_for_code(lang, "num"))
                return
            await send_unique(update.message, uid, T[lang]["triage_pain_q3"], reply_markup=_kb_for_code(lang, "paindur"))
            return

        if s.get("step") == 4:
            m = re.fullmatch(r"(?:10|[0-9])", text)
            if m:
                sev = int(m.group(0))
                s.setdefault("answers", {})["severity"] = sev
                s["step"] = 5
                await update.message.reply_text(T[lang]["triage_pain_q5"], reply_markup=_kb_for_code(lang, "painrf"))
                return
            await update.message.reply_text(T[lang]["triage_pain_q4"], reply_markup=_kb_for_code(lang, "num"))
            return

        if s.get("step") == 5:
            rf_label = _match_from_syns(text, lang, RED_FLAG_SYNS) or \
                       ("–ù–µ—Ç" if lang == "ru" and re.search(r"\b–Ω–µ—Ç\b", text.lower()) else
                        "–ù–µ–º–∞—î" if lang == "uk" and re.search(r"\b–Ω–µ–º–∞\b", text.lower()) else
                        "None" if lang in ("en", "es") and re.search(r"\bno(ne|)?\b", text.lower()) else None)
            if rf_label:
                s.setdefault("answers", {})["red"] = rf_label
                sev = int(s["answers"].get("severity", 5))
                eid = episode_create(uid, "pain", sev, rf_label); s["episode_id"] = eid
                plan_lines = pain_plan(lang, [rf_label], profiles_get(uid))
                prefix = personalized_prefix(lang, profiles_get(uid))
                text_plan = (prefix + "\n" if prefix else "") + f"{T[lang]['plan_header']}\n" + "\n".join(plan_lines)
                await update.message.reply_text(text_plan)
                await update.message.reply_text(T[lang]["plan_accept"], reply_markup=inline_accept(lang))
                try:
                    await update.message.reply_text(T[lang]["ask_fb"], reply_markup=inline_feedback_kb(lang))
                except Exception:
                    pass
                s["step"] = 6
                return
            await send_unique(update.message, uid, T[lang]["triage_pain_q5"], reply_markup=_kb_for_code(lang, "painrf"))
            return

    # ---- –û–±—â–∏–π —Ñ–æ–ª–±–µ–∫ ‚Äî LLM + –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è ----
    prof = profiles_get(uid)
    data = llm_router_answer(text, lang, prof)
    prefix = personalized_prefix(lang, prof)
    reply = ((prefix + "\n") if prefix else "") + (data.get("assistant_reply") or T[lang]["unknown"])
    await update.message.reply_text(reply, reply_markup=inline_actions(lang))
    try:
        await update.message.reply_text(T[lang]["ask_fb"], reply_markup=inline_feedback_kb(lang))
    except Exception:
        pass
    for one in (data.get("followups") or [])[:2]:
        await send_unique(update.message, uid, one, force=True)
    return


# ---------- Inline keyboards ----------
def inline_numbers_0_10() -> InlineKeyboardMarkup:
    rows = []
    row1 = [InlineKeyboardButton(str(n), callback_data=f"num|{n}") for n in range(0, 6)]
    row2 = [InlineKeyboardButton(str(n), callback_data=f"num|{n}") for n in range(6, 11)]
    rows.append(row1)
    rows.append(row2)
    rows.append([InlineKeyboardButton("‚óÄ", callback_data="pain|exit")])
    return InlineKeyboardMarkup(rows)

def inline_list(options: List[str], prefix: str) -> InlineKeyboardMarkup:
    rows, row = [], []
    for opt in options:
        row.append(InlineKeyboardButton(opt, callback_data=f"{prefix}|{opt}"))
        if len(row) == 3:
            rows.append(row); row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(rows)

def inline_topic_kb(lang: str) -> InlineKeyboardMarkup:
    label = {"ru":"üß© –û–ø—Ä–æ—Å 6 –ø—É–Ω–∫—Ç–æ–≤","uk":"üß© –û–ø–∏—Ç–Ω–∏–∫ (6)","en":"üß© Intake (6 Qs)","es":"üß© Intake (6)"}[lang]
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("ü©∫ Pain", callback_data="topic|pain"),
         InlineKeyboardButton("üò¥ Sleep", callback_data="topic|sleep"),
         InlineKeyboardButton("üçé Nutrition", callback_data="topic|nutrition")],
        [InlineKeyboardButton("üß™ Labs", callback_data="topic|labs"),
         InlineKeyboardButton("üîÅ Habits", callback_data="topic|habits"),
         InlineKeyboardButton("üß¨ Longevity", callback_data="topic|longevity")],
        [InlineKeyboardButton("üë§ Profile", callback_data="topic|profile")],
        [InlineKeyboardButton(label, callback_data="intake:start")]  # –∫–ª—é—á–µ–≤–æ–µ
    ])

def inline_accept(lang: str) -> InlineKeyboardMarkup:
    labels = T[lang]["accept_opts"]
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(labels[0], callback_data="acc|yes"),
         InlineKeyboardButton(labels[1], callback_data="acc|later"),
         InlineKeyboardButton(labels[2], callback_data="acc|no")]
    ])

def inline_remind(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["act_rem_4h"], callback_data="act|rem|4h")],
        [InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="act|rem|evening")],
        [InlineKeyboardButton(T[lang]["act_rem_morn"], callback_data="act|rem|morning")]
    ])

def inline_feedback_kb(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["fb_good"], callback_data="fb|up"),
         InlineKeyboardButton(T[lang]["fb_bad"],  callback_data="fb|down")],
        [InlineKeyboardButton(T[lang]["fb_free"], callback_data="fb|text")]
    ])

def inline_actions(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["act_rem_4h"],  callback_data="act|rem|4h"),
         InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="act|rem|evening"),
         InlineKeyboardButton(T[lang]["act_rem_morn"],callback_data="act|rem|morning")],
        [InlineKeyboardButton(T[lang]["act_save_episode"], callback_data="act|save")],
        [InlineKeyboardButton(T[lang]["h60_btn"], callback_data="act|h60")],
        [InlineKeyboardButton(T[lang]["act_ex_neck"], callback_data="act|ex|neck")],
        [InlineKeyboardButton(T[lang]["act_find_lab"], callback_data="act|lab")],
        [InlineKeyboardButton(T[lang]["act_er"], callback_data="act|er")]
    ])


# ------------- Callback handler -------------
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    data = (q.data or ""); uid = q.from_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    chat_id = q.message.chat.id

    # Gate
    if data.startswith("gate:"):
        await gate_cb(update, context); return

    # –ü—Ä–æ—Ñ–∏–ª—å (–∏–Ω—Ç–µ–π–∫ 8 —à–∞–≥–æ–≤ ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if data.startswith("p|"):
        _, action, key, *rest = data.split("|")
        s = sessions.setdefault(uid, {"profile_active": True, "p_step": 0})
        if action == "choose":
            value = "|".join(rest) if rest else ""
            s[key] = value
            profiles_upsert(uid, {key: value})
            await advance_profile_ctx(context, chat_id, lang, uid); return
        if action == "write":
            s["p_wait_key"] = key
            await q.message.reply_text({"ru":"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:",
                                        "uk":"–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ:",
                                        "en":"Type your answer:",
                                        "es":"Escribe tu respuesta:"}[lang]); return
        if action == "skip":
            profiles_upsert(uid, {key: ""})
            await advance_profile_ctx(context, chat_id, lang, uid); return

    # –°–æ–≥–ª–∞—Å–∏–µ
    if data.startswith("consent|"):
        users_set(uid, "consent", "yes" if data.endswith("|yes") else "no")
        try: await q.edit_message_reply_markup(reply_markup=None)
        except: pass
        await q.message.reply_text(T[lang]["thanks"]); return

    # Daily mood
    if data.startswith("mood|"):
        mood = data.split("|",1)[1]
        if mood=="note":
            sessions.setdefault(uid,{})["awaiting_daily_comment"] = True
            await q.message.reply_text({"ru":"–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
                                        "uk":"–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä:",
                                        "en":"Short note:",
                                        "es":"Nota corta:"}[lang]); return
        daily_add(iso(utcnow()), uid, mood, "")
        await q.message.reply_text(T[lang]["mood_thanks"]); return

    # –¢–µ–º—ã
    if data.startswith("topic|"):
        topic = data.split("|",1)[1]
        if topic=="profile":
            await start_profile_ctx(context, chat_id, lang, uid); return
        if topic=="pain":
            sessions[uid] = {"topic":"pain","step":1,"answers":{}}
            kb = _kb_for_code(lang, "painloc")
            await q.message.reply_text(T[lang]["triage_pain_q1"], reply_markup=kb); return

        last = sessions.get(uid,{}).get("last_user_text","")
        prof = profiles_get(uid)
        prompt = f"topic:{topic}\nlast_user: {last or '‚Äî'}"
        data_llm = llm_router_answer(prompt, lang, prof)
        prefix = personalized_prefix(lang, prof)
        reply = ((prefix + "\n") if prefix else "") + (data_llm.get("assistant_reply") or T[lang]["unknown"])
        await q.message.reply_text(reply, reply_markup=inline_actions(lang))
        try:
            await q.message.reply_text(T[lang]["ask_fb"], reply_markup=inline_feedback_kb(lang))
        except Exception:
            pass
        for one in (data_llm.get("followups") or [])[:2]:
            await send_unique(q.message, uid, one, force=True)
        return

    # Pain triage buttons
    s = sessions.setdefault(uid, {})
    if data == "pain|exit":
        sessions.pop(uid, None)
        await q.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
        return

    if data.startswith("painloc|"):
        s.update({"topic":"pain","step":2,"answers":{"loc": data.split("|",1)[1]}})
        await send_unique(q.message, uid, T[lang]["triage_pain_q2"], reply_markup=_kb_for_code(lang,"painkind")); return

    if data.startswith("painkind|"):
        s.setdefault("answers",{})["kind"] = data.split("|",1)[1]; s["step"]=3
        await send_unique(q.message, uid, T[lang]["triage_pain_q3"], reply_markup=_kb_for_code(lang,"paindur")); return

    if data.startswith("paindur|"):
        s.setdefault("answers",{})["duration"] = data.split("|",1)[1]; s["step"]=4
        await send_unique(q.message, uid, T[lang]["triage_pain_q4"], reply_markup=_kb_for_code(lang,"num")); return

    if data.startswith("num|"):
        if s.get("topic")=="pain" and s.get("step")==4:
            sev = int(data.split("|",1)[1])
            s.setdefault("answers",{})["severity"] = sev; s["step"]=5
            await send_unique(q.message, uid, T[lang]["triage_pain_q5"], reply_markup=_kb_for_code(lang,"painrf")); return

    if data.startswith("painrf|"):
        red = data.split("|",1)[1]
        s.setdefault("answers",{})["red"] = red
        sev = int(s["answers"].get("severity",5))
        eid = episode_create(uid, "pain", sev, red); s["episode_id"] = eid
        plan_lines = pain_plan(lang, [red], profiles_get(uid))
        prefix = personalized_prefix(lang, profiles_get(uid))
        text_plan = (prefix + "\n" if prefix else "") + f"{T[lang]['plan_header']}\n" + "\n".join(plan_lines)
        await q.message.reply_text(text_plan)
        await q.message.reply_text(T[lang]["plan_accept"], reply_markup=inline_accept(lang))
        try:
            await q.message.reply_text(T[lang]["ask_fb"], reply_markup=inline_feedback_kb(lang))
        except Exception:
            pass
        s["step"] = 6; return

    if data.startswith("acc|"):
        accepted = "1" if data.endswith("|yes") else "0"
        if s.get("episode_id"):
            episode_set(s["episode_id"], "plan_accepted", accepted)
        await q.message.reply_text(T[lang]["remind_when"], reply_markup=inline_remind(lang))
        s["step"] = 7; return

    if data.startswith("rem|"):
        choice = data.split("|",1)[1]
        delay = {"4h":4, "evening":6, "morning":16}.get(choice)
        if delay and s.get("episode_id"):
            next_time = utcnow() + timedelta(hours=delay)
            episode_set(s["episode_id"], "next_checkin_at", iso(next_time))
            if _has_jq_ctx(context):
                context.application.job_queue.run_once(job_checkin_episode, when=delay*3600,
                                                       data={"user_id":uid,"episode_id":s["episode_id"]})
            else:
                logging.warning("JobQueue not available ‚Äì episode follow-up not scheduled.")
        await q.message.reply_text(T[lang]["thanks"], reply_markup=inline_topic_kb(lang))
        sessions.pop(uid, None); return

    # smart follow-ups (actions)
    if data.startswith("act|"):
        parts = data.split("|")
        kind = parts[1]
        if kind=="h60":
            sessions.setdefault(uid,{})["awaiting_h60"] = True
            await q.message.reply_text(T[lang]["h60_intro"])
            return
        if kind=="rem":
            key = parts[2]
            hours = {"4h":4, "evening":6, "morning":16}.get(key,4)
            when_ = utcnow() + timedelta(hours=hours)
            rid = reminder_add(uid, T[lang]["thanks"], when_)
            if _has_jq_ctx(context):
                context.application.job_queue.run_once(job_oneoff_reminder, when=hours*3600,
                                                       data={"user_id":uid,"reminder_id":rid})
            else:
                logging.warning("JobQueue not available ‚Äì one-off reminder not scheduled.")
            await q.message.reply_text(T[lang]["thanks"]); return
        if kind=="save":
            episode_create(uid, "general", 0, "")
            await q.message.reply_text(T[lang]["act_saved"]); return
        if kind=="ex":
            txt = {
                "ru":"üßò 5 –º–∏–Ω—É—Ç —à–µ—è: 1) –º–µ–¥–ª–µ–Ω–Ω—ã–µ –Ω–∞–∫–ª–æ–Ω—ã –≤–ø–µ—Ä—ë–¥/–Ω–∞–∑–∞–¥ √ó5; 2) –ø–æ–≤–æ—Ä–æ—Ç—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã √ó5; 3) –ø–æ–ª—É–∫—Ä—É–≥–∏ –ø–æ–¥–±–æ—Ä–æ–¥–∫–æ–º √ó5; 4) –ª—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ —Ç—Ä–∞–ø–µ—Ü–∏–π 2√ó20 —Å–µ–∫.",
                "uk":"üßò 5 —Ö–≤ —à–∏—è: 1) –ø–æ–≤—ñ–ª—å–Ω—ñ –Ω–∞—Ö–∏–ª–∏ –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥ √ó5; 2) –ø–æ–≤–æ—Ä–æ—Ç–∏ –≤ —Å—Ç–æ—Ä–æ–Ω–∏ √ó5; 3) –ø—ñ–≤–∫–æ–ª–∞ –ø—ñ–¥–±–æ—Ä—ñ–¥–¥—è–º √ó5; 4) –ª–µ–≥–∫–∞ —Ä–æ–∑—Ç—è–∂–∫–∞ —Ç—Ä–∞–ø–µ—Ü—ñ–π 2√ó20 —Å.",
                "en":"üßò 5-min neck: 1) slow flex/extend √ó5; 2) rotations left/right √ó5; 3) chin semicircles √ó5; 4) gentle upper-trap stretch 2√ó20s.",
                "es":"üßò Cuello 5 min: 1) flex/extensi√≥n lenta √ó5; 2) giros izq/der √ó5; 3) semic√≠rculos con la barbilla √ó5; 4) estiramiento trapecio sup. 2√ó20s."
            }[lang]
            await q.message.reply_text(txt); return
        if kind=="lab":
            sessions.setdefault(uid,{})["awaiting_city"] = True
            await q.message.reply_text(T[lang]["act_city_prompt"]); return
        if kind=="er":
            await q.message.reply_text(T[lang]["er_text"]); return

    # --- Feedback buttons ---
    if data.startswith("fb|"):
        sub = data.split("|",1)[1]
        if sub == "up":
            feedback_add(iso(utcnow()), uid, "feedback_yes", q.from_user.username, 1, "")
            await q.message.reply_text(T[lang]["fb_thanks"])
            return
        if sub == "down":
            feedback_add(iso(utcnow()), uid, "feedback_no", q.from_user.username, 0, "")
            await q.message.reply_text(T[lang]["fb_thanks"])
            return
        if sub == "text":
            sessions.setdefault(uid,{})["awaiting_free_feedback"] = True
            await q.message.reply_text(T[lang]["fb_write"])
            return


# ---------- Main / wiring ----------
# –∞–ª–∏–∞—Å, —á—Ç–æ–±—ã build_app —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –æ–∂–∏–¥–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏ GCLIENT
GCLIENT = GSPREAD_CLIENT

def build_app() -> "Application":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º PRO-–æ–ø—Ä–æ—Å–Ω–∏–∫ (6 –ø—É–Ω–∫—Ç–æ–≤) ‚Äî —Å–Ω–∞—á–∞–ª–∞
    try:
        register_intake_pro(app, GCLIENT, on_complete_cb=_ipro_save_to_sheets_and_open_menu)
        logging.info("Intake Pro registered.")
    except Exception as e:
        logging.warning(f"Intake Pro registration failed: {e}")

    # Commands
    app.add_handler(CommandHandler("start",        cmd_start))
    app.add_handler(CommandHandler("help",         cmd_help))
    app.add_handler(CommandHandler("privacy",      cmd_privacy))
    app.add_handler(CommandHandler("pause",        cmd_pause))
    app.add_handler(CommandHandler("resume",       cmd_resume))
    app.add_handler(CommandHandler("delete_data",  cmd_delete_data))
    app.add_handler(CommandHandler("profile",      cmd_profile))
    app.add_handler(CommandHandler("settz",        cmd_settz))
    app.add_handler(CommandHandler("checkin_on",   cmd_checkin_on))
    app.add_handler(CommandHandler("checkin_off",  cmd_checkin_off))
    app.add_handler(CommandHandler("health60",     cmd_health60))
    app.add_handler(CommandHandler("intake",       cmd_intake))

    # Quick language toggles
    app.add_handler(CommandHandler("ru", cmd_ru))
    app.add_handler(CommandHandler("en", cmd_en))
    app.add_handler(CommandHandler("uk", cmd_uk))
    app.add_handler(CommandHandler("es", cmd_es))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´—à—Ç–æ—Ä–∫–∏¬ª (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å gate)
    app.add_handler(CallbackQueryHandler(gate_cb, pattern=r"^gate:"))

    # –í–ê–ñ–ù–û: –æ–±—â–∏–π –∫–æ–ª–±—ç–∫ –î–û–õ–ñ–ï–ù –∏—Å–∫–ª—é—á–∞—Ç—å intake:, —á—Ç–æ–±—ã –ø–ª–∞–≥–∏–Ω –ø–æ–ª—É—á–∏–ª —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è
    app.add_handler(CallbackQueryHandler(on_callback, pattern=r"^(?!intake:)"))

    # –¢–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    return app


if __name__ == "__main__":
    if not TELEGRAM_TOKEN:
        logging.error("TELEGRAM_TOKEN is not set")
        raise SystemExit(1)

    application = build_app()

    # Restore scheduled jobs from Sheets/memory (if any)
    try:
        schedule_from_sheet_on_start(application)
    except Exception as e:
        logging.warning(f"Scheduling restore failed: {e}")

    logging.info("Starting TendAI bot polling‚Ä¶")
    application.run_polling()
