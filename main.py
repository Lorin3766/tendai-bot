# -*- coding: utf-8 -*-
# TendAI main.py ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–æ: –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ–Ω, –Ω–µ—Ä–µ–ø–µ—Ç–∏—Ä—É—é—â–∏–π—Å—è –ø—Ä–æ—Ñ–∏–ª—å, 3 –ø—Ä–µ—Å–µ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π,
# —Ñ–∏–¥–±–µ–∫ ‚â§1/–¥–µ–Ω—å, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (—É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å + 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏), –∞–≤—Ç–æ-–≤–æ–ø—Ä–æ—Å—ã,
# –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ Preferences (–ø–∞–º—è—Ç—å –≤–∫—É—Å–æ–≤ –∏ –ø—Ä–µ—Å–µ—Ç–æ–≤)

import os, re, json, uuid, logging, random
from datetime import datetime, timedelta, timezone, time as dtime, date
from typing import List, Tuple, Dict, Optional
from difflib import SequenceMatcher

from dotenv import load_dotenv
from langdetect import detect, DetectorFactory

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# --- SAFE import of optional PRO-intake plugin ---
try:
    from intake_pro import register_intake_pro  # noqa: F401
    HAVE_INTAKE_PRO = True
except Exception:
    HAVE_INTAKE_PRO = False
    def register_intake_pro(app, gclient=None, on_complete_cb=None):
        logging.warning("intake_pro not found ‚Äî PRO-–æ–ø—Ä–æ—Å –æ—Ç–∫–ª—é—á—ë–Ω –Ω–∞ —ç—Ç–æ–º –¥–µ–ø–ª–æ–µ.")
        async def _fallback_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
            q = update.callback_query
            await q.answer()
            await q.message.reply_text("PRO-–æ–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–º –¥–µ–ø–ª–æ–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile.")
        app.add_handler(CallbackQueryHandler(_fallback_cb, pattern=r"^intake:"))

from openai import OpenAI

# ---------- Google Sheets (robust + memory fallback) ----------
import gspread
from gspread.exceptions import SpreadsheetNotFound
import gspread.utils as gsu
from oauth2client.service_account import ServiceAccountCredentials

# ---------------- Boot & Config ----------------
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
DetectorFactory.seed = 0

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")

SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Sheets")
SHEET_ID = os.getenv("SHEET_ID", "")
ALLOW_CREATE_SHEET = os.getenv("ALLOW_CREATE_SHEET", "0") == "1"
DEFAULT_CHECKIN_LOCAL = "08:30"

oai: Optional[OpenAI] = None
try:
    if OPENAI_API_KEY:
        os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
    oai = OpenAI()
except Exception as e:
    logging.error(f"OpenAI init error: {e}")
    oai = None

# ---------------- i18n ----------------
SUPPORTED = {"ru", "en", "uk", "es"}

def norm_lang(code: Optional[str]) -> str:
    if not code:
        return "en"
    c = code.split("-")[0].lower()
    return c if c in SUPPORTED else "en"

T = {
    "en": {
        "welcome": "Hi! I‚Äôm TendAI ‚Äî your health & longevity assistant.\nTell me in a few words, I‚Äôll help. Quick 40s intake for better tips.",
        "help": "Short checkups, 24‚Äì48h plans, reminders, daily check-ins.\nCommands: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +2 /health60 /energy /mood /water /skin /ru /uk /en /es",
        "privacy": "TendAI is not a medical service. Minimal data for reminders. /delete_data to erase.",
        "paused_on": "Notifications paused. Use /resume to enable.",
        "paused_off": "Notifications resumed.",
        "deleted": "All your data was deleted. Use /start to begin again.",
        "ask_consent": "May I send a follow-up later to check how you feel?",
        "yes":"Yes","no":"No",
        "unknown":"Tell me a bit more: where exactly and for how long?",
        "profile_intro":"Quick intake (~40s). Tap a button or type.",
        "p_step_1":"Step 1/8. Sex:",
        "p_step_2":"Step 2/8. Age:",
        "p_step_3":"Step 3/8. Main goal:",
        "p_step_4":"Step 4/8. Chronic conditions:",
        "p_step_5":"Step 5/8. Meds/supplements/allergies:",
        "p_step_6":"Step 6/8. Sleep (bed/wake, e.g., 23:30/07:00):",
        "p_step_7":"Step 7/8. Activity:",
        "p_step_8":"Step 8/8. Diet most of the time:",
        "write":"‚úçÔ∏è Write",
        "skip":"‚è≠Ô∏è Skip",
        "saved_profile":"Saved: ",
        "start_where":"What today ‚Äî nutrition, sleep or activity?",
        "daily_gm":"Good morning! Quick check-in:",
        "mood_good":"üòÉ Good","mood_ok":"üòê Okay","mood_bad":"üò£ Poor","mood_note":"‚úçÔ∏è Comment",
        "mood_thanks":"Thanks! Have a smooth day üëã",
        "triage_pain_q1":"Where does it hurt?",
        "triage_pain_q1_opts":["Head","Throat","Back","Belly","Other"],
        "triage_pain_q2":"What kind of pain?",
        "triage_pain_q2_opts":["Dull","Sharp","Pulsating","Pressing"],
        "triage_pain_q3":"How long?",
        "triage_pain_q3_opts":["<3h","3‚Äì24h",">1 day",">1 week"],
        "triage_pain_q4":"Rate it (0‚Äì10):",
        "triage_pain_q5":"Any of these now?",
        "triage_pain_q5_opts":["High fever","Vomiting","Weakness/numbness","Speech/vision problems","Trauma","None"],
        "plan_header":"Your 24‚Äì48h plan:",
        "plan_accept":"Try this today?",
        "accept_opts":["‚úÖ Yes","üîÅ Later","‚úñÔ∏è No"],
        "remind_when":"When to remind & check you?",
        "remind_opts":["in 4h","this evening","tomorrow morning","no need"],
        "thanks":"Got it üôå",
        "checkin_ping":"Quick check-in: how is it now (0‚Äì10)?",
        "checkin_better":"Nice! Keep it up üí™",
        "checkin_worse":"If red flags or pain ‚â•7/10 ‚Äî consider medical help.",
        "act_rem_4h":"‚è∞ Remind in 4h",
        "act_rem_eve":"‚è∞ This evening",
        "act_rem_morn":"‚è∞ Tomorrow morning",
        "act_save_episode":"üíæ Save as episode",
        "act_ex_neck":"üßò 5-min neck routine",
        "act_find_lab":"üß™ Find a lab",
        "act_er":"üöë Emergency info",
        "act_city_prompt":"Type your city/area so I can suggest a lab (text only).",
        "act_saved":"Saved.",
        "er_text":"If symptoms worsen, severe shortness of breath, chest pain, confusion, or persistent high fever ‚Äî seek urgent care.",
        "px":"{sex_loc}, {age}y; goal ‚Äî {goal_loc}.",
        "back":"‚óÄ Back",
        "exit":"Exit",
        "ask_fb":"Was this helpful?",
        "fb_thanks":"Thanks for your feedback! ‚úÖ",
        "fb_write":"Write a short feedback message:",
        "fb_good":"üëç Like",
        "fb_bad":"üëé Dislike",
        "fb_free":"üìù Feedback",
        "h60_btn": "Health in 60 seconds",
        "h60_intro": "Write briefly what bothers you (e.g., ‚Äúheadache‚Äù, ‚Äúfatigue‚Äù, ‚Äústomach pain‚Äù). I‚Äôll give 3 key tips in 60 seconds.",
        "h60_t1": "Possible causes",
        "h60_t2": "Do now (24‚Äì48h)",
        "h60_t3": "When to see a doctor",
        "h60_serious": "Serious to rule out",
        # Youth quick labels
        "energy_title": "Energy for today:",
        "water_prompt": "Drink 300‚Äì500 ml of water. Remind in 4 hours?",
        "skin_title": "Skin/Body tip:",
        # Auto-questions
        "auto_q_sleep":"How did you sleep (hours)?",
        "auto_q_breakfast":"What did you have for breakfast?",
        "auto_q_choice":"Tip on activity or nutrition?"
    },
    "ru": {
        "welcome":"–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–†–∞—Å—Å–∫–∞–∂–∏ –≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö ‚Äî –ø–æ–¥—Å–∫–∞–∂—É. –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å (~40—Å) –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏.",
        "help":"–ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã.\n–ö–æ–º–∞–Ω–¥—ã: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +3 /health60 /energy /mood /water /skin /ru /uk /en /es",
        "privacy":"TendAI –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞. –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. /delete_data ‚Äî —É–¥–∞–ª–∏—Ç—å.",
        "paused_on":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ø–∞—É–∑–µ. /resume ‚Äî –≤–∫–ª—é—á–∏—Ç—å.",
        "paused_off":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.",
        "deleted":"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        "ask_consent":"–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∂–µ ‚Äî —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã?",
        "yes":"–î–∞","no":"–ù–µ—Ç",
        "unknown":"–ß—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ: –≥–¥–µ –∏–º–µ–Ω–Ω–æ –∏ –∫–∞–∫ –¥–∞–≤–Ω–æ?",
        "profile_intro":"–ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å (~40—Å). –ú–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç.",
        "p_step_1":"–®–∞–≥ 1/8. –ü–æ–ª:",
        "p_step_2":"–®–∞–≥ 2/8. –í–æ–∑—Ä–∞—Å—Ç:",
        "p_step_3":"–®–∞–≥ 3/8. –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:",
        "p_step_4":"–®–∞–≥ 4/8. –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏:",
        "p_step_5":"–®–∞–≥ 5/8. –õ–µ–∫–∞—Ä—Å—Ç–≤–∞/–¥–æ–±–∞–≤–∫–∏/–∞–ª–ª–µ—Ä–≥–∏–∏:",
        "p_step_6":"–®–∞–≥ 6/8. –°–æ–Ω (–æ—Ç–±–æ–π/–ø–æ–¥—ä—ë–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        "p_step_7":"–®–∞–≥ 7/8. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:",
        "p_step_8":"–®–∞–≥ 8/8. –ü–∏—Ç–∞–Ω–∏–µ —á–∞—â–µ –≤—Å–µ–≥–æ:",
        "write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
        "skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "saved_profile":"–°–æ—Ö—Ä–∞–Ω–∏–ª: ",
        "start_where":"–° —á–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è ‚Äî –ø–∏—Ç–∞–Ω–∏–µ, —Å–æ–Ω –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?",
        "daily_gm":"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ë—ã—Å—Ç—Ä—ã–π —á–µ–∫-–∏–Ω:",
        "mood_good":"üòÉ –•–æ—Ä–æ—à–æ","mood_ok":"üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ","mood_bad":"üò£ –ü–ª–æ—Ö–æ","mood_note":"‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        "mood_thanks":"–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üëã",
        "triage_pain_q1":"–ì–¥–µ –±–æ–ª–∏—Ç?",
        "triage_pain_q1_opts":["–ì–æ–ª–æ–≤–∞","–ì–æ—Ä–ª–æ","–°–ø–∏–Ω–∞","–ñ–∏–≤–æ—Ç","–î—Ä—É–≥–æ–µ"],
        "triage_pain_q2":"–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏?",
        "triage_pain_q2_opts":["–¢—É–ø–∞—è","–û—Å—Ç—Ä–∞—è","–ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è","–î–∞–≤—è—â–∞—è"],
        "triage_pain_q3":"–ö–∞–∫ –¥–∞–≤–Ω–æ?",
        "triage_pain_q3_opts":["<3—á","3‚Äì24—á",">1 –¥–Ω—è",">1 –Ω–µ–¥–µ–ª–∏"],
        "triage_pain_q4":"–û—Ü–µ–Ω–∏—Ç–µ (0‚Äì10):",
        "triage_pain_q5":"–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–µ–π—á–∞—Å?",
        "triage_pain_q5_opts":["–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞","–†–≤–æ—Ç–∞","–°–ª–∞–±–æ—Å—Ç—å/–æ–Ω–µ–º–µ–Ω–∏–µ","–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è","–¢—Ä–∞–≤–º–∞","–ù–µ—Ç"],
        "plan_header":"–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á–∞—Å–æ–≤:",
        "plan_accept":"–ü–æ–ø—Ä–æ–±—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?",
        "accept_opts":["‚úÖ –î–∞","üîÅ –ü–æ–∑–∂–µ","‚úñÔ∏è –ù–µ—Ç"],
        "remind_when":"–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "thanks":"–ü—Ä–∏–Ω—è—Ç–æ üôå",
        "checkin_ping":"–ö–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ 0‚Äì10?",
        "checkin_better":"–û—Ç–ª–∏—á–Ω–æ! –î–µ—Ä–∂–∏–º –∫—É—Ä—Å üí™",
        "checkin_worse":"–ï—Å–ª–∏ –µ—Å—Ç—å ¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª –∏–ª–∏ –±–æ–ª—å ‚â•7/10 ‚Äî –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        "act_rem_4h":"‚è∞ –ß–µ—Ä–µ–∑ 4 —á",
        "act_rem_eve":"‚è∞ –í–µ—á–µ—Ä–æ–º",
        "act_rem_morn":"‚è∞ –£—Ç—Ä–æ–º",
        "act_save_episode":"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–ø–∏–∑–æ–¥",
        "act_ex_neck":"üßò –®–µ—è 5 –º–∏–Ω",
        "act_find_lab":"üß™ –ù–∞–π—Ç–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é",
        "act_er":"üöë –ö–æ–≥–¥–∞ —Å—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é",
        "act_city_prompt":"–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥/—Ä–∞–π–æ–Ω ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é.",
        "act_saved":"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
        "er_text":"–ï—Å–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç, —Å–∏–ª—å–Ω–∞—è –æ–¥—ã—à–∫–∞, –±–æ–ª—å –≤ –≥—Ä—É–¥–∏, —Å–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å, —Å—Ç–æ–π–∫–∞—è –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∫ –Ω–µ–æ—Ç–ª–æ–∂–∫–µ/—Å–∫–æ—Ä–æ–π.",
        "px":"{sex_loc}, {age}; —Ü–µ–ª—å ‚Äî {goal_loc}.",
        "back":"‚óÄ –ù–∞–∑–∞–¥",
        "exit":"–í—ã–π—Ç–∏",
        "ask_fb":"–≠—Ç–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ?",
        "fb_thanks":"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! ‚úÖ",
        "fb_write":"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        "fb_good":"üëç –ù—Ä–∞–≤–∏—Ç—Å—è",
        "fb_bad":"üëé –ù–µ –ø–æ–ª–µ–∑–Ω–æ",
        "fb_free":"üìù –û—Ç–∑—ã–≤",
        "h60_btn": "–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥",
        "h60_intro": "–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞¬ª, ¬´—É—Å—Ç–∞–ª–æ—Å—Ç—å¬ª, ¬´–±–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ¬ª). –î–∞–º 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–≤–µ—Ç–∞.",
        "h60_t1": "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã",
        "h60_t2": "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å (24‚Äì48 —á)",
        "h60_t3": "–ö–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É",
        "h60_serious": "–ß—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ–µ –∏—Å–∫–ª—é—á–∏—Ç—å",
        "energy_title": "–≠–Ω–µ—Ä–≥–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
        "water_prompt": "–í—ã–ø–µ–π 300‚Äì500 –º–ª –≤–æ–¥—ã. –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞?",
        "skin_title": "–°–æ–≤–µ—Ç –¥–ª—è –∫–æ–∂–∏/—Ç–µ–ª–∞:",
        "auto_q_sleep":"–ö–∞–∫ —Å–ø–∞–ª–æ—Å—å (—á–∞—Å—ã)?",
        "auto_q_breakfast":"–ß—Ç–æ –µ–ª –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫?",
        "auto_q_choice":"–ü–æ–¥—Å–∫–∞–∑–∫—É ‚Äî –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏—é?"
    },
    "uk": {
        **{
            k: v for k, v in {
                "help": "–ö–æ—Ä–æ—Ç–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ–¥–µ–Ω–Ω—ñ —á–µ–∫-—ñ–Ω–∏.\n–ö–æ–º–∞–Ω–¥–∏: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +2 /health60 /energy /mood /water /skin /ru /uk /en /es",
                "act_rem_4h": "‚è∞ –ß–µ—Ä–µ–∑ 4 –≥–æ–¥",
                "energy_title": "–ï–Ω–µ—Ä–≥—ñ—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:",
                "water_prompt": "–í–∏–ø–∏–π 300‚Äì500 –º–ª –≤–æ–¥–∏. –ù–∞–≥–∞–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ 4 –≥–æ–¥–∏–Ω–∏?",
                "skin_title": "–î–æ–≥–ª—è–¥ –∑–∞ —à–∫—ñ—Ä–æ—é/—Ç—ñ–ª–æ–º:",
                "auto_q_sleep":"–Ø–∫ —Å–ø–∞–ª–æ—Å—è (–≥–æ–¥–∏–Ω–∏)?",
                "auto_q_breakfast":"–©–æ —ó–≤ –Ω–∞ —Å–Ω—ñ–¥–∞–Ω–æ–∫?",
                "auto_q_choice":"–ü—ñ–¥–∫–∞–∑–∫—É ‚Äî –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —á–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è?"
            }.items()
        }
    }
}
T["es"] = T["en"]

# ---------------- Helpers ----------------
def utcnow():
    return datetime.now(timezone.utc)

def iso(dt: Optional[datetime]) -> str:
    return "" if not dt else dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def detect_lang_from_text(text: str, fallback: str) -> str:
    s = (text or "").strip()
    if not s:
        return fallback
    low = s.lower()
    if re.search(r"[–∞-—è—ë—ñ—ó—î“ë]", low):
        return "uk" if re.search(r"[—ñ—ó—î“ë]", low) else "ru"
    try:
        return norm_lang(detect(s))
    except Exception:
        return fallback

def profile_is_incomplete(profile_row: dict) -> bool:
    keys = ["sex","age","goal"]
    return sum(1 for k in keys if str(profile_row.get(k) or "").strip()) < 2

# ===== ONBOARDING GATE =====
GATE_FLAG_KEY = "menu_unlocked"

def _is_menu_unlocked(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if context.user_data.get(GATE_FLAG_KEY):
        return True
    prof = profiles_get(update.effective_user.id) or {}
    return not profile_is_incomplete(prof)

async def gate_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    kb = [
        [InlineKeyboardButton("üß© –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å (40‚Äì60 —Å–µ–∫)" if lang!="en" else "üß© Take the 40‚Äì60s intake", callback_data="intake:start")],
        [InlineKeyboardButton("‚û°Ô∏è –ü–æ–∑–∂–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é" if lang!="en" else "‚û°Ô∏è Later ‚Äî open menu", callback_data="gate:skip")],
    ]
    text = ("–ß—Ç–æ–±—ã —Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å. –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ."
            if lang!="en" else
            "To personalize answers, please take a short intake. You can skip and do it later.")
    await update.effective_chat.send_message(text, reply_markup=InlineKeyboardMarkup(kb))

async def gate_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "gate:skip":
        context.user_data[GATE_FLAG_KEY] = True
        await q.edit_message_text("–û–∫, –æ—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶" if context.user_data.get("lang","en")!="en" else "OK, opening the menu‚Ä¶")
        render_cb = context.application.bot_data.get("render_menu_cb")
        if callable(render_cb):
            await render_cb(update, context)
        else:
            await context.application.bot.send_message(q.message.chat_id, "/start")

async def _ipro_save_to_sheets_and_open_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, profile: dict):
    uid = update.effective_user.id
    profiles_upsert(uid, {
        "sex": profile.get("sex") or "",
        "age": profile.get("age") or "",
        "goal": profile.get("goal") or "",
        "conditions": ", ".join(sorted(profile.get("chronic", []))) if isinstance(profile.get("chronic"), set) else (profile.get("chronic") or ""),
        "meds": profile.get("meds") or "",
        "activity": profile.get("hab_activity") or "",
        "sleep": profile.get("hab_sleep") or "",
        "notes": ", ".join(sorted(profile.get("complaints", []))) if isinstance(profile.get("complaints"), set) else (profile.get("complaints") or ""),
    })
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ ‚Äî –ø–æ–∫–∞–∂–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    sessions.setdefault(uid, {})["px_shown"] = False
    sessions[uid]["px_sig"] = profile_signature(profiles_get(uid))
    context.user_data[GATE_FLAG_KEY] = True
    render_cb = context.application.bot_data.get("render_menu_cb")
    if callable(render_cb):
        await render_cb(update, context)
    else:
        await context.application.bot.send_message(update.effective_chat.id, "/start")

# ---------- Anti-duplicate questions ----------
def _ratio(a: str, b: str) -> float:
    return SequenceMatcher(None, (a or "").lower(), (b or "").lower()).ratio()

def is_duplicate_question(uid: int, text: str, thresh: float = 0.93) -> bool:
    s = sessions.setdefault(uid, {})
    asked = s.setdefault("asked_prompts", [])
    for prev in asked[-4:]:
        if _ratio(prev, text) >= thresh:
            return True
    asked.append(text)
    if len(asked) > 16:
        s["asked_prompts"] = asked[-16:]
    return False

async def send_unique(msg_obj, uid: int, text: str, reply_markup=None, force: bool = False):
    if force or not is_duplicate_question(uid, text):
        await msg_obj.reply_text(text, reply_markup=reply_markup)

# -------- Sheets (with memory fallback) --------
SHEETS_ENABLED = True
ss = None
ws_feedback = ws_users = ws_profiles = ws_episodes = ws_reminders = ws_daily = ws_rules = ws_prefs = None

# === Canonical headers + safe reader (—Ñ–∏–∫—Å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ö–µ–¥–µ—Ä–æ–≤) ===
USERS_HEADERS = ["user_id","username","lang","consent","tz_offset","checkin_hour","paused","quiet_hours","last_sent_utc","sent_today","streak","challenge_id","challenge_day"]
PROFILES_HEADERS = ["user_id","sex","age","goal","conditions","meds","allergies","sleep","activity","diet","notes","updated_at","goals","diet_focus","steps_target","cycle_enabled","cycle_last_date","cycle_avg_len"]
EPISODES_HEADERS = ["episode_id","user_id","topic","started_at","baseline_severity","red_flags","plan_accepted","target","reminder_at","next_checkin_at","status","last_update","notes"]
REMINDERS_HEADERS = ["id","user_id","text","when_utc","created_at","status"]
DAILY_HEADERS = ["timestamp","user_id","mood","comment"]
FEEDBACK_HEADERS = ["timestamp","user_id","name","username","rating","comment"]
RULES_HEADERS = ["rule_id","domain","segment","lang","text","citations"]
# NEW: Preferences ‚Äî –ª–∏—á–Ω—ã–µ –≤–∫—É—Å—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª–∏ —Ñ–∏–¥–±–µ–∫–∞ –∏ –∞–≤—Ç–æ—Å–ø—Ä–∞—à–∏–≤–∞–Ω–∏–π
PREFERENCES_HEADERS = ["user_id","likes_json","dislikes_json","meal_budget","reminder_preset","last_fb_date","last_auto_q_utc"]

def ws_records(ws, expected_headers):
    try:
        return ws.get_all_records(expected_headers=expected_headers, default_blank="")
    except Exception as e:
        logging.error(f"ws_records fallback ({getattr(ws,'title','?')}): {e}")
        vals = ws.get_all_values()
        if not vals: return []
        body = vals[1:]
        out = []
        for row in body:
            row = (row + [""] * len(expected_headers))[:len(expected_headers)]
            out.append({h: row[i] for i, h in enumerate(expected_headers)})
        return out

# === –°–æ—Ö—Ä–∞–Ω—è–µ–º gspread client –∏ id —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è register_intake_pro ===
GSPREAD_CLIENT: Optional[gspread.client.Client] = None
SPREADSHEET_ID_FOR_INTAKE: str = ""

def _sheets_init():
    global SHEETS_ENABLED, ss, ws_feedback, ws_users, ws_profiles, ws_episodes, ws_reminders, ws_daily, ws_rules, ws_prefs
    global GSPREAD_CLIENT, SPREADSHEET_ID_FOR_INTAKE
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if not creds_json:
            raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
        creds = json.loads(creds_json)
        credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds, scope)
        gclient = gspread.authorize(credentials)
        GSPREAD_CLIENT = gclient

        try:
            ss = gclient.open_by_key(SHEET_ID) if SHEET_ID else gclient.open(SHEET_NAME)
        except SpreadsheetNotFound:
            if ALLOW_CREATE_SHEET:
                ss = gclient.create(SHEET_NAME)
            else:
                raise

        try:
            SPREADSHEET_ID_FOR_INTAKE = ss.id
        except Exception:
            SPREADSHEET_ID_FOR_INTAKE = SHEET_ID or ""

        def _ensure_ws(title: str, headers: List[str]):
            try:
                ws = ss.worksheet(title)
            except gspread.WorksheetNotFound:
                ws = ss.add_worksheet(title=title, rows=1000, cols=max(20, len(headers)))
                ws.append_row(headers)
            if not ws.get_all_values():
                ws.append_row(headers)
            return ws

        ws_feedback = _ensure_ws("Feedback", FEEDBACK_HEADERS)
        ws_users    = _ensure_ws("Users", USERS_HEADERS)
        ws_profiles = _ensure_ws("Profiles", PROFILES_HEADERS)
        ws_episodes = _ensure_ws("Episodes", EPISODES_HEADERS)
        ws_reminders= _ensure_ws("Reminders", REMINDERS_HEADERS)
        ws_daily    = _ensure_ws("DailyCheckins", DAILY_HEADERS)
        ws_rules    = _ensure_ws("Rules", RULES_HEADERS)
        ws_prefs    = _ensure_ws("Preferences", PREFERENCES_HEADERS)  # NEW
        logging.info("Google Sheets connected.")
    except Exception as e:
        SHEETS_ENABLED = False
        logging.error(f"SHEETS disabled (fallback to memory). Reason: {e}")

_sheets_init()

# --------- Memory fallback stores ----------
MEM_USERS: Dict[int, dict] = {}
MEM_PROFILES: Dict[int, dict] = {}
MEM_EPISODES: List[dict] = []
MEM_REMINDERS: List[dict] = []
MEM_FEEDBACK: List[dict] = []
MEM_DAILY: List[dict] = []
MEM_RULES: List[dict] = []
MEM_PREFS: Dict[int, dict] = {}

# --------- Sessions ----------
sessions: Dict[int, dict] = {}

# -------- Sheets wrappers --------
def _headers(ws):
    return ws.row_values(1)

def users_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        for r in ws_records(ws_users, USERS_HEADERS):
            if str(r.get("user_id")) == str(uid):
                return r
        return {}
    return MEM_USERS.get(uid, {})

def users_upsert(uid: int, username: str, lang: str):
    base = {
        "user_id": str(uid),
        "username": username or "",
        "lang": lang,
        "consent": "no",
        "tz_offset": "0",
        "checkin_hour": DEFAULT_CHECKIN_LOCAL,
        "paused": "no",
        "quiet_hours": "22:00-08:00",
        "last_sent_utc": "",
        "sent_today": "0",
        "streak": "0",
        "challenge_id": "",
        "challenge_day": ""
    }
    if SHEETS_ENABLED:
        vals = ws_records(ws_users, USERS_HEADERS)
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                ws_users.update(range_name=f"A{i}:M{i}", values=[[base.get(h,"") for h in USERS_HEADERS]])
                return
        ws_users.append_row([base.get(h,"") for h in USERS_HEADERS])
    else:
        MEM_USERS[uid] = base

def users_set(uid: int, field: str, value: str):
    if SHEETS_ENABLED:
        vals = ws_records(ws_users, USERS_HEADERS)
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                hdr = USERS_HEADERS
                if field in hdr:
                    ws_users.update_cell(i, hdr.index(field)+1, value)
                return
    else:
        u = MEM_USERS.setdefault(uid, {})
        u[field] = value

def profiles_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        for r in ws_records(ws_profiles, PROFILES_HEADERS):
            if str(r.get("user_id")) == str(uid):
                return r
        return {}
    return MEM_PROFILES.get(uid, {})

def profiles_upsert(uid: int, data: dict):
    if SHEETS_ENABLED:
        hdr = PROFILES_HEADERS
        current, idx = None, None
        for i, r in enumerate(ws_records(ws_profiles, PROFILES_HEADERS), start=2):
            if str(r.get("user_id")) == str(uid):
                current, idx = r, i
                break
        if not current:
            current = {"user_id": str(uid)}
        for k,v in data.items():
            current[k] = "" if v is None else (", ".join(v) if isinstance(v,list) else str(v))
        current["updated_at"] = iso(utcnow())
        values = [current.get(h,"") for h in hdr]
        end_col = gsu.rowcol_to_a1(1, len(hdr)).rstrip("1")
        if idx:
            ws_profiles.update(range_name=f"A{idx}:{end_col}{idx}", values=[values])
        else:
            ws_profiles.append_row(values)
    else:
        row = MEM_PROFILES.setdefault(uid, {"user_id": str(uid)})
        for k,v in data.items():
            row[k] = "" if v is None else (", ".join(v) if isinstance(v,list) else str(v))
        row["updated_at"] = iso(utcnow())

def prefs_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        for r in ws_records(ws_prefs, PREFERENCES_HEADERS):
            if str(r.get("user_id")) == str(uid):
                return r
        return {}
    return MEM_PREFS.get(uid, {})

def prefs_upsert(uid: int, data: dict):
    if SHEETS_ENABLED:
        hdr = PREFERENCES_HEADERS
        current, idx = None, None
        for i, r in enumerate(ws_records(ws_prefs, PREFERENCES_HEADERS), start=2):
            if str(r.get("user_id")) == str(uid):
                current, idx = r, i
                break
        if not current:
            current = {"user_id": str(uid), "likes_json":"{}", "dislikes_json":"{}", "meal_budget":"", "reminder_preset":"", "last_fb_date":"", "last_auto_q_utc":""}
        for k,v in data.items():
            current[k] = "" if v is None else (json.dumps(v, ensure_ascii=False) if isinstance(v,(dict,list)) else str(v))
        values = [current.get(h,"") for h in hdr]
        end_col = gsu.rowcol_to_a1(1, len(hdr)).rstrip("1")
        if idx:
            ws_prefs.update(range_name=f"A{idx}:{end_col}{idx}", values=[values])
        else:
            ws_prefs.append_row(values)
    else:
        row = MEM_PREFS.setdefault(uid, {"user_id": str(uid),"likes_json":"{}","dislikes_json":"{}","meal_budget":"","reminder_preset":"","last_fb_date":"","last_auto_q_utc":""})
        for k,v in data.items():
            row[k] = "" if v is None else (json.dumps(v, ensure_ascii=False) if isinstance(v,(dict,list)) else str(v))

def prefs_set(uid: int, field: str, value: str):
    if SHEETS_ENABLED:
        vals = ws_records(ws_prefs, PREFERENCES_HEADERS)
        hdr = PREFERENCES_HEADERS
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                if field in hdr:
                    ws_prefs.update_cell(i, hdr.index(field)+1, value)
                return
        # if not exists ‚Äî upsert
        prefs_upsert(uid, {field: value})
    else:
        row = MEM_PREFS.setdefault(uid, {"user_id": str(uid)})
        row[field] = value

def episode_create(uid: int, topic: str, severity: int, red: str) -> str:
    eid = f"{uid}-{uuid.uuid4().hex[:8]}"
    now = iso(utcnow())
    rec = {"episode_id":eid,"user_id":str(uid),"topic":topic,"started_at":now,
           "baseline_severity":str(severity),"red_flags":red,"plan_accepted":"0",
           "target":"<=3/10","reminder_at":"","next_checkin_at":"","status":"open",
           "last_update":now,"notes":""}
    if SHEETS_ENABLED:
        ws_episodes.append_row([rec.get(h,"") for h in EPISODES_HEADERS])
    else:
        MEM_EPISODES.append(rec)
    return eid

def episode_find_open(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED:
        for r in ws_records(ws_episodes, EPISODES_HEADERS):
            if r.get("user_id")==str(uid) and r.get("status")=="open":
                return r
        return None
    for r in MEM_EPISODES:
        if r["user_id"]==str(uid) and r["status"]=="open":
            return r
    return None

def episode_set(eid: str, field: str, value: str):
    if SHEETS_ENABLED:
        vals = ws_episodes.get_all_values(); hdr = vals[0]
        if field not in hdr:
            return
        col = hdr.index(field)+1
        for i in range(2, len(vals)+1):
            if ws_episodes.cell(i,1).value == eid:
                ws_episodes.update_cell(i,col,value)
                ws_episodes.update_cell(i,hdr.index("last_update")+1, iso(utcnow()))
                return
    else:
        for r in MEM_EPISODES:
            if r["episode_id"]==eid:
                r[field]=value; r["last_update"]=iso(utcnow()); return

def feedback_add(ts, uid, name, username, rating, comment):
    if SHEETS_ENABLED:
        ws_feedback.append_row([ts,str(uid),name,username or "",rating,comment])
    else:
        MEM_FEEDBACK.append({"timestamp":ts,"user_id":str(uid),"name":name,"username":username or "","rating":rating,"comment":comment})

def reminder_add(uid: int, text: str, when_utc: datetime):
    rid = f"{uid}-{uuid.uuid4().hex[:6]}"
    rec = {"id":rid,"user_id":str(uid),"text":text,"when_utc":iso(when_utc),"created_at":iso(utcnow()),"status":"scheduled"}
    if SHEETS_ENABLED:
        ws_reminders.append_row([rec.get(h,"") for h in REMINDERS_HEADERS])
    else:
        MEM_REMINDERS.append(rec)
    return rid

def reminders_all_records():
    if SHEETS_ENABLED:
        return ws_records(ws_reminders, REMINDERS_HEADERS)
    return MEM_REMINDERS.copy()

def reminders_mark_sent(rid: str):
    if SHEETS_ENABLED:
        vals = ws_reminders.get_all_values()
        for i in range(2, len(vals)+1):
            if ws_reminders.cell(i,1).value == rid:
                ws_reminders.update_cell(i,6,"sent"); return
    else:
        for r in MEM_REMINDERS:
            if r["id"]==rid:
                r["status"]="sent"; return

def daily_add(ts, uid, mood, comment):
    if SHEETS_ENABLED:
        ws_daily.append_row([ts,str(uid),mood,comment or ""])
    else:
        MEM_DAILY.append({"timestamp":ts,"user_id":str(uid),"mood":mood,"comment":comment or ""})

# --------- JobQueue helper ----------
def _has_jq_app(app) -> bool:
    return getattr(app, "job_queue", None) is not None

def _has_jq_ctx(context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        return getattr(context.application, "job_queue", None) is not None
    except Exception:
        return False

# --------- Scheduling (restore) ---------
def schedule_from_sheet_on_start(app):
    if not _has_jq_app(app):
        logging.warning("JobQueue not available ‚Äì skip scheduling on start.")
        return
    now = utcnow()
    src = ws_records(ws_episodes, EPISODES_HEADERS) if SHEETS_ENABLED else MEM_EPISODES
    for r in src:
        if r.get("status")!="open": continue
        eid = r.get("episode_id"); uid = int(r.get("user_id"))
        nca = r.get("next_checkin_at") or ""
        if not nca: continue
        try:
            dt_ = datetime.strptime(nca, "%Y-%m-%d %H:%M:%S%z")
        except:
            continue
        delay = max(60, (dt_-now).total_seconds())
        app.job_queue.run_once(job_checkin_episode, when=delay, data={"user_id":uid,"episode_id":eid})
    for r in reminders_all_records():
        if (r.get("status") or "")!="scheduled": continue
        uid = int(r.get("user_id")); rid=r.get("id")
        try:
            dt_ = datetime.strptime(r.get("when_utc"), "%Y-%m-%d %H:%M:%S%z")
        except:
            continue
        delay = max(60,(dt_-now).total_seconds())
        app.job_queue.run_once(job_oneoff_reminder, when=delay, data={"user_id":uid,"reminder_id":rid})
    src_u = ws_records(ws_users, USERS_HEADERS) if SHEETS_ENABLED else list(MEM_USERS.values())
    for u in src_u:
        if (u.get("paused") or "").lower()=="yes": continue
        uid = int(u.get("user_id"))
        tz_off = int(str(u.get("tz_offset") or "0"))
        hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
        schedule_daily_checkin(app, uid, tz_off, hhmm, norm_lang(u.get("lang") or "en"))
        # –≤–µ—á–µ—Ä–Ω–∏–π + —Ç–∏—Ö–∏–µ —á–∞—Å—ã
        schedule_morning_evening(app, uid, tz_off, norm_lang(u.get("lang") or "en"))

def hhmm_tuple(hhmm:str)->Tuple[int,int]:
    m = re.search(r'([01]?\d|2[0-3]):([0-5]\d)', hhmm.strip())
    return (int(m.group(1)), int(m.group(2))) if m else (8,30)

def local_to_utc_hour_min(tz_offset_hours:int, hhmm:str)->Tuple[int,int]:
    h,m = hhmm_tuple(hhmm); return ((h - tz_offset_hours) % 24, m)

def schedule_daily_checkin(app, uid:int, tz_off:int, hhmm_local:str, lang:str):
    if not _has_jq_app(app):
        logging.warning(f"JobQueue not available ‚Äì skip daily scheduling for uid={uid}.")
        return
    for j in app.job_queue.get_jobs_by_name(f"daily_{uid}"):
        j.schedule_removal()
    h_utc, m_utc = local_to_utc_hour_min(tz_off, hhmm_local)
    t = dtime(hour=h_utc, minute=m_utc, tzinfo=timezone.utc)
    app.job_queue.run_daily(job_daily_checkin, time=t, name=f"daily_{uid}", data={"user_id":uid,"lang":lang})

# === –£—Ç—Ä–æ+–í–µ—á–µ—Ä –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (simple) ===
def schedule_morning_evening(app, uid:int, tz_off:int, lang:str, morning="08:30", evening="20:30"):
    if not _has_jq_app(app): return
    for name in [f"daily_m_{uid}", f"daily_e_{uid}"]:
        for j in app.job_queue.get_jobs_by_name(name): j.schedule_removal()
    h_m, m_m = hhmm_tuple(morning); h_m = (h_m - tz_off) % 24
    h_e, m_e = hhmm_tuple(evening); h_e = (h_e - tz_off) % 24
    app.job_queue.run_daily(job_daily_checkin, dtime(hour=h_m, minute=m_m, tzinfo=timezone.utc),
                            name=f"daily_m_{uid}", data={"user_id":uid,"lang":lang})
    app.job_queue.run_daily(job_daily_checkin, dtime(hour=h_e, minute=m_e, tzinfo=timezone.utc),
                            name=f"daily_e_{uid}", data={"user_id":uid,"lang":lang})

# ------------- –õ–∏–º–∏—Ç–µ—Ä –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π + —Ç–∏—Ö–∏–µ —á–∞—Å—ã -------------
def _in_quiet(uid: int, now_utc: datetime) -> bool:
    u = users_get(uid)
    q = (u.get("quiet_hours") or "").strip()
    if not q: return False
    m = re.match(r'(\d{1,2}):(\d{2})-(\d{1,2}):(\d{2})', q)
    if not m: return False
    tz_off = int(str(u.get("tz_offset") or "0"))
    local = now_utc + timedelta(hours=tz_off)
    start = local.replace(hour=int(m.group(1)), minute=int(m.group(2)), second=0, microsecond=0)
    end   = local.replace(hour=int(m.group(3)), minute=int(m.group(4)), second=0, microsecond=0)
    if end <= start:
        return local >= start or local <= end
    return start <= local <= end

def can_send(uid: int) -> bool:
    u = users_get(uid)
    if (u.get("paused") or "").lower() == "yes": return False
    if _in_quiet(uid, utcnow()): return False
    sent_today = int(str(u.get("sent_today") or "0"))
    return sent_today < 2

def mark_sent(uid: int):
    u = users_get(uid)
    tz_off = int(str(u.get("tz_offset") or "0"))
    last = u.get("last_sent_utc") or ""
    today_local = (utcnow() + timedelta(hours=tz_off)).date()
    last_local  = None
    if last:
        try:
            last_local = (datetime.strptime(last, "%Y-%m-%d %H:%M:%S%z").astimezone(timezone.utc) + timedelta(hours=tz_off)).date()
        except:
            last_local = None
    sent = 0 if (not last_local or last_local != today_local) else int(str(u.get("sent_today") or "0"))
    users_set(uid, "sent_today", str(sent + 1))
    users_set(uid, "last_sent_utc", iso(utcnow()))

async def maybe_send(context: ContextTypes.DEFAULT_TYPE, uid: int, text: str, kb=None):
    if can_send(uid):
        try:
            await context.bot.send_message(uid, text, reply_markup=kb)
            mark_sent(uid)
        except Exception as e:
            logging.error(f"send fail: {e}")

# ------------- Jobs (—á–∞—Å—Ç—å –æ–±—â–∞—è; —Å–∞–º job_daily_checkin –Ω–∏–∂–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω) -------------
async def job_checkin_episode(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, eid = d.get("user_id"), d.get("episode_id")
    if not uid or not eid: return
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes": return
    lang = norm_lang(u.get("lang") or "en")
    kb = inline_numbers_0_10()
    try:
        await context.bot.send_message(uid, T[lang]["checkin_ping"], reply_markup=kb)
        episode_set(eid, "next_checkin_at", "")
    except Exception as e:
        logging.error(f"job_checkin_episode send error: {e}")

async def job_oneoff_reminder(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, rid = d.get("user_id"), d.get("reminder_id")
    text = T[norm_lang(users_get(uid).get("lang") or "en")]["thanks"]
    for r in reminders_all_records():
        if r.get("id")==rid:
            text = r.get("text") or text; break
    try:
        await context.bot.send_message(uid, text)
    except Exception as e:
        logging.error(f"reminder send error: {e}")
    reminders_mark_sent(rid)

# ------------- –¢–æ–Ω/—Å—Ç–∏–ª—å + —Ä–æ—É—Ç–µ—Ä -------------
SYS_ROUTER = (
    "You are TendAI ‚Äî a concise, warm assistant (not a doctor). "
    "Answer strictly in {lang}. Be brief (‚â§3 short lines or up to 3 bullets). "
    "One idea ‚Üí one question. Use user profile (sex/age/goal/conditions) silently. "
    "TRIAGE: ask 1 clarifier first; ER only for clear red flags. Return JSON ONLY as: "
    "{\"intent\":\"symptom\"|\"nutrition\"|\"sleep\"|\"labs\"|\"habits\"|\"longevity\"|\"other\","
    "\"assistant_reply\":\"string\",\"followups\":[\"string\"],\"needs_more\":true,"
    "\"red_flags\":false,\"confidence\":0.0}"
)

def llm_router_answer(text: str, lang: str, profile: dict) -> dict:
    if not oai:
        return {"intent":"other","assistant_reply":T[lang]["unknown"],"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}
    sys = SYS_ROUTER.replace("{lang}", lang) + f"\nUserProfile: {json.dumps(profile, ensure_ascii=False)}"
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.25,
            max_tokens=380,
            response_format={"type":"json_object"},
            messages=[{"role":"system","content":sys},{"role":"user","content":text}]
        )
        out = resp.choices[0].message.content.strip()
        data = json.loads(out)
        if "followups" not in data or data["followups"] is None:
            data["followups"] = []
        return data
    except Exception as e:
        logging.error(f"router LLM error: {e}")
        return {"intent":"other","assistant_reply":T[lang]["unknown"],"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}

# ===== Rules-based –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞) =====
def rules_match(seg: str, prof: dict) -> bool:
    if not seg:
        return True
    for part in seg.split("&"):
        m = re.match(r'(\w+)\s*(>=|<=|=|>|<)\s*([\w\-]+)', part.strip())
        if not m:
            return False
        k, op, v = m.groups()
        pv = (prof.get(k) or prof.get(k.lower()) or "")
        if k in ("age", "steps_target", "cycle_avg_len"):
            try:
                pv = int(re.search(r'\d+', str(pv)).group())
                v = int(v)
            except Exception:
                return False
        else:
            pv = str(pv).lower()
            v = str(v).lower()
        if op == "=" and not (pv == v): return False
        if op == ">=" and not (pv >= v): return False
        if op == "<=" and not (pv <= v): return False
        if op == ">"  and not (pv >  v): return False
        if op == "<"  and not (pv <  v): return False
    return True

def _read_rules():
    if SHEETS_ENABLED:
        return ws_records(ws_rules, RULES_HEADERS)
    return MEM_RULES

def pick_nutrition_tips(lang: str, prof: dict, limit: int = 2) -> List[str]:
    tips = []
    for r in _read_rules():
        if (r.get("domain") or "").lower() != "nutrition":
            continue
        if (r.get("lang") or "en") != lang:
            continue
        if rules_match(r.get("segment") or "", prof):
            t = (r.get("text") or "").strip()
            if t:
                tips.append(t)
    random.shuffle(tips)
    return tips[:limit]

# ===== –ú–∏–Ω–∏-–ª–æ–≥–∏–∫–∞ —Ü–∏–∫–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) =====
def cycle_phase_for(uid: int) -> Optional[str]:
    prof = profiles_get(uid)
    if str(prof.get("cycle_enabled") or "").lower() not in {"1","yes","true"}:
        return None
    try:
        last = datetime.strptime(str(prof.get("cycle_last_date")), "%Y-%m-%d").date()
        avg  = int(str(prof.get("cycle_avg_len") or "28"))
    except Exception:
        return None
    day = ((utcnow().date() - last).days % max(avg, 21)) + 1
    if 1 <= day <= 5:   return "menses"
    if 6 <= day <= 13:  return "follicular"
    if 14 <= day <= 15: return "ovulation"
    return "luteal"

def cycle_tip(lang: str, phase: str) -> str:
    if lang not in T: lang = "en"
    base = {
        "menses": {
            "ru":"–§–∞–∑–∞ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏: –º—è–≥—á–µ –∫ —Å–µ–±–µ, –∂–µ–ª–µ–∑–æ/–±–µ–ª–æ–∫, —Å–æ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.",
            "en":"Menses phase: go gentle, prioritize iron/protein and sleep."
        },
        "follicular": {
            "ru":"–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞: –ª—É—á—à–µ –∑–∞—Ö–æ–¥—è—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.",
            "en":"Follicular phase: great for workouts and new tasks."
        },
        "ovulation": {
            "ru":"–û–≤—É–ª—è—Ü–∏—è: —Å–ª–µ–¥–∏ –∑–∞ —Å–Ω–æ–º –∏ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–µ–π.",
            "en":"Ovulation: watch sleep and hydration."
        },
        "luteal": {
            "ru":"–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è: –º–∞–≥–Ω–∏–π/–ø—Ä–æ–≥—É–ª–∫–∞, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–æ–Ω, –º–µ–Ω—å—à–µ –∫–æ—Ñ–µ–∏–Ω–∞.",
            "en":"Luteal: magnesium/walk, steady sleep, go easy on caffeine."
        }
    }
    return base.get(phase, {}).get(lang, "")

# ===== –ü—Ä–µ—Ñ–∏–∫—Å –ø—Ä–æ—Ñ–∏–ª—è: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 1 —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–∏ =====
def profile_signature(prof: dict) -> str:
    return "|".join([
        str(prof.get("sex") or "").lower(),
        re.search(r"\d+", str(prof.get("age") or "" )).group() if re.search(r"\d+", str(prof.get("age") or "")) else "",
        str(prof.get("goal") or "").lower()
    ])

def _localize_sex(lang:str, sex_raw:str)->str:
    s = (sex_raw or "").lower()
    if lang=="ru":
        return {"male":"–º—É–∂—á–∏–Ω–∞","female":"–∂–µ–Ω—â–∏–Ω–∞"}.get(s, "—á–µ–ª.")
    if lang=="uk":
        return {"male":"—á–æ–ª–æ–≤—ñ–∫","female":"–∂—ñ–Ω–∫–∞"}.get(s, "–ª—é–¥–∏–Ω–∞")
    return {"male":"male","female":"female"}.get(s, s or "‚Äî")

def _localize_goal(lang:str, goal_raw:str)->str:
    g = (goal_raw or "").lower()
    if lang=="ru":
        return {"longevity":"–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ","weight":"–≤–µ—Å","energy":"—ç–Ω–µ—Ä–≥–∏—è","sleep":"—Å–æ–Ω","strength":"—Å–∏–ª–∞"}.get(g, g or "‚Äî")
    if lang=="uk":
        return {"longevity":"–¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è","weight":"–≤–∞–≥–∞","energy":"–µ–Ω–µ—Ä–≥—ñ—è","sleep":"—Å–æ–Ω","strength":"—Å–∏–ª–∞"}.get(g, g or "‚Äî")
    return g or "‚Äî"

def maybe_profile_prefix(uid:int, lang:str, prof:dict) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ/–ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
    sig = profile_signature(prof)
    s = sessions.setdefault(uid, {})
    if s.get("px_sig") != sig:
        # –ø—Ä–æ—Ñ–∏–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç—å —Å–Ω–æ–≤–∞
        s["px_shown"] = False
        s["px_sig"] = sig
    if s.get("px_shown"):
        return ""
    # —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏ –æ—Ç–º–µ—Ç–∏–º –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—É—é
    sex_loc = _localize_sex(lang, prof.get("sex"))
    goal_loc = _localize_goal(lang, prof.get("goal"))
    age_num = re.search(r"\d+", str(prof.get("age") or ""))
    age_str = age_num.group() if age_num else "‚Äî"
    prefix = T[lang]["px"].format(sex_loc=sex_loc, age=age_str, goal_loc=goal_loc)
    s["px_shown"] = True
    return prefix

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–æ 3 –ø—Ä–µ—Å–µ—Ç–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, ‚â§6‚Äì7 –∫–Ω–æ–ø–æ–∫) =====
def inline_numbers_0_10() -> InlineKeyboardMarkup:
    rows = []
    row1 = [InlineKeyboardButton(str(n), callback_data=f"num|{n}") for n in range(0, 6)]
    row2 = [InlineKeyboardButton(str(n), callback_data=f"num|{n}") for n in range(6, 11)]
    rows.append(row1); rows.append(row2); rows.append([InlineKeyboardButton("‚óÄ", callback_data="pain|exit")])
    return InlineKeyboardMarkup(rows)

def inline_list(options: List[str], prefix: str) -> InlineKeyboardMarkup:
    rows, row = [], []
    for opt in options:
        row.append(InlineKeyboardButton(opt, callback_data=f"{prefix}|{opt}"))
        if len(row) == 3: rows.append(row); row = []
    if row: rows.append(row)
    return InlineKeyboardMarkup(rows)

def inline_topic_kb(lang: str) -> InlineKeyboardMarkup:
    label = {"ru":"üß© –û–ø—Ä–æ—Å 6 –ø—É–Ω–∫—Ç–æ–≤","uk":"üß© –û–ø–∏—Ç–Ω–∏–∫ (6)","en":"üß© Intake (6 Qs)","es":"üß© Intake (6)"}[lang]
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üçé Nutrition", callback_data="topic|nutrition"),
         InlineKeyboardButton("üò¥ Sleep", callback_data="topic|sleep"),
         InlineKeyboardButton("üèÉ Activity", callback_data="topic|habits")],
        [InlineKeyboardButton("üß™ Labs", callback_data="topic|labs"),
         InlineKeyboardButton("üß¨ Longevity", callback_data="topic|longevity"),
         InlineKeyboardButton("üë§ Profile", callback_data="topic|profile")],
        [InlineKeyboardButton(label, callback_data="intake:start")]
    ])

def inline_accept(lang: str) -> InlineKeyboardMarkup:
    labels = T[lang]["accept_opts"]
    return InlineKeyboardMarkup([[InlineKeyboardButton(labels[0], callback_data="acc|yes"),
                                  InlineKeyboardButton(labels[1], callback_data="acc|later"),
                                  InlineKeyboardButton(labels[2], callback_data="acc|no")]])

def inline_remind(lang: str) -> InlineKeyboardMarkup:
    # –¢–æ–ª—å–∫–æ 3 –ø—Ä–µ—Å–µ—Ç–∞: +4—á, –≤–µ—á–µ—Ä–æ–º, —É—Ç—Ä–æ–º
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["act_rem_4h"], callback_data="rem|4h")],
        [InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="rem|evening")],
        [InlineKeyboardButton(T[lang]["act_rem_morn"], callback_data="rem|morning")]
    ])

def inline_feedback_kb(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["fb_good"], callback_data="fb|up"),
         InlineKeyboardButton(T[lang]["fb_bad"],  callback_data="fb|down")],
        [InlineKeyboardButton(T[lang]["fb_free"], callback_data="fb|text")]
    ])

def inline_actions(lang: str) -> InlineKeyboardMarkup:
    # ‚â§6 –∫–Ω–æ–ø–æ–∫: 3 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è + 3 –±—ã—Å—Ç—Ä—ã—Ö
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["act_rem_4h"],  callback_data="act|rem|4h"),
         InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="act|rem|evening"),
         InlineKeyboardButton(T[lang]["act_rem_morn"],callback_data="act|rem|morning")],
        [InlineKeyboardButton(T[lang]["h60_btn"],     callback_data="act|h60"),
         InlineKeyboardButton(T[lang]["act_find_lab"],callback_data="act|lab"),
         InlineKeyboardButton(T[lang]["act_er"],      callback_data="act|er")]
    ])

# ===== –§–∏–¥–±–µ–∫: –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏ =====
def _today_str(uid:int)->str:
    u=users_get(uid); tz=int(str(u.get("tz_offset") or "0"))
    return (utcnow()+timedelta(hours=tz)).date().isoformat()

def should_ask_feedback(uid:int)->bool:
    p = prefs_get(uid)
    last = (p.get("last_fb_date") or "").strip()
    today = _today_str(uid)
    return last != today

async def maybe_ask_feedback(context_or_msg, uid:int, lang:str):
    if should_ask_feedback(uid):
        # –æ–±–Ω–æ–≤–∏–º –¥–∞—Ç—É –≤ Preferences
        prefs_set(uid, "last_fb_date", _today_str(uid))
        kb = inline_feedback_kb(lang)
        # context_or_msg –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç jobqueue –∏–ª–∏ message; –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ
        try:
            if hasattr(context_or_msg, "bot"):
                await context_or_msg.bot.send_message(uid, T[lang]["ask_fb"], reply_markup=kb)
            else:
                await context_or_msg.reply_text(T[lang]["ask_fb"], reply_markup=kb)
        except Exception: pass

# ===== –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å + 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ =====
def _json_or_empty(s:str)->dict:
    try:
        return json.loads(s or "{}")
    except Exception:
        return {}

def _push_like(uid:int, key:str):
    p = prefs_get(uid); likes = _json_or_empty(p.get("likes_json"))
    likes[key] = int(likes.get(key,0)) + 1
    prefs_upsert(uid, {"likes_json": likes})

def meal_options(lang:str, time_of_day:str, prof:dict)->List[str]:
    plant = (str(prof.get("diet") or "").lower() in {"plant","vegetarian","vegan"})
    # –ë—é–¥–∂–µ—Ç/–∞–ª–ª–µ—Ä–≥–∏–∏ –∏ –¥—Ä. –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å; –¥–µ—Ä–∂–∏–º –∫–æ—Ä–æ—Ç–∫–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ
    if plant:
        base = {
            "breakfast": ["–¢–æ—Ñ—É-—Å–∫—Ä—ç–º–±–ª + –æ–≤–æ—â–∏", "–ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç 200 –≥ + —è–≥–æ–¥—ã", "–û–≤—Å—è–Ω–∫–∞ –Ω–∞ –≤–æ–¥–µ + –∞—Ä–∞—Ö–∏—Å–æ–≤–∞—è –ø–∞—Å—Ç–∞ 1 —Å—Ç. –ª."],
            "dinner":    ["–ß–µ—á–µ–≤–∏—á–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∞ + —Å–∞–ª–∞—Ç", "–ö—É—Å–∫—É—Å + –Ω—É—Ç + –æ–≤–æ—â–∏", "–¢–æ—Ñ—É –∑–∞–ø–µ—á—ë–Ω–Ω—ã–π + –±—Ä–æ–∫–∫–æ–ª–∏"]
        }
    else:
        base = {
            "breakfast": ["–¢–≤–æ—Ä–æ–≥ 200 –≥ + –æ–≥—É—Ä–µ—Ü", "–û–º–ª–µ—Ç 2 —è–π—Ü–∞ + –æ–≤–æ—â–∏", "–°–∞—Ä–¥–∏–Ω—ã 1 –±–∞–Ω–∫–∞ + —Å–∞–ª–∞—Ç"],
            "dinner":    ["–ö—É—Ä–∏—Ü–∞ 120‚Äì150 –≥ + —Å–∞–ª–∞—Ç", "–†—ã–±–∞ 120‚Äì150 –≥ + –æ–≤–æ—â–∏", "–ì–æ–≤—è–¥–∏–Ω–∞ –ø–æ—Å—Ç–Ω–∞—è 120 –≥ + –±—Ä–æ–∫–∫–æ–ª–∏"]
        }
    if lang=="en":
        base = {
            "breakfast": ["Cottage cheese 200 g + cucumber", "2-egg omelet + veggies", "Sardines (1 can) + salad"],
            "dinner":    ["Chicken 120‚Äì150 g + salad", "Fish 120‚Äì150 g + veggies", "Lean beef 120 g + broccoli"]
        } if not plant else {
            "breakfast": ["Tofu scramble + veggies", "Greek yogurt 200 g + berries", "Oatmeal + 1 tbsp peanut butter"],
            "dinner":    ["Lentil patty + salad", "Couscous + chickpeas + veggies", "Baked tofu + broccoli"]
        }
    return base.get(time_of_day, [])[:3]

def build_food_options_kb(options:List[str])->InlineKeyboardMarkup:
    rows=[]
    for i,opt in enumerate(options, start=1):
        rows.append([InlineKeyboardButton(f"{i}) {opt}", callback_data=f"food|pick|{i}|{opt}")])
    rows.append([InlineKeyboardButton("‚óÄ", callback_data="food|back")])
    return InlineKeyboardMarkup(rows)

def personalize_followup(text:str, lang:str, prof:dict)->Tuple[Optional[str], Optional[InlineKeyboardMarkup], Optional[dict]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–≤–æ–ø—Ä–æ—Å, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, meta) –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ.
    meta –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å { 'kind':'protein', 'time_choices':True } –∏ —Ç.–ø.
    """
    low = (text or "").lower()
    # ‚Üë –±–µ–ª–æ–∫ / protein
    if any(k in low for k in ["–±–µ–ª–∫–∞","–±–µ–ª–æ–∫","protein"]):
        q = "–û–∫–µ–π üëç. –î–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞ –∏–ª–∏ —É–∂–∏–Ω–∞?" if lang=="ru" else ("–û–∫ üëç. –°–Ω—ñ–¥–∞–Ω–æ–∫ —á–∏ –≤–µ—á–µ—Ä—è?" if lang=="uk" else "Okay üëç. For breakfast or dinner?")
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("ü•£ –ó–∞–≤—Ç—Ä–∞–∫" if lang!="en" else "ü•£ Breakfast", callback_data="food|time|breakfast"),
             InlineKeyboardButton("üçΩÔ∏è –£–∂–∏–Ω"    if lang!="en" else "üçΩÔ∏è Dinner",    callback_data="food|time|dinner")]
        ])
        return q, kb, {"kind":"protein"}
    # —Å–æ–Ω
    if any(k in low for k in ["—Å–æ–Ω","sleep","insomnia","—É—Å–Ω—É—Ç—å"]):
        q = "–ü–æ–¥—Å–∫–∞–∑–∫—É ‚Äî —É—Å–Ω—É—Ç—å –ª–µ–≥—á–µ –∏–ª–∏ —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–∑–≥–æ–Ω?" if lang=="ru" else ("–ü—ñ–¥–∫–∞–∑–∫—É ‚Äî –ª–µ–≥—à–µ –∑–∞—Å–Ω—É—Ç–∏ —á–∏ —Ä–∞–Ω–∫–æ–≤–∏–π —Ä–æ–∑–≥—ñ–Ω?" if lang=="uk" else "Tip ‚Äî easier falling asleep or morning boost?")
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üåô –ó–∞—Å–Ω—É—Ç—å" if lang!="en" else "üåô Fall asleep", callback_data="sleep|focus|night"),
             InlineKeyboardButton("‚òÄÔ∏è –£—Ç—Ä–æ"   if lang!="en" else "‚òÄÔ∏è Morning",     callback_data="sleep|focus|morning")]
        ])
        return q, kb, {"kind":"sleep"}
    # –ø–∏—Ç–∞–Ω–∏–µ/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä
    if any(k in low for k in ["–ø–∏—Ç–∞–Ω–∏","nutrition","–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç","activity"]):
        q = T[lang]["auto_q_choice"]
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üçé –ü–∏—Ç–∞–Ω–∏–µ" if lang!="en" else "üçé Nutrition", callback_data="topic|nutrition"),
             InlineKeyboardButton("üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" if lang!="en" else "üèÉ Activity", callback_data="topic|habits")]
        ])
        return q, kb, {"kind":"choice"}
    return None, None, None

# ===== –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º daily-–¥–∂–æ–±—É: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –ø–∏—Ç–∞–Ω–∏–µ + —Ü–∏–∫–ª + –∞–≤—Ç–æ-–≤–æ–ø—Ä–æ—Å =====
async def job_daily_checkin(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, lang = d.get("user_id"), d.get("lang","en")
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes":
        return
    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (1 –∫–æ—Ä–æ—Ç–∫–æ–µ)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["mood_good"], callback_data="mood|good"),
         InlineKeyboardButton(T[lang]["mood_ok"], callback_data="mood|ok"),
         InlineKeyboardButton(T[lang]["mood_bad"], callback_data="mood|bad")],
        [InlineKeyboardButton(T[lang]["mood_note"], callback_data="mood|note")]
    ])
    await maybe_send(context, uid, T[lang]["daily_gm"], kb)

    # 1‚Äì2 —Å–æ–≤–µ—Ç–∞ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏–∑ Rules
    prof = profiles_get(uid)
    tips = pick_nutrition_tips(lang, prof, limit=1)  # –∫–æ—Ä–æ—á–µ
    if tips:
        await maybe_send(context, uid, "‚Ä¢ " + "\n‚Ä¢ ".join(tips))

    # –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —Ñ–∞–∑–µ —Ü–∏–∫–ª–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    phase = cycle_phase_for(uid)
    if phase:
        tip = cycle_tip(lang, phase)
        if tip:
            await maybe_send(context, uid, tip)

    # –ê–≤—Ç–æ-–≤–æ–ø—Ä–æ—Å —Ä–∞–∑ –≤ –¥–µ–Ω—å
    p = prefs_get(uid); last = (p.get("last_auto_q_utc") or "")
    try:
        last_dt = datetime.strptime(last, "%Y-%m-%d %H:%M:%S%z") if last else None
    except: last_dt = None
    do_ask = not last_dt or (utcnow() - last_dt) > timedelta(hours=22)
    if do_ask and can_send(uid):
        q = random.choice([T[lang]["auto_q_sleep"], T[lang]["auto_q_breakfast"], T[lang]["auto_q_choice"]])
        await context.bot.send_message(uid, q)
        prefs_set(uid, "last_auto_q_utc", iso(utcnow()))

# ===== Serious keywords =====
SERIOUS_KWS = {
    "diabetes":["diabetes","–¥–∏–∞–±–µ—Ç","—Å–∞—Ö–∞—Ä–Ω—ã–π","—Ü—É–∫—Ä–æ–≤","–≥–ª—é–∫–æ–∑–∞","hba1c","–≥–ª–∏–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π","–≥–ª—é–∫–æ–∑–∞"],
    "hepatitis":["hepatitis","–≥–µ–ø–∞—Ç–∏—Ç","–ø–µ—á–µ–Ω—å hbs","hcv","alt","ast"],
    "cancer":["cancer","—Ä–∞–∫","–æ–Ω–∫–æ","–æ–Ω–∫–æ–ª–æ–≥","–æ–ø—É—Ö–æ–ª","–ø—É—Ö–ª–∏–Ω–∞","tumor"],
    "tb":["tuberculosis","tb","—Ç—É–±–µ—Ä–∫—É–ª","—Ç—É–±–µ—Ä–∫—É–ª—å–æ–∑"],
}

def detect_serious(text: str) -> Optional[str]:
    low = (text or "").lower()
    for cond, kws in SERIOUS_KWS.items():
        if any(k in low for k in kws):
            return cond
    return None

# ===== –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –∏ –ø–ª–∞–Ω—ã =====
def pain_plan(lang: str, red_flags_selected: List[str], profile: dict) -> List[str]:
    flg = [s for s in red_flags_selected if s and str(s).lower() not in ["none","–Ω–µ—Ç","–Ω–µ–º–∞—î","ninguno","no"]]
    if flg:
        return {"ru":["‚ö†Ô∏è –ï—Å—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏. –õ—É—á—à–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –≤—Ä–∞—á—É/–≤ —Å–∫–æ—Ä—É—é."],
                "uk":["‚ö†Ô∏è –Ñ —Ç—Ä–∏–≤–æ–∂–Ω—ñ –æ–∑–Ω–∞–∫–∏. –í–∞—Ä—Ç–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è/—à–≤–∏–¥–∫–æ—ó."],
                "en":["‚ö†Ô∏è Red flags present. Please seek urgent medical evaluation."],
                "es":["‚ö†Ô∏è Se√±ales de alarma presentes. Busca evaluaci√≥n m√©dica urgente."]}[lang]
    age = int(re.search(r"\d+", str(profile.get("age") or "0")).group(0)) if re.search(r"\d+", str(profile.get("age") or "")) else 0
    extra = []
    if age >= 60:
        extra.append({"ru":"–í–∞–º 60+, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –ù–ü–í–ü; –ø–µ–π—Ç–µ –≤–æ–¥—É –∏ –ø—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É.",
                      "uk":"–í–∞–º 60+, –æ–±–µ—Ä–µ–∂–Ω–æ –∑ –ù–ü–ó–ó; –ø–∏–π—Ç–µ –≤–æ–¥—É, –∑–∞ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è ‚Äî –¥–æ –ª—ñ–∫–∞—Ä—è.",
                      "en":"Age 60+: be careful with NSAIDs; hydrate and seek care if worsening.",
                      "es":"Edad 60+: cuidado con AINEs; hidr√°tate y busca atenci√≥n si empeora."}[lang])
    core = {"ru":["1) –í–æ–¥–∞ 400‚Äì600 –º–ª –∏ 15‚Äì20 –º–∏–Ω –æ—Ç–¥—ã—Ö–∞.",
                  "2) –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –∏–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ —Å –µ–¥–æ–π.",
                  "3) –ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å, –º–µ–Ω—å—à–µ —ç–∫—Ä–∞–Ω–æ–≤ 30‚Äì60 –º–∏–Ω.","–¶–µ–ª—å: –∫ –≤–µ—á–µ—Ä—É –±–æ–ª—å ‚â§3/10."],
            "uk":["1) –í–æ–¥–∞ 400‚Äì600 –º–ª —ñ 15‚Äì20 —Ö–≤ —Å–ø–æ–∫–æ—é.",
                  "2) –Ø–∫—â–æ –Ω–µ–º–∞ –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω—å ‚Äî —ñ–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –∑ —ó–∂–µ—é.",
                  "3) –ü—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏, –º–µ–Ω—à–µ –µ–∫—Ä–∞–Ω—É 30‚Äì60 —Ö–≤.","–ú–µ—Ç–∞: –¥–æ –≤–µ—á–æ—Ä–∞ –±—ñ–ª—å ‚â§3/10."],
            "en":["1) Drink 400‚Äì600 ml water; rest 15‚Äì20 min.",
                  "2) If no contraindications ‚Äî ibuprofen 200‚Äì400 mg once with food.",
                  "3) Air the room; reduce screens 30‚Äì60 min.","Goal: by evening pain ‚â§3/10."],
            "es":["1) Bebe 400‚Äì600 ml de agua; descansa 15‚Äì20 min.",
                  "2) Si no hay contraindicaciones ‚Äî ibuprofeno 200‚Äì400 mg una vez con comida.",
                  "3) Ventila la habitaci√≥n; menos pantallas 30‚Äì60 min.","Meta: por la tarde dolor ‚â§3/10."]}[lang]
    return core + extra + [T[lang]["er_text"]]
PREFERENCES_HEADERS = ["user_id","likes_json","dislikes_json","meal_budget","reminder_preset","last_feedback_date"]
ws_prefs = None
MEM_PREFS: Dict[int, dict] = {}

def _ensure_preferences_sheet():
global ws_prefs
if not SHEETS_ENABLED or not ss:
return
try:
ws_prefs_local = ss.worksheet("Preferences")
except gspread.WorksheetNotFound:
ws_prefs_local = ss.add_worksheet(title="Preferences", rows=1000, cols=max(10, len(PREFERENCES_HEADERS)))
ws_prefs_local.append_row(PREFERENCES_HEADERS)
if not ws_prefs_local.get_all_values():
ws_prefs_local.append_row(PREFERENCES_HEADERS)
ws_prefs = ws_prefs_local

try:
_ensure_preferences_sheet()
except Exception as e:
logging.warning(f"Preferences sheet init skipped: {e}")

def prefs_get(uid: int) -> dict:
if SHEETS_ENABLED and ws_prefs:
try:
vals = ws_prefs.get_all_records(expected_headers=PREFERENCES_HEADERS, default_blank="")
except Exception:
vals = []
for r in vals:
if str(r.get("user_id")) == str(uid):
return r
return {}
return MEM_PREFS.get(uid, {})

def _json_load(s: str) -> dict:
try:
return json.loads(s or "{}")
except Exception:
return {}

def prefs_upsert(uid: int, data: dict):
row = {
"user_id": str(uid),
"likes_json": "{}",
"dislikes_json": "{}",
"meal_budget": "",
"reminder_preset": "",
"last_feedback_date": ""
}
row.update(prefs_get(uid))
for k, v in data.items():
row[k] = v if not isinstance(v, (dict, list)) else json.dumps(v, ensure_ascii=False)
if SHEETS_ENABLED and ws_prefs:
all_rows = ws_prefs.get_all_values()
hdr = all_rows[0] if all_rows else PREFERENCES_HEADERS
# –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å
idx = None
for i in range(2, len(all_rows) + 1):
if ws_prefs.cell(i, 1).value == str(uid):
idx = i
break
vals = [row.get(h, "") for h in PREFERENCES_HEADERS]
end_col = gsu.rowcol_to_a1(1, len(PREFERENCES_HEADERS)).rstrip("1")
if idx:
ws_prefs.update(range_name=f"A{idx}:{end_col}{idx}", values=[vals])
else:
ws_prefs.append_row(vals)
else:
MEM_PREFS[uid] = row

def prefs_inc_like(uid: int, key: str):
p = prefs_get(uid)
likes = _json_load(p.get("likes_json",""))
likes[key] = int(likes.get(key, 0)) + 1
prefs_upsert(uid, {"likes_json": likes})

def prefs_set_reminder(uid: int, preset: str):
prefs_upsert(uid, {"reminder_preset": preset})

def prefs_set_fb_date(uid: int, ymd: str):
prefs_upsert(uid, {"last_feedback_date": ymd})

-------- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–∞/—Ü–µ–ª–∏ + –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –ø—Ä–æ—Ñ–∏–ª—è ---------

SEX_LABELS = {
"ru": {"male":"–º—É–∂—á–∏–Ω–∞","female":"–∂–µ–Ω—â–∏–Ω–∞","other":"–¥—Ä—É–≥–æ–µ"},
"uk": {"male":"—á–æ–ª–æ–≤—ñ–∫","female":"–∂—ñ–Ω–∫–∞","other":"—ñ–Ω—à–µ"},
"en": {"male":"male","female":"female","other":"other"},
"es": {"male":"hombre","female":"mujer","other":"otro"},
}
GOAL_LABELS = {
"ru": {"weight":"–ø–æ—Ö—É–¥–µ–Ω–∏–µ","energy":"—ç–Ω–µ—Ä–≥–∏—è","sleep":"—Å–æ–Ω","longevity":"–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ","strength":"—Å–∏–ª–∞"},
"uk": {"weight":"–≤–∞–≥–∞","energy":"–µ–Ω–µ—Ä–≥—ñ—è","sleep":"—Å–æ–Ω","longevity":"–¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è","strength":"—Å–∏–ª–∞"},
"en": {"weight":"weight","energy":"energy","sleep":"sleep","longevity":"longevity","strength":"strength"},
"es": {"weight":"peso","energy":"energ√≠a","sleep":"sue√±o","longevity":"longevidad","strength":"fuerza"},
}

def _profile_hash(prof: dict) -> str:
parts = [str(prof.get("sex","")).lower(), str(prof.get("age","")), str(prof.get("goal","")).lower()]
return "|".join(parts)

def profile_short_label(lang: str, prof: dict) -> str:
lang = norm_lang(lang)
sex = (prof.get("sex") or "").lower()
age = str(prof.get("age") or "").strip()
goal = (prof.get("goal") or prof.get("goals") or "").lower()
sex_lbl = SEX_LABELS.get(lang, SEX_LABELS["en"]).get(sex, sex or "")
goal_lbl = GOAL_LABELS.get(lang, GOAL_LABELS["en"]).get(goal, goal or "")
# —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: RU —Ñ–æ—Ä–º–∞—Ç ¬´–º—É–∂—á–∏–Ω–∞, 42; —Ü–µ–ª—å ‚Äî –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ¬ª
if lang == "ru":
age_part = age if age else "‚Äî"
return f"{sex_lbl}, {age_part}; —Ü–µ–ª—å ‚Äî {goal_lbl}".strip(", ;")
if lang == "uk":
age_part = age if age else "‚Äî"
return f"{sex_lbl}, {age_part}; –º–µ—Ç–∞ ‚Äî {goal_lbl}".strip(", ;")
if lang == "es":
age_part = age if age else "‚Äî"
return f"{sex_lbl}, {age_part}; objetivo ‚Äî {goal_lbl}".strip(", ;")
# en
age_part = f"{age}" if age else "‚Äî"
return f"{sex_lbl}, {age_part}; goal ‚Äî {goal_lbl}".strip(", ;")

–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º personalized_prefix: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 1 —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏

def personalized_prefix(lang: str, profile: dict) -> str:
try:
uid = int(profile.get("user_id") or 0)
except Exception:
uid = 0
if not uid:
return ""
s = sessions.setdefault(uid, {})
curr_hash = _profile_hash(profile)
shown_hash = s.get("px_hash","")
if not s.get("px_shown", False) or shown_hash != curr_hash:
s["px_shown"] = True
s["px_hash"] = curr_hash
# –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–æ—Ä–º–∞
return profile_short_label(lang, profile)
return ""

-------- –¢–æ–Ω/—Å—Ç–∏–ª—å LLM: ¬´1 –º—ã—Å–ª—å ‚Üí 1 –≤–æ–ø—Ä–æ—Å¬ª, —Ç–µ–ø–ª–µ–µ –∏ –∫–æ—Ä–æ—á–µ ----------

SYS_ROUTER = (
"You are TendAI ‚Äî warm, simple, supportive health assistant (not a doctor). "
"Answer strictly in {lang}. Be concise. Prefer: one short thought ‚Üí one short question. "
"Use friendly tone, avoid medical jargon. Personalize with profile (sex/age/goal/conditions). "
"If giving tips, list up to 3 concrete, ready-to-do options for today. "
"TRIAGE: ask 1‚Äì2 clarifiers; ER only for clear red flags. "
"Return JSON ONLY: "
"{"intent":"symptom"|"nutrition"|"sleep"|"labs"|"habits"|"longevity"|"other","
""assistant_reply":"string","followups":["string"],"needs_more":true,"
""red_flags":false,"confidence":0.0}"
)

-------- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–µ—Å–µ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (3 —à—Ç) ----------

def inline_remind(lang: str) -> InlineKeyboardMarkup:
# –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 3 –ø—Ä–µ—Å–µ—Ç–∞: +4 —á, –≤–µ—á–µ—Ä–æ–º, —É—Ç—Ä–æ–º
return InlineKeyboardMarkup([
[InlineKeyboardButton(T[lang]["act_rem_4h"], callback_data="rem|4h")],
[InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="rem|evening")],
[InlineKeyboardButton(T[lang]["act_rem_morn"],callback_data="rem|morning")]
])

def inline_actions(lang: str) -> InlineKeyboardMarkup:
# –º–∞–∫—Å–∏–º—É–º ~6‚Äì7 –∫–Ω–æ–ø–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω, –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏
return InlineKeyboardMarkup([
[InlineKeyboardButton(T[lang]["h60_btn"], callback_data="act|h60")],
[InlineKeyboardButton(T[lang]["act_rem_4h"], callback_data="act|rem|4h"),
InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="act|rem|evening"),
InlineKeyboardButton(T[lang]["act_rem_morn"],callback_data="act|rem|morning")],
[InlineKeyboardButton(T[lang]["act_ex_neck"], callback_data="act|ex|neck")],
[InlineKeyboardButton(T[lang]["act_find_lab"], callback_data="act|lab")],
[InlineKeyboardButton(T[lang]["act_er"], callback_data="act|er")]
])

-------- –§–∏–¥–±–µ–∫: –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å ----------

def _today_local_str(uid: int) -> str:
u = users_get(uid)
tz_off = int(str(u.get("tz_offset") or "0"))
return (utcnow() + timedelta(hours=tz_off)).strftime("%Y-%m-%d")

def maybe_ask_feedback(context: ContextTypes.DEFAULT_TYPE, uid: int, lang: str):
# –ø—Ä–∏ –∫–ª—é—á–µ–≤—ã—Ö –±–ª–æ–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø–ª–∞–Ω/–≤–∞—Ä–∏–∞–Ω—Ç—ã) ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –Ω–µ —á–∞—â–µ 1/–¥–µ–Ω—å
today = _today_local_str(uid)
p = prefs_get(uid)
last = str(p.get("last_feedback_date") or "")
if last == today:
return
# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–µ–Ω—å
async def _send():
try:
await context.bot.send_message(uid, T[lang]["ask_fb"], reply_markup=inline_feedback_kb(lang))
prefs_set_fb_date(uid, today)
except Exception as e:
logging.error(f"maybe_ask_feedback send error: {e}")
return _send()

-------- –ö—É–ª–¥–∞—É–Ω –∞–≤—Ç–æ—Å–ø—Ä–∞—à–∏–≤–∞–Ω–∏–π (30 –º–∏–Ω—É—Ç) ----------

def set_auto_cooldown(uid: int, minutes: int = 30):
sessions.setdefault(uid, {})["next_auto_ask_utc"] = utcnow() + timedelta(minutes=minutes)

def in_auto_cooldown(uid: int) -> bool:
next_ = sessions.setdefault(uid, {}).get("next_auto_ask_utc")
return bool(next_ and utcnow() < next_)

–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º maybe_send: —É—á–∏—Ç—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω

async def maybe_send(context: ContextTypes.DEFAULT_TYPE, uid: int, text: str, kb=None):
if in_auto_cooldown(uid):
return
if can_send(uid):
try:
await context.bot.send_message(uid, text, reply_markup=kb)
mark_sent(uid)
except Exception as e:
logging.error(f"send fail: {e}")

-------- –ê–≤—Ç–æ–≤–æ–ø—Ä–æ—Å—ã: –º—è–≥–∫–∏–µ, –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ + –≤–æ–ø—Ä–æ—Å ----------

AUTO_QUESTIONS = {
"ru": [
"–ö–∞–∫ —Å–ø–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è (—á–∞—Å—ã)?",
"–ß—Ç–æ –±—ã–ª–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫?",
"–î–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç ‚Äî –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏–µ?"
],
"en": [
"How did you sleep today (hours)?",
"What did you have for breakfast?",
"Want a quick tip ‚Äî activity or nutrition?"
],
"uk": [
"–Ø–∫ —Å–ø–∞–ª–æ—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ (–≥–æ–¥–∏–Ω–∏)?",
"–©–æ –±—É–ª–æ –Ω–∞ —Å–Ω—ñ–¥–∞–Ω–æ–∫?",
"–î–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É –ø–æ—Ä–∞–¥—É ‚Äî –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —á–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è?"
],
"es": [
"¬øC√≥mo dormiste hoy (horas)?",
"¬øQu√© desayunaste?",
"¬øTe doy un tip r√°pido ‚Äî actividad o nutrici√≥n?"
]
}

async def maybe_auto_question(context: ContextTypes.DEFAULT_TYPE, uid: int, lang: str):
if in_auto_cooldown(uid):
return
qs = AUTO_QUESTIONS.get(lang, AUTO_QUESTIONS["en"])
q = random.choice(qs)
await maybe_send(context, uid, q)
set_auto_cooldown(uid, 30)

-------- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ¬´–∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤¬ª –ø–æ –µ–¥–µ ----------

def meal_options(lang: str, time_of_day: str = "any", flags: Optional[set] = None) -> List[Tuple[str,str]]:
# –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ (label, key)
flags = flags or set()
RU = [
("–¢–≤–æ—Ä–æ–≥ 200 –≥ + –æ–≥—É—Ä–µ—Ü", "cottage"),
("–û–º–ª–µ—Ç 2 —è–π—Ü–∞ + –æ–≤–æ—â–∏", "omelet"),
("–°–∞—Ä–¥–∏–Ω—ã 1 –±–∞–Ω–∫–∞ + —Å–∞–ª–∞—Ç", "sardines"),
("–ö–µ—Ñ–∏—Ä 250 –º–ª + —è–≥–æ–¥—ã", "kefir"),
("–ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç 200 –≥ + –æ—Ä–µ—Ö–∏", "yogurt"),
]
EN = [
("Cottage cheese 200g + cucumber", "cottage"),
("2-egg omelet + veggies", "omelet"),
("Sardines (1 can) + salad", "sardines"),
("Kefir 250ml + berries", "kefir"),
("Greek yogurt 200g + nuts", "yogurt"),
]
UK = [
("–¢–≤–æ—Ä–æ–≥ 200 –≥ + –æ–≥—ñ—Ä–æ–∫", "cottage"),
("–û–º–ª–µ—Ç 2 —è–π—Ü—è + –æ–≤–æ—á—ñ", "omelet"),
("–°–∞—Ä–¥–∏–Ω–∏ 1 –±–∞–Ω–∫–∞ + —Å–∞–ª–∞—Ç", "sardines"),
("–ö–µ—Ñ—ñ—Ä 250 –º–ª + —è–≥–æ–¥–∏", "kefir"),
("–ì—Ä–µ—Ü—å–∫–∏–π –π–æ–≥—É—Ä—Ç 200 –≥ + –≥–æ—Ä—ñ—Ö–∏", "yogurt"),
]
ES = [
("Reques√≥n 200g + pepino", "cottage"),
("Tortilla 2 huevos + verduras", "omelet"),
("Sardinas (1 lata) + ensalada", "sardines"),
("K√©fir 250ml + frutos rojos", "kefir"),
("Yogur griego 200g + nueces", "yogurt"),
]
base = {"ru": RU, "en": EN, "uk": UK, "es": ES}.get(lang, EN)
# –ø—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
if time_of_day == "breakfast":
base = [x for x in base if x[1] in {"cottage","omelet","yogurt","kefir"}]
if "fish_free" in flags:
base = [x for x in base if x[1] != "sardines"]
random.shuffle(base)
return base[:3]

def meal_kb(opts: List[Tuple[str,str]]) -> InlineKeyboardMarkup:
rows = [[InlineKeyboardButton(lbl, callback_data=f"food|pick|{key}")] for (lbl,key) in opts]
rows.append([InlineKeyboardButton("‚óÄ", callback_data="food|exit")])
return InlineKeyboardMarkup(rows)

-------- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–º—ã—Å–ª—å ‚Üí –≤–æ–ø—Ä–æ—Å) ----------

def personalize_followup(lang: str, text: str) -> Optional[Tuple[str, str]]:
low = text.lower()
if any(k in low for k in ["–±–µ–ª–∫–∞","–±–µ–ª–æ–∫","protein","–ø—Ä–æ—Ç–µ—ó–Ω"]):
return ({"ru":"–û–∫–µ–π üëç. –î–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞ –∏–ª–∏ —É–∂–∏–Ω–∞?",
"uk":"–û–∫–µ–π üëç. –î–ª—è —Å–Ω—ñ–¥–∞–Ω–∫—É —á–∏ –≤–µ—á–µ—Ä—ñ?",
"en":"Got it üëç. For breakfast or dinner?",
"es":"Vale üëç. ¬øPara desayuno o cena?"}[lang], "food|time")
if any(k in low for k in ["—Å–æ–Ω","sleep"]):
return ({"ru":"–•–æ—á–µ—à—å —Å–æ–≤–µ—Ç –ø—Ä–æ –∑–∞—Å—ã–ø–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ —É—Ç—Ä–æ?",
"uk":"–ü–æ—Ä–∞–¥–∞ –ø—Ä–æ –∑–∞—Å–∏–Ω–∞–Ω–Ω—è —á–∏ –ø—Ä–æ —Ä–∞–Ω–æ–∫?",
"en":"Want a tip for falling asleep or morning routine?",
"es":"¬øUn tip para conciliar el sue√±o o la ma√±ana?"}[lang], "sleep|focus")
return None

-------- Job: —É—Ç—Ä–æ/–≤–µ—á–µ—Ä + –∞–≤—Ç–æ-–≤–æ–ø—Ä–æ—Å—ã (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—â—ë —Ä–∞–∑) ----------

async def job_daily_checkin(context: ContextTypes.DEFAULT_TYPE):
d = context.job.data or {}
uid, lang = d.get("user_id"), d.get("lang","en")
u = users_get(uid)
if (u.get("paused") or "").lower()=="yes":
return
# –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî –º—è–≥–∫–æ
kb = InlineKeyboardMarkup([
[InlineKeyboardButton(T[lang]["mood_good"], callback_data="mood|good"),
InlineKeyboardButton(T[lang]["mood_ok"], callback_data="mood|ok"),
InlineKeyboardButton(T[lang]["mood_bad"], callback_data="mood|bad")],
[InlineKeyboardButton(T[lang]["mood_note"], callback_data="mood|note")]
])
await maybe_send(context, uid, T[lang]["daily_gm"], kb)

# –∫—Ä–∞—Ç–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏–∑ Rules
prof = profiles_get(uid)
tips = pick_nutrition_tips(lang, prof, limit=2)
if tips:
    await maybe_send(context, uid, "‚Ä¢ " + "\n‚Ä¢ ".join(tips))

# —Å–æ–≤–µ—Ç –ø–æ —Ü–∏–∫–ª—É (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω)
phase = cycle_phase_for(uid)
if phase:
    tip = cycle_tip(lang, phase)
    if tip:
        await maybe_send(context, uid, tip)

# –æ–¥–∏–Ω –∞–≤—Ç–æ-–≤–æ–ø—Ä–æ—Å
await maybe_auto_question(context, uid, lang)


|python

-------- OnText: –∫–æ—Ä–æ—á–µ/—Ç–µ–ø–ª–µ–µ, 1 –º—ã—Å–ª—å ‚Üí 1 –≤–æ–ø—Ä–æ—Å, 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ ----------

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
user = update.effective_user; uid = user.id
text = (update.message.text or "").strip()
logging.info(f"INCOMING uid={uid} text={text[:200]}")

urec = users_get(uid)
if not urec:
    lang_guess = detect_lang_from_text(text, norm_lang(getattr(user, "language_code", None)))
    users_upsert(uid, user.username or "", lang_guess)
    sessions.setdefault(uid, {})["last_user_text"] = text
    await update.message.reply_text(T[lang_guess]["welcome"], reply_markup=ReplyKeyboardRemove())
    await update.message.reply_text({"ru":"–ü–∏—Ç–∞–Ω–∏–µ, —Å–æ–Ω –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?",
                                     "uk":"–•–∞—Ä—á—É–≤–∞–Ω–Ω—è, —Å–æ–Ω —á–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å?",
                                     "en":"Nutrition, sleep or activity?",
                                     "es":"Nutrici√≥n, sue√±o o actividad?"}[lang_guess],
                                    reply_markup=inline_topic_kb(lang_guess))
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang_guess]["yes"], callback_data="consent|yes"),
                                InlineKeyboardButton(T[lang_guess]["no"],  callback_data="consent|no")]])
    await update.message.reply_text(T[lang_guess]["ask_consent"], reply_markup=kb)
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, uid, 0, DEFAULT_CHECKIN_LOCAL, lang_guess)
        schedule_morning_evening(context.application, uid, 0, lang_guess)
    await gate_show(update, context)
    return

saved_lang = norm_lang(urec.get("lang") or getattr(user,"language_code",None))
detected_lang = detect_lang_from_text(text, saved_lang)
if detected_lang != saved_lang:
    users_set(uid,"lang",detected_lang)
lang = detected_lang
sessions.setdefault(uid, {})["last_user_text"] = text

# –±—ã—Å—Ç—Ä—ã–µ —Ä–µ–∂–∏–º—ã
if sessions.get(uid, {}).get("awaiting_daily_comment"):
    daily_add(iso(utcnow()), uid, "note", text)
    sessions[uid]["awaiting_daily_comment"] = False
    set_auto_cooldown(uid, 30)
    await update.message.reply_text(T[lang]["mood_thanks"]); return

if sessions.get(uid, {}).get("awaiting_free_feedback"):
    sessions[uid]["awaiting_free_feedback"] = False
    feedback_add(iso(utcnow()), uid, "free", user.username, "", text)
    await update.message.reply_text(T[lang]["fb_thanks"]); return

if sessions.get(uid, {}).get("awaiting_city"):
    sessions[uid]["awaiting_city"] = False
    set_auto_cooldown(uid, 30)
    await update.message.reply_text(T[lang]["thanks"]); return

# Health60 –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
if sessions.get(uid, {}).get("awaiting_h60"):
    sessions[uid]["awaiting_h60"] = False
    prof = profiles_get(uid)
    px_once = personalized_prefix(lang, {**prof, "user_id": str(uid)})
    plan = health60_make_plan(lang, text, prof) if 'health60_make_plan' in globals() else T[lang]["unknown"]
    msg_head = (px_once + "\n") if px_once else ""
    await update.message.reply_text(msg_head + str(plan), reply_markup=inline_actions(lang))
    await maybe_ask_feedback(context, uid, lang)
    set_auto_cooldown(uid, 30)
    return

# –ø—Ä–æ—Ñ–∏–ª—å (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —à–∞–≥–∞)
if sessions.get(uid, {}).get("p_wait_key"):
    key = sessions[uid]["p_wait_key"]; sessions[uid]["p_wait_key"] = None
    val = text
    if key=="age":
        m = re.search(r'\d{2,3}', text)
        if m: val = m.group(0)
    profiles_upsert(uid,{key:val}); sessions[uid][key]=val
    await advance_profile_ctx(context, update.effective_chat.id, lang, uid); return

# —Å–µ—Ä—å—ë–∑–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
sc = detect_serious(text)
if sc:
    sessions.setdefault(uid,{})["mode"] = "serious"
    sessions[uid]["serious_condition"] = sc
    prof = profiles_get(uid)
    px_once = personalized_prefix(lang, {**prof, "user_id": str(uid)})
    plan = pain_plan(lang, [], prof)
    msg = (px_once + "\n" if px_once else "") + "\n".join(plan)
    await update.message.reply_text(msg, reply_markup=inline_actions(lang))
    await maybe_ask_feedback(context, uid, lang)
    set_auto_cooldown(uid, 30)
    return

# ¬´–º—ã—Å–ª—å ‚Üí –≤–æ–ø—Ä–æ—Å¬ª –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (–ø–∏—Ç–∞–Ω–∏–µ/—Å–æ–Ω)
tfu = personalize_followup(lang, text)
if tfu:
    q, code = tfu
    sessions.setdefault(uid,{})["route"] = code
    set_auto_cooldown(uid, 30)
    # –ø–∏—Ç–∞–Ω–∏–µ: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    if code == "food|time":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton({"ru":"–ó–∞–≤—Ç—Ä–∞–∫","uk":"–°–Ω—ñ–¥–∞–Ω–æ–∫","en":"Breakfast","es":"Desayuno"}[lang], callback_data="food|time|breakfast"),
             InlineKeyboardButton({"ru":"–£–∂–∏–Ω","uk":"–í–µ—á–µ—Ä—è","en":"Dinner","es":"Cena"}[lang], callback_data="food|time|dinner")],
            [InlineKeyboardButton(T[lang]["back"], callback_data="food|exit")]
        ])
        await update.message.reply_text(q, reply_markup=kb); return
    # —Å–æ–Ω: —Ñ–æ–∫—É—Å
    if code == "sleep|focus":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton({"ru":"–ó–∞—Å—ã–ø–∞–Ω–∏–µ","uk":"–ó–∞—Å–∏–Ω–∞–Ω–Ω—è","en":"Falling asleep","es":"Conciliar el sue√±o"}[lang], callback_data="sleep|focus|night"),
             InlineKeyboardButton({"ru":"–£—Ç—Ä–æ","uk":"–†–∞–Ω–æ–∫","en":"Morning","es":"Ma√±ana"}[lang], callback_data="sleep|focus|morning")],
            [InlineKeyboardButton(T[lang]["back"], callback_data="sleep|exit")]
        ])
        await update.message.reply_text(q, reply_markup=kb); return

# —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–æ—É—Ç–µ—Ä LLM ‚Üí –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç + 1 –≤–æ–ø—Ä–æ—Å
prof = profiles_get(uid)
data = llm_router_answer(text, lang, prof)
px_once = personalized_prefix(lang, {**prof, "user_id": str(uid)})
head = (px_once + "\n") if px_once else ""
reply = head + (data.get("assistant_reply") or T[lang]["unknown"])
await update.message.reply_text(reply, reply_markup=inline_actions(lang))
# –¥–æ–±–∞–≤–∏–º –æ–¥–∏–Ω —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ followups, –µ—Å–ª–∏ –µ—Å—Ç—å
fups = (data.get("followups") or [])
if fups:
    await send_unique(update.message, uid, fups[0], force=True)
await maybe_ask_feedback(context, uid, lang)
set_auto_cooldown(uid, 30)
return

-------- Callbacks: –ø–∏—Ç–∞–Ω–∏–µ/—Å–æ–Ω/—Ñ–∏–¥–±–µ–∫/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ----------

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
q = update.callback_query; await q.answer()
data = (q.data or ""); uid = q.from_user.id
lang = norm_lang(users_get(uid).get("lang") or "en")
chat_id = q.message.chat.id

if data.startswith("gate:"):
    await gate_cb(update, context); return

# –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –∫–∞–∫ –±—ã–ª–æ –≤ –æ—Å–Ω–æ–≤–µ
if data.startswith("p|"):
    _, action, key, *rest = data.split("|")
    s = sessions.setdefault(uid, {"profile_active": True, "p_step": 0})
    if action == "choose":
        value = "|".join(rest) if rest else ""
        s[key] = value; profiles_upsert(uid, {key: value})
        # —Å–±—Ä–æ—Å–∏–º –ø–æ–∫–∞–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è
        s["px_shown"] = False
        await advance_profile_ctx(context, chat_id, lang, uid); return
    if action == "write":
        s["p_wait_key"] = key
        await q.message.reply_text({"ru":"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:","uk":"–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ:",
                                    "en":"Type your answer:","es":"Escribe tu respuesta:"}[lang]); return
    if action == "skip":
        profiles_upsert(uid, {key: ""})
        await advance_profile_ctx(context, chat_id, lang, uid); return

if data.startswith("consent|"):
    users_set(uid, "consent", "yes" if data.endswith("|yes") else "no")
    try: await q.edit_message_reply_markup(reply_markup=None)
    except: pass
    await q.message.reply_text(T[lang]["thanks"]); return

if data.startswith("mood|"):
    mood = data.split("|",1)[1]
    if mood=="note":
        sessions.setdefault(uid,{})["awaiting_daily_comment"] = True
        await q.message.reply_text({"ru":"–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:","uk":"–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä:",
                                    "en":"Short note:","es":"Nota corta:"}[lang]); return
    daily_add(iso(utcnow()), uid, mood, ""); await q.message.reply_text(T[lang]["mood_thanks"]); return

# –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —Ç–µ–º—ã –∏–∑ –º–µ–Ω—é
if data.startswith("topic|"):
    topic = data.split("|",1)[1]
    if topic=="profile":
        await start_profile_ctx(context, chat_id, lang, uid); return
    if topic=="pain":
        sessions[uid] = {"topic":"pain","step":1,"answers":{}}
        kb = _kb_for_code(lang, "painloc")
        await q.message.reply_text(T[lang]["triage_pain_q1"], reply_markup=kb); return
    last = sessions.get(uid,{}).get("last_user_text","")
    prof = profiles_get(uid)
    prompt = f"topic:{topic}\nlast_user: {last or '‚Äî'}"
    data_llm = llm_router_answer(prompt, lang, prof)
    px_once = personalized_prefix(lang, {**prof, "user_id": str(uid)})
    reply = ((px_once + "\n") if px_once else "") + (data_llm.get("assistant_reply") or T[lang]["unknown"])
    await q.message.reply_text(reply, reply_markup=inline_actions(lang))
    fups = (data_llm.get("followups") or [])
    if fups:
        await send_unique(q.message, uid, fups[0], force=True)
    await maybe_ask_feedback(context, uid, lang)
    return

# pain triage ‚Äî –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–µ
s = sessions.setdefault(uid, {})
if data == "pain|exit":
    sessions.pop(uid, None)
    await q.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang)); return
if data.startswith("painloc|"):
    s.update({"topic":"pain","step":2,"answers":{"loc": data.split("|",1)[1]}})
    await send_unique(q.message, uid, T[lang]["triage_pain_q2"], reply_markup=_kb_for_code(lang,"painkind")); return
if data.startswith("painkind|"):
    s.setdefault("answers",{})["kind"] = data.split("|",1)[1]; s["step"]=3
    await send_unique(q.message, uid, T[lang]["triage_pain_q3"], reply_markup=_kb_for_code(lang,"paindur")); return
if data.startswith("paindur|"):
    s.setdefault("answers",{})["duration"] = data.split("|",1)[1]; s["step"]=4
    await send_unique(q.message, uid, T[lang]["triage_pain_q4"], reply_markup=_kb_for_code(lang,"num")); return
if data.startswith("num|"):
    if s.get("topic")=="pain" and s.get("step")==4:
        sev = int(data.split("|",1)[1])
        s.setdefault("answers",{})["severity"] = sev; s["step"]=5
        await send_unique(q.message, uid, T[lang]["triage_pain_q5"], reply_markup=_kb_for_code(lang,"painrf")); return
if data.startswith("painrf|"):
    red = data.split("|",1)[1]
    s.setdefault("answers",{})["red"] = red
    sev = int(s["answers"].get("severity",5))
    eid = episode_create(uid, "pain", sev, red); s["episode_id"] = eid
    plan_lines = pain_plan(lang, [red], profiles_get(uid))
    px_once = personalized_prefix(lang, {**profiles_get(uid), "user_id": str(uid)})
    text_plan = (px_once + "\n" if px_once else "") + f"{T[lang]['plan_header']}\n" + "\n".join(plan_lines)
    await q.message.reply_text(text_plan)
    await q.message.reply_text(T[lang]["plan_accept"], reply_markup=inline_accept(lang))
    await maybe_ask_feedback(context, uid, lang)
    s["step"] = 6; return
if data.startswith("acc|"):
    accepted = "1" if data.endswith("|yes") else "0"
    if s.get("episode_id"): episode_set(s["episode_id"], "plan_accepted", accepted)
    await q.message.reply_text(T[lang]["remind_when"], reply_markup=inline_remind(lang))
    s["step"] = 7; return
if data.startswith("rem|"):
    choice = data.split("|",1)[1]
    hours = {"4h":4, "evening":6, "morning":16}.get(choice)
    if hours and s.get("episode_id"):
        next_time = utcnow() + timedelta(hours=hours)
        episode_set(s["episode_id"], "next_checkin_at", iso(next_time))
        if _has_jq_ctx(context):
            context.application.job_queue.run_once(job_checkin_episode, when=hours*3600,
                                                   data={"user_id":uid,"episode_id":s["episode_id"]})
    await q.message.reply_text(T[lang]["thanks"], reply_markup=inline_topic_kb(lang))
    sessions.pop(uid, None); return

# –ü–∏—Ç–∞–Ω–∏–µ: –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏/–æ–ø—Ü–∏–π/–≤—ã–±–æ—Ä–∞
if data.startswith("food|exit"):
    sessions.pop(uid, None)
    await q.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang)); return

if data.startswith("food|time|"):
    tod = data.split("|",2)[2]  # breakfast/dinner
    sessions.setdefault(uid,{})["meal_tod"] = tod
    # —Ñ–ª–∞–≥–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    prof = profiles_get(uid)
    flags = set()
    if "—Ä—ã–±–∞" in (prof.get("diet","")+prof.get("diet_focus","")) and "–Ω–µ –µ–º" in prof.get("diet",""):
        flags.add("fish_free")
    opts = meal_options(lang, time_of_day=tod, flags=flags)
    kb = meal_kb(opts)
    head = {"ru":"–ü–æ–¥ —Ç–µ–±—è –ø–æ–¥–æ–π–¥—ë—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
            "uk":"–ü—ñ–¥—ñ–π–¥–µ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:",
            "en":"Good picks for today:",
            "es":"Opciones para hoy:"}[lang]
    await q.message.reply_text(head + "\n" + "\n".join([f"‚Ä¢ {o[0]}" for o in opts]), reply_markup=kb)
    await maybe_ask_feedback(context, uid, lang)
    return

if data.startswith("food|pick|"):
    key = data.split("|",2)[2]
    prefs_inc_like(uid, key)
    # –∑–∞–ø–∏—à–µ–º —ç–ø–∏–∑–æ–¥-–ª–æ–≥
    try:
        _ = episode_create(uid, f"food:{key}", 0, "none")
    except Exception:
        pass
    done = {"ru":"–ü—Ä–∏–Ω—è—Ç–æ. –ó–∞–ø–æ–º–Ω—é –≤–∫—É—Å –∏ –ø–æ–¥—Å—Ç—Ä–æ—é –¥–∞–ª—å—à–µ. –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –≤–µ—á–µ—Ä?",
            "uk":"–ü—Ä–∏–π–Ω—è—Ç–æ. –ó–∞–ø–∞–º'—è—Ç–∞—é —Å–º–∞–∫ —ñ –ø—ñ–¥–ª–∞—à—Ç—É—é –¥–∞–ª—ñ. –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ –≤–µ—á—ñ—Ä?",
            "en":"Nice. I‚Äôll remember this and adjust next time. Set an evening reminder?",
            "es":"Hecho. Lo recordar√© y ajustar√©. ¬øPonemos recordatorio para la tarde?"}[lang]
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="act|rem|evening")],
        [InlineKeyboardButton(T[lang]["back"], callback_data="food|exit")]
    ])
    await q.message.reply_text(done, reply_markup=kb)
    return

# –°–æ–Ω: –¥–≤–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö —Ñ–æ–∫—É—Å–∞
if data.startswith("sleep|exit"):
    sessions.pop(uid, None)
    await q.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang)); return

if data.startswith("sleep|focus|"):
    which = data.split("|",2)[2]  # night/morning
    if which == "night":
        tips = {
            "ru":["90 –º–∏–Ω –±–µ–∑ —ç–∫—Ä–∞–Ω–∞","—Ç—ë–ø–ª—ã–π –¥—É—à 5‚Äì7 –º–∏–Ω","–ø—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å/–ø—Ä–æ—Ö–ª–∞–¥–Ω–∞—è"],
            "uk":["90 —Ö–≤ –±–µ–∑ –µ–∫—Ä–∞–Ω–∞","—Ç–µ–ø–ª–∏–π –¥—É—à 5‚Äì7 —Ö–≤","–ø—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏/–ø—Ä–æ—Ö–æ–ª–æ–¥–Ω–æ"],
            "en":["90 min no screens","warm shower 5‚Äì7 min","cool, aired room"],
            "es":["90 min sin pantallas","ducha tibia 5‚Äì7 min","habitaci√≥n fresca"]
        }[lang]
    else:
        tips = {
            "ru":["–≤–æ–¥–∞ 300‚Äì500 –º–ª","10 –º–∏–Ω –±—ã—Å—Ç—Ä–∞—è —Ö–æ–¥—å–±–∞","—Å–≤–µ—Ç/–æ–∫–Ω–æ 5 –º–∏–Ω"],
            "uk":["–≤–æ–¥–∞ 300‚Äì500 –º–ª","10 —Ö–≤ —à–≤–∏–¥–∫–∞ —Ö–æ–¥—å–±–∞","—Å–≤—ñ—Ç–ª–æ/–≤—ñ–∫–Ω–æ 5 —Ö–≤"],
            "en":["300‚Äì500 ml water","10-min brisk walk","bright light 5 min"],
            "es":["300‚Äì500 ml de agua","camina 10 min","luz brillante 5 min"]
        }[lang]
    txt = "‚Ä¢ " + "\n‚Ä¢ ".join(tips) + "\n" + {
        "ru":"–ù–∞–ø–æ–º–Ω–∏—Ç—å –≤–µ—á–µ—Ä–æ–º?",
        "uk":"–ù–∞–≥–∞–¥–∞—Ç–∏ –≤–≤–µ—á–µ—Ä—ñ?",
        "en":"Remind in the evening?",
        "es":"¬øRecordar por la tarde?"
    }[lang]
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="act|rem|evening")],
        [InlineKeyboardButton(T[lang]["back"], callback_data="sleep|exit")]
    ])
    await q.message.reply_text(txt, reply_markup=kb)
    await maybe_ask_feedback(context, uid, lang)
    return

# –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
if data.startswith("act|"):
    parts = data.split("|"); kind = parts[1]
    if kind=="h60":
        sessions.setdefault(uid,{})["awaiting_h60"] = True
        await q.message.reply_text(T[lang]["h60_intro"]); return
    if kind=="rem":
        key = parts[2]; hours = {"4h":4, "evening":6, "morning":16}.get(key,4)
        when_ = utcnow() + timedelta(hours=hours)
        rid = reminder_add(uid, T[lang]["thanks"], when_)
        if _has_jq_ctx(context):
            context.application.job_queue.run_once(job_oneoff_reminder, when=hours*3600,
                                                   data={"user_id":uid,"reminder_id":rid})
        await q.message.reply_text(T[lang]["thanks"]); return
    if kind=="ex":
        txt = {"ru":"üßò 5 –º–∏–Ω—É—Ç —à–µ—è: –Ω–∞–∫–ª–æ–Ω—ã –≤–ø–µ—Ä—ë–¥/–Ω–∞–∑–∞–¥ √ó5; –ø–æ–≤–æ—Ä–æ—Ç—ã √ó5; –ø–æ–ª—É–∫—Ä—É–≥–∏ √ó5; –ª—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ 2√ó20—Å.",
               "uk":"üßò 5 —Ö–≤ —à–∏—è: –Ω–∞—Ö–∏–ª–∏ –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥ √ó5; –ø–æ–≤–æ—Ä–æ—Ç–∏ √ó5; –ø—ñ–≤–∫–æ–ª–∞ √ó5; –ª–µ–≥–∫–∞ —Ä–æ–∑—Ç—è–∂–∫–∞ 2√ó20—Å.",
               "en":"üßò Neck 5 min: flex/extend √ó5; rotations √ó5; chin semicircles √ó5; gentle stretch 2√ó20s.",
               "es":"üßò Cuello 5 min: flex/ext √ó5; giros √ó5; semic√≠rculos √ó5; estiramiento 2√ó20s."}[lang]
        await q.message.reply_text(txt); return
    if kind=="lab":
        sessions.setdefault(uid,{})["awaiting_city"] = True
        await q.message.reply_text(T[lang]["act_city_prompt"]); return
    if kind=="er":
        await q.message.reply_text(T[lang]["er_text"]); return

if data.startswith("fb|"):
    sub = data.split("|",1)[1]
    if sub == "up":
        feedback_add(iso(utcnow()), uid, "feedback_yes", q.from_user.username, 1, "")
        await q.message.reply_text(T[lang]["fb_thanks"]); return
    if sub == "down":
        feedback_add(iso(utcnow()), uid, "feedback_no",  q.from_user.username, 0, "")
        await q.message.reply_text(T[lang]["fb_thanks"]); return
    if sub == "text":
        sessions.setdefault(uid,{})["awaiting_free_feedback"] = True
        await q.message.reply_text(T[lang]["fb_write"]); return
