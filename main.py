# -*- coding: utf-8 -*-
import os
import re
import json
import uuid
import logging
from time import time
from datetime import datetime, timedelta, timezone

from dotenv import load_dotenv

# langdetect ‚Äî –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
try:
    from langdetect import detect, DetectorFactory
    DetectorFactory.seed = 0
except Exception:
    detect = None

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    ContextTypes,
    filters,
)

# ===== OpenAI =====
try:
    from openai import OpenAI
except Exception:
    OpenAI = None

# ===== Google Sheets =====
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# =========================
# Boot & Config
# =========================
load_dotenv()
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Feedback")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is missing")

# OpenAI client
oai = OpenAI(api_key=OPENAI_API_KEY) if (OPENAI_API_KEY and OpenAI) else None

# Google Sheets init
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
if not creds_json:
    raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
creds_dict = json.loads(creds_json)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gclient = gspread.authorize(credentials)
ss = gclient.open(SHEET_NAME)

def _get_or_create_ws(title: str, headers: list[str]):
    try:
        ws = ss.worksheet(title)
    except gspread.WorksheetNotFound:
        ws = ss.add_worksheet(title=title, rows=2000, cols=20)
        ws.append_row(headers)
    vals = ws.get_all_values()
    if not vals:
        ws.append_row(headers)
    return ws

ws_feedback = _get_or_create_ws(
    "Feedback", ["timestamp", "user_id", "name", "username", "rating", "comment"]
)
ws_users = _get_or_create_ws(
    "Users", ["user_id", "username", "lang", "consent", "tz_offset", "checkin_hour", "paused"]
)
ws_episodes = _get_or_create_ws(
    "Episodes",
    [
        "episode_id", "user_id", "topic", "started_at",
        "baseline_severity", "red_flags", "plan_accepted",
        "target", "reminder_at", "next_checkin_at",
        "status", "last_update", "notes",
    ],
)

# =========================
# State (RAM)
# =========================
# sessions[user_id] = {
#   "topic": "pain" | ...,
#   "flow": "chat"|"confirm"|"accept_wait"|"remind_wait"|"plan",
#   "answers": {"loc","kind","duration","severity","red"},
#   "await_step": int|str,  # "checkin"
#   "episode_id": "...",
#   "chat_history": [{"role":"user/assistant","content":"..."}],
#   "awaiting_comment": bool,
#   "awaiting_feedback_choice": bool,
#   "awaiting_consent": bool,
#   "feedback_context": str,
#   "last_send": {key: ts},
# }
sessions: dict[int, dict] = {}

# =========================
# i18n
# =========================
SUPPORTED = {"ru", "en", "uk", "es"}
def norm_lang(code: str | None) -> str:
    if not code:
        return "en"
    c = code.split("-")[0].lower()
    if c.startswith("ua"):
        c = "uk"
    return c if c in SUPPORTED else "en"

T = {
    "en": {
        "welcome": "Hi! I‚Äôm TendAI ‚Äî your health & longevity assistant.\nChoose a topic below or briefly tell me what‚Äôs going on.",
        "menu": ["Pain", "Throat/Cold", "Sleep", "Stress", "Digestion", "Energy"],
        "help": "I help with short checkups, a 24‚Äì48h plan, and gentle follow-ups.\nCommands: /help, /privacy, /pause, /resume, /delete_data, /lang, /feedback",
        "privacy": "TendAI is not a medical service and can‚Äôt replace a doctor. We store minimal data for reminders. Use /delete_data to erase your info.",
        "paused_on": "Notifications paused. Use /resume to enable.",
        "paused_off": "Notifications resumed.",
        "deleted": "All your data in TendAI was deleted. You can /start again anytime.",
        "ask_consent": "May I check in with you later about how you feel?",
        "yes": "Yes", "no": "No",
        "choose_topic": "Choose a topic:",
        "triage_pain_q5": "Any of these now?\n(High fever, Vomiting, Weakness/numbness, Speech/vision issues, Trauma, None)",
        "triage_pain_q5_opts": ["High fever", "Vomiting", "Weakness/numbness", "Speech/vision issues", "Trauma", "None"],
        "confirm_title": "Please confirm I got this right:",
        "confirm_loc": "‚Ä¢ Where: {loc}",
        "confirm_kind": "‚Ä¢ Character: {kind}",
        "confirm_duration": "‚Ä¢ Duration: {duration}",
        "confirm_severity": "‚Ä¢ Severity: {severity}/10",
        "confirm_ok": "‚úÖ Looks correct",
        "confirm_change_loc": "‚úèÔ∏è Change Where",
        "confirm_change_kind": "‚úèÔ∏è Change Character",
        "confirm_change_duration": "‚úèÔ∏è Change Duration",
        "confirm_change_severity": "‚úèÔ∏è Change Severity",
        "plan_header": "Your 24‚Äì48h plan:",
        "plan_accept": "Will you try this today?",
        "accept_opts": ["‚úÖ Yes", "üîÅ Later", "‚úñÔ∏è No"],
        "remind_when": "When shall I check on you?",
        "remind_opts": ["in 4h", "this evening", "tomorrow morning", "no need"],
        "thanks": "Got it üôå",
        "checkin_ping": "Quick check-in: how is it now (0‚Äì10)?",
        "checkin_better": "Nice! Keep it up üí™",
        "checkin_worse": "Sorry to hear. If you have red flags or pain ‚â•7/10, please consider medical help.",
        "comment_prompt": "Write your comment now. Or send /skip to pass.",
        "comment_saved": "Feedback saved, thank you! üôå",
        "skip_ok": "Skipped.",
        "unknown": "I need a bit more information to help. Where exactly does it hurt? How long has it lasted?",
        "use_buttons": "Please use the buttons below ‚§µÔ∏è",
        "lang_set": "Language set: English",
        "help_lang": "Use /lang ru|en|uk|es to change language.",
        "oos": "Got it. I‚Äôm here for health, self-care and habits. Pick a topic below or briefly tell me what‚Äôs going on.",
        "fb_prompt": "Would you like to leave quick feedback?",
        "fb_thanks": "Thanks for your feedback! üíõ",
        "fb_like": "üëç Useful",
        "fb_dislike": "üëé Didn‚Äôt help",
        "fb_write": "‚úçÔ∏è Write a comment",
    },
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –Ω–∏–∂–µ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç.",
        "menu": ["–ë–æ–ª—å", "–ì–æ—Ä–ª–æ/–ø—Ä–æ—Å—Ç—É–¥–∞", "–°–æ–Ω", "–°—Ç—Ä–µ—Å—Å", "–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ", "–≠–Ω–µ—Ä–≥–∏—è"],
        "help": "–ü–æ–º–æ–≥–∞—é –∫–æ—Ä–æ—Ç–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π, –ø–ª–∞–Ω–æ–º –Ω–∞ 24‚Äì48 —á –∏ –±–µ—Ä–µ–∂–Ω—ã–º–∏ —á–µ–∫-–∏–Ω–∞–º–∏.\n–ö–æ–º–∞–Ω–¥—ã: /help, /privacy, /pause, /resume, /delete_data, /lang, /feedback",
        "privacy": "TendAI –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞. –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. /delete_data ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å—ë.",
        "paused_on": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ø–∞—É–∑–µ. –í–∫–ª—é—á–∏—Ç—å: /resume",
        "paused_off": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.",
        "deleted": "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ TendAI —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.",
        "ask_consent": "–ú–æ–∂–Ω–æ —è –Ω–∞–ø–∏—à—É –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?",
        "yes": "–î–∞", "no": "–ù–µ—Ç",
        "choose_topic": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        "triage_pain_q5": "–ï—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ?\n(–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –†–≤–æ—Ç–∞, –°–ª–∞–±–æ—Å—Ç—å/–æ–Ω–µ–º–µ–Ω–∏–µ, –ü—Ä–æ–±–ª–µ–º—ã —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è, –¢—Ä–∞–≤–º–∞, –ù–µ—Ç)",
        "triage_pain_q5_opts": ["–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–†–≤–æ—Ç–∞", "–°–ª–∞–±–æ—Å—Ç—å/–æ–Ω–µ–º–µ–Ω–∏–µ", "–ü—Ä–æ–±–ª–µ–º—ã —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è", "–¢—Ä–∞–≤–º–∞", "–ù–µ—Ç"],
        "confirm_title": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–µ—Ä–Ω–æ –ª–∏ —è –ø–æ–Ω—è–ª:",
        "confirm_loc": "‚Ä¢ –ì–¥–µ: {loc}",
        "confirm_kind": "‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä: {kind}",
        "confirm_duration": "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}",
        "confirm_severity": "‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {severity}/10",
        "confirm_ok": "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ",
        "confirm_change_loc": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ¬´–ì–¥–µ¬ª",
        "confirm_change_kind": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ¬´–•–∞—Ä–∞–∫—Ç–µ—Ä¬ª",
        "confirm_change_duration": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ¬´–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å¬ª",
        "confirm_change_severity": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ¬´–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å¬ª",
        "plan_header": "–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á–∞—Å–æ–≤:",
        "plan_accept": "–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
        "accept_opts": ["‚úÖ –î–∞", "üîÅ –ü–æ–∑–∂–µ", "‚úñÔ∏è –ù–µ—Ç"],
        "remind_when": "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "remind_opts": ["—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞", "–≤–µ—á–µ—Ä–æ–º", "–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º", "–Ω–µ –Ω–∞–¥–æ"],
        "thanks": "–ü—Ä–∏–Ω—è—Ç–æ üôå",
        "checkin_ping": "–ö–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ 0‚Äì10?",
        "checkin_better": "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üí™",
        "checkin_worse": "–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å ¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª –∏–ª–∏ –±–æ–ª—å ‚â•7/10 ‚Äî –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        "comment_prompt": "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–µ–π—á–∞—Å. –ò–ª–∏ /skip ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        "comment_saved": "–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å–ø–∞—Å–∏–±–æ! üôå",
        "skip_ok": "–ü—Ä–æ–ø—É—â–µ–Ω–æ.",
        "unknown": "–ù—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π. –ì–¥–µ –±–æ–ª–∏—Ç –∏ —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?",
        "use_buttons": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚§µÔ∏è",
        "lang_set": "–Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: –†—É—Å—Å–∫–∏–π",
        "help_lang": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lang ru|en|uk|es —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫.",
        "oos": "–ü–æ–Ω—è–ª —Ç–µ–±—è. –Ø –ø–æ–º–æ–≥–∞—é –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º. –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–Ω–∏–∑—É –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç.",
        "fb_prompt": "–û—Å—Ç–∞–≤–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∑—ã–≤?",
        "fb_thanks": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíõ",
        "fb_like": "üëç –ü–æ–ª–µ–∑–Ω–æ",
        "fb_dislike": "üëé –ù–µ –ø–æ–º–æ–≥–ª–æ",
        "fb_write": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤",
    },
    "uk": {
        "welcome": "–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è.\n–û–±–µ—Ä–∏ —Ç–µ–º—É –Ω–∏–∂—á–µ –∞–±–æ –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏, —â–æ —Ç—É—Ä–±—É—î.",
        "menu": ["–ë—ñ–ª—å", "–ì–æ—Ä–ª–æ/–∑–∞—Å—Ç—É–¥–∞", "–°–æ–Ω", "–°—Ç—Ä–µ—Å", "–¢—Ä–∞–≤–ª–µ–Ω–Ω—è", "–ï–Ω–µ—Ä–≥—ñ—è"],
        "help": "–î–æ–ø–æ–º–∞–≥–∞—é –∫–æ—Ä–æ—Ç–∫–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é, –ø–ª–∞–Ω–æ–º –Ω–∞ 24‚Äì48 –≥–æ–¥ —ñ —á–µ–∫–∞–º–∏.\n–ö–æ–º–∞–Ω–¥–∏: /help, /privacy, /pause, /resume, /delete_data, /lang, /feedback",
        "privacy": "TendAI –Ω–µ –∑–∞–º—ñ–Ω—é—î –ª—ñ–∫–∞—Ä—è. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ–Ω—ñ–º—É–º –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å. /delete_data ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å–µ.",
        "paused_on": "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ. –£–≤—ñ–º–∫–Ω—É—Ç–∏: /resume",
        "paused_off": "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω–µ–Ω—ñ.",
        "deleted": "–£—Å—ñ –≤–∞—à—ñ –¥–∞–Ω—ñ –≤ TendAI –≤–∏–¥–∞–ª–µ–Ω–æ. –ú–æ–∂–Ω–∞ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ /start.",
        "ask_consent": "–ú–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ –≤–∏?",
        "yes": "–¢–∞–∫", "no": "–ù—ñ",
        "choose_topic": "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:",
        "triage_pain_q5": "–Ñ —â–æ—Å—å —ñ–∑ —Ü—å–æ–≥–æ?\n(–í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –ë–ª—é–≤–∞–Ω–Ω—è, –°–ª–∞–±–∫—ñ—Å—Ç—å/–æ–Ω—ñ–º—ñ–Ω–Ω—è, –ú–æ–≤–∞/–∑—ñ—Ä, –¢—Ä–∞–≤–º–∞, –ù–µ–º–∞—î)",
        "triage_pain_q5_opts": ["–í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–ë–ª—é–≤–∞–Ω–Ω—è", "–°–ª–∞–±–∫—ñ—Å—Ç—å/–æ–Ω—ñ–º—ñ–Ω–Ω—è", "–ú–æ–≤–∞/–∑—ñ—Ä", "–¢—Ä–∞–≤–º–∞", "–ù–µ–º–∞—î"],
        "confirm_title": "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —è –∑—Ä–æ–∑—É–º—ñ–≤:",
        "confirm_loc": "‚Ä¢ –î–µ: {loc}",
        "confirm_kind": "‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä: {kind}",
        "confirm_duration": "‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration}",
        "confirm_severity": "‚Ä¢ –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å: {severity}/10",
        "confirm_ok": "‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ",
        "confirm_change_loc": "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ ¬´–î–µ¬ª",
        "confirm_change_kind": "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ ¬´–•–∞—Ä–∞–∫—Ç–µ—Ä¬ª",
        "confirm_change_duration": "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ ¬´–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å¬ª",
        "confirm_change_severity": "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ ¬´–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å¬ª",
        "plan_header": "–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥:",
        "plan_accept": "–°–ø—Ä–æ–±—É—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "accept_opts": ["‚úÖ –¢–∞–∫", "üîÅ –ü—ñ–∑–Ω—ñ—à–µ", "‚úñÔ∏è –ù—ñ"],
        "remind_when": "–ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏ —Ç–∞ —Å–ø–∏—Ç–∞—Ç–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è?",
        "remind_opts": ["—á–µ—Ä–µ–∑ 4 –≥–æ–¥", "—É–≤–µ—á–µ—Ä—ñ", "–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ", "–Ω–µ —Ç—Ä–µ–±–∞"],
        "thanks": "–ü—Ä–∏–π–Ω—è—Ç–æ üôå",
        "checkin_ping": "–ö–æ—Ä–æ—Ç–∫–æ: —è–∫ –∑–∞—Ä–∞–∑ (0‚Äì10)?",
        "checkin_better": "–ß—É–¥–æ–≤–æ! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ üí™",
        "checkin_worse": "–Ø–∫—â–æ —î ¬´—á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ¬ª –∞–±–æ –±—ñ–ª—å ‚â•7/10 ‚Äî –∫—Ä–∞—â–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.",
        "comment_prompt": "–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –∑–∞—Ä–∞–∑. –ê–±–æ /skip ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.",
        "comment_saved": "–í—ñ–¥–≥—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –¥—è–∫—É—î–º–æ! üôå",
        "skip_ok": "–ü—Ä–æ–ø—É—â–µ–Ω–æ.",
        "unknown": "–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π. –î–µ –±–æ–ª–∏—Ç—å —ñ —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î?",
        "use_buttons": "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ ‚§µÔ∏è",
        "lang_set": "–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "help_lang": "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /lang ru|en|uk|es —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É.",
        "oos": "–ó—Ä–æ–∑—É–º—ñ–≤. –Ø —Ç—É—Ç –¥–ª—è –∑–¥–æ—Ä–æ–≤‚Äô—è, –∑–≤–∏—á–æ–∫ —ñ —Å–∞–º–æ–ø—ñ–∫–ª—É–≤–∞–Ω–Ω—è. –û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –Ω–∏–∂—á–µ –∞–±–æ –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é.",
        "fb_prompt": "–ó–∞–ª–∏—à–∏—Ç–∏ —à–≤–∏–¥–∫–∏–π –≤—ñ–¥–≥—É–∫?",
        "fb_thanks": "–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! üíõ",
        "fb_like": "üëç –ö–æ—Ä–∏—Å–Ω–æ",
        "fb_dislike": "üëé –ù–µ –¥–æ–ø–æ–º–æ–≥–ª–æ",
        "fb_write": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫",
    },
    "es": {
        "welcome": "¬°Hola! Soy TendAI, tu asistente de salud y longevidad.\nElige un tema abajo o cu√©ntame brevemente qu√© pasa.",
        "menu": ["Dolor", "Garganta/Resfriado", "Sue√±o", "Estr√©s", "Digesti√≥n", "Energ√≠a"],
        "help": "Te ayudo con chequeos breves, un plan de 24‚Äì48 h y seguimientos.\nComandos: /help, /privacy, /pause, /resume, /delete_data, /lang, /feedback",
        "privacy": "TendAI no sustituye a un m√©dico. Guardamos datos m√≠nimos para recordatorios. Usa /delete_data para borrar tus datos.",
        "paused_on": "Recordatorios pausados. Usa /resume para activarlos.",
        "paused_off": "Recordatorios activados de nuevo.",
        "deleted": "Se eliminaron todos tus datos en TendAI. Puedes empezar otra vez con /start.",
        "ask_consent": "¬øPuedo escribirte m√°s tarde para saber c√≥mo sigues?",
        "yes": "S√≠", "no": "No",
        "choose_topic": "Elige un tema:",
        "triage_pain_q5": "¬øAlguno de estos ahora?\n(Fiebre alta, V√≥mitos, Debilidad/entumecimiento, Habla/visi√≥n, Trauma, Ninguno)",
        "triage_pain_q5_opts": ["Fiebre alta", "V√≥mitos", "Debilidad/entumecimiento", "Habla/visi√≥n", "Trauma", "Ninguno"],
        "confirm_title": "Confirma si lo entend√≠ bien:",
        "confirm_loc": "‚Ä¢ D√≥nde: {loc}",
        "confirm_kind": "‚Ä¢ Tipo: {kind}",
        "confirm_duration": "‚Ä¢ Duraci√≥n: {duration}",
        "confirm_severity": "‚Ä¢ Intensidad: {severity}/10",
        "confirm_ok": "‚úÖ Correcto",
        "confirm_change_loc": "‚úèÔ∏è Cambiar ¬´D√≥nde¬ª",
        "confirm_change_kind": "‚úèÔ∏è Cambiar ¬´Tipo¬ª",
        "confirm_change_duration": "‚úèÔ∏è Cambiar ¬´Duraci√≥n¬ª",
        "confirm_change_severity": "‚úèÔ∏è Cambiar ¬´Intensidad¬ª",
        "plan_header": "Tu plan para 24‚Äì48 h:",
        "plan_accept": "¬øLo intentas hoy?",
        "accept_opts": ["‚úÖ S√≠", "üîÅ M√°s tarde", "‚úñÔ∏è No"],
        "remind_when": "¬øCu√°ndo te escribo para revisar?",
        "remind_opts": ["en 4 h", "esta tarde", "ma√±ana por la ma√±ana", "no hace falta"],
        "thanks": "¬°Hecho! üôå",
        "checkin_ping": "Revisi√≥n r√°pida: ¬øc√≥mo est√°s ahora (0‚Äì10)?",
        "checkin_better": "¬°Bien! Sigue as√≠ üí™",
        "checkin_worse": "Si hay se√±ales de alarma o dolor ‚â•7/10, considera atenci√≥n m√©dica.",
        "comment_prompt": "Escribe tu comentario ahora. O env√≠a /skip para omitir.",
        "comment_saved": "¬°Comentario guardado, gracias! üôå",
        "skip_ok": "Omitido.",
        "unknown": "Necesito un poco m√°s de informaci√≥n. ¬øD√≥nde te duele y desde cu√°ndo?",
        "use_buttons": "Usa los botones abajo ‚§µÔ∏è",
        "lang_set": "Idioma guardado: Espa√±ol",
        "help_lang": "Usa /lang ru|en|uk|es para cambiar el idioma.",
        "oos": "Entendido. Estoy para temas de salud, h√°bitos y autocuidado. Elige un tema abajo o cu√©ntame brevemente.",
        "fb_prompt": "¬øQuieres dejar una opini√≥n r√°pida?",
        "fb_thanks": "¬°Gracias por tu opini√≥n! üíõ",
        "fb_like": "üëç √ötil",
        "fb_dislike": "üëé No ayud√≥",
        "fb_write": "‚úçÔ∏è Escribir comentario",
    },
}
def t(lang: str, key: str) -> str:
    return T.get(lang, T["en"]).get(key, T["en"].get(key, key))

# ===== Reply-keyboards (bottom) =====
BACK = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"

def _rkm(rows):
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def main_menu(lang: str) -> ReplyKeyboardMarkup:
    labels = T[lang]["menu"]
    rows = [labels[:3], labels[3:]]
    return _rkm(rows)

def kb_numbers_0_10() -> ReplyKeyboardMarkup:
    nums = [str(i) for i in range(11)]
    rows = [nums[:6], nums[6:], [CANCEL]]
    return _rkm(rows)

def kb_accept_bottom(lang: str) -> ReplyKeyboardMarkup:
    acc = T[lang]["accept_opts"]
    return _rkm([acc, [CANCEL]])

def kb_remind_bottom(lang: str) -> ReplyKeyboardMarkup:
    opts = T[lang]["remind_opts"]
    per_row = 2
    rows = [opts[i:i+per_row] for i in range(0, len(opts), per_row)]
    rows.append([CANCEL])
    return _rkm(rows)

def kb_yes_no(lang: str) -> ReplyKeyboardMarkup:
    return _rkm([[t(lang,"yes"), t(lang,"no")], [CANCEL]])

def kb_feedback_bottom(lang: str) -> ReplyKeyboardMarkup:
    return _rkm([[t(lang,"fb_like"), t(lang,"fb_dislike")], [t(lang,"fb_write")], [CANCEL]])

# =========================
# NLP helpers
# =========================
DUR_PATTERNS = {
    "ru": r"(\d+)\s*(–º–∏–Ω|–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|—Å—É—Ç|–¥–Ω|–¥–Ω–µ–π|–Ω–µ–¥|–Ω–µ–¥–µ–ª)",
    "en": r"(\d+)\s*(min|mins|minute|minutes|hour|hours|day|days|week|weeks)",
    "uk": r"(\d+)\s*(—Ö–≤|—Ö–≤–∏–ª–∏–Ω|–≥–æ–¥|–≥–æ–¥–∏–Ω|–¥–Ω|–¥–Ω—ñ–≤|—Ç–∏–∂–¥|—Ç–∏–∂–Ω—ñ–≤)",
    "es": r"(\d+)\s*(min|minutos|minuto|hora|horas|d√≠a|d√≠as|semana|semanas)",
}
SEVERITY_PATTERNS = [
    r"\b([0-9]|10)\s*/\s*10\b",
    r"\b–Ω–∞\s*([0-9]|10)\b",
    r"\b([0-9]|10)\s*–∏–∑\s*10\b",
    r"\b([0-9]|10)\b",
]
def _match_duration(text: str, lang: str) -> str | None:
    m = re.search(DUR_PATTERNS.get(lang, ""), (text or "").lower())
    if not m: return None
    return f"{m.group(1)} {m.group(2)}"
def _match_severity(text: str) -> int | None:
    tl = (text or "").lower()
    for pat in SEVERITY_PATTERNS:
        m = re.search(pat, tl)
        if m:
            try:
                val = int(m.group(1))
                if 0 <= val <= 10: return val
            except Exception:
                pass
    return None

# =========================
# Sheets helpers
# =========================
def utcnow(): return datetime.now(timezone.utc)
def iso(dt: datetime | None) -> str:
    if not dt: return ""
    return dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def users_get_row_index(user_id: int) -> int | None:
    vals = ws_users.get_all_records()
    for i, row in enumerate(vals, start=2):
        if str(row.get("user_id")) == str(user_id):
            return i
    return None

def users_get(user_id: int) -> dict:
    vals = ws_users.get_all_records()
    for row in vals:
        if str(row.get("user_id")) == str(user_id):
            return row
    return {}

def users_upsert(user_id: int, username: str, lang: str):
    idx = users_get_row_index(user_id)
    row = [str(user_id), username or "", lang, "no", "0", "", "no"]
    if idx:
        ws_users.update(f"A{idx}:G{idx}", [row])
    else:
        ws_users.append_row(row)

def users_set(user_id: int, field: str, value: str):
    idx = users_get_row_index(user_id)
    if not idx: return
    headers = ws_users.row_values(1)
    if field in headers:
        col = headers.index(field) + 1
        ws_users.update_cell(idx, col, value)

def episode_create(user_id: int, topic: str, baseline_severity: int, red_flags: str) -> str:
    eid = f"{user_id}-{uuid.uuid4().hex[:8]}"
    now = iso(utcnow())
    ws_episodes.append_row([
        eid, str(user_id), topic, now,
        str(baseline_severity), red_flags, "0", "<=3/10",
        "", "", "open", now, ""
    ])
    return eid

def episode_find_open(user_id: int) -> dict | None:
    vals = ws_episodes.get_all_records()
    for row in vals:
        if str(row.get("user_id")) == str(user_id) and row.get("status") == "open":
            return row
    return None

def episode_set(eid: str, field: str, value: str):
    vals = ws_episodes.get_all_values()
    headers = vals[0]
    if field not in headers: return
    col = headers.index(field) + 1
    for i in range(2, len(vals) + 1):
        if ws_episodes.cell(i, 1).value == eid:
            ws_episodes.update_cell(i, col, value)
            ws_episodes.update_cell(i, headers.index("last_update") + 1, iso(utcnow()))
            return

def schedule_from_sheet_on_start(app):
    vals = ws_episodes.get_all_records()
    now = utcnow()
    for row in vals:
        if row.get("status") != "open": continue
        eid = row.get("episode_id")
        uid = int(row.get("user_id"))
        nca = row.get("next_checkin_at") or ""
        if not nca: continue
        try:
            dt = datetime.strptime(nca, "%Y-%m-%d %H:%M:%S%z")
        except Exception:
            continue
        delay = (dt - now).total_seconds()
        if delay < 60: delay = 60
        app.job_queue.run_once(job_checkin, when=delay, data={"user_id": uid, "episode_id": eid})

# =========================
# Helpers: send-once (–∞–Ω—Ç–∏-–¥—É–±–ª—å)
# =========================
def send_once(uid: int, key: str, now_ts: float, cooldown: float = 8.0) -> bool:
    s = sessions.setdefault(uid, {})
    last = s.get("last_send", {})
    ts = last.get(key, 0.0)
    if now_ts - ts >= cooldown:
        last[key] = now_ts
        s["last_send"] = last
        sessions[uid] = s
        return True
    return False

# =========================
# GPT-5 CHAT ROUTER
# =========================
def llm_chat_reply(uid: int, lang: str, user_text: str) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    {
      "assistant": "—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      "slots": {"intent","loc","kind","duration","severity","red"},
      "plan_ready": bool,
      "escalate": bool
    }
    """
    if not oai or not user_text:
        return {}

    # –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–æ–æ–±—â–µ–Ω–∏–π)
    s = sessions.setdefault(uid, {})
    hist = s.setdefault("chat_history", [])[-8:]
    sys = (
        "You are TendAI, a warm health & self-care assistant. "
        "Speak briefly (max 4 sentences), supportive, no diagnoses. "
        "If you detect urgent red flags, advise medical help immediately. "
        "Your task: both talk naturally AND extract triage fields. "
        "Answer in user's language. "
        "Return ONLY a JSON object with keys: "
        "assistant (string), plan_ready (bool), escalate (bool), "
        "slots (object with optional keys: intent in [pain, throat, sleep, stress, digestion, energy]; "
        "loc in [Head, Throat, Back, Belly, Chest, Other]; "
        "kind in [Dull, Sharp, Throbbing, Burning, Pressing]; "
        "duration one of [\"<3h\",\"3‚Äì24h\",\">1 day\",\">1 week\"] or a human string; "
        "severity int 0..10; "
        "red one of [\"High fever\",\"Vomiting\",\"Weakness/numbness\",\"Speech/vision issues\",\"Trauma\",\"None\"])."
    )
    msgs = [{"role": "system", "content": sys}]
    for m in hist:
        msgs.append(m)
    msgs.append({"role": "user", "content": f"[lang={lang}] {user_text}"})

    try:
        resp = oai.chat.completions.create(
            model="gpt-5",
            temperature=0.2,
            max_tokens=400,
            messages=msgs,
        )
        raw = (resp.choices[0].message.content or "").strip()
        j = None
        try:
            m = re.search(r"\{[\s\S]*\}", raw)
            j = json.loads(m.group(0)) if m else json.loads(raw)
        except Exception:
            j = {"assistant": raw, "plan_ready": False, "escalate": False, "slots": {}}
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        hist.append({"role": "user", "content": user_text})
        hist.append({"role": "assistant", "content": j.get("assistant","")})
        s["chat_history"] = hist[-10:]
        sessions[uid] = s
        return j
    except Exception as e:
        logging.warning(f"LLM chat failed: {e}")
        return {}

# =========================
# Hypotheses & Plans
# =========================
def build_hypotheses(lang: str, ans: dict, zone: dict) -> list[tuple[str, float, str]]:
    loc = (ans.get("loc") or "").lower()
    kind = (ans.get("kind") or "").lower()
    duration = (ans.get("duration") or "").lower()
    sev = int(ans.get("severity", 5))
    zq = zone.get("q", {}) if zone else {}
    H = []
    def add(name, score, because):
        H.append((name, float(score), because))

    if "head" in loc or "–≥–æ–ª–æ–≤–∞" in loc or "cabeza" in loc:
        if "throbb" in kind or "–ø—É–ª—å—Å" in kind:
            add("Migraine-like", 0.7 + 0.05*(sev>=6), "Throbbing + moderate/severe")
        if "press" in kind or "tight" in kind or "–¥–∞–≤" in kind:
            add("Tension-type", 0.6, "Pressing/tight character")
        if "3‚Äì24" in duration or ">1 day" in duration or ">1 –¥–Ω—è" in duration:
            add("Tension/sinus", 0.4, "Lasts many hours")
        if zq.get(1) == "yes":
            add("Urgent risk pattern", 1.0, "Sudden worst-ever ‚Üí escalate")
        if zq.get(2) == "yes":
            add("Neurologic red flag", 1.0, "Speech/vision/weakness ‚Üí escalate")
        if zq.get(3) == "yes":
            add("Infection/meningeal concern", 0.9, "Neck stiffness/fever")

    if "back" in loc or "—Å–ø–∏–Ω–∞" in loc or "espalda" in loc:
        if "shoot" in kind or "–ø—Ä–æ—Å—Ç—Ä–µ–ª" in kind or zq.get(3) == "yes":
            add("Radicular pain (sciatica-like)", 0.7, "Shooting below knee/‚Äò–ø—Ä–æ—Å—Ç—Ä–µ–ª‚Äô")
        else:
            add("Mechanical low back pain", 0.6, "Typical pattern without red flags")
        if zq.get(1) == "yes" or zq.get(2) == "yes":
            add("Serious back red flag", 0.95, "Perineal numbness/retention or trauma/fever/cancer")

    if "belly" in loc or "–∂–∏–≤–æ—Ç" in loc or "abdomen" in loc or "vientre" in loc or "stomach" in loc:
        if "vomit" in (ans.get("red","") or "").lower():
            add("Gastroenteritis-like", 0.6, "Nausea/vomiting")
        add("Dyspepsia/gastritis-like", 0.5, "Common benign causes if no red flags")

    if "chest" in loc or "–≥—Ä—É–¥" in loc or "pecho" in loc:
        if zq.get(1) == "yes":
            add("Possible cardiac pattern", 1.0, "Pressure >10min + dyspnea/sweat")
        elif zq.get(2) == "yes":
            add("Pleuritic/musculoskeletal", 0.7, "Worse with breathing/movement/press")
        elif zq.get(3) == "yes":
            add("Respiratory infection", 0.6, "Cough/fever")

    if "throat" in loc or "–≥–æ—Ä–ª–æ" in loc or "garganta" in loc:
        if zq.get(1) == "yes" and zq.get(2) == "no":
            add("Probable bacterial pharyngitis", 0.6, "Fever + exudate, no cough")
        else:
            add("Viral sore throat", 0.6, "Common viral pattern")

    H.sort(key=lambda x: x[1], reverse=True)
    return H[:3]

def pain_plan(lang: str, ans: dict, zone: dict, hypotheses: list[tuple[str,float,str]]) -> list[str]:
    red = (ans.get("red") or "").lower()
    urgent = any(s in red for s in ["fever", "vomit", "weakness", "speech", "vision", "—Ç—Ä–∞–≤–º", "trauma"]) and (ans.get("severity", 0) >= 7)
    for name, score, because in hypotheses:
        if "Urgent" in name or "cardiac" in name or "Neurologic" in name or "red flag" in name:
            urgent = True
    if urgent:
        return {
            "ru": ["‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ–π —É–≥—Ä–æ–∑—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â—å—é."],
            "uk": ["‚ö†Ô∏è –Ñ –æ–∑–Ω–∞–∫–∏ –º–æ–∂–ª–∏–≤–æ—ó –∑–∞–≥—Ä–æ–∑–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –ø–æ –º–µ–¥–∏—á–Ω—É –¥–æ–ø–æ–º–æ–≥—É."],
            "en": ["‚ö†Ô∏è Some answers suggest urgent risks. Please seek medical care as soon as possible."],
            "es": ["‚ö†Ô∏è Hay se√±ales de posible urgencia. Por favor busca atenci√≥n m√©dica lo antes posible."],
        }[lang]

    base = {
        "ru": [
            "1) –í–æ–¥–∞ 400‚Äì600 –º–ª –∏ 15‚Äì20 –º–∏–Ω—É—Ç –ø–æ–∫–æ—è –≤ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ.",
            "2) –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –∏–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ 1 —Ä–∞–∑ —Å –µ–¥–æ–π.",
            "3) –ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É, —Å–Ω–∏–∑–∏—Ç—å —ç–∫—Ä–∞–Ω—ã –Ω–∞ 30‚Äì60 –º–∏–Ω—É—Ç.",
            "–¶–µ–ª—å: –∫ –≤–µ—á–µ—Ä—É –±–æ–ª—å ‚â§3/10."
        ],
        "uk": [
            "1) 400‚Äì600 –º–ª –≤–æ–¥–∏ —Ç–∞ 15‚Äì20 —Ö–≤ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É —É —Ç–∏—Ö–æ–º—É –º—ñ—Å—Ü—ñ.",
            "2) –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω—å ‚Äî —ñ–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ 1 —Ä–∞–∑ —ñ–∑ —ó–∂–µ—é.",
            "3) –ü—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É, –∑–º–µ–Ω—à–∏—Ç–∏ –µ–∫—Ä–∞–Ω–∏ –Ω–∞ 30‚Äì60 —Ö–≤.",
            "–ú–µ—Ç–∞: –¥–æ –≤–µ—á–æ—Ä–∞ –±—ñ–ª—å ‚â§3/10."
        ],
        "en": [
            "1) Drink 400‚Äì600 ml of water and rest 15‚Äì20 minutes in a quiet place.",
            "2) If no contraindications ‚Äî ibuprofen 200‚Äì400 mg once with food.",
            "3) Air the room; reduce screen time for 30‚Äì60 minutes.",
            "Target: by evening pain ‚â§3/10."
        ],
        "es": [
            "1) Bebe 400‚Äì600 ml de agua y descansa 15‚Äì20 min en un lugar tranquilo.",
            "2) Si no hay contraindicaciones ‚Äî ibuprofeno 200‚Äì400 mg una vez con comida.",
            "3) Ventila la habitaci√≥n; reduce pantallas 30‚Äì60 min.",
            "Objetivo: por la tarde dolor ‚â§3/10."
        ],
    }
    loc = (ans.get("loc") or "").lower()
    if "back" in loc or "—Å–ø–∏–Ω–∞" in loc or "espalda" in loc:
        extra = {
            "ru": ["4) –¢—ë–ø–ª—ã–π –∫–æ–º–ø—Ä–µ—Å—Å 10‚Äì15 –º–∏–Ω 2‚Äì3 —Ä–∞–∑–∞/–¥–µ–Ω—å, –º—è–≥–∫–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è/—Ä–∞—Å—Ç—è–∂–∫–∞."],
            "uk": ["4) –¢–µ–ø–ª–∏–π –∫–æ–º–ø—Ä–µ—Å 10‚Äì15 —Ö–≤ 2‚Äì3 —Ä/–¥–µ–Ω—å, –º‚Äô—è–∫–∞ –º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—è/—Ä–æ–∑—Ç—è–∂–∫–∞."],
            "en": ["4) Warm compress 10‚Äì15 min 2‚Äì3√ó/day, gentle mobility/stretching."],
            "es": ["4) Compresa tibia 10‚Äì15 min 2‚Äì3√ó/d√≠a, movilidad/estiramientos suaves."],
        }[lang]
        return base[lang] + extra
    if "throat" in loc or "–≥–æ—Ä–ª–æ" in loc or "garganta" in loc:
        extra = {
            "ru": ["4) –¢—ë–ø–ª–æ–µ –ø–∏—Ç—å—ë, –ø–æ–ª–æ—Å–∫–∞–Ω–∏—è —Å–æ–ª–µ–≤—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º 3‚Äì4 —Ä–∞–∑–∞/–¥–µ–Ω—å."],
            "uk": ["4) –¢–µ–ø–ª—ñ –Ω–∞–ø–æ—ó, –ø–æ–ª–æ—Å–∫–∞–Ω–Ω—è —Å–æ–ª—å–æ–≤–∏–º —Ä–æ–∑—á–∏–Ω–æ–º 3‚Äì4 —Ä/–¥–µ–Ω—å."],
            "en": ["4) Warm fluids; saline gargles 3‚Äì4√ó/day."],
            "es": ["4) L√≠quidos tibios; g√°rgaras salinas 3‚Äì4√ó/d√≠a."],
        }[lang]
        return base[lang] + extra
    return base[lang]

# =========================
# Jobs (check-ins)
# =========================
async def job_checkin(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data or {}
    uid = data.get("user_id")
    eid = data.get("episode_id")
    if not uid or not eid: return
    u = users_get(uid)
    if (u.get("paused") or "").lower() == "yes": return
    lang = u.get("lang") or "en"
    try:
        await context.bot.send_message(
            chat_id=uid,
            text=t(lang, "checkin_ping"),
            reply_markup=kb_numbers_0_10(),
        )
        ss = sessions.setdefault(uid, {})
        ss["await_step"] = "checkin"
        ss["episode_id"] = eid
        episode_set(eid, "next_checkin_at", "")
    except Exception as e:
        logging.error(f"job_checkin send error: {e}")

# =========================
# Commands
# =========================
async def on_startup(app):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        logging.info("Webhook cleared")
    except Exception:
        pass
    schedule_from_sheet_on_start(app)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = users_get(user.id).get("lang")
    if not lang:
        txt = (update.message.text or "").strip() if update.message else ""
        cand = None
        if detect:
            try:
                cand = detect(txt) if txt else None
            except Exception:
                cand = None
        lang = norm_lang(cand or getattr(user, "language_code", None))
        users_upsert(user.id, user.username or "", lang)
    await update.message.reply_text(t(lang, "welcome"), reply_markup=main_menu(lang))
    u = users_get(user.id)
    if (u.get("consent") or "").lower() not in {"yes","no"}:
        s = sessions.setdefault(user.id, {})
        s["awaiting_consent"] = True
        await update.message.reply_text(t(lang, "ask_consent"), reply_markup=kb_yes_no(lang))

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang, "help"), reply_markup=main_menu(lang))

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang, "privacy"), reply_markup=main_menu(lang))

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    users_set(uid, "paused", "yes")
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang, "paused_on"), reply_markup=main_menu(lang))

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    users_set(uid, "paused", "no")
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang, "paused_off"), reply_markup=main_menu(lang))

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    idx = users_get_row_index(uid)
    if idx:
        ws_users.delete_rows(idx)
    vals = ws_episodes.get_all_values()
    to_delete = []
    for i in range(2, len(vals)+1):
        if ws_episodes.cell(i,2).value == str(uid):
            to_delete.append(i)
    for j, row_i in enumerate(to_delete):
        ws_episodes.delete_rows(row_i - j)
    lang = norm_lang(getattr(update.effective_user, "language_code", None))
    await update.message.reply_text(t(lang, "deleted"), reply_markup=ReplyKeyboardRemove())

async def cmd_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
        await update.message.reply_text(t(lang, "help_lang"), reply_markup=main_menu(lang))
        return
    candidate = norm_lang(context.args[0])
    if candidate not in SUPPORTED:
        cur = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
        await update.message.reply_text(t(cur, "help_lang"), reply_markup=main_menu(cur))
        return
    users_set(uid, "lang", candidate)
    await update.message.reply_text(t(candidate, "lang_set"), reply_markup=main_menu(candidate))

async def cmd_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    s = sessions.get(uid, {})
    if s.get("awaiting_comment"):
        s["awaiting_comment"] = False
        s["feedback_context"] = ""
        lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
        await update.message.reply_text(t(lang, "skip_ok"), reply_markup=main_menu(lang))
    else:
        lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
        await update.message.reply_text(t(lang, "use_buttons"), reply_markup=main_menu(lang))

async def cmd_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
    s = sessions.setdefault(uid, {})
    s["awaiting_feedback_choice"] = True
    s["feedback_context"] = "general"
    await update.message.reply_text(t(lang, "fb_prompt"), reply_markup=kb_feedback_bottom(lang))

# =========================
# Auto language switch & scope filter
# =========================
GREET_WORDS = {
    "en": {"hi", "hello", "hey"},
    "ru": {"–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Ö–∞–π"},
    "uk": {"–ø—Ä–∏–≤—ñ—Ç", "–≤—ñ—Ç–∞—é"},
    "es": {"hola", "buenas"},
}
def maybe_autoswitch_lang(uid: int, text: str, cur_lang: str) -> str:
    if not text or text.startswith("/"):
        return cur_lang
    tl = text.strip().lower()
    for lang_code, words in GREET_WORDS.items():
        if tl in words:
            if lang_code != cur_lang:
                users_set(uid, "lang", lang_code)
            return lang_code
    has_lat = bool(re.search(r"[A-Za-z]", text))
    has_cyr = bool(re.search(r"[–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î]", text))
    if has_lat and not has_cyr and cur_lang != "en":
        users_set(uid, "lang", "en")
        return "en"
    if detect:
        try:
            cand = norm_lang(detect(text))
            if cand in SUPPORTED and cand != cur_lang and len(tl) >= 2:
                users_set(uid, "lang", cand)
                return cand
        except Exception:
            pass
    return cur_lang

CARE_KEYWORDS = {
    "en": {"pain","headache","throat","cough","cold","fever","back","belly","stomach","chest",
           "sleep","insomnia","stress","anxiety","energy","fatigue","digestion","diarrhea","constipation",
           "nausea","vomit","symptom","medicine","ibuprofen","health","wellness"},
    "ru": {"–±–æ–ª—å","–±–æ–ª–∏—Ç","–≥–æ–ª–æ–≤–∞","–≥–æ—Ä–ª–æ","–∫–∞—à–µ–ª—å","–ø—Ä–æ—Å—Ç—É–¥–∞","—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞","–∂–∞—Ä","—Å–ø–∏–Ω–∞","–∂–∏–≤–æ—Ç","–∂–µ–ª—É–¥–æ–∫","–≥—Ä—É–¥—å",
           "—Å–æ–Ω","–±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞","—Å—Ç—Ä–µ—Å—Å","—Ç—Ä–µ–≤–æ–≥–∞","—ç–Ω–µ—Ä–≥–∏—è","—Å–ª–∞–±–æ—Å—Ç—å","–ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ","–¥–∏–∞—Ä–µ—è","–ø–æ–Ω–æ—Å","–∑–∞–ø–æ—Ä",
           "—Ç–æ—à–Ω–æ—Ç–∞","—Ä–≤–æ—Ç–∞","—Å–∏–º–ø—Ç–æ–º","–∑–¥–æ—Ä–æ–≤—å–µ","–∏–±—É–ø—Ä–æ—Ñ–µ–Ω"},
    "uk": {"–±—ñ–ª—å","–±–æ–ª–∏—Ç—å","–≥–æ–ª–æ–≤–∞","–≥–æ—Ä–ª–æ","–∫–∞—à–µ–ª—å","–∑–∞—Å—Ç—É–¥–∞","—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞","–∂–∞—Ä","—Å–ø–∏–Ω–∞","–∂–∏–≤—ñ—Ç","—à–ª—É–Ω–æ–∫","–≥—Ä—É–¥–∏",
           "—Å–æ–Ω","–±–µ–∑—Å–æ–Ω–Ω—è","—Å—Ç—Ä–µ—Å","—Ç—Ä–∏–≤–æ–≥–∞","–µ–Ω–µ—Ä–≥—ñ—è","—Å–ª–∞–±–∫—ñ—Å—Ç—å","—Ç—Ä–∞–≤–ª–µ–Ω–Ω—è","–¥—ñ–∞—Ä–µ—è","–∑–∞–ø–æ—Ä","–Ω—É–¥–æ—Ç–∞",
           "–±–ª—é–≤–∞–Ω–Ω—è","—Å–∏–º–ø—Ç–æ–º","–∑–¥–æ—Ä–æ–≤'—è","—ñ–±—É–ø—Ä–æ—Ñ–µ–Ω"},
    "es": {"dolor","cabeza","garganta","tos","resfriado","fiebre","espalda","vientre","est√≥mago","pecho","sue√±o",
           "insomnio","estr√©s","ansiedad","energ√≠a","cansancio","digesti√≥n","diarrea","estre√±imiento","n√°usea",
           "v√≥mito","s√≠ntoma","salud","ibuprofeno"},
}
def is_care_related(lang: str, text: str) -> bool:
    tl = (text or "").lower()
    words = CARE_KEYWORDS.get(lang, CARE_KEYWORDS["en"])
    if tl in GREET_WORDS.get(lang, set()) or tl in {"hi","hello","hola","–ø—Ä–∏–≤–µ—Ç","–ø—Ä–∏–≤—ñ—Ç"}:
        return True
    return any(w in tl for w in words)

# =========================
# FLOW HELPERS
# =========================
def render_confirm(lang: str, ans: dict) -> str:
    def val(k, default="‚Äî"):
        v = ans.get(k)
        return str(v) if v not in [None, ""] else default
    parts = [
        t(lang, "confirm_title"),
        t(lang, "confirm_loc").format(loc=val("loc","‚Äî")),
        t(lang, "confirm_kind").format(kind=val("kind","‚Äî")),
        t(lang, "confirm_duration").format(duration=val("duration","‚Äî")),
        t(lang, "confirm_severity").format(severity=val("severity","‚Äî")),
    ]
    return "\n".join(parts)

# =========================
# Callback (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
# =========================
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É üëá")

# =========================
# Text handlers
# =========================
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    text = (update.message.text or "").strip()

    # —è–∑—ã–∫ –∏ –∞–≤—Ç–æ—Å–≤–∏—Ç—á
    urec = users_get(uid)
    if not urec:
        cand = None
        if detect:
            try:
                cand = detect(text) if text else None
            except Exception:
                cand = None
        lang = norm_lang(cand or getattr(user,"language_code",None))
        users_upsert(uid, user.username or "", lang)
    else:
        lang = norm_lang(urec.get("lang") or getattr(user,"language_code",None))
        lang = maybe_autoswitch_lang(uid, text, lang)

    s = sessions.setdefault(uid, {"flow": "chat", "answers": {}, "chat_history": []})

    # –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if s.get("awaiting_consent"):
        if text == CANCEL:
            s["awaiting_consent"] = False
            await update.message.reply_text(t(lang, "thanks"), reply_markup=main_menu(lang))
            return
        if text in {t(lang,"yes"), t(lang,"no")}:
            users_set(uid, "consent", "yes" if text == t(lang,"yes") else "no")
            s["awaiting_consent"] = False
            await update.message.reply_text(t(lang, "thanks"), reply_markup=main_menu(lang))
            return
        await update.message.reply_text(t(lang, "use_buttons"))
        return

    # –§–∏–¥–±–µ–∫
    if s.get("awaiting_feedback_choice"):
        if text == CANCEL:
            s["awaiting_feedback_choice"] = False
            await update.message.reply_text(t(lang, "thanks"), reply_markup=main_menu(lang))
            return
        if text == t(lang,"fb_like"):
            ws_feedback.append_row([datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"), str(uid), s.get("feedback_context","general"), user.username or "", "1", ""])
            s["awaiting_feedback_choice"] = False
            await update.message.reply_text(t(lang, "fb_thanks"), reply_markup=main_menu(lang))
            return
        if text == t(lang,"fb_dislike"):
            ws_feedback.append_row([datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"), str(uid), s.get("feedback_context","general"), user.username or "", "0", ""])
            s["awaiting_feedback_choice"] = False
            await update.message.reply_text(t(lang, "fb_thanks"), reply_markup=main_menu(lang))
            return
        if text == t(lang,"fb_write"):
            s["awaiting_feedback_choice"] = False
            s["awaiting_comment"] = True
            await update.message.reply_text(t(lang, "comment_prompt"))
            return
        await update.message.reply_text(t(lang, "use_buttons")); return

    # –∂–¥—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?
    if s.get("awaiting_comment") and not text.startswith("/"):
        name = s.get("feedback_context") or "general"
        ws_feedback.append_row([datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"), str(uid), f"comment:{name}", user.username or "", "", text])
        s["awaiting_comment"] = False
        s["feedback_context"] = ""
        await update.message.reply_text(t(lang, "comment_saved"), reply_markup=main_menu(lang))
        return

    # —á–µ–∫-–∏–Ω —Ä–µ–∂–∏–º
    if s.get("await_step") == "checkin":
        if text == CANCEL:
            s["await_step"] = 0
            await update.message.reply_text(t(lang, "thanks"), reply_markup=main_menu(lang))
            return
        if text.isdigit() and 0 <= int(text) <= 10:
            val = int(text)
            ep = episode_find_open(uid)
            if ep:
                eid = ep.get("episode_id")
                episode_set(eid, "notes", f"checkin:{val}")
                if val <= 3:
                    episode_set(eid, "status", "resolved")
                    await update.message.reply_text(t(lang, "checkin_better"), reply_markup=main_menu(lang))
                else:
                    await update.message.reply_text(t(lang, "checkin_worse"), reply_markup=main_menu(lang))
            s["await_step"] = 0
            return
        await update.message.reply_text(t(lang, "use_buttons")); return

    # –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–ª–∞–Ω–∞
    if s.get("flow") == "accept_wait":
        acc = T[lang]["accept_opts"]
        if text in acc or text == CANCEL:
            eid = s.get("episode_id")
            if text == acc[0]:
                episode_set(eid, "plan_accepted", "1")
            elif text == acc[1]:
                episode_set(eid, "plan_accepted", "later")
            elif text == acc[2]:
                episode_set(eid, "plan_accepted", "0")
            s["flow"] = "remind_wait"
            await update.message.reply_text(t(lang, "remind_when"), reply_markup=kb_remind_bottom(lang))
            return
        await update.message.reply_text(t(lang, "use_buttons")); return

    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if s.get("flow") == "remind_wait":
        opts = T[lang]["remind_opts"]
        if text in opts or text == CANCEL:
            code_map = {
                opts[0]: "4h",
                opts[1]: "evening",
                opts[2]: "morning",
                opts[3]: "none",
            }
            code = code_map.get(text, "none")
            eid = s.get("episode_id")
            urec = users_get(uid)
            tz_off = 0
            try: tz_off = int(urec.get("tz_offset") or "0")
            except: tz_off = 0
            now_utc = utcnow(); user_now = now_utc + timedelta(hours=tz_off)
            if code == "4h": target_user = user_now + timedelta(hours=4)
            elif code == "evening":
                target_user = user_now.replace(hour=19, minute=0, second=0, microsecond=0)
                if target_user < user_now: target_user += timedelta(days=1)
            elif code == "morning":
                target_user = user_now.replace(hour=9, minute=0, second=0, microsecond=0)
                if target_user < user_now: target_user += timedelta(days=1)
            else:
                target_user = None
            if target_user:
                target_utc = target_user - timedelta(hours=tz_off)
                episode_set(eid, "next_checkin_at", iso(target_utc))
                delay = max(60, (target_utc - now_utc).total_seconds())
                context.job_queue.run_once(job_checkin, when=delay, data={"user_id": uid, "episode_id": eid})
            await update.message.reply_text(t(lang, "thanks"), reply_markup=main_menu(lang))
            s["flow"] = "plan"
            return
        await update.message.reply_text(t(lang, "use_buttons")); return

    # ===== CHAT-FIRST –Ω–∞ GPT-5 =====
    # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –æ—Ñ—Ñ—Ç–æ–ø ‚Äî –æ–¥–∏–Ω –º—è–≥–∫–∏–π –æ—Ç–≤–µ—Ç –∏ –º–µ–Ω—é
    if not is_care_related(lang, text):
        if send_once(uid, key="oos", now_ts=time()):
            await update.message.reply_text(t(lang, "oos"), reply_markup=main_menu(lang))
        return

    # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –º–æ–¥–µ–ª–∏
    j = llm_chat_reply(uid, lang, text)
    if not j:
        # —Ñ–æ–ª–±—ç–∫: –∫—Ä–∞—Ç–∫–∞—è –ø—Ä–æ—Å—å–±–∞ —É—Ç–æ—á–Ω–∏—Ç—å
        await update.message.reply_text(t(lang, "unknown"), reply_markup=main_menu(lang))
        return

    assistant_text = j.get("assistant") or ""
    slots = j.get("slots") or {}
    plan_ready = bool(j.get("plan_ready"))
    escalate = bool(j.get("escalate"))

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
    if assistant_text:
        await update.message.reply_text(assistant_text)

    # –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
    ans = s.setdefault("answers", {})
    for k in ["intent","loc","kind","duration","severity","red"]:
        v = slots.get(k)
        if v is not None and v != "":
            ans[k] = v
    sessions[uid] = s

    # –µ—Å–ª–∏ —ç—Å–∫–∞–ª–∞—Ü–∏—è ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º
    if escalate:
        # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤ assistant_text; –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º –º–µ–Ω—é
        await update.message.reply_text(t(lang, "thanks"), reply_markup=main_menu(lang))
        return

    # –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ –ø–ª–∞–Ω—É (–ø–æ –º–Ω–µ–Ω–∏—é –º–æ–¥–µ–ª–∏) –∏–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –ø–æ–ª—è
    have_all = all(k in ans for k in ["loc","kind","duration","severity","red"])
    if plan_ready or have_all:
        # —Å–æ–∑–¥–∞—ë–º —ç–ø–∏–∑–æ–¥ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        eid = s.get("episode_id")
        if not eid:
            eid = episode_create(uid, ans.get("intent","pain"), int(ans.get("severity",5)), ans.get("red","None"))
            s["episode_id"] = eid
        # –≥–∏–ø–æ—Ç–µ–∑—ã + –ø–ª–∞–Ω
        hyps = build_hypotheses(lang, ans, s.get("zone", {}))
        plan_lines = pain_plan(lang, ans, s.get("zone", {}), hyps)
        await update.message.reply_text(f"{t(lang,'plan_header')}\n" + "\n".join(plan_lines))
        await update.message.reply_text(t(lang, "plan_accept"), reply_markup=kb_accept_bottom(lang))
        s["flow"] = "accept_wait"
        return

    # –∏–Ω–∞—á–µ ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –≤ –±–µ—Å–µ–¥–µ (–º–æ–¥–µ–ª—å —É–∂–µ –∑–∞–¥–∞–ª–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å)
    s["flow"] = "chat"
    sessions[uid] = s

# =========================
# Runner
# =========================
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(on_startup).build()

    schedule_from_sheet_on_start(app)

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("privacy", cmd_privacy))
    app.add_handler(CommandHandler("pause", cmd_pause))
    app.add_handler(CommandHandler("resume", cmd_resume))
    app.add_handler(CommandHandler("delete_data", cmd_delete_data))
    app.add_handler(CommandHandler("lang", cmd_lang))
    app.add_handler(CommandHandler("skip", cmd_skip))
    app.add_handler(CommandHandler("feedback", cmd_feedback))

    app.add_handler(CallbackQueryHandler(on_callback))  # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
