# -*- coding: utf-8 -*-
import os, re, json, uuid, logging
from datetime import datetime, timedelta, timezone, time as dtime
from typing import List, Tuple, Dict, Optional

from dotenv import load_dotenv
from langdetect import detect, DetectorFactory

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

from openai import OpenAI

# ---------- Google Sheets (robust + memory fallback) ----------
import gspread
from gspread.exceptions import SpreadsheetNotFound
import gspread.utils as gsu
from oauth2client.service_account import ServiceAccountCredentials

# ---------------- Boot & Config ----------------
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
DetectorFactory.seed = 0

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Sheets")
SHEET_ID   = os.getenv("SHEET_ID", "")
ALLOW_CREATE_SHEET = os.getenv("ALLOW_CREATE_SHEET", "0") == "1"
DEFAULT_CHECKIN_LOCAL = "08:30"

oai: Optional[OpenAI] = None
if OPENAI_API_KEY:
    try:
        oai = OpenAI(api_key=OPENAI_API_KEY)
    except Exception as e:
        logging.error(f"OpenAI init error: {e}")

# ---------------- Sheets init with fallback ----------------
SHEETS_ENABLED = True
ss = None
ws_feedback = ws_users = ws_profiles = ws_episodes = ws_reminders = ws_daily = None

def _sheets_init():
    global SHEETS_ENABLED, ss, ws_feedback, ws_users, ws_profiles, ws_episodes, ws_reminders, ws_daily
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if not creds_json:
            raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
        creds = json.loads(creds_json)
        credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds, scope)
        gclient = gspread.authorize(credentials)

        try:
            ss = gclient.open_by_key(SHEET_ID) if SHEET_ID else gclient.open(SHEET_NAME)
        except SpreadsheetNotFound:
            if ALLOW_CREATE_SHEET:
                ss = gclient.create(SHEET_NAME)
            else:
                raise

        def _ensure_ws(title: str, headers: List[str]):
            try:
                ws = ss.worksheet(title)
            except gspread.WorksheetNotFound:
                ws = ss.add_worksheet(title=title, rows=1000, cols=max(20, len(headers)))
                ws.append_row(headers)
            if not ws.get_all_values():
                ws.append_row(headers)
            return ws

        ws_feedback = _ensure_ws("Feedback", ["timestamp","user_id","name","username","rating","comment"])
        ws_users    = _ensure_ws("Users",    ["user_id","username","lang","consent","tz_offset","checkin_hour","paused"])
        ws_profiles = _ensure_ws("Profiles", ["user_id","sex","age","goal","conditions","meds","allergies",
                                              "sleep","activity","diet","notes","updated_at"])
        ws_episodes = _ensure_ws("Episodes", ["episode_id","user_id","topic","started_at","baseline_severity","red_flags",
                                              "plan_accepted","target","reminder_at","next_checkin_at","status","last_update","notes"])
        ws_reminders= _ensure_ws("Reminders",["id","user_id","text","when_utc","created_at","status"])
        ws_daily    = _ensure_ws("DailyCheckins",["timestamp","user_id","mood","comment"])
        logging.info("Google Sheets connected.")
    except Exception as e:
        SHEETS_ENABLED = False
        logging.error(f"SHEETS disabled (fallback to memory). Reason: {e}")

_sheets_init()

# --------- Memory fallback stores ----------
MEM_USERS: Dict[int, dict] = {}
MEM_PROFILES: Dict[int, dict] = {}
MEM_EPISODES: List[dict] = []
MEM_REMINDERS: List[dict] = []
MEM_FEEDBACK: List[dict] = []
MEM_DAILY: List[dict] = []

# --------- Sessions ----------
sessions: Dict[int, dict] = {}

# --------- i18n ----------
SUPPORTED = {"ru", "en", "uk"}

def norm_lang(code: Optional[str]) -> str:
    if not code: return "en"
    c = code.split("-")[0].lower()
    return c if c in SUPPORTED else "en"

# –ü–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ç–µ–∫—Å—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–µ–∑–¥–µ —á–µ—Ä–µ–∑ t())
TEXTS: Dict[str, Dict[str, str]] = {
    "en": {
        "greeting": "Hi! I‚Äôm TendAI ‚Äî your personal health & longevity assistant. Tell me what‚Äôs bothering you and I‚Äôll guide you. We can also do a quick 40-second intake to tailor advice.",
        "welcome":  "Hi! I‚Äôm TendAI ‚Äî your health & longevity assistant.\nDescribe what‚Äôs bothering you or tap below.",
        "help":     "Short checkups, 24‚Äì48h plans, reminders, daily check-ins.\nCommands: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +2 /ru /uk /en",
        "privacy":  "TendAI is not a medical service and can‚Äôt replace a doctor. We store minimal data for reminders. /delete_data to erase.",
        "paused_on":"Notifications paused. Use /resume to enable.",
        "paused_off":"Notifications resumed.",
        "deleted":  "All your data was deleted. Use /start to begin again.",
        "ask_consent":"May I send you a follow-up to check how you feel later?",
        "yes":"Yes","no":"No",
        "triage_pain_q1":"Where does it hurt?",
        "triage_pain_q1_opts":["Head","Throat","Back","Belly","Other"],
        "triage_pain_q2":"What kind of pain?",
        "triage_pain_q2_opts":["Dull","Sharp","Pulsating","Pressing"],
        "triage_pain_q3":"How long has it lasted?",
        "triage_pain_q3_opts":["<3h","3‚Äì24h",">1 day",">1 week"],
        "triage_pain_q4":"Rate the pain (0‚Äì10):",
        "triage_pain_q5":"Any of these now?",
        "triage_pain_q5_opts":["High fever","Vomiting","Weakness/numbness","Speech/vision problems","Trauma","None"],
        "plan_header":"Your 24‚Äì48h plan:",
        "plan_accept":"Will you try this today?",
        "accept_opts":["‚úÖ Yes","üîÅ Later","‚úñÔ∏è No"],
        "remind_when":"When shall I check on you?",
        "remind_opts":["in 4h","this evening","tomorrow morning","no need"],
        "thanks":"Got it üôå",
        "checkin_ping":"Quick check-in: how is it now (0‚Äì10)?",
        "checkin_better":"Nice! Keep it up üí™",
        "checkin_worse":"Sorry to hear. If any red flags or pain ‚â•7/10 ‚Äî consider medical help.",
        "comment_prompt":"Thanks üôè Add a short comment or /skip.",
        "comment_saved":"Saved, thank you! üôå",
        "skip_ok":"Skipped.",
        "unknown":"I need a bit more info: where exactly and for how long?",
        "lang_switched":"OK, I‚Äôll reply in English.",
        "profile_intro":"Quick intake (~40s). Use buttons or type your answer.",
        "p_step_1":"Step 1/8. Sex:",
        "p_step_2":"Step 2/8. Age:",
        "p_step_3":"Step 3/8. Main goal:",
        "p_step_4":"Step 4/8. Chronic conditions:",
        "p_step_5":"Step 5/8. Meds/supplements/allergies:",
        "p_step_6":"Step 6/8. Sleep (bed/wake, e.g., 23:30/07:00):",
        "p_step_7":"Step 7/8. Activity:",
        "p_step_8":"Step 8/8. Diet most of the time:",
        "write":"‚úçÔ∏è Write","skip":"‚è≠Ô∏è Skip","saved_profile":"Saved: ",
        "start_where":"Where do you want to start now? (symptom/sleep/nutrition/labs/habits/longevity)",
        "daily_gm":"Good morning! Quick daily check-in:",
        "mood_good":"üòÉ Good","mood_ok":"üòê Okay","mood_bad":"üò£ Poor","mood_note":"‚úçÔ∏è Comment",
        "mood_thanks":"Thanks! Have a smooth day üëã",
        "start_intake_now":"Start quick intake now?",
        "start_yes":"Start","start_no":"Later",
    },
    "ru": {
        "greeting":"–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç ‚Äî –ø–æ–¥—Å–∫–∞–∂—É. –ú–æ–∂–µ–º –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å (~40 —Å–µ–∫.), —á—Ç–æ–±—ã —Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ.",
        "welcome":"–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–û–ø–∏—à–∏, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –Ω–∏–∂–µ.",
        "help":"–ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã.\n–ö–æ–º–∞–Ω–¥—ã: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +3 /ru /uk /en",
        "privacy":"TendAI –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞. –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. /delete_data ‚Äî —É–¥–∞–ª–∏—Ç—å.",
        "paused_on":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–∞—É–∑—É. /resume ‚Äî –≤–∫–ª—é—á–∏—Ç—å.",
        "paused_off":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.",
        "deleted":"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        "ask_consent":"–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã?",
        "yes":"–î–∞","no":"–ù–µ—Ç",
        "triage_pain_q1":"–ì–¥–µ –±–æ–ª–∏—Ç?",
        "triage_pain_q1_opts":["–ì–æ–ª–æ–≤–∞","–ì–æ—Ä–ª–æ","–°–ø–∏–Ω–∞","–ñ–∏–≤–æ—Ç","–î—Ä—É–≥–æ–µ"],
        "triage_pain_q2":"–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏?",
        "triage_pain_q2_opts":["–¢—É–ø–∞—è","–û—Å—Ç—Ä–∞—è","–ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è","–î–∞–≤—è—â–∞—è"],
        "triage_pain_q3":"–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è?",
        "triage_pain_q3_opts":["<3—á","3‚Äì24—á",">1 –¥–Ω—è",">1 –Ω–µ–¥–µ–ª–∏"],
        "triage_pain_q4":"–û—Ü–µ–Ω–∏—Ç–µ –±–æ–ª—å (0‚Äì10):",
        "triage_pain_q5":"–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–µ–π—á–∞—Å?",
        "triage_pain_q5_opts":["–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞","–†–≤–æ—Ç–∞","–°–ª–∞–±–æ—Å—Ç—å/–æ–Ω–µ–º–µ–Ω–∏–µ","–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è","–¢—Ä–∞–≤–º–∞","–ù–µ—Ç"],
        "plan_header":"–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á–∞—Å–æ–≤:",
        "plan_accept":"–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
        "accept_opts":["‚úÖ –î–∞","üîÅ –ü–æ–∑–∂–µ","‚úñÔ∏è –ù–µ—Ç"],
        "remind_when":"–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "remind_opts":["—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞","–≤–µ—á–µ—Ä–æ–º","–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º","–Ω–µ –Ω–∞–¥–æ"],
        "thanks":"–ü—Ä–∏–Ω—è—Ç–æ üôå",
        "checkin_ping":"–ö–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ 0‚Äì10?",
        "checkin_better":"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üí™",
        "checkin_worse":"–ï—Å–ª–∏ –µ—Å—Ç—å ¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª –∏–ª–∏ –±–æ–ª—å ‚â•7/10 ‚Äî –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        "comment_prompt":"–°–ø–∞—Å–∏–±–æ üôè –î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ /skip.",
        "comment_saved":"–°–æ—Ö—Ä–∞–Ω–∏–ª, —Å–ø–∞—Å–∏–±–æ! üôå",
        "skip_ok":"–ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏.",
        "unknown":"–ù—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: –≥–¥–µ –∏–º–µ–Ω–Ω–æ –∏ —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?",
        "lang_switched":"–û–∫, –¥–∞–ª—å—à–µ –æ—Ç–≤–µ—á–∞—é –ø–æ-—Ä—É—Å—Å–∫–∏.",
        "profile_intro":"–ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å (~40—Å). –ú–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç.",
        "p_step_1":"–®–∞–≥ 1/8. –ü–æ–ª:","p_step_2":"–®–∞–≥ 2/8. –í–æ–∑—Ä–∞—Å—Ç:",
        "p_step_3":"–®–∞–≥ 3/8. –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:","p_step_4":"–®–∞–≥ 4/8. –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏:",
        "p_step_5":"–®–∞–≥ 5/8. –õ–µ–∫–∞—Ä—Å—Ç–≤–∞/–¥–æ–±–∞–≤–∫–∏/–∞–ª–ª–µ—Ä–≥–∏–∏:",
        "p_step_6":"–®–∞–≥ 6/8. –°–æ–Ω (–æ—Ç–±–æ–π/–ø–æ–¥—ä—ë–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        "p_step_7":"–®–∞–≥ 7/8. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:","p_step_8":"–®–∞–≥ 8/8. –ü–∏—Ç–∞–Ω–∏–µ —á–∞—â–µ –≤—Å–µ–≥–æ:",
        "write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å","skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å","saved_profile":"–°–æ—Ö—Ä–∞–Ω–∏–ª: ",
        "start_where":"–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/–ø–∏—Ç–∞–Ω–∏–µ/–∞–Ω–∞–ª–∏–∑—ã/–ø—Ä–∏–≤—ã—á–∫–∏/–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ)",
        "daily_gm":"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ë—ã—Å—Ç—Ä—ã–π —á–µ–∫-–∏–Ω:",
        "mood_good":"üòÉ –•–æ—Ä–æ—à–æ","mood_ok":"üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ","mood_bad":"üò£ –ü–ª–æ—Ö–æ","mood_note":"‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        "mood_thanks":"–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üëã",
        "start_intake_now":"–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å —Å–µ–π—á–∞—Å?",
        "start_yes":"–ù–∞—á–∞—Ç—å","start_no":"–ü–æ–∑–∂–µ",
    },
    "uk": {
        "greeting":"–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑—ñ –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è. –ù–∞–ø–∏—à–∏, —â–æ —Ç—É—Ä–±—É—î ‚Äî –ø—ñ–¥–∫–∞–∂—É. –¢–∞–∫–æ–∂ –º–æ–∂–µ–º–æ –ø—Ä–æ–π—Ç–∏ —à–≤–∏–¥–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ (~40 —Å), —â–æ–± –ø–æ—Ä–∞–¥–∏ –±—É–ª–∏ —Ç–æ—á–Ω—ñ—à–∏–º–∏.",
        "welcome":"–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è.\n–û–ø–∏—à–∏, —â–æ —Ç—É—Ä–±—É—î, –∞–±–æ –æ–±–µ—Ä–∏ –Ω–∏–∂—á–µ.",
        "help":"–ö–æ—Ä–æ—Ç–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ–¥–µ–Ω–Ω—ñ —á–µ–∫-—ñ–Ω–∏.\n–ö–æ–º–∞–Ω–¥–∏: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +2 /ru /uk /en",
        "privacy":"TendAI –Ω–µ –∑–∞–º—ñ–Ω—é—î –ª—ñ–∫–∞—Ä—è. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ–Ω—ñ–º—É–º –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å. /delete_data ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏.",
        "paused_on":"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ. /resume ‚Äî —É–≤—ñ–º–∫–Ω—É—Ç–∏.",
        "paused_off":"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω–µ–Ω—ñ.",
        "deleted":"–£—Å—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ. /start ‚Äî –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.",
        "ask_consent":"–ú–æ–∂—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—ñ–∑–Ω—ñ—à–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ –≤–∏?",
        "yes":"–¢–∞–∫","no":"–ù—ñ",
        "triage_pain_q1":"–î–µ –±–æ–ª–∏—Ç—å?",
        "triage_pain_q1_opts":["–ì–æ–ª–æ–≤–∞","–ì–æ—Ä–ª–æ","–°–ø–∏–Ω–∞","–ñ–∏–≤—ñ—Ç","–Ü–Ω—à–µ"],
        "triage_pain_q2":"–Ø–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª—é?",
        "triage_pain_q2_opts":["–¢—É–ø–∏–π","–ì–æ—Å—Ç—Ä–∏–π","–ü—É–ª—å—Å—É—é—á–∏–π","–¢–∏—Å–Ω—É—á–∏–π"],
        "triage_pain_q3":"–Ø–∫ –¥–æ–≤–≥–æ —Ç—Ä–∏–≤–∞—î?",
        "triage_pain_q3_opts":["<3–≥–æ–¥","3‚Äì24–≥–æ–¥",">1 –¥–Ω—è",">1 —Ç–∏–∂–Ω—è"],
        "triage_pain_q4":"–û—Ü—ñ–Ω—ñ—Ç—å –±—ñ–ª—å (0‚Äì10):",
        "triage_pain_q5":"–Ñ —â–æ—Å—å —ñ–∑ —Ü—å–æ–≥–æ –∑–∞—Ä–∞–∑?",
        "triage_pain_q5_opts":["–í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞","–ë–ª—é–≤–∞–Ω–Ω—è","–°–ª–∞–±–∫—ñ—Å—Ç—å/–æ–Ω—ñ–º—ñ–Ω–Ω—è","–ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–æ–≤–æ—é/–∑–æ—Ä–æ–º","–¢—Ä–∞–≤–º–∞","–ù–µ–º–∞—î"],
        "plan_header":"–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥:",
        "plan_accept":"–ì–æ—Ç–æ–≤—ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "accept_opts":["‚úÖ –¢–∞–∫","üîÅ –ü—ñ–∑–Ω—ñ—à–µ","‚úñÔ∏è –ù—ñ"],
        "remind_when":"–ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏ —Ç–∞ —Å–ø–∏—Ç–∞—Ç–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è?",
        "remind_opts":["—á–µ—Ä–µ–∑ 4 –≥–æ–¥","—É–≤–µ—á–µ—Ä—ñ","–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ","–Ω–µ —Ç—Ä–µ–±–∞"],
        "thanks":"–ü—Ä–∏–π–Ω—è—Ç–æ üôå",
        "checkin_ping":"–ö–æ—Ä–æ—Ç–∫–æ: —è–∫ –∑–∞—Ä–∞–∑ –∑–∞ —à–∫–∞–ª–æ—é 0‚Äì10?",
        "checkin_better":"–ß—É–¥–æ–≤–æ! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ üí™",
        "checkin_worse":"–Ø–∫—â–æ —î ¬´—á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ¬ª –∞–±–æ –±—ñ–ª—å ‚â•7/10 ‚Äî –∫—Ä–∞—â–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.",
        "comment_prompt":"–î—è–∫—É—é üôè –î–æ–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ /skip.",
        "comment_saved":"–ó–±–µ—Ä–µ–∂–µ–Ω–æ, –¥—è–∫—É—é! üôå",
        "skip_ok":"–ü—Ä–æ–ø—É—â–µ–Ω–æ.",
        "unknown":"–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ: –¥–µ —Å–∞–º–µ —ñ —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î?",
        "lang_switched":"–û–∫, –Ω–∞–¥–∞–ª—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏–º—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.",
        "profile_intro":"–®–≤–∏–¥–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ (~40—Å). –ú–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –ø–∏—Å–∞—Ç–∏ —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç.",
        "p_step_1":"–ö—Ä–æ–∫ 1/8. –°—Ç–∞—Ç—å:","p_step_2":"–ö—Ä–æ–∫ 2/8. –í—ñ–∫:",
        "p_step_3":"–ö—Ä–æ–∫ 3/8. –ì–æ–ª–æ–≤–Ω–∞ –º–µ—Ç–∞:","–ø_step_4":"–ö—Ä–æ–∫ 4/8. –•—Ä–æ–Ω—ñ—á–Ω—ñ —Ö–≤–æ—Ä–æ–±–∏:",
        "p_step_4":"–ö—Ä–æ–∫ 4/8. –•—Ä–æ–Ω—ñ—á–Ω—ñ —Ö–≤–æ—Ä–æ–±–∏:",
        "p_step_5":"–ö—Ä–æ–∫ 5/8. –õ—ñ–∫–∏/–¥–æ–±–∞–≤–∫–∏/–∞–ª–µ—Ä–≥—ñ—ó:",
        "p_step_6":"–ö—Ä–æ–∫ 6/8. –°–æ–Ω (–≤—ñ–¥–±—ñ–π/–ø—ñ–¥–π–æ–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        "p_step_7":"–ö—Ä–æ–∫ 7/8. –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:",
        "p_step_8":"–ö—Ä–æ–∫ 8/8. –•–∞—Ä—á—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–∂–Ω–æ:",
        "write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏","skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏","saved_profile":"–ó–±–µ—Ä—ñ–≥: ",
        "start_where":"–ó —á–æ–≥–æ –ø–æ—á–Ω–µ–º–æ? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è/–∞–Ω–∞–ª—ñ–∑–∏/–∑–≤–∏—á–∫–∏/–¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è)",
        "daily_gm":"–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! –®–≤–∏–¥–∫–∏–π —á–µ–∫-—ñ–Ω:",
        "mood_good":"üòÉ –î–æ–±—Ä–µ","mood_ok":"üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ","mood_bad":"üò£ –ü–æ–≥–∞–Ω–æ","mood_note":"‚úçÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä",
        "mood_thanks":"–î—è–∫—É—é! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üëã",
        "start_intake_now":"–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —à–≤–∏–¥–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ –∑–∞—Ä–∞–∑?",
        "start_yes":"–ü–æ—á–∞—Ç–∏","start_no":"–ü—ñ–∑–Ω—ñ—à–µ",
    },
}

def t(lang: str, key: str) -> str:
    """Thin wrapper to fetch from TEXTS with fallback to English."""
    return TEXTS.get(lang, TEXTS["en"]).get(key, TEXTS["en"].get(key, key))

# ----------------- Helpers -----------------
def utcnow(): return datetime.now(timezone.utc)
def iso(dt: Optional[datetime]) -> str:
    return "" if not dt else dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

# ---- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —è–∑—ã–∫: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ—Ç–µ–∫—Ç ----
def normalize_lang(code: str) -> str:
    if not code: return "en"
    c = code.lower()
    if c.startswith("ru"): return "ru"
    if c.startswith("uk"): return "uk"
    if c.startswith("en"): return "en"
    # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–≤–æ–¥–∏–º –∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´bg/de/...¬ª
    return "en"

def detect_language(text: str) -> str:
    try:
        raw = detect(text or "")
        return normalize_lang(raw)
    except Exception:
        # —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ (ru/uk)
        s = (text or "").lower()
        if re.search(r"[–∞-—è—ë—ñ—ó—î“ë]", s):
            return "uk" if re.search(r"[—ñ—ó—î“ë]", s) else "ru"
        return "en"

def profile_is_incomplete(profile_row: dict) -> bool:
    keys = ["sex","age","goal"]
    return sum(1 for k in keys if str(profile_row.get(k) or "").strip()) < 2

# -------- Sheets wrappers (fallback to memory) --------
def _headers(ws): return ws.row_values(1)

def users_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        for r in ws_users.get_all_records():
            if str(r.get("user_id")) == str(uid): return r
        return {}
    return MEM_USERS.get(uid, {})

def users_upsert(uid: int, username: str, lang: str):
    base = {"user_id": str(uid), "username": username or "", "lang": lang,
            "consent": "no", "tz_offset":"0", "checkin_hour": DEFAULT_CHECKIN_LOCAL, "paused":"no"}
    if SHEETS_ENABLED:
        vals = ws_users.get_all_records()
        hdr = _headers(ws_users)
        row = [base.get(h, "") for h in hdr]
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                ws_users.update(f"A{i}:{gsu.rowcol_to_a1(1,len(hdr)).rstrip('1')}{i}", [row])
                return
        ws_users.append_row(row)
    else:
        MEM_USERS[uid] = base

def users_set(uid: int, field: str, value: str):
    if SHEETS_ENABLED:
        vals = ws_users.get_all_records()
        hdr = _headers(ws_users)
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                if field in hdr:
                    ws_users.update_cell(i, hdr.index(field)+1, value)
                return
    else:
        u = MEM_USERS.setdefault(uid, {})
        u[field] = value

def profiles_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        for r in ws_profiles.get_all_records():
            if str(r.get("user_id")) == str(uid): return r
        return {}
    return MEM_PROFILES.get(uid, {})

def profiles_upsert(uid: int, data: dict):
    if SHEETS_ENABLED:
        hdr = _headers(ws_profiles)
        current, idx = None, None
        for i, r in enumerate(ws_profiles.get_all_records(), start=2):
            if str(r.get("user_id")) == str(uid):
                current, idx = r, i; break
        if not current: current = {"user_id": str(uid)}
        for k,v in data.items():
            current[k] = "" if v is None else (", ".join(v) if isinstance(v,list) else str(v))
        current["updated_at"] = iso(utcnow())
        values = [current.get(h,"") for h in hdr]
        end_col = gsu.rowcol_to_a1(1, len(hdr)).rstrip("1")
        if idx: ws_profiles.update(f"A{idx}:{end_col}{idx}", [values])
        else:   ws_profiles.append_row(values)
    else:
        row = MEM_PROFILES.setdefault(uid, {"user_id": str(uid)})
        for k,v in data.items():
            row[k] = "" if v is None else (", ".join(v) if isinstance(v,list) else str(v))
        row["updated_at"] = iso(utcnow())

def episode_create(uid: int, topic: str, severity: int, red: str) -> str:
    eid = f"{uid}-{uuid.uuid4().hex[:8]}"
    now = iso(utcnow())
    rec = {"episode_id":eid,"user_id":str(uid),"topic":topic,"started_at":now,
           "baseline_severity":str(severity),"red_flags":red,"plan_accepted":"0",
           "target":"<=3/10","reminder_at":"","next_checkin_at":"","status":"open",
           "last_update":now,"notes":""}
    if SHEETS_ENABLED:
        ws_episodes.append_row([rec[k] for k in _headers(ws_episodes)])
    else:
        MEM_EPISODES.append(rec)
    return eid

def episode_find_open(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED:
        for r in ws_episodes.get_all_records():
            if r.get("user_id")==str(uid) and r.get("status")=="open": return r
        return None
    for r in MEM_EPISODES:
        if r["user_id"]==str(uid) and r["status"]=="open": return r
    return None

def episode_set(eid: str, field: str, value: str):
    if SHEETS_ENABLED:
        vals = ws_episodes.get_all_values(); hdr = vals[0]
        if field not in hdr: return
        col = hdr.index(field)+1
        for i in range(2, len(vals)+1):
            if ws_episodes.cell(i,1).value == eid:
                ws_episodes.update_cell(i,col,value)
                ws_episodes.update_cell(i,hdr.index("last_update")+1, iso(utcnow()))
                return
    else:
        for r in MEM_EPISODES:
            if r["episode_id"]==eid:
                r[field]=value; r["last_update"]=iso(utcnow()); return

def feedback_add(ts, uid, name, username, rating, comment):
    if SHEETS_ENABLED:
        ws_feedback.append_row([ts,str(uid),name,username or "",rating,comment])
    else:
        MEM_FEEDBACK.append({"timestamp":ts,"user_id":str(uid),"name":name,"username":username or "","rating":rating,"comment":comment})

def reminder_add(uid: int, text: str, when_utc: datetime):
    rid = f"{uid}-{uuid.uuid4().hex[:6]}"
    rec = {"id":rid,"user_id":str(uid),"text":text,"when_utc":iso(when_utc),"created_at":iso(utcnow()),"status":"scheduled"}
    if SHEETS_ENABLED: ws_reminders.append_row([rec[k] for k in _headers(ws_reminders)])
    else: MEM_REMINDERS.append(rec)
    return rid

def reminders_all_records():
    if SHEETS_ENABLED: return ws_reminders.get_all_records()
    return MEM_REMINDERS.copy()

def reminders_mark_sent(rid: str):
    if SHEETS_ENABLED:
        vals = ws_reminders.get_all_values()
        for i in range(2, len(vals)+1):
            if ws_reminders.cell(i,1).value == rid:
                ws_reminders.update_cell(i,6,"sent"); return
    else:
        for r in MEM_REMINDERS:
            if r["id"]==rid: r["status"]="sent"; return

def daily_add(ts, uid, mood, comment):
    if SHEETS_ENABLED: ws_daily.append_row([ts,str(uid),mood,comment or ""])
    else: MEM_DAILY.append({"timestamp":ts,"user_id":str(uid),"mood":mood,"comment":comment or ""})

# --------- Scheduling (restore on start) ---------
def schedule_from_sheet_on_start(app):
    now = utcnow()
    src = ws_episodes.get_all_records() if SHEETS_ENABLED else MEM_EPISODES
    for r in src:
        if r.get("status")!="open": continue
        eid = r.get("episode_id"); uid = int(r.get("user_id"))
        nca = r.get("next_checkin_at") or ""
        if not nca: continue
        try: dt_ = datetime.strptime(nca, "%Y-%m-%d %H:%M:%S%z")
        except: continue
        delay = max(60, (dt_-now).total_seconds())
        app.job_queue.run_once(job_checkin_episode, when=delay, data={"user_id":uid,"episode_id":eid})

    for r in reminders_all_records():
        if (r.get("status") or "")!="scheduled": continue
        uid = int(r.get("user_id")); rid=r.get("id")
        try: dt_ = datetime.strptime(r.get("when_utc"), "%Y-%m-%d %H:%M:%S%z")
        except: continue
        delay = max(60,(dt_-now).total_seconds())
        app.job_queue.run_once(job_oneoff_reminder, when=delay, data={"user_id":uid,"reminder_id":rid})

    src_u = ws_users.get_all_records() if SHEETS_ENABLED else list(MEM_USERS.values())
    for u in src_u:
        if (u.get("paused") or "").lower()=="yes": continue
        uid = int(u.get("user_id"))
        tz_off = int(str(u.get("tz_offset") or "0"))
        hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
        schedule_daily_checkin(app, uid, tz_off, hhmm, norm_lang(u.get("lang") or "en"))

def hhmm_tuple(hhmm:str)->Tuple[int,int]:
    m = re.search(r'([01]?\d|2[0-3]):([0-5]\d)', hhmm.strip())
    return (int(m.group(1)), int(m.group(2))) if m else (8,30)

def local_to_utc_hour_min(tz_offset_hours:int, hhmm:str)->Tuple[int,int]:
    h,m = hhmm_tuple(hhmm); return ((h - tz_offset_hours) % 24, m)

def schedule_daily_checkin(app, uid:int, tz_off:int, hhmm_local:str, lang:str):
    for j in app.job_queue.get_jobs_by_name(f"daily_{uid}"): j.schedule_removal()
    h_utc, m_utc = local_to_utc_hour_min(tz_off, hhmm_local)
    t = dtime(hour=h_utc, minute=m_utc, tzinfo=timezone.utc)
    app.job_queue.run_daily(job_daily_checkin, time=t, name=f"daily_{uid}", data={"user_id":uid,"lang":lang})

# ------------- Jobs -------------
async def job_checkin_episode(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, eid = d.get("user_id"), d.get("episode_id")
    if not uid or not eid: return
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes": return
    lang = norm_lang(u.get("lang") or "en")
    try:
        await context.bot.send_message(uid, t(lang,"checkin_ping"), reply_markup=inline_numbers_0_10())
        episode_set(eid, "next_checkin_at", "")
    except Exception as e:
        logging.error(f"job_checkin_episode send error: {e}")

async def job_oneoff_reminder(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, rid = d.get("user_id"), d.get("reminder_id")
    text = t(norm_lang(users_get(uid).get("lang") or "en"), "thanks")
    for r in reminders_all_records():
        if r.get("id")==rid: text = r.get("text") or text; break
    try:
        await context.bot.send_message(uid, text)
    except Exception as e:
        logging.error(f"reminder send error: {e}")
    reminders_mark_sent(rid)

async def job_daily_checkin(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, lang = d.get("user_id"), d.get("lang","en")
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes": return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(TEXTS[lang]["mood_good"], callback_data="mood|good"),
         InlineKeyboardButton(TEXTS[lang]["mood_ok"],   callback_data="mood|ok"),
         InlineKeyboardButton(TEXTS[lang]["mood_bad"],  callback_data="mood|bad")],
        [InlineKeyboardButton(TEXTS[lang]["mood_note"], callback_data="mood|note")]
    ])
    try:
        await context.bot.send_message(uid, TEXTS[lang]["daily_gm"], reply_markup=kb)
    except Exception as e:
        logging.error(f"daily checkin error: {e}")

# ------------- LLM Router -------------
SYS_ROUTER = """
You are TendAI ‚Äî a concise, warm, professional health & longevity assistant (not a doctor).
Always answer strictly in {lang}. Keep replies short (<=6 lines + up to 4 bullets).
Use the user profile if provided. TRIAGE: ask 1‚Äì2 clarifiers first; advise ER only for clear red flags with high confidence.
Return MINIFIED JSON ONLY:
{{"intent":"symptom"|"nutrition"|"sleep"|"labs"|"habits"|"longevity"|"other",
  "assistant_reply": string,
  "followups": string[],
  "needs_more": boolean,
  "red_flags": boolean,
  "confidence": 0.0}}
"""
def llm_router_answer(text: str, lang: str, profile: dict) -> dict:
    if not oai:
        return {"intent":"other","assistant_reply":t(lang,"unknown"),"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}
    sys = SYS_ROUTER.format(lang=lang) + f"\nUserProfile: {json.dumps(profile, ensure_ascii=False)}"
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL, temperature=0.25, max_tokens=420,
            messages=[{"role":"system","content":sys},{"role":"user","content":text}]
        )
        out = resp.choices[0].message.content.strip()
        m = re.search(r"\{.*\}\s*$", out, re.S)
        data = json.loads(m.group(0) if m else out)
        if data.get("red_flags") and float(data.get("confidence",0)) < 0.6:
            data["red_flags"] = False; data["needs_more"] = True
            data.setdefault("followups", []).append(
                "–ì–¥–µ –∏–º–µ–Ω–Ω–æ/–∫–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä/—Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?" if lang=="ru" else
                ("–î–µ —Å–∞–º–µ/—è–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä/—Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î?" if lang=="uk" else "Where exactly/what character/how long?")
            )
        return data
    except Exception as e:
        logging.error(f"router LLM error: {e}")
        return {"intent":"other","assistant_reply":t(lang,"unknown"),"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}

# --------- Inline keyboards ---------
def inline_topic_kb(lang:str) -> InlineKeyboardMarkup:
    items = [
        ("Pain","pain"),("Throat/Cold","throat"),("Sleep","sleep"),("Stress","stress"),
        ("Digestion","digestion"),("Energy","energy"),
        ("Nutrition","nutrition"),("Labs","labs"),("Habits","habits"),
        ("Longevity","longevity"),("Profile","profile")
    ]
    by_lang = {
        "ru":["–ë–æ–ª—å","–ì–æ—Ä–ª–æ/–ø—Ä–æ—Å—Ç—É–¥–∞","–°–æ–Ω","–°—Ç—Ä–µ—Å—Å","–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ","–≠–Ω–µ—Ä–≥–∏—è","–ü–∏—Ç–∞–Ω–∏–µ","–ê–Ω–∞–ª–∏–∑—ã","–ü—Ä–∏–≤—ã—á–∫–∏","–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ","–ü—Ä–æ—Ñ–∏–ª—å"],
        "uk":["–ë—ñ–ª—å","–ì–æ—Ä–ª–æ/–∑–∞—Å—Ç—É–¥–∞","–°–æ–Ω","–°—Ç—Ä–µ—Å","–¢—Ä–∞–≤–ª–µ–Ω–Ω—è","–ï–Ω–µ—Ä–≥—ñ—è","–•–∞—Ä—á—É–≤–∞–Ω–Ω—è","–ê–Ω–∞–ª—ñ–∑–∏","–ó–≤–∏—á–∫–∏","–î–æ–≤–≥–æ–ª—ñ—Ç—Ç—è","–ü—Ä–æ—Ñ—ñ–ª—å"],
        "en":[x[0] for x in items]
    }[lang]
    keys = [x[1] for x in items]
    rows=[]; row=[]
    for label,key in zip(by_lang, keys):
        row.append(InlineKeyboardButton(label, callback_data=f"topic|{key}"))
        if len(row)==3: rows.append(row); row=[]
    if row: rows.append(row)
    return InlineKeyboardMarkup(rows)

def inline_list(opts: List[str], prefix:str) -> InlineKeyboardMarkup:
    rows=[]; row=[]
    for label in opts:
        row.append(InlineKeyboardButton(label, callback_data=f"{prefix}|{label}"))
        if len(row)==3: rows.append(row); row=[]
    if row: rows.append(row)
    return InlineKeyboardMarkup(rows)

def inline_numbers_0_10() -> InlineKeyboardMarkup:
    nums = [str(i) for i in range(0,11)]
    rows = [
        [InlineKeyboardButton(n, callback_data=f"num|{n}") for n in nums[:6]],
        [InlineKeyboardButton(n, callback_data=f"num|{n}") for n in nums[6:]]
    ]
    return InlineKeyboardMarkup(rows)

def inline_accept(lang:str) -> InlineKeyboardMarkup:
    labels = TEXTS[lang]["accept_opts"]
    return InlineKeyboardMarkup([[InlineKeyboardButton(labels[0],callback_data="acc|yes"),
                                  InlineKeyboardButton(labels[1],callback_data="acc|later"),
                                  InlineKeyboardButton(labels[2],callback_data="acc|no")]])

def inline_remind(lang:str) -> InlineKeyboardMarkup:
    labs = TEXTS[lang]["remind_opts"]; keys = ["4h","evening","morning","none"]
    rows=[[InlineKeyboardButton(labs[i], callback_data=f"rem|{keys[i]}") for i in range(4)]]
    return InlineKeyboardMarkup(rows)

# ------------- Plans -------------
def pain_plan(lang: str, red_flags_selected: List[str]) -> List[str]:
    flg = [s for s in red_flags_selected if s and str(s).lower() not in ["none","–Ω–µ—Ç","–Ω–µ–º–∞—î"]]
    if flg:
        return {
            "ru":["‚ö†Ô∏è –ï—Å—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏. –õ—É—á—à–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –≤—Ä–∞—á—É/–≤ —Å–∫–æ—Ä—É—é."],
            "uk":["‚ö†Ô∏è –Ñ —Ç—Ä–∏–≤–æ–∂–Ω—ñ –æ–∑–Ω–∞–∫–∏. –í–∞—Ä—Ç–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è/—à–≤–∏–¥–∫–æ—ó."],
            "en":["‚ö†Ô∏è Red flags present. Please seek urgent medical evaluation."]
        }[lang]
    if lang=="ru":
        return ["1) –í–æ–¥–∞ 400‚Äì600 –º–ª –∏ 15‚Äì20 –º–∏–Ω —Ç–∏—à–∏–Ω—ã/–æ—Ç–¥—ã—Ö–∞.",
                "2) –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –∏–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ —Å –µ–¥–æ–π.",
                "3) –ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å, —É–º–µ–Ω—å—à–∏—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞ 30‚Äì60 –º–∏–Ω.",
                "–¶–µ–ª—å: –∫ –≤–µ—á–µ—Ä—É –±–æ–ª—å ‚â§3/10. –ï—Å–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ."]
    if lang=="uk":
        return ["1) –í–æ–¥–∞ 400‚Äì600 –º–ª —ñ 15‚Äì20 —Ö–≤ —Å–ø–æ–∫–æ—é.",
                "2) –Ø–∫—â–æ –Ω–µ–º–∞ –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω—å ‚Äî —ñ–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –∑ —ó–∂–µ—é.",
                "3) –ü—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏, –º–µ–Ω—à–µ –µ–∫—Ä–∞–Ω—É 30‚Äì60 —Ö–≤.",
                "–ú–µ—Ç–∞: –¥–æ –≤–µ—á–æ—Ä–∞ –±—ñ–ª—å ‚â§3/10. –Ø–∫—â–æ –ø–æ—Å–∏–ª—é—î—Ç—å—Å—è ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å."]
    return ["1) Drink 400‚Äì600 ml water; rest 15‚Äì20 min.",
            "2) If no contraindications ‚Äî ibuprofen 200‚Äì400 mg once with food.",
            "3) Reduce screen time 30‚Äì60 min; air the room.",
            "Goal: by evening pain ‚â§3/10. Worsening ‚Äî ping me."]

# ------------- Profile (intake) -------------
PROFILE_STEPS = [
    {"key":"sex","opts":{
        "ru":[("–ú—É–∂—Å–∫–æ–π","male"),("–ñ–µ–Ω—Å–∫–∏–π","female"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("Male","male"),("Female","female"),("Other","other")],
        "uk":[("–ß–æ–ª–æ–≤—ñ—á–∞","male"),("–ñ—ñ–Ω–æ—á–∞","female"),("–Ü–Ω—à–∞","other")],
    }},
    {"key":"age","opts":{
        "ru":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "en":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "uk":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
    }},
    {"key":"goal","opts":{
        "ru":[("–ü–æ—Ö—É–¥–µ–Ω–∏–µ","weight"),("–≠–Ω–µ—Ä–≥–∏—è","energy"),("–°–æ–Ω","sleep"),("–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ","longevity"),("–°–∏–ª–∞","strength")],
        "en":[("Weight","weight"),("Energy","energy"),("Sleep","sleep"),("Longevity","longevity"),("Strength","strength")],
        "uk":[("–í–∞–≥–∞","weight"),("–ï–Ω–µ—Ä–≥—ñ—è","energy"),("–°–æ–Ω","sleep"),("–î–æ–≤–≥–æ–ª—ñ—Ç—Ç—è","longevity"),("–°–∏–ª–∞","strength")],
    }},
    {"key":"conditions","opts":{
        "ru":[("–ù–µ—Ç","none"),("–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è","hypertension"),("–î–∏–∞–±–µ—Ç","diabetes"),("–©–∏—Ç–æ–≤–∏–¥–∫–∞","thyroid"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("None","none"),("Hypertension","hypertension"),("Diabetes","diabetes"),("Thyroid","thyroid"),("Other","other")],
        "uk":[("–ù–µ–º–∞—î","none"),("–ì—ñ–ø–µ—Ä—Ç–æ–Ω—ñ—è","hypertension"),("–î—ñ–∞–±–µ—Ç","diabetes"),("–©–∏—Ç–æ–ø–æ–¥—ñ–±–Ω–∞","thyroid"),("–Ü–Ω—à–µ","other")],
    }},
    {"key":"meds","opts":{
        "ru":[("–ù–µ—Ç","none"),("–ú–∞–≥–Ω–∏–π","magnesium"),("–í–∏—Ç–∞–º–∏–Ω D","vitd"),("–ê–ª–ª–µ—Ä–≥–∏–∏ –µ—Å—Ç—å","allergies"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("None","none"),("Magnesium","magnesium"),("Vitamin D","vitd"),("Allergies","allergies"),("Other","other")],
        "uk":[("–ù–µ–º–∞—î","none"),("–ú–∞–≥–Ω—ñ–π","magnesium"),("–í—ñ—Ç–∞–º—ñ–Ω D","vitd"),("–ê–ª–µ—Ä–≥—ñ—ó","allergies"),("–Ü–Ω—à–µ","other")],
    }},
    {"key":"sleep","opts":{
        "ru":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
        "en":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("Irregular","irregular")],
        "uk":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
    }},
    {"key":"activity","opts":{
        "ru":[("<5–∫ —à–∞–≥–æ–≤","<5k"),("5‚Äì8–∫","5-8k"),("8‚Äì12–∫","8-12k"),("–°–ø–æ—Ä—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ","sport")],
        "en":[("<5k steps","<5k"),("5‚Äì8k","5-8k"),("8‚Äì12k","8-12k"),("Regular sport","sport")],
        "uk":[("<5–∫ –∫—Ä–æ–∫—ñ–≤","<5k"),("5‚Äì8–∫","5-8k"),("8‚Äì12–∫","8-12k"),("–°–ø–æ—Ä—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ","sport")],
    }},
    {"key":"diet","opts":{
        "ru":[("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ","balanced"),("–ù–∏–∑–∫–æ—É–≥–ª/–∫–µ—Ç–æ","lowcarb"),("–í–µ–≥–µ—Ç–∞—Ä/–≤–µ–≥–∞–Ω","plant"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
        "en":[("Balanced","balanced"),("Low-carb/keto","lowcarb"),("Vegetarian/vegan","plant"),("Irregular","irregular")],
        "uk":[("–ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ","balanced"),("–ú–∞–ª–æ–≤—É–≥–ª/–∫–µ—Ç–æ","lowcarb"),("–í–µ–≥–µ—Ç–∞—Ä/–≤–µ–≥–∞–Ω","plant"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
    }},
]
def build_profile_kb(lang:str, key:str, opts:List[Tuple[str,str]])->InlineKeyboardMarkup:
    rows=[]; row=[]
    for label,val in opts:
        row.append(InlineKeyboardButton(label, callback_data=f"p|choose|{key}|{val}"))
        if len(row)==3: rows.append(row); row=[]
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(TEXTS[lang]["write"], callback_data=f"p|write|{key}"),
                 InlineKeyboardButton(TEXTS[lang]["skip"],  callback_data=f"p|skip|{key}")])
    return InlineKeyboardMarkup(rows)

async def start_profile(update: Update, lang: str, uid: int):
    sessions[uid] = {"profile_active": True, "p_step": 0, "p_wait_key": None}
    await update.message.reply_text(TEXTS[lang]["profile_intro"], reply_markup=ReplyKeyboardRemove())
    step = PROFILE_STEPS[0]
    kb = build_profile_kb(lang, step["key"], step["opts"][lang])
    await update.message.reply_text(TEXTS[lang]["p_step_1"], reply_markup=kb)

async def advance_profile(msg, lang: str, uid: int):
    s = sessions.get(uid, {})
    s["p_step"] += 1
    if s["p_step"] < len(PROFILE_STEPS):
        idx = s["p_step"]; step = PROFILE_STEPS[idx]
        kb = build_profile_kb(lang, step["key"], step["opts"][lang])
        await msg.reply_text(TEXTS[lang][f"p_step_{idx+1}"], reply_markup=kb)
        return
    prof = profiles_get(uid); summary=[]
    for k in ["sex","age","goal","conditions","meds","sleep","activity","diet"]:
        v = prof.get(k) or sessions.get(uid,{}).get(k,"")
        if v: summary.append(f"{k}: {v}")
    profiles_upsert(uid, {})
    sessions[uid]["profile_active"] = False
    await msg.reply_text(TEXTS[lang]["saved_profile"] + "; ".join(summary))
    await msg.reply_text(TEXTS[lang]["start_where"], reply_markup=inline_topic_kb(lang))

# ------------- Commands -------------
async def post_init(app):
    me = await app.bot.get_me()
    logging.info(f"BOT READY: @{me.username} (id={me.id})")

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    # –µ—Å–ª–∏ —è–∑—ã–∫ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ language_code
    lang = context.user_data.get("lang")
    if not lang:
        lang = normalize_lang(getattr(user, "language_code", "") or "en")
        context.user_data["lang"] = lang
    users_upsert(user.id, user.username or "", lang)
    await update.message.reply_text(TEXTS[lang]["greeting"], reply_markup=ReplyKeyboardRemove())
    # —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî –ø–æ–∑–∂–µ, –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or context.user_data.get("lang") or "en")
    await update.message.reply_text(t(lang,"help"))

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or context.user_data.get("lang") or "en")
    await update.message.reply_text(t(lang,"privacy"))

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "yes")
    lang = norm_lang(users_get(uid).get("lang") or context.user_data.get("lang") or "en")
    await update.message.reply_text(t(lang,"paused_on"))

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "no")
    lang = norm_lang(users_get(uid).get("lang") or context.user_data.get("lang") or "en")
    await update.message.reply_text(t(lang,"paused_off"))

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if SHEETS_ENABLED:
        vals = ws_users.get_all_values()
        for i in range(2, len(vals)+1):
            if ws_users.cell(i,1).value == str(uid):
                ws_users.delete_rows(i); break
    else:
        MEM_USERS.pop(uid, None); MEM_PROFILES.pop(uid, None)
        global MEM_EPISODES, MEM_REMINDERS, MEM_DAILY
        MEM_EPISODES = [r for r in MEM_EPISODES if r["user_id"]!=str(uid)]
        MEM_REMINDERS = [r for r in MEM_REMINDERS if r["user_id"]!=str(uid)]
        MEM_DAILY = [r for r in MEM_DAILY if r["user_id"]!=str(uid)]
    lang = context.user_data.get("lang") or normalize_lang(getattr(update.effective_user,"language_code",""))
    await update.message.reply_text(t(lang,"deleted"), reply_markup=ReplyKeyboardRemove())

async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or context.user_data.get("lang") or getattr(update.effective_user, "language_code", None))
    await start_profile(update, lang, uid)

async def cmd_settz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or context.user_data.get("lang") or "en")
    parts = (update.message.text or "").split()
    if len(parts)<2 or not re.fullmatch(r"[+-]?\d{1,2}", parts[1]):
        await update.message.reply_text({"ru":"–§–æ—Ä–º–∞—Ç: /settz +3","uk":"–§–æ—Ä–º–∞—Ç: /settz +2","en":"Usage: /settz +3"}[lang]); return
    off = int(parts[1]); users_set(uid,"tz_offset",str(off))
    hhmm = users_get(uid).get("checkin_hour") or DEFAULT_CHECKIN_LOCAL
    schedule_daily_checkin(context.application, uid, off, hhmm, lang)
    await update.message.reply_text({"ru":f"–°–¥–≤–∏–≥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {off}—á","uk":f"–ó—Å—É–≤: {off} –≥–æ–¥","en":f"Timezone offset: {off}h"}[lang])

async def cmd_checkin_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or context.user_data.get("lang") or "en")
    parts = (update.message.text or "").split(maxsplit=1)
    hhmm = DEFAULT_CHECKIN_LOCAL
    if len(parts)==2:
        m = re.search(r'([01]?\d|2[0-3]):([0-5]\d)', parts[1])
        if m: hhmm = m.group(0)
    users_set(uid,"checkin_hour",hhmm)
    tz_off = int(str(users_get(uid).get("tz_offset") or "0"))
    schedule_daily_checkin(context.application, uid, tz_off, hhmm, lang)
    await update.message.reply_text({"ru":f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤–∫–ª—é—á—ë–Ω ({hhmm}).","uk":f"–©–æ–¥–µ–Ω–Ω–∏–π —á–µ–∫-—ñ–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–æ ({hhmm}).","en":f"Daily check-in enabled ({hhmm})."}[lang])

async def cmd_checkin_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    for j in context.application.job_queue.get_jobs_by_name(f"daily_{uid}"): j.schedule_removal()
    lang = norm_lang(users_get(uid).get("lang") or context.user_data.get("lang") or "en")
    await update.message.reply_text({"ru":"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤—ã–∫–ª—é—á–µ–Ω.","uk":"–©–æ–¥–µ–Ω–Ω–∏–π —á–µ–∫-—ñ–Ω –≤–∏–º–∫–Ω–µ–Ω–æ.","en":"Daily check-in disabled."}[lang])

async def cmd_ru(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "ru"); context.user_data["lang"]="ru"
    await update.message.reply_text(t("ru","lang_switched"))
async def cmd_en(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "en"); context.user_data["lang"]="en"
    await update.message.reply_text(t("en","lang_switched"))
async def cmd_uk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "uk"); context.user_data["lang"]="uk"
    await update.message.reply_text(t("uk","lang_switched"))

# ------------- Callback handler -------------
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    data = (q.data or ""); uid = q.from_user.id
    lang = norm_lang(users_get(uid).get("lang") or context.user_data.get("lang") or "en")

    if data.startswith("startintake|"):
        if data.endswith("|yes"):
            try: await q.delete_message()
            except: pass
            await start_profile(Update(update.update_id, message=q.message), lang, uid)
        else:
            await q.message.reply_text(t(lang,"start_where"), reply_markup=inline_topic_kb(lang))
        return

    if data.startswith("consent|"):
        users_set(uid, "consent", "yes" if data.endswith("|yes") else "no")
        await q.edit_message_reply_markup(reply_markup=None)
        await q.message.reply_text(t(lang,"thanks")); return

    if data.startswith("topic|"):
        topic = data.split("|",1)[1]
        if topic=="profile":
            await start_profile(Update(update.update_id, message=q.message), lang, uid); return
        if topic=="pain":
            await start_pain_triage(Update(update.update_id, message=q.message), lang, uid); return
        # –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã ‚Äî —á–µ—Ä–µ–∑ LLM (–±–µ–∑ üëç/üëé)
        prof = profiles_get(uid)
        data_llm = llm_router_answer(q.message.text or "", lang, prof)
        await q.message.reply_text(data_llm.get("assistant_reply") or t(lang,"unknown"))
        for one in (data_llm.get("followups") or [])[:2]:
            await q.message.reply_text(one)
        return

    # intake callbacks
    if data.startswith("p|"):
        _, action, key, *rest = data.split("|")
        if action=="choose":
            value = "|".join(rest)
            sessions.setdefault(uid,{})[key]=value; profiles_upsert(uid,{key:value})
            await advance_profile(q.message, lang, uid); return
        if action=="write":
            sessions.setdefault(uid,{})["p_wait_key"] = key
            await q.message.reply_text({"ru":"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:","uk":"–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ:","en":"Type your answer:"}[lang]); return
        if action=="skip":
            profiles_upsert(uid,{key:""}); await advance_profile(q.message, lang, uid); return

    # daily moods
    if data.startswith("mood|"):
        mood = data.split("|",1)[1]
        if mood=="note":
            sessions.setdefault(uid,{})["awaiting_daily_comment"] = True
            await q.message.reply_text({"ru":"–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:","uk":"–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä:","en":"Short note:"}[lang]); return
        daily_add(iso(utcnow()), uid, mood, ""); await q.message.reply_text(TEXTS[lang]["mood_thanks"]); return

    if data.startswith("num|"):
        num = data.split("|",1)[1]
        fake_update = Update(update.update_id, message=q.message)
        fake_update.message.text = num
        await on_number_reply(fake_update, context); return

    if data.startswith("acc|"):
        s = sessions.get(uid, {})
        accepted = "1" if data.endswith("|yes") else "0"
        if s.get("episode_id"): episode_set(s["episode_id"], "plan_accepted", accepted)
        await q.message.reply_text(t(lang,"remind_when"), reply_markup=inline_remind(lang))
        s["step"] = 7; return

    if data.startswith("rem|"):
        s = sessions.get(uid, {})
        choice = data.split("|",1)[1]
        delay = {"4h":4, "evening":6, "morning":16}.get(choice)
        if delay and s.get("episode_id"):
            next_time = utcnow() + timedelta(hours=delay)
            episode_set(s["episode_id"], "next_checkin_at", iso(next_time))
            context.job_queue.run_once(job_checkin_episode, when=delay*3600,
                                       data={"user_id":uid,"episode_id":s["episode_id"]})
        await q.message.reply_text(t(lang,"thanks"), reply_markup=inline_topic_kb(lang))
        sessions.pop(uid, None); return

# ------------- Pain triage -------------
def detect_or_choose_topic(lang: str, text: str) -> Optional[str]:
    tx = text.lower()
    if any(w in tx for w in ["–æ–ø—Ä–æ—Å","–∞–Ω–∫–µ—Ç–∞","–æ–ø–∏—Ç","questionnaire","survey"]): return "profile"
    if any(w in tx for w in ["–±–æ–ª–∏—Ç","–±–æ–ª—å","hurt","pain","–±–æ–ª—é"]): return "pain"
    if any(w in tx for w in ["–≥–æ—Ä–ª–æ","throat","–ø—Ä–æ—Å—Ç—É–¥","cold"]): return "throat"
    if any(w in tx for w in ["—Å–æ–Ω","sleep"]): return "sleep"
    if any(w in tx for w in ["—Å—Ç—Ä–µ—Å—Å","stress"]): return "stress"
    if any(w in tx for w in ["–∂–∏–≤–æ—Ç","–∂–µ–ª—É–¥","–∂–∏–≤—ñ—Ç","—Å—Ç—É–ª","–ø–æ–Ω–æ—Å","–¥–∏–∞—Ä","digest"]): return "digestion"
    if any(w in tx for w in ["—ç–Ω–µ—Ä–≥","–µ–Ω–µ—Ä–≥","energy","fatigue","—Å–ª–∞–±–æ—Å—Ç—å"]): return "energy"
    if any(w in tx for w in ["–ø–∏—Ç–∞–Ω–∏–µ","—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è","nutrition"]): return "nutrition"
    if any(w in tx for w in ["–∞–Ω–∞–ª–∏–∑","–∞–Ω–∞–ª—ñ–∑","labs"]): return "labs"
    if any(w in tx for w in ["–ø—Ä–∏–≤—ã—á","–∑–≤–∏—á","habit"]): return "habits"
    if any(w in tx for w in ["–¥–æ–ª–≥–æ–ª–µ—Ç","–¥–æ–≤–≥–æ–ª—ñ—Ç","longevity"]): return "longevity"
    return None

async def start_pain_triage(update: Update, lang: str, uid: int):
    sessions[uid] = {"topic":"pain","step":1,"answers":{}}
    kb = inline_list(TEXTS[lang]["triage_pain_q1_opts"], "painloc")
    await update.message.reply_text(t(lang,"triage_pain_q1"), reply_markup=kb)

async def continue_pain_triage(update: Update, context: ContextTypes.DEFAULT_TYPE, lang: str, uid: int, text: str):
    s = sessions.get(uid, {}); step = s.get("step",1)

    if step == 1:
        s["answers"]["loc"] = text; s["step"] = 2
        await update.message.reply_text(t(lang,"triage_pain_q2"),
                                        reply_markup=inline_list(TEXTS[lang]["triage_pain_q2_opts"], "painkind")); return

    if step == 2:
        s["answers"]["kind"] = text; s["step"] = 3
        await update.message.reply_text(t(lang,"triage_pain_q3"),
                                        reply_markup=inline_list(TEXTS[lang]["triage_pain_q3_opts"], "paindur")); return

    if step == 3:
        s["answers"]["duration"] = text; s["step"] = 4
        await update.message.reply_text(t(lang,"triage_pain_q4"), reply_markup=inline_numbers_0_10()); return

    if step == 4:
        m = re.search(r'\d+', text)
        if not m:
            await update.message.reply_text(t(lang,"triage_pain_q4"), reply_markup=inline_numbers_0_10()); return
        sev = max(0,min(10,int(m.group(0))))
        s["answers"]["severity"] = sev; s["step"] = 5
        await update.message.reply_text(t(lang,"triage_pain_q5"),
                                        reply_markup=inline_list(TEXTS[lang]["triage_pain_q5_opts"], "painrf")); return

    if step == 5:
        red = text; s["answers"]["red"] = red
        eid = episode_create(uid, "pain", int(s["answers"].get("severity",5)), red)
        s["episode_id"] = eid
        plan_lines = pain_plan(lang, [red])
        await update.message.reply_text(f"{t(lang,'plan_header')}\n" + "\n".join(plan_lines))
        await update.message.reply_text(t(lang,"plan_accept"), reply_markup=inline_accept(lang))
        s["step"] = 6; return

# ------------- Text handler -------------
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; uid = user.id
    text = (update.message.text or "").strip()
    logging.info(f"INCOMING uid={uid} text={text[:200]}")

    # 1) –ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —à–ª—ë–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if "lang" not in context.user_data:
        lang = detect_language(text)
        context.user_data["lang"] = lang
        users_upsert(uid, user.username or "", lang)
        await update.message.reply_text(TEXTS[lang]["greeting"], reply_markup=ReplyKeyboardRemove())
        return

    # 2) –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ user_data (–¥–∞–ª–µ–µ –æ–Ω —Å—Ç–∞–±–∏–ª—å–Ω—ã–π)
    lang = context.user_data.get("lang", "en")

    # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω ‚Äî –∑–∞–º–µ—Ç–∫–∞
    if sessions.get(uid, {}).get("awaiting_daily_comment"):
        daily_add(iso(utcnow()), uid, "note", text)
        sessions[uid]["awaiting_daily_comment"] = False
        await update.message.reply_text(TEXTS[lang]["mood_thanks"]); return

    # —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è intake
    if sessions.get(uid, {}).get("p_wait_key"):
        key = sessions[uid]["p_wait_key"]; sessions[uid]["p_wait_key"] = None
        val = text
        if key=="age":
            m = re.search(r'\d{2}', text)
            if m: val = m.group(0)
        profiles_upsert(uid,{key:val}); sessions[uid][key]=val
        await advance_profile(update.message, lang, uid); return

    # –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º intake —Å—Ä–∞–∑—É
    prof = profiles_get(uid)
    if not sessions.get(uid,{}).get("profile_active") and profile_is_incomplete(prof):
        await start_profile(update, lang, uid); return

    # –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∏–∞–∂ –±–æ–ª–∏
    if sessions.get(uid,{}).get("topic") == "pain":
        await continue_pain_triage(update, context, lang, uid, text); return

    topic = detect_or_choose_topic(lang, text)
    if topic == "profile":
        await start_profile(update, lang, uid); return
    if topic == "pain":
        await start_pain_triage(update, lang, uid); return
    if topic in {"throat","sleep","stress","digestion","energy","nutrition","labs","habits","longevity"}:
        data = llm_router_answer(text, lang, profiles_get(uid))
        await update.message.reply_text(data.get("assistant_reply") or t(lang,"unknown"))
        for one in (data.get("followups") or [])[:2]:
            await update.message.reply_text(one)
        return

    # –æ–±—â–∏–π —Ñ–æ–ª–±—ç–∫ (–±–µ–∑ üëç/üëé)
    data = llm_router_answer(text, lang, profiles_get(uid))
    await update.message.reply_text(data.get("assistant_reply") or t(lang,"unknown"))
    for one in (data.get("followups") or [])[:2]:
        await update.message.reply_text(one)

# ------------- Number replies (0‚Äì10 typed) -------------
async def on_number_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; uid = user.id
    text = update.message.text.strip()
    try:
        val = int(text)
        if not (0 <= val <= 10): return
    except Exception:
        return
    lang = context.user_data.get("lang","en")

    if sessions.get(uid,{}).get("topic")=="pain" and sessions[uid].get("step")==4:
        await continue_pain_triage(update, context, lang, uid, str(val)); return

    ep = episode_find_open(uid)
    if not ep:
        await update.message.reply_text(t(lang,"thanks")); return
    eid = ep.get("episode_id"); episode_set(eid,"notes",f"checkin:{val}")

    if val <= 3:
        await update.message.reply_text(t(lang,"checkin_better"), reply_markup=inline_topic_kb(lang))
        episode_set(eid,"status","resolved")
    else:
        await update.message.reply_text(t(lang,"checkin_worse"), reply_markup=inline_topic_kb(lang))

# ------------- App init -------------
def main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN is not set")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    schedule_from_sheet_on_start(app)

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help",  cmd_help))
    app.add_handler(CommandHandler("privacy", cmd_privacy))
    app.add_handler(CommandHandler("pause", cmd_pause))
    app.add_handler(CommandHandler("resume", cmd_resume))
    app.add_handler(CommandHandler("delete_data", cmd_delete_data))
    app.add_handler(CommandHandler("profile", cmd_profile))
    app.add_handler(CommandHandler("settz", cmd_settz))
    app.add_handler(CommandHandler("checkin_on", cmd_checkin_on))
    app.add_handler(CommandHandler("checkin_off", cmd_checkin_off))
    app.add_handler(CommandHandler("ru", cmd_ru))
    app.add_handler(CommandHandler("en", cmd_en))
    app.add_handler(CommandHandler("uk", cmd_uk))

    app.add_handler(CallbackQueryHandler(on_callback))

    app.add_handler(MessageHandler(filters.Regex(r"^(?:[0-9]|10)$"), on_number_reply))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    logging.info(f"SHEETS_ENABLED={SHEETS_ENABLED}")
    app.run_polling()

if __name__ == "__main__":
    main()
