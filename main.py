# main.py
import os
import json
import logging
import re
from datetime import datetime

from dotenv import load_dotenv
from langdetect import detect
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CommandHandler,
    ContextTypes, filters, CallbackQueryHandler
)

# ====== OpenAI (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ, —Ç–æ–ª—å–∫–æ —Ñ–æ–ª–±—ç–∫) ======
try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except Exception:
    OPENAI_AVAILABLE = False

# ====== Google Sheets ======
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ------------------------------------------------
# ENV
# ------------------------------------------------
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")

# OpenAI client (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
client_oa = None
if OPENAI_API_KEY and OPENAI_AVAILABLE:
    try:
        client_oa = OpenAI(api_key=OPENAI_API_KEY)
    except Exception:
        client_oa = None

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client_sheet = gspread.authorize(credentials)
sheet_feedback = client_sheet.open("TendAI Feedback").worksheet("Feedback")

def add_feedback_row(row):
    try:
        sheet_feedback.append_row(row)
    except Exception as e:
        logging.error(f"Sheets append error: {e}")

# ------------------------------------------------
# LOGGING
# ------------------------------------------------
logging.basicConfig(level=logging.INFO)

# ------------------------------------------------
# STATE
# ------------------------------------------------
# user_state[user_id] = {
#   "lang": "ru/en/uk/es",
#   "slots": {"loc": None, "kind": None, "duration": None},
#   "awaiting": None  # "loc" | "kind" | "duration" | None
# }
user_state = {}

SUPPORTED = {"ru", "en", "uk", "es"}

def norm_lang(code: str) -> str:
    if not code:
        return "en"
    code = code.lower()
    if code.startswith("ru"): return "ru"
    if code.startswith("uk") or code.startswith("ua"): return "uk"
    if code.startswith("en"): return "en"
    if code.startswith("es"): return "es"
    return "en"

# ------------------------------------------------
# L10N
# ------------------------------------------------
T = {
    "ru": {
        "hello": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è? –ï—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ?",
        "where": "–ú–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å. –ì–¥–µ –∏–º–µ–Ω–Ω–æ —É –≤–∞—Å –±–æ–ª–∏—Ç?",
        "kind": "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏: —Ç—É–ø–∞—è, –æ—Å—Ç—Ä–∞—è, –ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è –∏–ª–∏ –∂–≥—É—á–∞—è?",
        "duration": "–ö–∞–∫ –¥–∞–≤–Ω–æ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è?",
        "thanks": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å, –≥–¥–µ –∏–º–µ–Ω–Ω–æ —É –≤–∞—Å –±–æ–ª–∏—Ç? –ò –∫–∞–∫ –¥–æ–ª–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —ç—Ç–∞ –±–æ–ª—å?",
        "bad_llm": "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤—Ä—É—á–Ω—É—é.",
        "quick_menu": ["–ì–æ–ª–æ–≤–∞", "–ì–æ—Ä–ª–æ", "–°–ø–∏–Ω–∞", "–ñ–∏–≤–æ—Ç", "–î—Ä—É–≥–æ–µ"],
        "kinds_menu": ["–¢—É–ø–∞—è", "–û—Å—Ç—Ä–∞—è", "–ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è", "–ñ–≥—É—á–∞—è", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
        "ask_more_kind": "–ü–æ–Ω—è–ª. –î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏.",
        "ask_more_duration": "–°–ø–∞—Å–∏–±–æ. –°–∫–æ–ª—å–∫–æ —ç—Ç–æ –¥–ª–∏—Ç—Å—è (–º–∏–Ω—É—Ç—ã/—á–∞—Å—ã/–¥–Ω–∏)?",
        "tips_head": "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Å—Ç—Ä–µ—Å—Å, –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ, –Ω–µ–¥–æ—Å—ã–ø\nü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –≤–æ–¥–∞, –æ—Ç–¥—ã—Ö, —Å–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö\nüö® –í—Ä–∞—á: –µ—Å–ª–∏ –±–æ–ª—å –≤–Ω–µ–∑–∞–ø–Ω–∞—è/–æ—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è, —Å —Ç–æ—à–Ω–æ—Ç–æ–π/–Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –∑—Ä–µ–Ω–∏—è",
        "tips_throat": "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –≤–∏—Ä—É—Å, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, —Å—É—Ö–æ—Å—Ç—å\nü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: —Ç—ë–ø–ª–æ–µ –ø–∏—Ç—å—ë, –ø–æ–∫–æ–π, —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ\nüö® –í—Ä–∞—á: –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Å–∏–ª—å–Ω–∞—è –±–æ–ª—å, –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–µ –¥—ã—Ö–∞–Ω–∏—è",
        "tips_back": "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –º—ã—à–µ—á–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –ø–æ–∑–∞, –Ω–∞–≥—Ä—É–∑–∫–∞\nü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –º—è–≥–∫–æ–µ —Ç–µ–ø–ª–æ, –ª—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞, –æ—Ç–¥—ã—Ö\nüö® –í—Ä–∞—á: –µ—Å–ª–∏ –±–æ–ª—å –æ—Ç–¥–∞–µ—Ç –≤ –Ω–æ–≥–∏, –æ–Ω–µ–º–µ–Ω–∏–µ, —Å–ª–∞–±–æ—Å—Ç—å",
        "tips_stomach": "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –≥–∞—Å—Ç—Ä–∏—Ç, –ø–∏—Ç–∞–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å\nü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: —Ç—ë–ø–ª–∞—è –≤–æ–¥–∞, –ø–æ–∫–æ–π, –±–µ–∑ –µ–¥—ã 2 —á–∞—Å–∞\nüö® –í—Ä–∞—á: —Ä–µ–∑–∫–∞—è –±–æ–ª—å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Ä–≤–æ—Ç–∞",
        "feedback_q": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É üôè\n–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç.\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        "fb_saved": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å–ø–∞—Å–∏–±–æ! üôå",
        "lang_set": "–Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: –†—É—Å—Å–∫–∏–π",
        "help_lang": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lang ru|en|uk|es, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫.",
        "buttons_fb": ["üëç –î–∞", "üëé –ù–µ—Ç"],
    },
    "en": {
        "hello": "Hi! How can I help you today? Any health questions?",
        "where": "I need a bit more information to help. Where exactly does it hurt?",
        "kind": "What kind of pain is it: dull, sharp, throbbing, or burning?",
        "duration": "How long has it lasted?",
        "thanks": "Thanks for your message. Where exactly does it hurt? And how long has it lasted?",
        "bad_llm": "Sorry, AI is unavailable right now. Let‚Äôs handle it manually.",
        "quick_menu": ["Head", "Throat", "Back", "Stomach", "Other"],
        "kinds_menu": ["Dull", "Sharp", "Throbbing", "Burning", "Skip"],
        "ask_more_kind": "Got it. Let‚Äôs clarify the pain type.",
        "ask_more_duration": "Thanks. How long (minutes/hours/days)?",
        "tips_head": "üí° Possible causes: stress, dehydration, poor sleep\nü™™ Try: water, rest, fresh air\nüö® Doctor: sudden/severe pain, with nausea or vision issues",
        "tips_throat": "üí° Possible causes: virus, irritation, dryness\nü™™ Try: warm fluids, rest, humidify\nüö® Doctor: high fever, severe pain, trouble breathing",
        "tips_back": "üí° Possible causes: muscle strain, posture, load\nü™™ Try: gentle heat, light stretching, rest\nüö® Doctor: radiating pain, numbness, weakness",
        "tips_stomach": "üí° Possible causes: gastritis, diet, stress\nü™™ Try: warm water, rest, skip food for 2 hours\nüö® Doctor: sharp pain, fever, vomiting",
        "feedback_q": "Thanks for the rating üôè\nWant to add a comment? Just type it now.\nOr send /skip to pass.",
        "fb_saved": "Comment saved, thank you! üôå",
        "lang_set": "Language set: English",
        "help_lang": "Use /lang ru|en|uk|es to change language.",
        "buttons_fb": ["üëç Yes", "üëé No"],
    },
    "uk": {
        "hello": "–ü—Ä–∏–≤—ñ—Ç! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ? –Ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∑–¥–æ—Ä–æ–≤‚Äô—è?",
        "where": "–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó. –î–µ —Å–∞–º–µ –±–æ–ª–∏—Ç—å?",
        "kind": "–Ø–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª—é: —Ç—É–ø–∏–π, –≥–æ—Å—Ç—Ä–∏–π, –ø—É–ª—å—Å—ñ–≤–Ω–∏–π —á–∏ –ø–µ–∫—É—á–∏–π?",
        "duration": "–Ø–∫ –¥–æ–≤–≥–æ —Ü–µ —Ç—Ä–∏–≤–∞—î?",
        "thanks": "–î—è–∫—É—é –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –î–µ —Å–∞–º–µ –±–æ–ª–∏—Ç—å —ñ —è–∫ –¥–æ–≤–≥–æ —Ü–µ —Ç—Ä–∏–≤–∞—î?",
        "bad_llm": "–í–∏–±–∞—á, –∑–∞—Ä–∞–∑ –Ü–Ü –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –†–æ–∑–±–µ—Ä—ñ–º–æ—Å—è –≤—Ä—É—á–Ω—É.",
        "quick_menu": ["–ì–æ–ª–æ–≤–∞", "–ì–æ—Ä–ª–æ", "–°–ø–∏–Ω–∞", "–ñ–∏–≤—ñ—Ç", "–Ü–Ω—à–µ"],
        "kinds_menu": ["–¢—É–ø–∏–π", "–ì–æ—Å—Ç—Ä–∏–π", "–ü—É–ª—å—Å—ñ–≤–Ω–∏–π", "–ü–µ–∫—É—á–∏–π", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"],
        "ask_more_kind": "–ó—Ä–æ–∑—É–º—ñ–ª–æ. –£—Ç–æ—á–Ω–∏–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª—é.",
        "ask_more_duration": "–î—è–∫—É—é. –°–∫—ñ–ª—å–∫–∏ —Ü–µ —Ç—Ä–∏–≤–∞—î (—Ö–≤–∏–ª–∏–Ω–∏/–≥–æ–¥–∏–Ω–∏/–¥–Ω—ñ)?",
        "tips_head": "üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏: —Å—Ç—Ä–µ—Å, –∑–Ω–µ–≤–æ–¥–Ω–µ–Ω–Ω—è, –Ω–µ–¥–æ—Å–∏–ø\nü™™ –í–∞—Ä—Ç–æ: –≤–æ–¥–∞, –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫, —Å–≤—ñ–∂–µ –ø–æ–≤—ñ—Ç—Ä—è\nüö® –õ—ñ–∫–∞—Ä: —Ä–∞–ø—Ç–æ–≤–∏–π/—Å–∏–ª—å–Ω–∏–π –±—ñ–ª—å, –Ω—É–¥–æ—Ç–∞, –ø—Ä–æ–±–ª–µ–º–∏ —ñ–∑ –∑–æ—Ä–æ–º",
        "tips_throat": "üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏: –≤—ñ—Ä—É—Å, –ø–æ–¥—Ä–∞–∑–Ω–µ–Ω–Ω—è, —Å—É—Ö—ñ—Å—Ç—å\nü™™ –í–∞—Ä—Ç–æ: —Ç–µ–ø–ª—ñ –Ω–∞–ø–æ—ó, —Å–ø–æ–∫—ñ–π, –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è\nüö® –õ—ñ–∫–∞—Ä: –≤–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Å–∏–ª—å–Ω–∏–π –±—ñ–ª—å, —É—Ç—Ä—É–¥–Ω–µ–Ω–µ –¥–∏—Ö–∞–Ω–Ω—è",
        "tips_back": "üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏: –º‚Äô—è–∑–æ–≤–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä—É–∂–µ–Ω–Ω—è, –ø–æ—Å—Ç–∞–≤–∞, –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è\nü™™ –í–∞—Ä—Ç–æ: –ª–µ–≥–∫–µ —Ç–µ–ø–ª–æ, —Ä–æ–∑—Ç—è–∂–∫–∞, –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫\nüö® –õ—ñ–∫–∞—Ä: —ñ—Ä—Ä–∞–¥—ñ–∞—Ü—ñ—è –±–æ–ª—é, –æ–Ω—ñ–º—ñ–Ω–Ω—è, —Å–ª–∞–±–∫—ñ—Å—Ç—å",
        "tips_stomach": "üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏: –≥–∞—Å—Ç—Ä–∏—Ç, —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è, —Å—Ç—Ä–µ—Å\nü™™ –í–∞—Ä—Ç–æ: —Ç–µ–ø–ª–∞ –≤–æ–¥–∞, —Å–ø–æ–∫—ñ–π, –±–µ–∑ —ó–∂—ñ 2 –≥–æ–¥–∏–Ω–∏\nüö® –õ—ñ–∫–∞—Ä: —Ä—ñ–∑–∫–∏–π –±—ñ–ª—å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –±–ª—é–≤–∞–Ω–Ω—è",
        "feedback_q": "–î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É üôè\n–•–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –π–æ–≥–æ –∑–∞—Ä–∞–∑.\n–ê–±–æ /skip, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.",
        "fb_saved": "–ö–æ–º–µ–Ω—Ç–∞—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –¥—è–∫—É—î–º–æ! üôå",
        "lang_set": "–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "help_lang": "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /lang ru|en|uk|es —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É.",
        "buttons_fb": ["üëç –¢–∞–∫", "üëé –ù—ñ"],
    },
    "es": {
        "hello": "¬°Hola! ¬øC√≥mo puedo ayudarte hoy? ¬øAlguna duda sobre tu salud?",
        "where": "Necesito un poco m√°s de informaci√≥n. ¬øD√≥nde exactamente te duele?",
        "kind": "¬øQu√© tipo de dolor es: sordo, agudo, palpitante o ardor?",
        "duration": "¬øDesde cu√°ndo lo tienes?",
        "thanks": "Gracias por tu mensaje. ¬øD√≥nde exactamente te duele y desde cu√°ndo?",
        "bad_llm": "Perd√≥n, la IA no est√° disponible ahora. Vamos a resolverlo manualmente.",
        "quick_menu": ["Cabeza", "Garganta", "Espalda", "Est√≥mago", "Otro"],
        "kinds_menu": ["Sordo", "Agudo", "Palpitante", "Ardor", "Omitir"],
        "ask_more_kind": "Entendido. Aclaremos el tipo de dolor.",
        "ask_more_duration": "Gracias. ¬øCu√°nto tiempo (minutos/horas/d√≠as)?",
        "tips_head": "üí° Posibles causas: estr√©s, deshidrataci√≥n, poco sue√±o\nü™™ Prueba: agua, descanso, aire fresco\nüö® M√©dico: dolor s√∫bito/intenso, con n√°useas o problemas de visi√≥n",
        "tips_throat": "üí° Posibles causas: virus, irritaci√≥n, sequedad\nü™™ Prueba: bebidas tibias, descanso, humidificar\nüö® M√©dico: fiebre alta, dolor intenso, dificultad para respirar",
        "tips_back": "üí° Posibles causas: tensi√≥n muscular, postura, carga\nü™™ Prueba: calor suave, estiramientos ligeros, descanso\nüö® M√©dico: dolor irradiado, entumecimiento, debilidad",
        "tips_stomach": "üí° Posibles causas: gastritis, alimentaci√≥n, estr√©s\nü™™ Prueba: agua tibia, descanso, evitar comida 2 horas\nüö® M√©dico: dolor agudo, fiebre, v√≥mitos",
        "feedback_q": "Gracias por la valoraci√≥n üôè\n¬øQuieres a√±adir un comentario? Escr√≠belo ahora.\nO env√≠a /skip para omitir.",
        "fb_saved": "¬°Comentario guardado, gracias! üôå",
        "lang_set": "Idioma guardado: Espa√±ol",
        "help_lang": "Usa /lang ru|en|uk|es para cambiar el idioma.",
        "buttons_fb": ["üëç S√≠", "üëé No"],
    }
}

# –°–∏–Ω–æ–Ω–∏–º—ã (–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞)
LOC_SYNS = {
    "ru": {
        "head": ["–≥–æ–ª–æ–≤–∞", "–≥–æ–ª–æ–≤–µ", "–≥–æ–ª–æ–≤", "–≤–∏—Å–æ–∫", "–ª–æ–±", "–∑–∞—Ç—ã–ª–æ–∫"],
        "throat": ["–≥–æ—Ä–ª–æ", "–≥–æ—Ä–ª–µ"],
        "back": ["—Å–ø–∏–Ω–∞", "–ø–æ—è—Å–Ω–∏—Ü–∞", "–ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫"],
        "stomach": ["–∂–∏–≤–æ—Ç", "–∂–µ–ª—É–¥–æ–∫", "–∫–∏—à–∫–∏", "—Ç–µ–ø–µ—Ä–µ–≤ –∂–∏–≤–æ—Ç"],
        "other": ["–¥—Ä—É–≥–æ–µ", "–ø—Ä–æ—á–µ–µ"]
    },
    "en": {
        "head": ["head", "temple", "forehead", "occiput"],
        "throat": ["throat"],
        "back": ["back", "lower back", "spine"],
        "stomach": ["stomach", "belly", "abdomen", "tummy"],
        "other": ["other"]
    },
    "uk": {
        "head": ["–≥–æ–ª–æ–≤–∞", "–≤–∏—Å–æ–∫", "–ª–æ–±", "–ø–æ—Ç–∏–ª–∏—Ü—è"],
        "throat": ["–≥–æ—Ä–ª–æ"],
        "back": ["—Å–ø–∏–Ω–∞", "–ø–æ–ø–µ—Ä–µ–∫", "—Ö—Ä–µ–±–µ—Ç"],
        "stomach": ["–∂–∏–≤—ñ—Ç", "—à–ª—É–Ω–æ–∫", "–∫–∏—à–∫–∏"],
        "other": ["—ñ–Ω—à–µ"]
    },
    "es": {
        "head": ["cabeza", "sien", "frente", "nuca"],
        "throat": ["garganta"],
        "back": ["espalda", "lumbago", "lumbar", "columna"],
        "stomach": ["est√≥mago", "barriga", "abdomen", "panza"],
        "other": ["otro", "otra"]
    }
}

KIND_SYNS = {
    "ru": {
        "dull": ["—Ç—É–ø–∞—è", "—Ç—É–ø–æ–π"],
        "sharp": ["–æ—Å—Ç—Ä–∞—è", "–æ—Å—Ç—Ä—ã–π", "—Ä–µ–∂—É—â–∞—è", "—Ä–µ–∂—É—â–∏–π", "–∫–æ–ª—é—â–∞—è", "–∫–æ–ª—é—â–∏–π"],
        "throb": ["–ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è", "–ø—É–ª—å—Å–∏—Ä—É—é—â–∏–π"],
        "burn": ["–∂–≥—É—á–∞—è", "–∂–≥—É—á–∏–π", "–∂–∂–µ–Ω–∏–µ", "–∂–∂–µ—Ç", "–∂–∂—ë—Ç"]
    },
    "en": {
        "dull": ["dull"],
        "sharp": ["sharp", "stabbing", "cutting"],
        "throb": ["throbbing", "pulsating"],
        "burn": ["burning", "burn"]
    },
    "uk": {
        "dull": ["—Ç—É–ø–∏–π", "—Ç—É–ø–∞"],
        "sharp": ["–≥–æ—Å—Ç—Ä–∏–π", "–≥–æ—Å—Ç—Ä–∞", "–∫–æ–ª—é—á–∏–π", "—Ä—ñ–∂—É—á–∏–π"],
        "throb": ["–ø—É–ª—å—Å—ñ–≤–Ω–∏–π", "–ø—É–ª—å—Å—ñ–≤–Ω–∞"],
        "burn": ["–ø–µ–∫—É—á–∏–π", "–ø–µ–∫—É—á–∞", "–ø–µ—á—ñ–Ω–Ω—è"]
    },
    "es": {
        "dull": ["sordo", "sorda"],
        "sharp": ["agudo", "aguda", "punzante"],
        "throb": ["palpitante", "puls√°til"],
        "burn": ["ardor", "ardiente", "quemaz√≥n"]
    }
}

DUR_PATTERNS = {
    "ru": r"(\d+)\s*(–º–∏–Ω|–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–¥–Ω|–¥–Ω–µ–π)",
    "en": r"(\d+)\s*(min|mins|minute|minutes|hour|hours|day|days)",
    "uk": r"(\d+)\s*(—Ö–≤|—Ö–≤–∏–ª–∏–Ω|–≥–æ–¥|–≥–æ–¥–∏–Ω|–¥–Ω|–¥–Ω—ñ–≤)",
    "es": r"(\d+)\s*(min|mins|minutos|minuto|hora|horas|d√≠a|d√≠as)"
}

def get_tips(lang, loc_key):
    if loc_key == "head": return T[lang]["tips_head"]
    if loc_key == "throat": return T[lang]["tips_throat"]
    if loc_key == "back": return T[lang]["tips_back"]
    if loc_key == "stomach": return T[lang]["tips_stomach"]
    return ""

# ------------------------------------------------
# HELPERS
# ------------------------------------------------
def get_lang_for_user(update: Update) -> str:
    user_id = update.effective_user.id
    txt = (update.message.text or "").strip() if update.message else ""
    detected = None
    if txt:
        try:
            detected = detect(txt)
        except Exception:
            detected = None
    tg_code = update.effective_user.language_code
    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π -> detect -> telegram -> en
    lang = user_state.get(user_id, {}).get("lang")
    if lang in SUPPORTED:
        return lang
    for candidate in [detected, tg_code]:
        if candidate:
            n = norm_lang(candidate)
            if n in SUPPORTED:
                return n
    return "en"

def set_lang_for_user(user_id: int, lang: str):
    st = user_state.setdefault(user_id, {})
    st["lang"] = lang
    st.setdefault("slots", {"loc": None, "kind": None, "duration": None})
    st.setdefault("awaiting", None)

def parse_loc(text: str, lang: str):
    txt = text.lower()
    syns = LOC_SYNS[lang]
    for key, words in syns.items():
        for w in words:
            if w in txt:
                return key
    return None

def parse_kind(text: str, lang: str):
    txt = text.lower()
    syns = KIND_SYNS[lang]
    for key, words in syns.items():
        for w in words:
            if w in txt:
                return key
    return None

def parse_duration(text: str, lang: str):
    txt = text.lower()
    p = DUR_PATTERNS[lang]
    m = re.search(p, txt)
    if not m:
        return None
    num = m.group(1)
    unit = m.group(2)
    return f"{num} {unit}"

def quick_menu(lang):
    return ReplyKeyboardMarkup(
        [[KeyboardButton(x) for x in T[lang]["quick_menu"]]],
        resize_keyboard=True
    )

def kinds_menu(lang):
    return ReplyKeyboardMarkup(
        [[KeyboardButton(x) for x in T[lang]["kinds_menu"]]],
        resize_keyboard=True
    )

def feedback_buttons(lang):
    b = T[lang]["buttons_fb"]
    return InlineKeyboardMarkup([[InlineKeyboardButton(b[0], callback_data="feedback_yes"),
                                  InlineKeyboardButton(b[1], callback_data="feedback_no")]])

# ------------------------------------------------
# COMMANDS
# ------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = get_lang_for_user(update)
    set_lang_for_user(user_id, lang)
    await update.message.reply_text(T[lang]["hello"], reply_markup=quick_menu(lang))

async def cmd_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text(T[get_lang_for_user(update)]["help_lang"])
        return
    candidate = norm_lang(context.args[0])
    if candidate not in SUPPORTED:
        await update.message.reply_text(T[get_lang_for_user(update)]["help_lang"])
        return
    set_lang_for_user(user_id, candidate)
    await update.message.reply_text(T[candidate]["lang_set"], reply_markup=quick_menu(candidate))

async def cmd_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = get_lang_for_user(update)
    st = user_state.setdefault(user_id, {"lang": lang, "slots": {"loc": None, "kind": None, "duration": None}})
    # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç
    if st.get("awaiting") == "kind":
        st["slots"]["kind"] = "skip"
    elif st.get("awaiting") == "duration":
        st["slots"]["duration"] = "skip"
    st["awaiting"] = None
    await ask_next_or_reply(update, lang, st)

# ------------------------------------------------
# FEEDBACK (inline)
# ------------------------------------------------
async def feedback_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    lang = user_state.get(user_id, {}).get("lang", "en")
    name = query.data  # feedback_yes / feedback_no
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    username = query.from_user.username or ""

    add_feedback_row([timestamp, str(user_id), name, username, "", ""])
    await query.edit_message_reply_markup(reply_markup=None)
    await query.message.reply_text(T[lang]["feedback_q"])

# ------------------------------------------------
# CORE: slot filling + reply
# ------------------------------------------------
async def ask_next_or_reply(update: Update, lang: str, st: dict):
    slots = st["slots"]
    msg = update.message

    # –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –≥–¥–µ
    if not slots.get("loc"):
        st["awaiting"] = "loc"
        await msg.reply_text(T[lang]["where"], reply_markup=quick_menu(lang))
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä
    if not slots.get("kind"):
        st["awaiting"] = "kind"
        await msg.reply_text(T[lang]["ask_more_kind"], reply_markup=kinds_menu(lang))
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if not slots.get("duration"):
        st["awaiting"] = "duration"
        await msg.reply_text(T[lang]["ask_more_duration"])
        return

    # –í—Å—ë –µ—Å—Ç—å –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ‚Üí –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ª–æ–∫–∞—Ü–∏–∏
    loc_key = slots["loc"]
    tips = get_tips(lang, loc_key)
    st["awaiting"] = None
    await msg.reply_text(tips, reply_markup=feedback_buttons(lang))

    # —Å–±—Ä–æ—Å–∏–º —Å–ª–æ—Ç-–¥–∏–∞–ª–æ–≥, –Ω–æ —è–∑—ã–∫ –æ—Å—Ç–∞–≤–∏–º
    st["slots"] = {"loc": None, "kind": None, "duration": None}

# ------------------------------------------------
# MESSAGE HANDLER
# ------------------------------------------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = (update.message.text or "").strip()
    lang = get_lang_for_user(update)
    set_lang_for_user(user_id, lang)
    st = user_state[user_id]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –ø–æ—Å–ª–µ —Ñ–∏–¥–±—ç–∫–∞
    if text.lower() != "/skip" and text not in sum((T[l]["quick_menu"] + T[l]["kinds_menu"] for l in SUPPORTED), []):
        # –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å —Å–ª–æ—Ç—ã
        loc = parse_loc(text, lang)
        if loc:
            st["slots"]["loc"] = loc
        kind = parse_kind(text, lang)
        if kind:
            st["slots"]["kind"] = kind
        dur = parse_duration(text, lang)
        if dur:
            st["slots"]["duration"] = dur

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–∑ –º–µ–Ω—é –ª–æ–∫–∞—Ü–∏–π
    menu_map = {
        "ru": {"–ì–æ–ª–æ–≤–∞": "head", "–ì–æ—Ä–ª–æ": "throat", "–°–ø–∏–Ω–∞": "back", "–ñ–∏–≤–æ—Ç": "stomach"},
        "en": {"Head": "head", "Throat": "throat", "Back": "back", "Stomach": "stomach"},
        "uk": {"–ì–æ–ª–æ–≤–∞": "head", "–ì–æ—Ä–ª–æ": "throat", "–°–ø–∏–Ω–∞": "back", "–ñ–∏–≤—ñ—Ç": "stomach"},
        "es": {"Cabeza": "head", "Garganta": "throat", "Espalda": "back", "Est√≥mago": "stomach"},
    }
    if text in menu_map[lang]:
        st["slots"]["loc"] = menu_map[lang][text]

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –±–æ–ª–∏
    kind_map = {
        "ru": {"–¢—É–ø–∞—è": "dull", "–û—Å—Ç—Ä–∞—è": "sharp", "–ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è": "throb", "–ñ–≥—É—á–∞—è": "burn", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å": "skip"},
        "en": {"Dull": "dull", "Sharp": "sharp", "Throbbing": "throb", "Burning": "burn", "Skip": "skip"},
        "uk": {"–¢—É–ø–∏–π": "dull", "–ì–æ—Å—Ç—Ä–∏–π": "sharp", "–ü—É–ª—å—Å—ñ–≤–Ω–∏–π": "throb", "–ü–µ–∫—É—á–∏–π": "burn", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏": "skip"},
        "es": {"Sordo": "dull", "Agudo": "sharp", "Palpitante": "throb", "Ardor": "burn", "Omitir": "skip"},
    }
    if text in kind_map[lang]:
        st["slots"]["kind"] = kind_map[lang][text]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –ø—Ä–æ—Å—Ç–æ ‚Äú—Å–ø–∞—Å–∏–±–æ‚Äù/‚Äú–æ–∫–µ–π‚Äù –∏ —Ç.–ø. ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –æ—Ç–≤–µ—Ç–∏–º
    if re.fullmatch(r"(—Å–ø–∞—Å–∏–±–æ|–¥—è–∫—É—é|thanks|thank you|ok|okay|gracias|vale)", text.lower()):
        await update.message.reply_text("ü´∂")
        return

    # –ü–µ—Ä–µ–π–¥—ë–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É/–æ—Ç–≤–µ—Ç—É
    await ask_next_or_reply(update, lang, st)

# ------------------------------------------------
# STARTUP
# ------------------------------------------------
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("lang", cmd_lang))
    app.add_handler(CommandHandler("skip", cmd_skip))

    app.add_handler(CallbackQueryHandler(feedback_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
