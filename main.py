# -*- coding: utf-8 -*-
"""
TendAI ‚Äî —á–∞—Ç-–ø–µ—Ä–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è
‚Äî –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ (–±–µ–∑ –Ω–∏–∂–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫), LLM –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
‚Äî –ò–Ω—Ç—Ä–æ-–æ–ø—Ä–æ—Å–Ω–∏–∫ (6 –≤–æ–ø—Ä–æ—Å–æ–≤) —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏. /intake ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é.
‚Äî –û—Ç–∑—ã–≤—ã: üëç/üëé –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Üí Google Sheets (–ª–∏—Å—Ç Feedback) c –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
‚Äî –≠–ø–∏–∑–æ–¥—ã, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —á–µ–∫-–∏–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Google Sheets.
"""

import os, re, json, uuid, logging, hashlib, time
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv

# langdetect (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
try:
    from langdetect import detect, DetectorFactory
    DetectorFactory.seed = 0
except Exception:
    detect = None

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ===== OpenAI =====
try:
    from openai import OpenAI
except Exception:
    OpenAI = None

# ===== Google Sheets =====
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# =========================
# Boot & Config
# =========================
load_dotenv()
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)

TELEGRAM_TOKEN  = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL    = os.getenv("OPENAI_MODEL", "gpt-4o-mini")  # –ø–æ—Å—Ç–∞–≤—å gpt-5, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
SHEET_NAME      = os.getenv("SHEET_NAME", "TendAI Feedback")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is missing")

# OpenAI client
oai = OpenAI(api_key=OPENAI_API_KEY) if (OPENAI_API_KEY and OpenAI) else None
logging.info(f"OPENAI enabled={bool(OPENAI_API_KEY)} model={OPENAI_MODEL}")

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
if not creds_json:
    raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
credentials = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(creds_json), scope)
gclient = gspread.authorize(credentials)
ss = gclient.open(SHEET_NAME)

def _get_or_create_ws(title: str, headers: list[str]):
    try:
        ws = ss.worksheet(title)
    except gspread.WorksheetNotFound:
        ws = ss.add_worksheet(title=title, rows=4000, cols=24)
        ws.append_row(headers)
    if not ws.get_all_values():
        ws.append_row(headers)
    return ws

ws_feedback = _get_or_create_ws("Feedback", ["timestamp","user_id","context","username","rating","comment"])
ws_users    = _get_or_create_ws("Users", ["user_id","username","lang","consent","tz_offset","checkin_hour","paused","intake_ts"])
ws_eps      = _get_or_create_ws("Episodes", [
    "episode_id","user_id","topic","started_at","baseline_severity","red_flags",
    "plan_accepted","target","reminder_at","next_checkin_at","status","last_update","notes"
])
ws_intake   = _get_or_create_ws("Intake", [
    "timestamp","user_id","username","lang",
    "age_band","sex_at_birth","chronic","meds","allergy","pregnancy"
])

# =========================
# State (RAM)
# =========================
# sessions[user_id] = {
#   "chat_history": [...],
#   "answers": {...},
#   "mode": "chat"|"await_consent"|"await_rating"|"await_plan"|"await_reminder"|"intake",
#   "episode_id": "...",
#   "awaiting_comment": bool,
#   "feedback_context": str,
#   "last_advice_hash": str,
#   "last_feedback_prompt_ts": float,
#   "intake": {"q":1..6, "ans":{key:value}}
# }
sessions: dict[int, dict] = {}

# =========================
# i18n
# =========================
SUPPORTED = {"ru","en","uk","es"}
def norm_lang(code: str | None) -> str:
    if not code: return "en"
    c = code.split("-")[0].lower()
    if c.startswith("ua"): c = "uk"
    return c if c in SUPPORTED else "en"

T = {
    "ru": {
        "welcome":"–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî —Ç—ë–ø–ª—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é. –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç ‚Äî –ø–æ–º–æ–≥—É –∏ –ø—Ä–µ–¥–ª–æ–∂—É –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –ø–ª–∞–Ω.",
        "help":"–ö–æ–º–∞–Ω–¥—ã: /help, /privacy, /pause, /resume, /delete_data, /lang <ru|en|uk|es>, /feedback, /intake",
        "privacy":"–Ø –Ω–µ –∑–∞–º–µ–Ω—è—é –≤—Ä–∞—á–∞. –î–∞—é –º—è–≥–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —á–µ–∫-–∏–Ω—ã. –î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ /delete_data.",
        "consent":"–ú–æ–∂–Ω–æ –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? –ù–∞–ø–∏—à–∏—Ç–µ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.",
        "thanks":"–°–ø–∞—Å–∏–±–æ, —É—Å–ª—ã—à–∞–ª.",
        "checkin_prompt":"–ö–æ—Ä–æ—Ç–∫–∏–π —á–µ–∫-–∏–Ω: –∫–∞–∫ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ 0‚Äì10? –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ.",
        "rate_req":"–û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–π—á–∞—Å –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º 0‚Äì10.",
        "plan_try":"–ü–æ–ø—Ä–æ–±—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è? –ù–∞–ø–∏—à–∏—Ç–µ: ¬´–¥–∞¬ª, ¬´–ø–æ–∑–∂–µ¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.",
        "remind_when":"–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å: ¬´—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞¬ª, ¬´–≤–µ—á–µ—Ä–æ–º¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º¬ª –∏–ª–∏ ¬´–Ω–µ –Ω–∞–¥–æ¬ª?",
        "remind_ok":"–ü—Ä–∏–Ω—è—Ç–æ üôå",
        "feedback_hint":"–ï—Å–ª–∏ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ ‚Äî –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å üëç –∏–ª–∏ üëé, –∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤.",
        "deleted":"‚úÖ –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        # Intake
        "intake_intro":"–î–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ ‚Äî 60-—Å–µ–∫. –º–∏–Ω–∏-–æ–ø—Ä–æ—Å (–ø–æ –∂–µ–ª–∞–Ω–∏—é). –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        "intake_start":"–ù–∞—á–∞—Ç—å",
        "intake_skip":"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "intake_done":"–ì–æ—Ç–æ–≤–æ! –°–ø–∞—Å–∏–±–æ. –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.",
        "intake_q1":"–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω?",
        "intake_q2":"–ü–æ–ª –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏?",
        "intake_q3":"–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è?",
        "intake_q4":"–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞?",
        "intake_q5":"–ê–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞?",
        "intake_q6":"–í–æ–∑–º–æ–∂–Ω–∞ –ª–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å —Å–µ–π—á–∞—Å?",
        "use_buttons":"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ (–∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª).",
    },
    "en": {
        "welcome":"Hi! I‚Äôm TendAI ‚Äî a warm health & longevity assistant. Tell me briefly what‚Äôs going on and I‚Äôll help with a gentle plan.",
        "help":"Commands: /help, /privacy, /pause, /resume, /delete_data, /lang <ru|en|uk|es>, /feedback, /intake",
        "privacy":"I‚Äôm not a doctor. I offer gentle self-care and check-ins. You can wipe data via /delete_data.",
        "consent":"May I check in with you from time to time? Please reply ‚Äúyes‚Äù or ‚Äúno‚Äù.",
        "thanks":"Thanks, got it.",
        "checkin_prompt":"Quick check-in: how is it now (0‚Äì10)? Please reply with a number.",
        "rate_req":"Please rate your state now 0‚Äì10 with a single number.",
        "plan_try":"Will you try this today? Reply: ‚Äúyes‚Äù, ‚Äúlater‚Äù or ‚Äúno‚Äù.",
        "remind_when":"When should I check in: ‚Äúin 4h‚Äù, ‚Äúthis evening‚Äù, ‚Äútomorrow morning‚Äù or ‚Äúno need‚Äù?",
        "remind_ok":"Got it üôå",
        "feedback_hint":"If this helped, send üëç or üëé, and add a short comment if you like.",
        "deleted":"‚úÖ Data deleted. /start to begin again.",
        # Intake
        "intake_intro":"For better accuracy, a 60-sec mini-intake (optional). You can skip.",
        "intake_start":"Start",
        "intake_skip":"Skip",
        "intake_done":"All set ‚Äî thanks. Let‚Äôs continue.",
        "intake_q1":"Age range?",
        "intake_q2":"Sex at birth?",
        "intake_q3":"Chronic conditions?",
        "intake_q4":"Regular medications?",
        "intake_q5":"Drug allergies?",
        "intake_q6":"Could you be pregnant now?",
        "use_buttons":"Please pick an option below (or ‚ÄúSkip‚Äù).",
    },
    "uk": {
        "welcome":"–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî —Ç–µ–ø–ª–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑—ñ –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è. –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å, —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è ‚Äî –ø—ñ–¥–∫–∞–∂—É –º‚Äô—è–∫–∏–π –ø–ª–∞–Ω.",
        "help":"–ö–æ–º–∞–Ω–¥–∏: /help, /privacy, /pause, /resume, /delete_data, /lang <ru|en|uk|es>, /feedback, /intake",
        "privacy":"–Ø –Ω–µ –ª—ñ–∫–∞—Ä. –ü—Ä–æ–ø–æ–Ω—É—é –º‚Äô—è–∫—ñ –∫—Ä–æ–∫–∏ —Ç–∞ —á–µ–∫-—ñ–Ω–∏. –î–∞–Ω—ñ –º–æ–∂–Ω–∞ —Å—Ç–µ—Ä—Ç–∏ —á–µ—Ä–µ–∑ /delete_data.",
        "consent":"–ú–æ–∂—É —á–∞—Å –≤—ñ–¥ —á–∞—Å—É –ø–∏—Å–∞—Ç–∏, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å, —è–∫ –≤–∏? –í—ñ–¥–ø–æ–≤—ñ–¥—å: ¬´—Ç–∞–∫¬ª –∞–±–æ ¬´–Ω—ñ¬ª.",
        "thanks":"–î—è–∫—É—é, –ø–æ—á—É–≤.",
        "checkin_prompt":"–ö–æ—Ä–æ—Ç–∫–∏–π —á–µ–∫-—ñ–Ω: —è–∫ –∑–∞—Ä–∞–∑ (0‚Äì10)? –ù–∞–ø–∏—à—ñ—Ç—å —á–∏—Å–ª–æ.",
        "rate_req":"–û—Ü—ñ–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, 0‚Äì10 –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º.",
        "plan_try":"–°–ø—Ä–æ–±—É—î—Ç–µ —Å—å–æ–≥–æ–¥–Ω—ñ? –í—ñ–¥–ø–æ–≤—ñ–¥—å: ¬´—Ç–∞–∫¬ª, ¬´–ø—ñ–∑–Ω—ñ—à–µ¬ª –∞–±–æ ¬´–Ω—ñ¬ª.",
        "remind_when":"–ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏: ¬´—á–µ—Ä–µ–∑ 4 –≥–æ–¥¬ª, ¬´—É–≤–µ—á–µ—Ä—ñ¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ¬ª —á–∏ ¬´–Ω–µ —Ç—Ä–µ–±–∞¬ª?",
        "remind_ok":"–ü—Ä–∏–π–Ω—è—Ç–æ üôå",
        "feedback_hint":"–Ø–∫—â–æ –±—É–ª–æ –∫–æ—Ä–∏—Å–Ω–æ ‚Äî –Ω–∞–¥—ñ—à–ª—ñ—Ç—å üëç –∞–±–æ üëé —ñ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä.",
        "deleted":"‚úÖ –î–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ. /start ‚Äî –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.",
        # Intake
        "intake_intro":"–î–ª—è –∫—Ä–∞—â–æ—ó —Ç–æ—á–Ω–æ—Å—Ç—ñ ‚Äî 60-—Å–µ–∫. –º—ñ–Ω—ñ-–æ–ø–∏—Ç—É–≤–∞–ª—å–Ω–∏–∫ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º). –ú–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.",
        "intake_start":"–ü–æ—á–∞—Ç–∏",
        "intake_skip":"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "intake_done":"–ì–æ—Ç–æ–≤–æ! –î—è–∫—É—î–º–æ. –ü—Ä–æ–¥–æ–≤–∂–∏–º–æ.",
        "intake_q1":"–í—ñ–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω?",
        "intake_q2":"–°—Ç–∞—Ç—å –ø—Ä–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—ñ?",
        "intake_q3":"–•—Ä–æ–Ω—ñ—á–Ω—ñ —Å—Ç–∞–Ω–∏?",
        "intake_q4":"–†–µ–≥—É–ª—è—Ä–Ω—ñ –ª—ñ–∫–∏?",
        "intake_q5":"–ê–ª–µ—Ä–≥—ñ—ó –Ω–∞ –ª—ñ–∫–∏?",
        "intake_q6":"–ß–∏ –º–æ–∂–ª–∏–≤–∞ –≤–∞–≥—ñ—Ç–Ω—ñ—Å—Ç—å –∑–∞—Ä–∞–∑?",
        "use_buttons":"–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –Ω–∏–∂—á–µ (–∞–±–æ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª).",
    },
    "es": {
        "welcome":"¬°Hola! Soy TendAI ‚Äî un asistente c√°lido de salud y longevidad. Cu√©ntame brevemente y te dar√© un plan suave.",
        "help":"Comandos: /help, /privacy, /pause, /resume, /delete_data, /lang <ru|en|uk|es>, /feedback, /intake",
        "privacy":"No soy m√©dico. Ofrezco autocuidado y seguimientos. Borra tus datos con /delete_data.",
        "consent":"¬øPuedo escribirte de vez en cuando para revisar? Responde ¬´s√≠¬ª o ¬´no¬ª.",
        "thanks":"¬°Gracias!",
        "checkin_prompt":"Revisi√≥n r√°pida: ¬øc√≥mo est√°s ahora (0‚Äì10)? Escribe un n√∫mero.",
        "rate_req":"Val√≥ralo ahora 0‚Äì10 con un solo n√∫mero.",
        "plan_try":"¬øLo intentas hoy? Responde: ¬´s√≠¬ª, ¬´m√°s tarde¬ª o ¬´no¬ª.",
        "remind_when":"¬øCu√°ndo te escribo: ¬´en 4 h¬ª, ¬´esta tarde¬ª, ¬´ma√±ana por la ma√±ana¬ª o ¬´no hace falta¬ª?",
        "remind_ok":"¬°Hecho! üôå",
        "feedback_hint":"Si te ayud√≥, env√≠a üëç o üëé y, si quieres, un breve comentario.",
        "deleted":"‚úÖ Datos borrados. /start para empezar de nuevo.",
        # Intake
        "intake_intro":"Para mayor precisi√≥n, un mini-cuestionario de 60 s (opcional). Puedes omitirlo.",
        "intake_start":"Empezar",
        "intake_skip":"Omitir",
        "intake_done":"Listo, gracias. Sigamos.",
        "intake_q1":"Rango de edad?",
        "intake_q2":"Sexo al nacer?",
        "intake_q3":"Enfermedades cr√≥nicas?",
        "intake_q4":"Medicaciones habituales?",
        "intake_q5":"Alergias a f√°rmacos?",
        "intake_q6":"¬øPodr√≠as estar embarazada ahora?",
        "use_buttons":"Elige una opci√≥n abajo (o ¬´Omitir¬ª).",
    },
}
def t(lang: str, key: str) -> str:
    return T.get(lang, T["en"]).get(key, T["en"].get(key, key))

# =========================
# Intake options & keyboards
# =========================
INTAKE_OPTS = {
    "ru": {
        "q1":[("18-29","18‚Äì29"),("30-44","30‚Äì44"),("45-59","45‚Äì59"),("60-74","60‚Äì74"),("75+","75+")],
        "q2":[("M","–ú—É–∂—Å–∫–æ–π"),("F","–ñ–µ–Ω—Å–∫–∏–π"),("NA","–ü—Ä–µ–¥–ø–æ—á—Ç—É –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å")],
        "q3":[("none","–ù–µ—Ç"),("cardio_htn","–°–µ—Ä–¥—Ü–µ/–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è"),("diab","–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç"),("asthma","–ê—Å—Ç–º–∞/–•–û–ë–õ"),("kidney_liver","–ü–æ—á–∫–∏/–ø–µ—á–µ–Ω—å"),("autoimm","–ê—É—Ç–æ–∏–º–º—É–Ω–Ω—ã–µ/–∏–º–º—É–Ω–æ—Å—É–ø—Ä."),("other","–î—Ä—É–≥–æ–µ")],
        "q4":[("none","–ù–µ—Ç"),("anticoag","–ê–Ω—Ç–∏–∫–æ–∞–≥—É–ª—è–Ω—Ç—ã"),("steroids","–°—Ç–µ—Ä–æ–∏–¥—ã/–∏–º–º—É–Ω–æ—Å—É–ø—Ä."),("other","–î—Ä—É–≥–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ")],
        "q5":[("none","–ù–µ—Ç"),("nsaids","–ù–ü–í–° (–∏–±—É–ø—Ä–æ—Ñ–µ–Ω –∏ —Ç.–ø.)"),("abx","–ê–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏"),("other","–î—Ä—É–≥–æ–µ")],
        "q6":[("yes","–î–∞"),("no","–ù–µ—Ç"),("na","–ù/–î")],
    },
    "en": {
        "q1":[("18-29","18‚Äì29"),("30-44","30‚Äì44"),("45-59","45‚Äì59"),("60-74","60‚Äì74"),("75+","75+")],
        "q2":[("M","Male"),("F","Female"),("NA","Prefer not say")],
        "q3":[("none","None"),("cardio_htn","Heart/Hypertension"),("diab","Diabetes"),("asthma","Asthma/COPD"),("kidney_liver","Kidney/Liver"),("autoimm","Autoimmune/Immunosupp."),("other","Other")],
        "q4":[("none","None"),("anticoag","Anticoagulants"),("steroids","Steroids/Immunosupp."),("other","Other regular")],
        "q5":[("none","None"),("nsaids","NSAIDs (ibuprofen etc.)"),("abx","Antibiotics"),("other","Other")],
        "q6":[("yes","Yes"),("no","No"),("na","N/A")],
    },
    "uk": {
        "q1":[("18-29","18‚Äì29"),("30-44","30‚Äì44"),("45-59","45‚Äì59"),("60-74","60‚Äì74"),("75+","75+")],
        "q2":[("M","–ß–æ–ª–æ–≤—ñ—á–∞"),("F","–ñ—ñ–Ω–æ—á–∞"),("NA","–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏")],
        "q3":[("none","–ù–µ–º–∞—î"),("cardio_htn","–°–µ—Ä—Ü–µ/–ì—ñ–ø–µ—Ä—Ç–µ–Ω–∑—ñ—è"),("diab","–î—ñ–∞–±–µ—Ç"),("asthma","–ê—Å—Ç–º–∞/–•–û–ó–õ"),("kidney_liver","–ù–∏—Ä–∫–∏/–ø–µ—á—ñ–Ω–∫–∞"),("autoimm","–ê—É—Ç–æ—ñ–º—É–Ω–Ω—ñ/—ñ–º—É–Ω–æ–¥–µ–ø—Ä."),("other","–Ü–Ω—à–µ")],
        "q4":[("none","–ù–µ–º–∞—î"),("anticoag","–ê–Ω—Ç–∏–∫–æ–∞–≥—É–ª—è–Ω—Ç–∏"),("steroids","–°—Ç–µ—Ä–æ—ó–¥–∏/—ñ–º—É–Ω–æ–¥–µ–ø—Ä."),("other","–Ü–Ω—à–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ")],
        "q5":[("none","–ù–µ–º–∞—î"),("nsaids","–ù–ü–ó–ü (—ñ–±—É–ø—Ä–æ—Ñ–µ–Ω —Ç–æ—â–æ)"),("abx","–ê–Ω—Ç–∏–±—ñ–æ—Ç–∏–∫–∏"),("other","–Ü–Ω—à–µ")],
        "q6":[("yes","–¢–∞–∫"),("no","–ù—ñ"),("na","–ù/–î")],
    },
    "es": {
        "q1":[("18-29","18‚Äì29"),("30-44","30‚Äì44"),("45-59","45‚Äì59"),("60-74","60‚Äì74"),("75+","75+")],
        "q2":[("M","Masculino"),("F","Femenino"),("NA","Prefiero no decir")],
        "q3":[("none","Ninguna"),("cardio_htn","Coraz√≥n/Hipertensi√≥n"),("diab","Diabetes"),("asthma","Asma/EPOC"),("kidney_liver","Ri√±√≥n/H√≠gado"),("autoimm","Autoinm./Inmunosup."),("other","Otra")],
        "q4":[("none","Ninguna"),("anticoag","Anticoagulantes"),("steroids","Esteroides/Inmunosup."),("other","Otra habitual")],
        "q5":[("none","Ninguna"),("nsaids","AINEs (ibuprofeno)"),("abx","Antibi√≥ticos"),("other","Otra")],
        "q6":[("yes","S√≠"),("no","No"),("na","N/A")],
    },
}
def kb_intake_start(lang: str):
    return InlineKeyboardMarkup([[
        InlineKeyboardButton(t(lang,"intake_start"), callback_data="intake|start"),
        InlineKeyboardButton(t(lang,"intake_skip"),  callback_data="intake|skip"),
    ]])
def kb_intake_q(lang: str, qnum: int):
    key = f"q{qnum}"
    rows = []
    buf=[]
    for code, label in INTAKE_OPTS[lang][key]:
        buf.append(InlineKeyboardButton(label, callback_data=f"intake|q|{qnum}|{code}"))
        if len(buf)==3:
            rows.append(buf); buf=[]
    if buf: rows.append(buf)
    rows.append([InlineKeyboardButton(t(lang,"intake_skip"), callback_data="intake|skip")])
    return InlineKeyboardMarkup(rows)

# =========================
# Sheets helpers
# =========================
def now_utc(): return datetime.now(timezone.utc)
def iso(dt: datetime | None) -> str:
    return "" if not dt else dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def users_row_idx(uid: int) -> int | None:
    for i, row in enumerate(ws_users.get_all_records(), start=2):
        if str(row.get("user_id")) == str(uid): return i
    return None
def users_get(uid: int) -> dict:
    for row in ws_users.get_all_records():
        if str(row.get("user_id")) == str(uid): return row
    return {}
def users_upsert(uid: int, username: str, lang: str):
    idx = users_row_idx(uid)
    row = [str(uid), username or "", lang, "no", "0", "", "no", ""]
    if idx: ws_users.update(f"A{idx}:H{idx}", [row])
    else:   ws_users.append_row(row)
def users_set(uid: int, field: str, value: str):
    idx = users_row_idx(uid)
    if not idx: return
    headers = ws_users.row_values(1)
    if field in headers:
        ws_users.update_cell(idx, headers.index(field)+1, value)

def episode_create(uid: int, topic: str, baseline_sev: int, red: str) -> str:
    eid = f"{uid}-{uuid.uuid4().hex[:8]}"
    ws_eps.append_row([eid, str(uid), topic, iso(now_utc()), str(baseline_sev), red,
                       "0","<=3/10","","","open", iso(now_utc()), ""])
    return eid
def episode_find_open(uid: int) -> dict | None:
    for row in ws_eps.get_all_records():
        if str(row.get("user_id")) == str(uid) and row.get("status") == "open":
            return row
    return None
def episode_set(eid: str, field: str, value: str):
    vals = ws_eps.get_all_values(); headers = vals[0]
    if field not in headers: return
    col = headers.index(field)+1
    for i in range(2, len(vals)+1):
        if ws_eps.cell(i,1).value == eid:
            ws_eps.update_cell(i, col, value)
            ws_eps.update_cell(i, headers.index("last_update")+1, iso(now_utc()))
            return

def intake_save(uid: int, username: str, lang: str, ans: dict):
    ws_intake.append_row([
        datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
        str(uid), username or "", lang,
        ans.get("age_band",""), ans.get("sex_at_birth",""),
        ans.get("chronic",""), ans.get("meds",""),
        ans.get("allergy",""), ans.get("pregnancy",""),
    ])
    users_set(uid, "intake_ts", datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"))

def intake_exists_recent(uid: int, months=6) -> bool:
    rows = ws_intake.get_all_records()
    latest = None
    for r in rows:
        if str(r.get("user_id")) == str(uid):
            ts = r.get("timestamp")
            try:
                dt = datetime.strptime(ts, "%Y-%m-%d %H:%M:%S")
                if (latest is None) or dt > latest: latest = dt
            except Exception:
                pass
    if not latest: return False
    return (datetime.utcnow() - latest).days < months*30

# =========================
# Feedback helpers (Sheets)
# =========================
def save_feedback(uid: int, username: str, context_label: str, rating: str, comment: str):
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–∑—ã–≤–æ–≤ –≤ –ª–∏—Å—Ç Feedback."""
    try:
        ws_feedback.append_row([
            datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
            str(uid),
            context_label or "general",
            username or "",
            rating,  # "1" | "0" | "" (–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
            comment or ""
        ])
        logging.info(f"Feedback saved: uid={uid} ctx={context_label} rating={rating} comment_len={len(comment or '')}")
    except Exception as e:
        logging.error(f"Feedback save error: {e}")

# =========================
# LLM core (chat-first)
# =========================
SYS_PROMPT = (
    "You are TendAI, a professional, warm health & longevity coach. "
    "Speak in the user's language. 2‚Äì5 sentences. Natural, supportive, specific. "
    "Never diagnose; no fear. Ask ONE focused follow-up when data is missing. "
    "For weakness/fatigue and common complaints, consider context questions: training/heat, sleep, nutrition/hydration, "
    "bowel/urination, stress, sick contacts. Encourage a 0‚Äì10 self-rating or what activities are limited. "
    "Provide a tiny micro-plan (3 concise steps) when appropriate. "
    "Add one-line red flags: high fever, shortness of breath, chest pain, one-sided weakness; advise medical care if present. "
    "Offer to close the loop: propose a check-in later (evening or next morning). "
    "Do NOT show buttons; present choices inline as short phrases. "
    "Return ONLY JSON with keys: "
    "assistant (string), "
    "next_action (one of: followup, rate_0_10, confirm_plan, pick_reminder, escalate, ask_feedback, none), "
    "slots (object; may include: intent in [pain, throat, sleep, stress, digestion, energy]; "
    "loc in [Head, Throat, Back, Belly, Chest, Other]; kind in [Dull, Sharp, Throbbing, Burning, Pressing]; "
    "duration (string), severity (int 0..10), red (string among [High fever, Vomiting, Weakness/numbness, Speech/vision issues, Trauma, None])), "
    "plan_steps (array of strings, optional)."
)

def _force_json(messages, temperature=0.2, max_tokens=500):
    if not oai: return None
    try:
        return oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=temperature,
            max_tokens=max_tokens,
            response_format={"type":"json_object"},
            messages=messages,
        )
    except Exception as e:
        logging.warning(f"response_format fallback: {e}")
        return oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=temperature,
            max_tokens=max_tokens,
            messages=messages,
        )

def _json_from(raw: str) -> dict:
    raw = (raw or "").strip()
    try:
        m = re.search(r"\{[\s\S]*\}", raw)
        return json.loads(m.group(0)) if m else json.loads(raw)
    except Exception:
        return {}

def llm_chat(uid: int, lang: str, user_text: str) -> dict:
    hist = sessions.setdefault(uid, {}).setdefault("chat_history", [])[-12:]
    messages = [{"role":"system","content":SYS_PROMPT}] + hist + [{"role":"user","content":f"[lang={lang}] {user_text}"}]
    try:
        resp = _force_json(messages)
        content = (resp.choices[0].message.content or "").strip()
        data = _json_from(content)
        if not isinstance(data, dict):
            data = {}
        # save compact natural text into history
        a = data.get("assistant","")
        hist.append({"role":"user","content":user_text[:1000]})
        if a: hist.append({"role":"assistant","content":a[:1000]})
        sessions[uid]["chat_history"] = hist[-14:]
        logging.info(f"LLM ok | next_action={data.get('next_action')}")
        return data
    except Exception as e:
        logging.warning(f"LLM error: {e}")
        return {}

# =========================
# Simple NLP helpers
# =========================
def parse_rating(s: str):
    m = re.search(r"\b(10|[0-9])\b", s.strip())
    return int(m.group(1)) if m else None

YES = {
    "ru":{"–¥–∞","–∞–≥–∞","–æ–∫","—Ö–æ—Ä–æ—à–æ","–≥–æ—Ç–æ–≤","—Å–¥–µ–ª–∞—é"},
    "en":{"yes","ok","sure","ready","will do","yep","yeah"},
    "uk":{"—Ç–∞–∫","–æ–∫","–≥–∞—Ä–∞–∑–¥","–∑—Ä–æ–±–ª—é","–≥–æ—Ç–æ–≤–∏–π","–≥–æ—Ç–æ–≤–∞"},
    "es":{"s√≠","si","ok","vale","listo","lista"},
}
LATER = {
    "ru":{"–ø–æ–∑–∂–µ","–ø–æ—Ç–æ–º","–Ω–µ —Å–µ–π—á–∞—Å"},
    "en":{"later","not now"},
    "uk":{"–ø—ñ–∑–Ω—ñ—à–µ","–Ω–µ –∑–∞—Ä–∞–∑"},
    "es":{"m√°s tarde","luego","no ahora"},
}
NO = {
    "ru":{"–Ω–µ—Ç","–Ω–µ","–Ω–µ –±—É–¥—É","–Ω–µ —Ö–æ—á—É"},
    "en":{"no","nope"},
    "uk":{"–Ω—ñ","–Ω–µ –±—É–¥—É"},
    "es":{"no"},
}
def is_yes(lang, s): return s.lower() in YES.get(lang,set())
def is_no(lang, s): return s.lower() in NO.get(lang,set())
def is_later(lang, s): return s.lower() in LATER.get(lang,set())

def parse_reminder_code(lang: str, s: str) -> str:
    tl = s.lower()
    if any(k in tl for k in ["4h","4 h","—á–µ—Ä–µ–∑ 4","4 —á–∞—Å–∞","4 –≥–æ–¥","en 4 h","4 horas"]): return "4h"
    if any(k in tl for k in ["–≤–µ—á–µ—Ä","–≤–µ—á–µ—Ä–æ–º","evening","esta tarde","—É–≤–µ—á–µ—Ä—ñ","–≤–µ—á—ñ—Ä"]): return "evening"
    if any(k in tl for k in ["—É—Ç—Ä–æ","—É—Ç—Ä–æ–º","morning","ma√±ana","–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º","–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ"]): return "morning"
    if any(k in tl for k in ["–Ω–µ –Ω–∞–¥–æ","–Ω–µ –Ω—É–∂–Ω–æ","no need","none","no hace falta"]): return "none"
    return ""

# =========================
# Advice de-dupe
# =========================
def _hash_text(s: str) -> str: return hashlib.sha1((s or "").encode("utf-8")).hexdigest()
def send_nodup(uid: int, text: str, send_fn):
    if not text: return
    s = sessions.setdefault(uid, {})
    h = _hash_text(text)
    if s.get("last_advice_hash") == h:
        return
    s["last_advice_hash"] = h
    sessions[uid] = s
    return send_fn(text)

# =========================
# Jobs (check-ins)
# =========================
async def job_checkin(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data or {}
    uid = data.get("user_id"); eid = data.get("episode_id")
    if not uid or not eid: return
    u = users_get(uid)
    if (u.get("paused") or "").lower() == "yes": return
    lang = u.get("lang") or "en"
    try:
        await context.bot.send_message(uid, t(lang,"checkin_prompt"))
        s = sessions.setdefault(uid, {})
        s["mode"] = "await_rating"
        s["episode_id"] = eid
        episode_set(eid, "next_checkin_at", "")
    except Exception as e:
        logging.error(f"job_checkin send error: {e}")

def reschedule_from_sheet(app):
    for row in ws_eps.get_all_records():
        if row.get("status") != "open": continue
        nca = row.get("next_checkin_at") or ""
        if not nca: continue
        try:
            dt = datetime.strptime(nca, "%Y-%m-%d %H:%M:%S%z")
        except Exception:
            continue
        delay = (dt - datetime.now(timezone.utc)).total_seconds()
        if delay < 60: delay = 60
        app.job_queue.run_once(job_checkin, when=delay, data={"user_id": int(row["user_id"]), "episode_id": row["episode_id"]})

# =========================
# Commands
# =========================
async def on_startup(app):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    reschedule_from_sheet(app)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; uid = user.id
    lang = users_get(uid).get("lang")
    if not lang:
        txt = (update.message.text or "").strip() if update.message else ""
        cand = None
        if detect:
            try: cand = detect(txt) if txt else None
            except Exception: cand = None
        lang = norm_lang(cand or getattr(user,"language_code",None))
        users_upsert(uid, user.username or "", lang)

    await update.message.reply_text(t(lang,"welcome"))

    # –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å –ø–æ—Ä–æ–≥–∞ –º–∏–Ω–∏-–∏–Ω—Ç—Ä–æ-–æ–ø—Ä–æ—Å –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –Ω–µ–¥–∞–≤–Ω–æ
    if not intake_exists_recent(uid):
        s = sessions.setdefault(uid, {"mode":"chat","answers":{}, "chat_history":[]})
        s["mode"] = "intake"
        s["intake"] = {"q":0, "ans":{}}
        await update.message.reply_text(t(lang,"intake_intro"), reply_markup=kb_intake_start(lang))
    else:
        s = sessions.setdefault(uid, {"mode":"chat","answers":{}, "chat_history":[]})
        if (users_get(uid).get("consent") or "").lower() not in {"yes","no"}:
            s["mode"]="await_consent"
            await update.message.reply_text(t(lang,"consent"))

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang,"help"))

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang,"privacy"))

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid,"paused","yes"); await update.message.reply_text("‚è∏Ô∏è Paused.")

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid,"paused","no"); await update.message.reply_text("‚ñ∂Ô∏è Resumed.")

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    idx = users_row_idx(uid)
    if idx: ws_users.delete_rows(idx)
    vals = ws_eps.get_all_values(); to_del=[]
    for i in range(2, len(vals)+1):
        if ws_eps.cell(i,2).value == str(uid): to_del.append(i)
    for j, row_i in enumerate(to_del):
        ws_eps.delete_rows(row_i - j)
    await update.message.reply_text(t(norm_lang(getattr(update.effective_user,"language_code",None)),"deleted"))

async def cmd_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        await update.message.reply_text("Usage: /lang ru|en|uk|es"); return
    cand = norm_lang(context.args[0])
    if cand not in SUPPORTED:
        await update.message.reply_text("Usage: /lang ru|en|uk|es"); return
    users_set(uid,"lang",cand); await update.message.reply_text("‚úÖ Language set.")

async def cmd_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    s = sessions.setdefault(uid,{})
    s["awaiting_comment"]=True
    s["feedback_context"]= s.get("feedback_context") or "manual"
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å üëç –∏–ª–∏ üëé.")

async def cmd_intake(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
    s = sessions.setdefault(uid, {"mode":"chat","answers":{}, "chat_history":[]})
    s["mode"]="intake"; s["intake"]={"q":0, "ans":{}}
    await update.message.reply_text(t(lang,"intake_intro"), reply_markup=kb_intake_start(lang))

async def cmd_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    s = sessions.setdefault(uid,{})
    s["awaiting_comment"]=False
    await update.message.reply_text("–û–∫, –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏.")

# =========================
# Callback (intake)
# =========================
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(q.from_user,"language_code",None))
    s = sessions.setdefault(uid, {"mode":"chat","answers":{}, "chat_history":[]})

    data = (q.data or "")
    if not data.startswith("intake|"):
        await q.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
        return

    parts = data.split("|")
    if len(parts) >= 2 and parts[1] == "start":
        s["mode"]="intake"; s["intake"]={"q":1,"ans":{}}
        await q.message.reply_text(t(lang,"intake_q1"), reply_markup=kb_intake_q(lang,1))
        return
    if len(parts) >= 2 and parts[1] == "skip":
        s["mode"]="chat"
        await q.message.reply_text(t(lang,"intake_done"))
        # –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —á–µ–∫-–∏–Ω—ã, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
        if (users_get(uid).get("consent") or "").lower() not in {"yes","no"}:
            s["mode"]="await_consent"
            await q.message.reply_text(t(lang,"consent"))
        return

    if len(parts) == 4 and parts[1] == "q":
        # intake|q|<num>|<code>
        try:
            qnum = int(parts[2]); code = parts[3]
        except Exception:
            return
        it = s.setdefault("intake", {"q":1, "ans":{}})
        # map code into structured keys
        keymap = {1:"age_band", 2:"sex_at_birth", 3:"chronic", 4:"meds", 5:"allergy", 6:"pregnancy"}
        it["ans"][ keymap[qnum] ] = code

        if qnum < 6:
            it["q"] = qnum + 1
            await q.message.reply_text(t(lang, f"intake_q{qnum+1}"), reply_markup=kb_intake_q(lang, qnum+1))
            return
        else:
            # save intake
            intake_save(uid, q.from_user.username or "", lang, it["ans"])
            s["mode"]="chat"; s["intake"]={"q":0, "ans":{}}
            await q.message.reply_text(t(lang,"intake_done"))
            if (users_get(uid).get("consent") or "").lower() not in {"yes","no"}:
                s["mode"]="await_consent"
                await q.message.reply_text(t(lang,"consent"))
            return

# =========================
# CHAT & Feedback handling
# =========================
THUMBS_UP = {"üëç","üëçüèª","üëçüèº","üëçüèΩ","üëçüèæ","üëçüèø"}
THUMBS_DOWN = {"üëé","üëéüèª","üëéüèº","üëéüèΩ","üëéüèæ","üëéüèø"}

def set_feedback_context(uid: int, context_label: str):
    s = sessions.setdefault(uid,{})
    s["feedback_context"] = context_label

def get_feedback_context(uid: int) -> str:
    return sessions.setdefault(uid,{}).get("feedback_context") or "chat"

def feedback_prompt_needed(uid: int, interval_sec=180.0) -> bool:
    s = sessions.setdefault(uid,{})
    last = s.get("last_feedback_prompt_ts", 0.0)
    now = time.time()
    if now - last > interval_sec:
        s["last_feedback_prompt_ts"] = now
        return True
    return False

# =========================
# Fallback plan (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –¥–∞–ª–∞ plan_steps)
# =========================
def fallback_plan(lang: str, ans: dict) -> list[str]:
    sev = int(ans.get("severity", 5))
    red = (ans.get("red") or "None").lower()
    urgent = any(w in red for w in ["fever","shortness","breath","–æ–¥—ã—à","chest","–ø–µ—Ä–µ–¥","weakness","–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω"]) and sev >= 7
    if urgent:
        return {
            "ru":[ "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ–π —É–≥—Ä–æ–∑—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â—å—é." ],
            "en":[ "‚ö†Ô∏è Some answers suggest urgent risks. Please seek medical care as soon as possible." ],
            "uk":[ "‚ö†Ô∏è –Ñ –æ–∑–Ω–∞–∫–∏ –º–æ–∂–ª–∏–≤–æ—ó –∑–∞–≥—Ä–æ–∑–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è." ],
            "es":[ "‚ö†Ô∏è Posibles signos de urgencia. Busca atenci√≥n m√©dica lo antes posible." ],
        }[lang]
    base = {
        "ru":[ "1) –í–æ–¥–∞ 400‚Äì600 –º–ª –∏ 15‚Äì20 –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã.", "2) –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –∏–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ 1 —Ä–∞–∑ —Å –µ–¥–æ–π.", "3) –ü–∞—É–∑–∞ –æ—Ç —ç–∫—Ä–∞–Ω–æ–≤ 30‚Äì60 –º–∏–Ω." ],
        "en":[ "1) 400‚Äì600 ml water + 15‚Äì20 min quiet rest.", "2) If no contraindications ‚Äî ibuprofen 200‚Äì400 mg once with food.", "3) Screen break 30‚Äì60 min." ],
        "uk":[ "1) 400‚Äì600 –º–ª –≤–æ–¥–∏ + 15‚Äì20 —Ö–≤ —Ç–∏—à—ñ.", "2) –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω—å ‚Äî —ñ–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ 1 —Ä–∞–∑ —ñ–∑ —ó–∂–µ—é.", "3) –ü–µ—Ä–µ—Ä–≤–∞ –≤—ñ–¥ –µ–∫—Ä–∞–Ω—ñ–≤ 30‚Äì60 —Ö–≤." ],
        "es":[ "1) 400‚Äì600 ml de agua + 15‚Äì20 min de descanso.", "2) Si no hay contraindicaciones ‚Äî ibuprofeno 200‚Äì400 mg una vez con comida.", "3) Descanso de pantallas 30‚Äì60 min." ],
    }[lang]
    return base

# =========================
# Text handler (chat-first)
# =========================
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; uid = user.id
    text = (update.message.text or "").strip()

    # —è–∑—ã–∫
    urec = users_get(uid)
    if not urec:
        cand=None
        if detect:
            try: cand = detect(text) if text else None
            except Exception: cand=None
        lang = norm_lang(cand or getattr(user,"language_code",None))
        users_upsert(uid, user.username or "", lang)
    else:
        lang = norm_lang(urec.get("lang") or getattr(user,"language_code",None))

    s = sessions.setdefault(uid, {"mode":"chat","answers":{}, "chat_history":[]})

    # ========== –û—Ç–∑—ã–≤—ã: üëç/üëé –∏ —Ç–µ–∫—Å—Ç ==========
    if text in THUMBS_UP:
        ctx_label = get_feedback_context(uid)
        save_feedback(uid, user.username or "", ctx_label, "1", "")
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ üëç")
        return
    if text in THUMBS_DOWN:
        ctx_label = get_feedback_context(uid)
        save_feedback(uid, user.username or "", ctx_label, "0", "")
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ üëé ‚Äî —É—á—Ç—É –∏ –±—É–¥—É –ø–æ–ª–µ–∑–Ω–µ–µ.")
        return
    if s.get("awaiting_comment") and not text.startswith("/"):
        ctx_label = get_feedback_context(uid)
        save_feedback(uid, user.username or "", ctx_label, "", text)
        s["awaiting_comment"]=False
        await update.message.reply_text("–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üôå")
        return

    # ========== –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è ==========
    if s.get("mode") == "await_consent":
        low = text.lower()
        if is_yes(lang, low):
            users_set(uid,"consent","yes"); s["mode"]="chat"
            await update.message.reply_text(t(lang,"thanks")); return
        if is_no(lang, low):
            users_set(uid,"consent","no"); s["mode"]="chat"
            await update.message.reply_text(t(lang,"thanks")); return
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª."); return

    # ========== –ß–µ–∫-–∏–Ω (0‚Äì10) ==========
    if s.get("mode") == "await_rating":
        rating = parse_rating(text)
        if rating is None or not (0 <= rating <= 10):
            await update.message.reply_text(t(lang,"rate_req")); return
        ep = episode_find_open(uid)
        if ep:
            eid = ep["episode_id"]
            episode_set(eid,"notes",f"checkin:{rating}")
            set_feedback_context(uid, "checkin")
            if rating <= 3:
                episode_set(eid,"status","resolved")
                await update.message.reply_text({"ru":"–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å üí™","en":"Great! Love the progress üí™","uk":"–ß—É–¥–æ–≤–æ! –ì–∞—Ä–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å üí™","es":"¬°Genial! Buen progreso üí™"}[lang])
            else:
                await update.message.reply_text({"ru":"–ü–æ–Ω–∏–º–∞—é. –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ ‚Äî –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.","en":"I hear you. If red flags appear, please consider medical help.","uk":"–†–æ–∑—É–º—ñ—é. –Ø–∫—â–æ –∑‚Äô—è–≤–ª—è—Ç—å—Å—è ¬´—á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ¬ª, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.","es":"Entiendo. Si aparecen se√±ales de alarma, consulta a un m√©dico."}[lang])
        s["mode"]="chat"
        if feedback_prompt_needed(uid):
            await update.message.reply_text(t(lang,"feedback_hint"))
        return

    # ========== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ ==========
    if s.get("mode") == "await_plan":
        low = text.lower(); eid = s.get("episode_id")
        set_feedback_context(uid, "plan")
        if is_yes(lang, low):
            if eid: episode_set(eid,"plan_accepted","1")
            s["mode"]="await_reminder"
            await update.message.reply_text(t(lang,"remind_when")); return
        if is_later(lang, low):
            if eid: episode_set(eid,"plan_accepted","later")
            s["mode"]="await_reminder"
            await update.message.reply_text(t(lang,"remind_when")); return
        if is_no(lang, low):
            if eid: episode_set(eid,"plan_accepted","0")
            s["mode"]="chat"
            await update.message.reply_text({"ru":"–•–æ—Ä–æ—à–æ, –±–µ–∑ –ø–ª–∞–Ω–∞. –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ.","en":"Alright, no plan. We can just track how you feel.","uk":"–î–æ–±—Ä–µ, –±–µ–∑ –ø–ª–∞–Ω—É. –ú–æ–∂–µ–º–æ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è.","es":"De acuerdo, sin plan. Podemos solo revisar c√≥mo sigues."}[lang])
            if feedback_prompt_needed(uid):
                await update.message.reply_text(t(lang,"feedback_hint"))
            return
        await update.message.reply_text({"ru":"–û—Ç–≤–µ—Ç—å—Ç–µ ¬´–¥–∞¬ª, ¬´–ø–æ–∑–∂–µ¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.","en":"Please reply ‚Äúyes‚Äù, ‚Äúlater‚Äù or ‚Äúno‚Äù.","uk":"–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ ¬´—Ç–∞–∫¬ª, ¬´–ø—ñ–∑–Ω—ñ—à–µ¬ª –∞–±–æ ¬´–Ω—ñ¬ª.","es":"Responde ¬´s√≠¬ª, ¬´m√°s tarde¬ª o ¬´no¬ª."}[lang])
        return

    # ========== –í—ã–±–æ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ==========
    if s.get("mode") == "await_reminder":
        code = parse_reminder_code(lang, text)
        if not code:
            await update.message.reply_text(t(lang,"remind_when")); return
        urec = users_get(uid); tz_off = 0
        try: tz_off = int(urec.get("tz_offset") or "0")
        except Exception: tz_off = 0
        nowu = datetime.now(timezone.utc); user_now = nowu + timedelta(hours=tz_off)
        if code == "4h":
            target_user = user_now + timedelta(hours=4)
        elif code == "evening":
            target_user = user_now.replace(hour=19, minute=0, second=0, microsecond=0)
            if target_user < user_now: target_user += timedelta(days=1)
        elif code == "morning":
            target_user = user_now.replace(hour=9, minute=0, second=0, microsecond=0)
            if target_user < user_now: target_user += timedelta(days=1)
        else:
            target_user = None

        eid = s.get("episode_id")
        if target_user and eid:
            target_utc = target_user - timedelta(hours=tz_off)
            episode_set(eid,"next_checkin_at", iso(target_utc))
            delay = max(60, (target_utc - nowu).total_seconds())
            context.job_queue.run_once(job_checkin, when=delay, data={"user_id": uid, "episode_id": eid})
        await update.message.reply_text(t(lang,"remind_ok"))
        s["mode"]="chat"
        if feedback_prompt_needed(uid):
            await update.message.reply_text(t(lang,"feedback_hint"))
        return

    # ========== Intake –∏–¥—ë—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ callback ==========
    if s.get("mode") == "intake":
        await update.message.reply_text(t(lang,"use_buttons"))
        return

    # ========== CHAT-FIRST (LLM) ==========
    data = llm_chat(uid, lang, text)
    if not data:
        # –º—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫ –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤
        if lang=="ru":
            await update.message.reply_text("–ü–æ–Ω–∏–º–∞—é. –ì–¥–µ –∏–º–µ–Ω–Ω–æ –æ—â—É—â–∞–µ—Ç–µ –∏ –∫–∞–∫ –¥–∞–≤–Ω–æ –Ω–∞—á–∞–ª–æ—Å—å? –ï—Å–ª–∏ –º–æ–∂–Ω–æ ‚Äî –æ—Ü–µ–Ω–∏—Ç–µ –ø–æ —à–∫–∞–ª–µ 0‚Äì10.")
        elif lang=="uk":
            await update.message.reply_text("–†–æ–∑—É–º—ñ—é. –î–µ —Å–∞–º–µ —ñ –≤—ñ–¥–∫–æ–ª–∏ —Ü–µ –ø–æ—á–∞–ª–æ—Å—å? –Ø–∫—â–æ –º–æ–∂–µ—Ç–µ ‚Äî –æ—Ü—ñ–Ω—ñ—Ç—å 0‚Äì10.")
        elif lang=="es":
            await update.message.reply_text("Entiendo. ¬øD√≥nde exactamente y desde cu√°ndo empez√≥? Si puedes, valora 0‚Äì10.")
        else:
            await update.message.reply_text("I hear you. Where exactly is it and since when? If you can, rate it 0‚Äì10.")
        return

    assistant = data.get("assistant") or ""
    if assistant:
        set_feedback_context(uid, "chat")
        await send_nodup(uid, assistant, update.message.reply_text)

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ—Ç—ã
    ans = s.setdefault("answers", {})
    for k in ["intent","loc","kind","duration","severity","red"]:
        v = (data.get("slots") or {}).get(k)
        if v not in (None,""): ans[k]=v

    # –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –≤–µ—Ä–Ω—É–ª–∞ —à–∞–≥–∏ –ø–ª–∞–Ω–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º
    plan_steps = data.get("plan_steps") or []
    if plan_steps:
        set_feedback_context(uid, "plan")
        await send_nodup(uid, "\n".join(plan_steps), update.message.reply_text)

    na = data.get("next_action") or "followup"

    if na == "rate_0_10":
        s["mode"]="await_rating"
        await update.message.reply_text(t(lang,"rate_req"))
        return

    if na == "confirm_plan":
        # –µ—Å–ª–∏ –Ω–µ—Ç —ç–ø–∏–∑–æ–¥–∞ ‚Äî —Å–æ–∑–¥–∞–¥–∏–º
        eid = s.get("episode_id")
        if not eid:
            eid = episode_create(uid, ans.get("intent","pain"), int(ans.get("severity",5) or 5), ans.get("red","None") or "None")
            s["episode_id"]=eid
        # –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –¥–∞–ª–∞ –ø–ª–∞–Ω ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
        if not plan_steps:
            set_feedback_context(uid, "plan")
            await send_nodup(uid, "\n".join(fallback_plan(lang, ans)), update.message.reply_text)
        s["mode"]="await_plan"
        await update.message.reply_text(t(lang,"plan_try"))
        return

    if na == "pick_reminder":
        s["mode"]="await_reminder"
        await update.message.reply_text(t(lang,"remind_when"))
        return

    if na == "escalate":
        set_feedback_context(uid, "chat")
        esc = {
            "ru":"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–º –æ—Ç–≤–µ—Ç–∞–º –ª—É—á—à–µ —É–¥–µ–ª–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –æ—á–Ω–æ. –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –æ–¥—ã—à–∫–∞, –±–æ–ª—å –≤ –≥—Ä—É–¥–∏ –∏–ª–∏ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–ª–∞–±–æ—Å—Ç—å ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É.",
            "en":"‚ö†Ô∏è Some answers are concerning. If high fever, shortness of breath, chest pain or one-sided weakness ‚Äî seek medical care.",
            "uk":"‚ö†Ô∏è –î–µ—è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç—Ä–∏–≤–æ–∂–Ω—ñ. –Ø–∫—â–æ –≤–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –∑–∞–¥–∏—à–∫–∞, –±—ñ–ª—å —É –≥—Ä—É–¥—è—Ö –∞–±–æ –æ–¥–Ω–æ–±—ñ—á–Ω–∞ —Å–ª–∞–±–∫—ñ—Å—Ç—å ‚Äî –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.",
            "es":"‚ö†Ô∏è Algunas respuestas son preocupantes. Si hay fiebre alta, falta de aire, dolor en el pecho o debilidad de un lado ‚Äî busca atenci√≥n m√©dica.",
        }[lang]
        await send_nodup(uid, esc, update.message.reply_text)
        if feedback_prompt_needed(uid):
            await update.message.reply_text(t(lang,"feedback_hint"))
        return

    if na == "ask_feedback" and feedback_prompt_needed(uid):
        await update.message.reply_text(t(lang,"feedback_hint"))
        # –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π (–æ–±—ã—á–Ω–æ "chat" –∏–ª–∏ "plan")
        return

    # –∏–Ω–∞—á–µ ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç
    s["mode"]="chat"
    sessions[uid]=s

# =========================
# Runner
# =========================
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(on_startup).build()

    reschedule_from_sheet(app)

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("privacy", cmd_privacy))
    app.add_handler(CommandHandler("pause", cmd_pause))
    app.add_handler(CommandHandler("resume", cmd_resume))
    app.add_handler(CommandHandler("delete_data", cmd_delete_data))
    app.add_handler(CommandHandler("lang", cmd_lang))
    app.add_handler(CommandHandler("feedback", cmd_feedback))
    app.add_handler(CommandHandler("intake", cmd_intake))
    app.add_handler(CommandHandler("skip", cmd_skip))

    app.add_handler(CallbackQueryHandler(on_callback))  # intake –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
