import os
import json
import time
import logging
from typing import Optional

from dotenv import load_dotenv
from langdetect import detect
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ForceReply
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CommandHandler,
    ContextTypes, filters, CallbackQueryHandler
)
from openai import OpenAI
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ / –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# =========================
MAX_COMMENT_LEN = 600           # –º–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
COMMENT_COOLDOWN_SEC = 20       # –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
SHEET_NAME = "TendAI Feedback"
WORKSHEET_NAME = "Feedback"

# =========================
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
# =========================
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
if not GOOGLE_CREDENTIALS_JSON:
    raise RuntimeError("GOOGLE_CREDENTIALS_JSON –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

client = OpenAI(api_key=OPENAI_API_KEY)

# =========================
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
# –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –ª–∏—Å—Ç–µ Feedback (—Å—Ç—Ä–æ–∫–∞ 1):
# timestamp | user_id | name | username | rating | comment
# =========================
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client_sheet = gspread.authorize(credentials)
sheet = client_sheet.open(SHEET_NAME).worksheet(WORKSHEET_NAME)

def append_row_safe(values: list, retries: int = 2) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∫–∏ –≤ Google Sheets —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–±–æ—è—Ö."""
    for i in range(retries + 1):
        try:
            sheet.append_row(values)
            return
        except Exception as e:
            logging.error(f"append_row –ø–æ–ø—ã—Ç–∫–∞ {i+1} –æ—à–∏–±–∫–∞: {e}")
            if i < retries:
                time.sleep(0.8)
            else:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ Google Sheets –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–æ–≤.")

def save_feedback_to_sheet(user, rating: Optional[str|int], comment: Optional[str]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—Ç–∑—ã–≤–∞ –≤ Google Sheets."""
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    uid = user.id
    name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    uname = f"@{user.username}" if user.username else ""
    append_row_safe([ts, str(uid), name, uname, str(rating or ""), comment or ""])

# ==============
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ==============
logging.basicConfig(level=logging.INFO)

# ==================
# –ü–∞–º—è—Ç—å –∏ —Å—á—ë—Ç—á–∏–∫–∏
# ==================
user_memory: dict[int, str] = {}
message_counter: dict[int, int] = {}
last_comment_at: dict[int, float] = {}  # –∞–Ω—Ç–∏-—Å–ø–∞–º –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ—Ç–∑—ã–≤–∞–º

# =======================
# –ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã (60 —Å–µ–∫)
# =======================
quick_mode_symptoms = {
    "–≥–æ–ª–æ–≤–∞": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Å—Ç—Ä–µ—Å—Å, –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ, –Ω–µ–¥–æ—Å—ã–ø  
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –≤—ã–ø–µ–π –≤–æ–¥—ã, –æ—Ç–¥–æ—Ö–Ω–∏, –ø—Ä–æ–≤–µ—Ç—Ä–∏ –∫–æ–º–Ω–∞—Ç—É  
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ –±–æ–ª—å –≤–Ω–µ–∑–∞–ø–Ω–∞—è, —Å–∏–ª—å–Ω–∞—è, —Å —Ç–æ—à–Ω–æ—Ç–æ–π –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –∑—Ä–µ–Ω–∏—è""",

    "head": """[Quick Health Check]
üí° Possible causes: stress, dehydration, fatigue  
ü™™ Try: rest, hydration, fresh air  
üö® See a doctor if pain is sudden, severe, or with nausea/vision issues""",

    "–∂–∏–≤–æ—Ç": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –≥–∞—Å—Ç—Ä–∏—Ç, –ø–∏—Ç–∞–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å  
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: —Ç—ë–ø–ª–∞—è –≤–æ–¥–∞, –ø–æ–∫–æ–π, –∏—Å–∫–ª—é—á–∏ –µ–¥—É –Ω–∞ 2 —á–∞—Å–∞  
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ –±–æ–ª—å —Ä–µ–∑–∫–∞—è, —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π, —Ä–≤–æ—Ç–æ–π –∏–ª–∏ –¥–ª–∏—Ç—Å—è >1 –¥–Ω—è""",

    "stomach": """[Quick Health Check]
üí° Possible causes: gastritis, poor diet, stress  
ü™™ Try: warm water, rest, skip food for 2 hours  
üö® See a doctor if pain is sharp, with fever or vomiting""",

    "—Å–ª–∞–±–æ—Å—Ç—å": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —É—Å—Ç–∞–ª–æ—Å—Ç—å, –≤–∏—Ä—É—Å, –∞–Ω–µ–º–∏—è  
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –æ—Ç–¥—ã—Ö, –ø–æ–µ—à—å, –≤—ã–ø–µ–π –≤–æ–¥—ã  
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ —Å–ª–∞–±–æ—Å—Ç—å –¥–ª–∏—Ç—Å—è >2 –¥–Ω–µ–π –∏–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç""",

    "weakness": """[Quick Health Check]
üí° Possible causes: fatigue, virus, low iron  
ü™™ Try: rest, eat, hydrate  
üö® Doctor: if weakness lasts >2 days or gets worse"""
}

# =======================
# –ö–Ω–æ–ø–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ (–∑–≤—ë–∑–¥—ã)
# =======================
def rating_keyboard() -> InlineKeyboardMarkup:
    stars = [InlineKeyboardButton(f"{i}‚≠ê", callback_data=f"rate_{i}") for i in range(1, 6)]
    row1 = stars
    row2 = [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="comment")]
    return InlineKeyboardMarkup([row1, row2])

# ============
# –ö–æ–º–∞–Ω–¥–∞ /start
# ============
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —è TendAI ü§ó –ß—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏ –≤–æ–ª–Ω—É–µ—Ç? –Ø –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å."
    )

# ===========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: –ó–í–Å–ó–î–´
# ===========================
async def handle_rate_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    try:
        rating = int(q.data.split("_")[1])
    except Exception:
        rating = None

    context.user_data["last_rating"] = rating
    try:
        save_feedback_to_sheet(user=update.effective_user, rating=rating, comment="")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")

    try:
        await q.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass

    await q.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {rating}‚≠ê")

# ======================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
# ======================================
async def handle_comment_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = update.effective_user.id

    now = time.time()
    if uid in last_comment_at and now - last_comment_at[uid] < COMMENT_COOLDOWN_SEC:
        wait = int(COMMENT_COOLDOWN_SEC - (now - last_comment_at[uid]))
        await q.message.reply_text(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait} —Å–µ–∫. –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º üôè")
        return

    context.user_data["awaiting_comment"] = True
    await q.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).",
        reply_markup=ForceReply(selective=True)
    )

# =========================================
# –ü—Ä–∏—ë–º –¢–ï–ö–°–¢–û–í–û–ì–û –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# =========================================
async def receive_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_comment"):
        return  # —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ—Ç–∑—ã–≤

    uid = update.effective_user.id
    now = time.time()
    if uid in last_comment_at and now - last_comment_at[uid] < COMMENT_COOLDOWN_SEC:
        wait = int(COMMENT_COOLDOWN_SEC - (now - last_comment_at[uid]))
        await update.message.reply_text(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait} —Å–µ–∫. –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º üôè")
        context.user_data["awaiting_comment"] = False
        return

    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–û—Ç–∑—ã–≤ –ø—É—Å—Ç–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä—É —Ñ—Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return
    if len(text) > MAX_COMMENT_LEN:
        await update.message.reply_text(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –£–∫–æ—Ä–æ—Ç–∏—Ç–µ –¥–æ ~{MAX_COMMENT_LEN} —Å–∏–º–≤–æ–ª–æ–≤ üôè")
        return

    rating = context.user_data.get("last_rating", "")
    try:
        save_feedback_to_sheet(user=update.effective_user, rating=rating, comment=text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")

    last_comment_at[uid] = now
    context.user_data["awaiting_comment"] = False
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω üôè")

# =====================================================
# (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ üëç/üëé –¥–ª—è –ª–µ–≥–∞—Å–∏
# =====================================================
async def legacy_thumb_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    value = "yes" if q.data.endswith("yes") else "no"
    try:
        save_feedback_to_sheet(user=update.effective_user, rating=value, comment="")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è legacy-–æ—Ç–∑—ã–≤–∞: {e}")
    try:
        await q.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass
    await q.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ üôè")

# ===================
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞
# ===================
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text.strip()
    user_lower = user_message.lower()
    message_counter[user_id] = message_counter.get(user_id, 0) + 1

    try:
        lang = detect(user_message)
    except Exception:
        lang = "unknown"

    # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
    if "#60—Å–µ–∫" in user_lower or "/fast" in user_lower:
        for keyword, reply in quick_mode_symptoms.items():
            if keyword in user_lower:
                await update.message.reply_text(reply, reply_markup=rating_keyboard())
                return
        await update.message.reply_text(
            "‚ùó –£–∫–∞–∂–∏ —Å–∏–º–ø—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´#60—Å–µ–∫ –≥–æ–ª–æ–≤–∞¬ª –∏–ª–∏ ¬´/fast stomach¬ª.",
            reply_markup=rating_keyboard()
        )
        return

    # –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    if "–≥–æ–ª–æ–≤–∞" in user_lower or "headache" in user_lower:
        await update.message.reply_text(
            "–ì–¥–µ –∏–º–µ–Ω–Ω–æ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞? –õ–æ–±, –∑–∞—Ç—ã–ª–æ–∫, –≤–∏—Å–∫–∏?\n"
            "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏: —Ç—É–ø–∞—è, –æ—Å—Ç—Ä–∞—è, –ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è?\n"
            "–ï—Å—Ç—å –ª–∏ –µ—â—ë —Å–∏–º–ø—Ç–æ–º—ã ‚Äî —Ç–æ—à–Ω–æ—Ç–∞, —Å–≤–µ—Ç–æ–±–æ—è–∑–Ω—å?"
        )
        user_memory[user_id] = "–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å"
        return

    if "–≥–æ—Ä–ª–æ" in user_lower or "throat" in user_lower:
        await update.message.reply_text(
            "–ì–æ—Ä–ª–æ –±–æ–ª–∏—Ç –ø—Ä–∏ –≥–ª–æ—Ç–∞–Ω–∏–∏ –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ?\n"
            "–ï—Å—Ç—å –ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–ª–∏ –∫–∞—à–µ–ª—å?\n"
            "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ—Å—å?"
        )
        user_memory[user_id] = "–±–æ–ª—å –≤ –≥–æ—Ä–ª–µ"
        return

    if "–∫–∞—à–µ–ª—å" in user_lower or "cough" in user_lower:
        await update.message.reply_text(
            "–ö–∞—à–µ–ª—å —Å—É—Ö–æ–π –∏–ª–∏ —Å –º–æ–∫—Ä–æ—Ç–æ–π?\n"
            "–î–∞–≤–Ω–æ –ª–∏ –æ–Ω —É –≤–∞—Å?\n"
            "–ï—Å—Ç—å –ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –±–æ–ª—å –≤ –≥—Ä—É–¥–∏ –∏–ª–∏ –æ–¥—ã—à–∫–∞?"
        )
        user_memory[user_id] = "–∫–∞—à–µ–ª—å"
        return

    memory_text = ""
    if user_id in user_memory:
        memory_text = f"(–¢—ã —Ä–∞–Ω–µ–µ —É–ø–æ–º–∏–Ω–∞–ª: {user_memory[user_id]})\n"

    system_prompt = (
        "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é –ø–æ –∏–º–µ–Ω–∏ TendAI.\n"
        "–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≥–æ–≤–æ—Ä–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n"
        "–ë—É–¥—å —Ç—ë–ø–ª—ã–º, –Ω–æ –æ—Ç–≤–µ—á–∞–π –ø–æ —Å—É—Ç–∏, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤.\n"
        "–ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è —Å–∏–º–ø—Ç–æ–º ‚Äî –∑–∞–¥–∞–π 1‚Äì2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, –Ω–∞–∑–æ–≤–∏ 2‚Äì3 –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã,\n"
        "–ø—Ä–µ–¥–ª–æ–∂–∏, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ–º–∞, –∏ –≤ –∫–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –∏–¥—Ç–∏ –∫ –≤—Ä–∞—á—É.\n"
        "–ï—Å–ª–∏ –±–æ–ª–∏ –Ω–µ—Ç ‚Äî –Ω–µ –Ω–∞–≥–Ω–µ—Ç–∞–π, –ø—Ä–æ—Å—Ç–æ –æ–±—ä—è—Å–Ω–∏ —Å–ø–æ–∫–æ–π–Ω–æ.\n"
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç ‚Äî –æ—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏.\n"
        "–ì–æ–≤–æ—Ä–∏ —è—Å–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ –∏ —Å –∑–∞–±–æ—Ç–æ–π."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ],
            temperature=0.7,
            max_tokens=400
        )
        bot_reply = memory_text + response.choices[0].message.content.strip()
    except Exception as e:
        bot_reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}"
        logging.error(bot_reply)

    await update.message.reply_text(bot_reply, reply_markup=rating_keyboard())

# =====
# –ó–∞–ø—É—Å–∫
# =====
async def _post_init(app):
    # –°–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ polling –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –æ—á–µ—Ä–µ–¥–∏
    await app.bot.delete_webhook(drop_pending_updates=True)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(_post_init).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))

    # Callback-–∏
    app.add_handler(CallbackQueryHandler(handle_rate_cb, pattern=r"^rate_[1-5]$"))
    app.add_handler(CallbackQueryHandler(handle_comment_cb, pattern=r"^comment$"))
    app.add_handler(CallbackQueryHandler(legacy_thumb_cb, pattern=r"^feedback_(yes|no)$"))

    # –¢–µ–∫—Å—Ç: –¥–µ–ª–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ù–ï–±–ª–æ–∫–∏—Ä—É—é—â–∏–º
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_comment, block=False))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling(drop_pending_updates=True, allowed_updates=Update.ALL_TYPES)
