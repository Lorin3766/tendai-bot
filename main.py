# -*- coding: utf-8 -*-
import os
import re
import json
import uuid
import logging
from datetime import datetime, timedelta, timezone

from dotenv import load_dotenv

# langdetect ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ
try:
    from langdetect import detect, DetectorFactory
    DetectorFactory.seed = 0
except Exception:
    detect = None

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ===== OpenAI (–¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞/–ø–æ–¥—Å–∫–∞–∑–æ–∫) =====
try:
    from openai import OpenAI
except Exception:
    OpenAI = None

# ===== Google Sheets =====
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# =========================
# Boot & Config
# =========================
load_dotenv()
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Feedback")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is missing")

# OpenAI client
oai = OpenAI(api_key=OPENAI_API_KEY) if (OPENAI_API_KEY and OpenAI) else None

# Google Sheets init
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
if not creds_json:
    raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
creds_dict = json.loads(creds_json)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gclient = gspread.authorize(credentials)
ss = gclient.open(SHEET_NAME)

def _get_or_create_ws(title: str, headers: list[str]):
    try:
        ws = ss.worksheet(title)
    except gspread.WorksheetNotFound:
        ws = ss.add_worksheet(title=title, rows=2000, cols=20)
        ws.append_row(headers)
    vals = ws.get_all_values()
    if not vals:
        ws.append_row(headers)
    return ws

ws_feedback = _get_or_create_ws(
    "Feedback", ["timestamp", "user_id", "name", "username", "rating", "comment"]
)
ws_users = _get_or_create_ws(
    "Users", ["user_id", "username", "lang", "consent", "tz_offset", "checkin_hour", "paused"]
)
ws_episodes = _get_or_create_ws(
    "Episodes",
    [
        "episode_id", "user_id", "topic", "started_at",
        "baseline_severity", "red_flags", "plan_accepted",
        "target", "reminder_at", "next_checkin_at",
        "status", "last_update", "notes",
    ],
)

# =========================
# State (RAM)
# =========================
# sessions[user_id] = {
#   "topic": "pain",
#   "flow": "collect"|"confirm"|"redflags"|"zone"|"plan"|"accept_wait"|"remind_wait",
#   "answers": {"loc","kind","duration","severity","red"},
#   "zone": {"name": "head/back/belly/chest/throat", "idx": 1..3, "q": {1:"yes"/"no"/"maybe", ...}},
#   "episode_id": "...",
#   "awaiting_comment": bool,
#   "feedback_context": str,
# }
sessions: dict[int, dict] = {}

# =========================
# i18n
# =========================
SUPPORTED = {"ru", "en", "uk", "es"}
def norm_lang(code: str | None) -> str:
    if not code:
        return "en"
    c = code.split("-")[0].lower()
    if c.startswith("ua"):
        c = "uk"
    return c if c in SUPPORTED else "en"

T = {
    "en": {
        "welcome": "Hi! I‚Äôm TendAI ‚Äî your health & longevity assistant.\nChoose a topic below or just describe what‚Äôs bothering you.",
        "menu": ["Pain", "Throat/Cold", "Sleep", "Stress", "Digestion", "Energy"],
        "help": "I help with short checkups, a 24‚Äì48h plan, and gentle follow-ups.\nCommands: /help, /privacy, /pause, /resume, /delete_data, /lang, /feedback",
        "privacy": "TendAI is not a medical service and can‚Äôt replace a doctor. We store minimal data for reminders. Use /delete_data to erase your info.",
        "paused_on": "Notifications paused. Use /resume to enable.",
        "paused_off": "Notifications resumed.",
        "deleted": "All your data in TendAI was deleted. You can /start again anytime.",
        "ask_consent": "May I send you a follow-up later to check how you feel? (Change with /pause or /resume.)",
        "yes": "Yes", "no": "No",
        "choose_topic": "Choose a topic:",
        "open_prompt": "Briefly: where is the pain, how does it feel (sharp/dull/etc.), and how long has it lasted?\nExamples: ‚ÄúHead, throbbing, 3 hours‚Äù / ‚ÄúLower back, sharp when bending, 2 days‚Äù.",
        "triage_pain_q1": "Where does it hurt?\nChoose below ‚§µÔ∏è",
        "triage_pain_q1_opts": ["Head", "Throat", "Back", "Belly", "Chest", "Other"],
        "triage_pain_q2": "What kind of pain?\nChoose below ‚§µÔ∏è",
        "triage_pain_q2_opts": ["Dull", "Sharp", "Throbbing", "Burning", "Pressing"],
        "triage_pain_q3": "How long has it lasted?\nChoose below ‚§µÔ∏è",
        "triage_pain_q3_opts": ["<3h", "3‚Äì24h", ">1 day", ">1 week"],
        "triage_pain_q4": "Rate the pain now (0‚Äì10):",
        "triage_pain_q5": "Any of these now?\n(High fever, Vomiting, Weakness/numbness, Speech/vision issues, Trauma, None)",
        "triage_pain_q5_opts": ["High fever", "Vomiting", "Weakness/numbness", "Speech/vision issues", "Trauma", "None"],
        "confirm_title": "Please confirm I got this right:",
        "confirm_loc": "‚Ä¢ Where: {loc}",
        "confirm_kind": "‚Ä¢ Character: {kind}",
        "confirm_duration": "‚Ä¢ Duration: {duration}",
        "confirm_severity": "‚Ä¢ Severity: {severity}/10",
        "confirm_ok": "‚úÖ Looks correct",
        "confirm_change_loc": "‚úèÔ∏è Change Where",
        "confirm_change_kind": "‚úèÔ∏è Change Character",
        "confirm_change_duration": "‚úèÔ∏è Change Duration",
        "confirm_change_severity": "‚úèÔ∏è Change Severity",
        "plan_header": "Your 24‚Äì48h plan:",
        "plan_accept": "Will you try this today?",
        "accept_opts": ["‚úÖ Yes", "üîÅ Later", "‚úñÔ∏è No"],
        "remind_when": "When shall I check on you?",
        "remind_opts": ["in 4h", "this evening", "tomorrow morning", "no need"],
        "thanks": "Got it üôå",
        "checkin_ping": "Quick check-in: how is it now (0‚Äì10)?",
        "checkin_better": "Nice! Keep it up üí™",
        "checkin_worse": "Sorry to hear. If you have red flags or pain ‚â•7/10, please consider medical help.",
        "comment_prompt": "Write your comment now. Or send /skip to pass.",
        "comment_saved": "Feedback saved, thank you! üôå",
        "skip_ok": "Skipped.",
        "unknown": "I need a bit more information to help. Where exactly does it hurt? How long has it lasted?",
        "use_buttons": "Please use the buttons below ‚§µÔ∏è",
        "lang_set": "Language set: English",
        "help_lang": "Use /lang ru|en|uk|es to change language.",
        "oos": "This is outside my scope. I focus on health, self-care and longevity. Please choose a topic below.",
        "fb_prompt": "Would you like to leave quick feedback?",
        "fb_thanks": "Thanks for your feedback! üíõ",
        "fb_like": "üëç Useful",
        "fb_dislike": "üëé Didn‚Äôt help",
        "fb_write": "‚úçÔ∏è Write a comment",
        # Zone questions
        "ans_yes": "Yes",
        "ans_no": "No",
        "ans_maybe": "Not sure",
        "zone_head_q1": "Sudden 'thunderclap' or worst-ever headache?",
        "zone_head_q2": "Any speech/vision trouble or weakness?",
        "zone_head_q3": "Neck stiffness or fever?",
        "zone_back_q1": "Numbness in groin or loss of bladder/bowel control?",
        "zone_back_q2": "Recent trauma, fever, cancer history or steroids?",
        "zone_back_q3": "Does pain shoot below the knee?",
        "zone_belly_q1": "Where exactly: upper/lower, right/left, or center?",
        "zone_belly_q2": "Related to food, fatty meals, or alcohol?",
        "zone_belly_q3": "Vomiting/diarrhea or no gas/stool? Fever or pregnancy?",
        "zone_chest_q1": "Pressure behind sternum >10 min with shortness of breath or cold sweat?",
        "zone_chest_q2": "Worse with deep breath/movement or when pressing the chest?",
        "zone_chest_q3": "Cough or fever?",
        "zone_throat_q1": "Fever or tonsillar exudate (white patches)?",
        "zone_throat_q2": "Cough or recent sick contact?",
        "zone_throat_q3": "Worse on swallowing or at night?",
    },
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –Ω–∏–∂–µ –∏–ª–∏ –æ–ø–∏—à–∏, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç.",
        "menu": ["–ë–æ–ª—å", "–ì–æ—Ä–ª–æ/–ø—Ä–æ—Å—Ç—É–¥–∞", "–°–æ–Ω", "–°—Ç—Ä–µ—Å—Å", "–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ", "–≠–Ω–µ—Ä–≥–∏—è"],
        "help": "–ü–æ–º–æ–≥–∞—é –∫–æ—Ä–æ—Ç–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π, –ø–ª–∞–Ω–æ–º –Ω–∞ 24‚Äì48 —á –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–º–∏ —á–µ–∫-–∏–Ω–∞–º–∏.\n–ö–æ–º–∞–Ω–¥—ã: /help, /privacy, /pause, /resume, /delete_data, /lang, /feedback",
        "privacy": "TendAI –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞. –ú—ã —Ö—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. /delete_data ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å—ë.",
        "paused_on": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–∞—É–∑—É. –í–∫–ª—é—á–∏—Ç—å: /resume",
        "paused_off": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.",
        "deleted": "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ TendAI —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start.",
        "ask_consent": "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã? (–ú–µ–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ /pause –∏ /resume.)",
        "yes": "–î–∞", "no": "–ù–µ—Ç",
        "choose_topic": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        "open_prompt": "–ö–æ—Ä–æ—Ç–∫–æ: –≥–¥–µ –±–æ–ª–∏—Ç, –∫–∞–∫ —á—É–≤—Å—Ç–≤—É–µ—Ç—Å—è (–æ—Å—Ç—Ä–∞—è/—Ç—É–ø–∞—è –∏ —Ç.–ø.) –∏ —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?\n–ü—Ä–∏–º–µ—Ä—ã: ¬´–ì–æ–ª–æ–≤–∞, –ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è, 3 —á–∞—Å–∞¬ª / ¬´–ü–æ—è—Å–Ω–∏—Ü–∞, –∫–æ–ª—é—â–∞—è –ø—Ä–∏ –Ω–∞–∫–ª–æ–Ω–µ, 2 –¥–Ω—è¬ª.",
        "triage_pain_q1": "–ì–¥–µ –±–æ–ª–∏—Ç?\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ ‚§µÔ∏è",
        "triage_pain_q1_opts": ["–ì–æ–ª–æ–≤–∞", "–ì–æ—Ä–ª–æ", "–°–ø–∏–Ω–∞", "–ñ–∏–≤–æ—Ç", "–ì—Ä—É–¥—å", "–î—Ä—É–≥–æ–µ"],
        "triage_pain_q2": "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏?\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ ‚§µÔ∏è",
        "triage_pain_q2_opts": ["–¢—É–ø–∞—è", "–û—Å—Ç—Ä–∞—è", "–ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è", "–ñ–≥—É—á–∞—è", "–î–∞–≤—è—â–∞—è"],
        "triage_pain_q3": "–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è?\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ ‚§µÔ∏è",
        "triage_pain_q3_opts": ["<3—á", "3‚Äì24—á", ">1 –¥–Ω—è", ">1 –Ω–µ–¥–µ–ª–∏"],
        "triage_pain_q4": "–û—Ü–µ–Ω–∏—Ç–µ –±–æ–ª—å (0‚Äì10):",
        "triage_pain_q5": "–ï—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ?\n(–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –†–≤–æ—Ç–∞, –°–ª–∞–±–æ—Å—Ç—å/–æ–Ω–µ–º–µ–Ω–∏–µ, –ü—Ä–æ–±–ª–µ–º—ã —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è, –¢—Ä–∞–≤–º–∞, –ù–µ—Ç)",
        "triage_pain_q5_opts": ["–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–†–≤–æ—Ç–∞", "–°–ª–∞–±–æ—Å—Ç—å/–æ–Ω–µ–º–µ–Ω–∏–µ", "–ü—Ä–æ–±–ª–µ–º—ã —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è", "–¢—Ä–∞–≤–º–∞", "–ù–µ—Ç"],
        "confirm_title": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–µ—Ä–Ω–æ –ª–∏ —è –ø–æ–Ω—è–ª:",
        "confirm_loc": "‚Ä¢ –ì–¥–µ: {loc}",
        "confirm_kind": "‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä: {kind}",
        "confirm_duration": "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}",
        "confirm_severity": "‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {severity}/10",
        "confirm_ok": "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ",
        "confirm_change_loc": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ¬´–ì–¥–µ¬ª",
        "confirm_change_kind": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ¬´–•–∞—Ä–∞–∫—Ç–µ—Ä¬ª",
        "confirm_change_duration": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ¬´–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å¬ª",
        "confirm_change_severity": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ¬´–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å¬ª",
        "plan_header": "–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á–∞—Å–æ–≤:",
        "plan_accept": "–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
        "accept_opts": ["‚úÖ –î–∞", "üîÅ –ü–æ–∑–∂–µ", "‚úñÔ∏è –ù–µ—Ç"],
        "remind_when": "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "remind_opts": ["—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞", "–≤–µ—á–µ—Ä–æ–º", "–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º", "–Ω–µ –Ω–∞–¥–æ"],
        "thanks": "–ü—Ä–∏–Ω—è—Ç–æ üôå",
        "checkin_ping": "–ö–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ 0‚Äì10?",
        "checkin_better": "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üí™",
        "checkin_worse": "–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å ¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª –∏–ª–∏ –±–æ–ª—å ‚â•7/10 ‚Äî –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        "comment_prompt": "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–µ–π—á–∞—Å. –ò–ª–∏ /skip ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        "comment_saved": "–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å–ø–∞—Å–∏–±–æ! üôå",
        "skip_ok": "–ü—Ä–æ–ø—É—â–µ–Ω–æ.",
        "unknown": "–ù—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π. –ì–¥–µ –±–æ–ª–∏—Ç –∏ —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?",
        "use_buttons": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚§µÔ∏è",
        "lang_set": "–Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: –†—É—Å—Å–∫–∏–π",
        "help_lang": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lang ru|en|uk|es —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫.",
        "oos": "–≠—Ç–æ –≤–Ω–µ –º–æ–µ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏. –Ø –ø–æ–º–æ–≥–∞—é —Å –∑–∞–±–æ—Ç–æ–π –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –Ω–∏–∂–µ.",
        "fb_prompt": "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∑—ã–≤?",
        "fb_thanks": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíõ",
        "fb_like": "üëç –ü–æ–ª–µ–∑–Ω–æ",
        "fb_dislike": "üëé –ù–µ –ø–æ–º–æ–≥–ª–æ",
        "fb_write": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤",
        "ans_yes": "–î–∞",
        "ans_no": "–ù–µ—Ç",
        "ans_maybe": "–ù–µ –∑–Ω–∞—é",
        "zone_head_q1": "–í–Ω–µ–∑–∞–ø–Ω–∞—è ¬´–∫–∞–∫ —É–¥–∞—Ä¬ª/—Å–∞–º–∞—è —Å–∏–ª—å–Ω–∞—è?",
        "zone_head_q2": "–ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ—á—å—é/–∑—Ä–µ–Ω–∏–µ–º –∏–ª–∏ —Å–ª–∞–±–æ—Å—Ç—å?",
        "zone_head_q3": "–†–∏–≥–∏–¥–Ω–æ—Å—Ç—å —à–µ–∏ –∏–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?",
        "zone_back_q1": "–û–Ω–µ–º–µ–Ω–∏–µ –≤ –ø–∞—Ö—É/–ø–æ—Ç–µ—Ä—è –∫–æ–Ω—Ç—Ä–æ–ª—è –º–æ—á–∏/—Å—Ç—É–ª–∞?",
        "zone_back_q2": "–ù–µ–¥–∞–≤–Ω—è—è —Ç—Ä–∞–≤–º–∞, –ª–∏—Ö–æ—Ä–∞–¥–∫–∞, –æ–Ω–∫–æ–ª–æ–≥–∏—è, —Å—Ç–µ—Ä–æ–∏–¥—ã?",
        "zone_back_q3": "–û—Ç–¥–∞—ë—Ç –Ω–∏–∂–µ –∫–æ–ª–µ–Ω–∞?",
        "zone_belly_q1": "–ì–¥–µ —Ç–æ—á–Ω–µ–µ: –≤–µ—Ä—Ö/–Ω–∏–∑, –ø—Ä–∞–≤–æ/–ª–µ–≤–æ, —Ü–µ–Ω—Ç—Ä?",
        "zone_belly_q2": "–°–≤—è–∑—å —Å –µ–¥–æ–π/–∂–∏—Ä–Ω—ã–º/–∞–ª–∫–æ–≥–æ–ª–µ–º?",
        "zone_belly_q3": "–†–≤–æ—Ç–∞/–ø–æ–Ω–æ—Å –∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –≥–∞–∑–æ–≤/—Å—Ç—É–ª–∞? –ñ–∞—Ä/–±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å?",
        "zone_chest_q1": "–î–∞–≤—è—â–∞—è –∑–∞ –≥—Ä—É–¥–∏–Ω–æ–π >10 –º–∏–Ω —Å –æ–¥—ã—à–∫–æ–π/—Ö–æ–ª–æ–¥–Ω—ã–º –ø–æ—Ç–æ–º?",
        "zone_chest_q2": "–•—É–∂–µ –ø—Ä–∏ –≤–¥–æ—Ö–µ/–¥–≤–∏–∂–µ–Ω–∏–∏ –∏–ª–∏ –ø—Ä–∏ –Ω–∞–¥–∞–≤–ª–∏–≤–∞–Ω–∏–∏?",
        "zone_chest_q3": "–ö–∞—à–µ–ª—å –∏–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?",
        "zone_throat_q1": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–ª–∏ –Ω–∞–ª—ë—Ç –Ω–∞ –º–∏–Ω–¥–∞–ª–∏–Ω–∞—Ö?",
        "zone_throat_q2": "–ö–∞—à–µ–ª—å –∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –±–æ–ª—å–Ω—ã–º–∏?",
        "zone_throat_q3": "–ë–æ–ª—å –ø—Ä–∏ –≥–ª–æ—Ç–∞–Ω–∏–∏ –∏–ª–∏ –Ω–æ—á—å—é —Ö—É–∂–µ?",
    },
    "uk": {
        "welcome": "–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è.\n–û–±–µ—Ä–∏ —Ç–µ–º—É –Ω–∏–∂—á–µ –∞–±–æ –æ–ø–∏—à–∏, —â–æ —Ç—É—Ä–±—É—î.",
        "menu": ["–ë—ñ–ª—å", "–ì–æ—Ä–ª–æ/–∑–∞—Å—Ç—É–¥–∞", "–°–æ–Ω", "–°—Ç—Ä–µ—Å", "–¢—Ä–∞–≤–ª–µ–Ω–Ω—è", "–ï–Ω–µ—Ä–≥—ñ—è"],
        "help": "–î–æ–ø–æ–º–∞–≥–∞—é –∫–æ—Ä–æ—Ç–∫–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é, –ø–ª–∞–Ω–æ–º –Ω–∞ 24‚Äì48 –≥–æ–¥ —ñ —á–µ–∫–∞–º–∏.\n–ö–æ–º–∞–Ω–¥–∏: /help, /privacy, /pause, /resume, /delete_data, /lang, /feedback",
        "privacy": "TendAI –Ω–µ –∑–∞–º—ñ–Ω—é—î –ª—ñ–∫–∞—Ä—è. –ú–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ–Ω—ñ–º—É–º –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å. /delete_data ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å–µ.",
        "paused_on": "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ. –£–≤—ñ–º–∫–Ω—É—Ç–∏: /resume",
        "paused_off": "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω–µ–Ω—ñ.",
        "deleted": "–£—Å—ñ –≤–∞—à—ñ –¥–∞–Ω—ñ –≤ TendAI –≤–∏–¥–∞–ª–µ–Ω–æ. –ú–æ–∂–Ω–∞ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ /start.",
        "ask_consent": "–ú–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ –≤–∏? (–ó–º—ñ–Ω—é—î—Ç—å—Å—è /pause –∞–±–æ /resume.)",
        "yes": "–¢–∞–∫", "no": "–ù—ñ",
        "choose_topic": "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:",
        "open_prompt": "–ö–æ—Ä–æ—Ç–∫–æ: –¥–µ –±–æ–ª–∏—Ç—å, —è–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä (–≥–æ—Å—Ç—Ä–∏–π/—Ç—É–ø–∏–π —ñ —Ç.–¥.) —ñ —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î?\n–ü—Ä–∏–∫–ª–∞–¥–∏: ¬´–ì–æ–ª–æ–≤–∞, –ø—É–ª—å—Å—ñ–≤–Ω–∏–π, 3 –≥–æ–¥¬ª / ¬´–ü–æ–ø–µ—Ä–µ–∫, –≥–æ—Å—Ç—Ä–∏–π –ø—Ä–∏ –Ω–∞—Ö–∏–ª—ñ, 2 –¥–Ω—ñ¬ª.",
        "triage_pain_q1": "–î–µ –±–æ–ª–∏—Ç—å?\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∏–∂—á–µ ‚§µÔ∏è",
        "triage_pain_q2": "–Ø–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª—é?\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∏–∂—á–µ ‚§µÔ∏è",
        "triage_pain_q3": "–Ø–∫ –¥–æ–≤–≥–æ —Ç—Ä–∏–≤–∞—î?\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∏–∂—á–µ ‚§µÔ∏è",
        "triage_pain_q3_opts": ["<3–≥–æ–¥", "3‚Äì24–≥–æ–¥", ">1 –¥–Ω—è", ">1 —Ç–∏–∂–Ω—è"],
        "triage_pain_q4": "–û—Ü—ñ–Ω—ñ—Ç—å –±—ñ–ª—å (0‚Äì10):",
        "triage_pain_q5": "–Ñ —â–æ—Å—å —ñ–∑ —Ü—å–æ–≥–æ?\n(–í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –ë–ª—é–≤–∞–Ω–Ω—è, –°–ª–∞–±–∫—ñ—Å—Ç—å/–æ–Ω—ñ–º—ñ–Ω–Ω—è, –ú–æ–≤–∞/–∑—ñ—Ä, –¢—Ä–∞–≤–º–∞, –ù–µ–º–∞—î)",
        "triage_pain_q5_opts": ["–í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–ë–ª—é–≤–∞–Ω–Ω—è", "–°–ª–∞–±–∫—ñ—Å—Ç—å/–æ–Ω—ñ–º—ñ–Ω–Ω—è", "–ú–æ–≤–∞/–∑—ñ—Ä", "–¢—Ä–∞–≤–º–∞", "–ù–µ–º–∞—î"],
        "confirm_title": "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —è –∑—Ä–æ–∑—É–º—ñ–≤:",
        "confirm_loc": "‚Ä¢ –î–µ: {loc}",
        "confirm_kind": "‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä: {kind}",
        "confirm_duration": "‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration}",
        "confirm_severity": "‚Ä¢ –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å: {severity}/10",
        "confirm_ok": "‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ",
        "confirm_change_loc": "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ ¬´–î–µ¬ª",
        "confirm_change_kind": "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ ¬´–•–∞—Ä–∞–∫—Ç–µ—Ä¬ª",
        "confirm_change_duration": "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ ¬´–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å¬ª",
        "confirm_change_severity": "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ ¬´–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å¬ª",
        "plan_header": "–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥:",
        "plan_accept": "–ì–æ—Ç–æ–≤—ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "accept_opts": ["‚úÖ –¢–∞–∫", "üîÅ –ü—ñ–∑–Ω—ñ—à–µ", "‚úñÔ∏è –ù—ñ"],
        "remind_when": "–ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏ —Ç–∞ —Å–ø–∏—Ç–∞—Ç–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è?",
        "remind_opts": ["—á–µ—Ä–µ–∑ 4 –≥–æ–¥", "—É–≤–µ—á–µ—Ä—ñ", "–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ", "–Ω–µ —Ç—Ä–µ–±–∞"],
        "thanks": "–ü—Ä–∏–π–Ω—è—Ç–æ üôå",
        "checkin_ping": "–ö–æ—Ä–æ—Ç–∫–æ: —è–∫ –∑–∞—Ä–∞–∑ (0‚Äì10)?",
        "checkin_better": "–ß—É–¥–æ–≤–æ! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ üí™",
        "checkin_worse": "–Ø–∫—â–æ —î ¬´—á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ¬ª –∞–±–æ –±—ñ–ª—å ‚â•7/10 ‚Äî –∫—Ä–∞—â–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.",
        "comment_prompt": "–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –∑–∞—Ä–∞–∑. –ê–±–æ /skip ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.",
        "comment_saved": "–í—ñ–¥–≥—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –¥—è–∫—É—î–º–æ! üôå",
        "skip_ok": "–ü—Ä–æ–ø—É—â–µ–Ω–æ.",
        "unknown": "–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π. –î–µ –±–æ–ª–∏—Ç—å —ñ —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î?",
        "use_buttons": "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ ‚§µÔ∏è",
        "lang_set": "–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "help_lang": "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /lang ru|en|uk|es —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É.",
        "oos": "–¶–µ –ø–æ–∑–∞ –º–æ—î—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—î—é. –Ø –¥–æ–ø–æ–º–∞–≥–∞—é —ñ–∑ —Ç—É—Ä–±–æ—Ç–æ—é –ø—Ä–æ –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –Ω–∏–∂—á–µ.",
        "fb_prompt": "–ó–∞–ª–∏—à–∏—Ç–∏ —à–≤–∏–¥–∫–∏–π –≤—ñ–¥–≥—É–∫?",
        "fb_thanks": "–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! üíõ",
        "fb_like": "üëç –ö–æ—Ä–∏—Å–Ω–æ",
        "fb_dislike": "üëé –ù–µ –¥–æ–ø–æ–º–æ–≥–ª–æ",
        "fb_write": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫",
        "ans_yes": "–¢–∞–∫",
        "ans_no": "–ù—ñ",
        "ans_maybe": "–ù–µ –∑–Ω–∞—é",
        "zone_head_q1": "–†–∞–ø—Ç–æ–≤–∏–π ¬´—É–¥–∞—Ä¬ª/–Ω–∞–π—Å–∏–ª—å–Ω—ñ—à–∏–π —É –∂–∏—Ç—Ç—ñ?",
        "zone_head_q2": "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–æ–≤–æ—é/–∑–æ—Ä–æ–º –∞–±–æ —Å–ª–∞–±–∫—ñ—Å—Ç—å?",
        "zone_head_q3": "–†–∏–≥—ñ–¥–Ω—ñ—Å—Ç—å —à–∏—ó –∞–±–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?",
        "zone_back_q1": "–û–Ω—ñ–º—ñ–Ω–Ω—è –≤ –ø–∞—Ö—É/–≤—Ç—Ä–∞—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é —Å–µ—á—ñ/—Å—Ç—É–ª—É?",
        "zone_back_q2": "–¢—Ä–∞–≤–º–∞, –≥–∞—Ä—è—á–∫–∞, –æ–Ω–∫–æ–ª–æ–≥—ñ—è –∞–±–æ —Å—Ç–µ—Ä–æ—ó–¥–∏?",
        "zone_back_q3": "–í—ñ–¥–¥–∞—î –Ω–∏–∂—á–µ –∫–æ–ª—ñ–Ω–∞?",
        "zone_belly_q1": "–î–µ —Å–∞–º–µ: –≤–µ—Ä—Ö/–Ω–∏–∑, –ø—Ä–∞–≤–æ/–ª—ñ–≤–æ, —Ü–µ–Ω—Ç—Ä?",
        "zone_belly_q2": "–ó–≤‚Äô—è–∑–æ–∫ –∑ —ó–∂–µ—é/–∂–∏—Ä–Ω–∏–º/–∞–ª–∫–æ–≥–æ–ª–µ–º?",
        "zone_belly_q3": "–ë–ª—é–≤–∞–Ω–Ω—è/–¥—ñ–∞—Ä–µ—è —á–∏ –∑–∞—Ç—Ä–∏–º–∫–∞ –≥–∞–∑—ñ–≤/—Å—Ç—É–ª—É? –ñ–∞—Ä/–≤–∞–≥—ñ—Ç–Ω—ñ—Å—Ç—å?",
        "zone_chest_q1": "–¢–∏—Å–Ω—É—á–∏–π –±—ñ–ª—å –∑–∞ –≥—Ä—É–¥–∏–Ω–æ—é >10 —Ö–≤ –∑ –∑–∞–¥–∏—à–∫–æ—é/—Ö–æ–ª–æ–¥–Ω–∏–º –ø–æ—Ç–æ–º?",
        "zone_chest_q2": "–ì—ñ—Ä—à–µ –ø—Ä–∏ –≤–¥–∏—Ö—É/—Ä—É—Å—ñ —á–∏ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ?",
        "zone_chest_q3": "–ö–∞—à–µ–ª—å –∞–±–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?",
        "zone_throat_q1": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∞–±–æ –Ω–∞–ª—ñ—Ç –Ω–∞ –º–∏–≥–¥–∞–ª–∏–∫–∞—Ö?",
        "zone_throat_q2": "–ö–∞—à–µ–ª—å –∞–±–æ –Ω–µ–¥–∞–≤–Ω—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç —ñ–∑ —Ö–≤–æ—Ä–∏–º–∏?",
        "zone_throat_q3": "–ë—ñ–ª—å –ø—Ä–∏ –∫–æ–≤—Ç–∞–Ω–Ω—ñ –∞–±–æ –≥—ñ—Ä—à–µ –≤–Ω–æ—á—ñ?",
    },
    "es": {
        "welcome": "¬°Hola! Soy TendAI, tu asistente de salud y longevidad.\nElige un tema o describe qu√© te molesta.",
        "menu": ["Dolor", "Garganta/Resfriado", "Sue√±o", "Estr√©s", "Digesti√≥n", "Energ√≠a"],
        "help": "Te ayudo con chequeos breves, un plan de 24‚Äì48 h y seguimientos.\nComandos: /help, /privacy, /pause, /resume, /delete_data, /lang, /feedback",
        "privacy": "TendAI no sustituye a un m√©dico. Guardamos datos m√≠nimos para recordatorios. Usa /delete_data para borrar tus datos.",
        "paused_on": "Recordatorios pausados. Usa /resume para activarlos.",
        "paused_off": "Recordatorios activados de nuevo.",
        "deleted": "Se eliminaron todos tus datos en TendAI. Puedes empezar otra vez con /start.",
        "ask_consent": "¬øPuedo escribirte m√°s tarde para saber c√≥mo sigues? (C√°mbialo con /pause o /resume.)",
        "yes": "S√≠", "no": "No",
        "choose_topic": "Elige un tema:",
        "open_prompt": "Breve: ¬ød√≥nde duele, c√≥mo se siente (agudo/sordo, etc.) y desde cu√°ndo?\nEj.: ¬´Cabeza, palpitante, 3 h¬ª / ¬´Lumbar, punzante al agacharme, 2 d√≠as¬ª.",
        "triage_pain_q1": "¬øD√≥nde te duele?\nElige abajo ‚§µÔ∏è",
        "triage_pain_q2": "¬øQu√© tipo de dolor?\nElige abajo ‚§µÔ∏è",
        "triage_pain_q3": "¬øDesde cu√°ndo lo tienes?\nElige abajo ‚§µÔ∏è",
        "triage_pain_q3_opts": ["<3h", "3‚Äì24h", ">1 d√≠a", ">1 semana"],
        "triage_pain_q4": "Valora el dolor ahora (0‚Äì10):",
        "triage_pain_q5": "¬øAlguno de estos ahora?\n(Fiebre alta, V√≥mitos, Debilidad/entumecimiento, Habla/visi√≥n, Trauma, Ninguno)",
        "triage_pain_q5_opts": ["Fiebre alta", "V√≥mitos", "Debilidad/entumecimiento", "Habla/visi√≥n", "Trauma", "Ninguno"],
        "confirm_title": "Confirma si lo entend√≠ bien:",
        "confirm_loc": "‚Ä¢ D√≥nde: {loc}",
        "confirm_kind": "‚Ä¢ Tipo: {kind}",
        "confirm_duration": "‚Ä¢ Duraci√≥n: {duration}",
        "confirm_severity": "‚Ä¢ Intensidad: {severity}/10",
        "confirm_ok": "‚úÖ Correcto",
        "confirm_change_loc": "‚úèÔ∏è Cambiar ¬´D√≥nde¬ª",
        "confirm_change_kind": "‚úèÔ∏è Cambiar ¬´Tipo¬ª",
        "confirm_change_duration": "‚úèÔ∏è Cambiar ¬´Duraci√≥n¬ª",
        "confirm_change_severity": "‚úèÔ∏è Cambiar ¬´Intensidad¬ª",
        "plan_header": "Tu plan para 24‚Äì48 h:",
        "plan_accept": "¬øLo intentas hoy?",
        "accept_opts": ["‚úÖ S√≠", "üîÅ M√°s tarde", "‚úñÔ∏è No"],
        "remind_when": "¬øCu√°ndo te escribo para revisar?",
        "remind_opts": ["en 4 h", "esta tarde", "ma√±ana por la ma√±ana", "no hace falta"],
        "thanks": "¬°Hecho! üôå",
        "checkin_ping": "Revisi√≥n r√°pida: ¬øc√≥mo est√°s ahora (0‚Äì10)?",
        "checkin_better": "¬°Bien! Sigue as√≠ üí™",
        "checkin_worse": "Lo siento. Si hay se√±ales de alarma o dolor ‚â•7/10, considera atenci√≥n m√©dica.",
        "comment_prompt": "Escribe tu comentario ahora. O env√≠a /skip para omitir.",
        "comment_saved": "¬°Comentario guardado, gracias! üôå",
        "skip_ok": "Omitido.",
        "unknown": "Necesito un poco m√°s de informaci√≥n. ¬øD√≥nde te duele y desde cu√°ndo?",
        "use_buttons": "Usa los botones abajo ‚§µÔ∏è",
        "lang_set": "Idioma guardado: Espa√±ol",
        "help_lang": "Usa /lang ru|en|uk|es para cambiar el idioma.",
        "oos": "Esto est√° fuera de mi √°mbito. Me enfoco en salud, autocuidado y longevidad. Por favor, elige un tema abajo.",
        "fb_prompt": "¬øQuieres dejar una opini√≥n r√°pida?",
        "fb_thanks": "¬°Gracias por tu opini√≥n! üíõ",
        "fb_like": "üëç √ötil",
        "fb_dislike": "üëé No ayud√≥",
        "fb_write": "‚úçÔ∏è Escribir comentario",
        "ans_yes": "S√≠",
        "ans_no": "No",
        "ans_maybe": "No s√©",
        "zone_head_q1": "¬øDe repente, como un trueno, o la peor de tu vida?",
        "zone_head_q2": "¬øProblemas de habla/visi√≥n o debilidad?",
        "zone_head_q3": "¬øRigidez de cuello o fiebre?",
        "zone_back_q1": "¬øEntumecimiento en la ingle o p√©rdida de control de orina/defecaci√≥n?",
        "zone_back_q2": "¬øTrauma reciente, fiebre, c√°ncer o esteroides?",
        "zone_back_q3": "¬øIrradia por debajo de la rodilla?",
        "zone_belly_q1": "¬øD√≥nde exactamente: arriba/abajo, derecha/izquierda o centro?",
        "zone_belly_q2": "¬øRelacionado con comida, grasas o alcohol?",
        "zone_belly_q3": "¬øV√≥mitos/diarrea o sin gases/evacuaci√≥n? ¬øFiebre/embarazo?",
    },
}
def t(lang: str, key: str) -> str:
    return T.get(lang, T["en"]).get(key, T["en"].get(key, key))

# =========================
# NLP ‚Äî —Å–∏–Ω–æ–Ω–∏–º—ã –∏ –ø–∞—Ä—Å–∏–Ω–≥
# =========================
LOC_SYNS = {
    "ru": {
        "Head": ["–≥–æ–ª–æ–≤–∞","–≥–æ–ª–æ–≤–µ","–≤–∏—Å–æ–∫","–≤–∏—Å–∫–∏","–ª–æ–±","–∑–∞—Ç—ã–ª–æ–∫","—Ç–µ–º—è","—Ç–µ–º–µ—á–∫–æ"],
        "Throat": ["–≥–æ—Ä–ª–æ","–≥–æ—Ä–ª–µ","–≥–ª–∞–Ω–¥—ã","–º–∏–Ω–¥–∞–ª–∏–Ω—ã"],
        "Back": ["—Å–ø–∏–Ω–∞","–ø–æ—è—Å–Ω–∏—Ü–∞","–ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫","–ª–æ–ø–∞—Ç–∫–∞","–ª–æ–ø–∞—Ç–∫–µ"],
        "Belly": ["–∂–∏–≤–æ—Ç","–∂–µ–ª—É–¥–æ–∫","–∫–∏—à–∫–∏","–∫–∏—à–µ—á–Ω–∏–∫","–∂–∏–≤–æ—Ç–µ","–∂–µ–ª—É–¥–∫–µ"],
        "Chest": ["–≥—Ä—É–¥—å","–≥—Ä—É–¥–∏","–≥—Ä—É–¥–∏–Ω–µ","–≥—Ä—É–¥–Ω–æ–π"],
    },
    "en": {
        "Head": ["head","temple","forehead","occiput","back of head"],
        "Throat": ["throat","tonsil","pharynx","sore throat"],
        "Back": ["back","lower back","spine","shoulder blade","scapula"],
        "Belly": ["belly","stomach","abdomen","tummy","gastric"],
        "Chest": ["chest","sternum"],
    },
    "uk": {
        "Head": ["–≥–æ–ª–æ–≤–∞","—Å–∫—Ä–æ–Ω—è","—Å–∫—Ä–æ–Ω—ñ","–ø–æ—Ç–∏–ª–∏—Ü—è","–ª–æ–±","—Ç—ñ–º‚Äô—è","–≥–æ–ª–æ–≤—ñ"],
        "Throat": ["–≥–æ—Ä–ª–æ","–º–∏–≥–¥–∞–ª–∏–∫–∏","–≥–ª–æ—Ç–∫–∞"],
        "Back": ["—Å–ø–∏–Ω–∞","–ø–æ–ø–µ—Ä–µ–∫","—Ö—Ä–µ–±–µ—Ç","–ª–æ–ø–∞—Ç–∫–∞","–ª–æ–ø–∞—Ç—Ü—ñ"],
        "Belly": ["–∂–∏–≤—ñ—Ç","—à–ª—É–Ω–æ–∫","–∫–∏—à–∫–∏","–∫–∏—à–µ—á–Ω–∏–∫","–∂–∏–≤–æ—Ç—ñ","—à–ª—É–Ω–∫—É"],
        "Chest": ["–≥—Ä—É–¥–∏","–≥—Ä—É–¥–Ω–∏–Ω–∞"],
    },
    "es": {
        "Head": ["cabeza","sien","frente","nuca"],
        "Throat": ["garganta","am√≠gdala","am√≠gdalas","faringe"],
        "Back": ["espalda","lumbago","lumbar","columna","om√≥plato"],
        "Belly": ["vientre","est√≥mago","abdomen","barriga","panza"],
        "Chest": ["pecho","estern√≥n"],
    },
}

KIND_SYNS = {
    "ru": {
        "Dull": ["—Ç—É–ø–∞—è","—Ç—É–ø–æ–π","–Ω–æ—é—â–∞—è","–Ω–æ–µ—Ç","–ª–æ–º–∏—Ç"],
        "Sharp": ["–æ—Å—Ç—Ä–∞—è","–æ—Å—Ç—Ä—ã–π","—Ä–µ–∑–∫–∞—è","—Ä–µ–∂—É—â–∞—è","–∫–æ–ª—é—â–∞—è","–ø—Ä–æ—Å—Ç—Ä–µ–ª"],
        "Throbbing": ["–ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è","–ø—É–ª—å—Å–∏—Ä—É–µ—Ç","—Å—Ç—É—á–∏—Ç"],
        "Burning": ["–∂–≥—É—á–∞—è","–∂–∂–µ–Ω–∏–µ","–∂–∂—ë—Ç","–∂–∂–µ—Ç"],
        "Pressing": ["–¥–∞–≤—è—â–∞—è","–¥–∞–≤–∏—Ç","—Å–∂–∏–º–∞–µ—Ç","–∂–º—ë—Ç"],
    },
    "en": {
        "Dull": ["dull","aching","ache","sore"],
        "Sharp": ["sharp","stabbing","cutting","knife","shooting","acute"],
        "Throbbing": ["throbbing","pulsating","pounding"],
        "Burning": ["burning","burn","scalding"],
        "Pressing": ["pressing","tight","pressure","squeezing"],
    },
    "uk": {
        "Dull": ["—Ç—É–ø–∏–π","–Ω–∏—é—á–∏–π","–Ω–∏—î","–ª–æ–º–∏—Ç—å"],
        "Sharp": ["–≥–æ—Å—Ç—Ä–∏–π","—Ä—ñ–∑–∫–∏–π","–∫–æ–ª—é—á–∏–π","–Ω—ñ–∂","–ø—Ä–æ—Å—Ç—Ä—ñ–ª"],
        "Throbbing": ["–ø—É–ª—å—Å—ñ–≤–Ω–∏–π","—Å—Ç—É–∫–∞—î","—Ç—Ä–µ–º—Ç–∏—Ç—å"],
        "Burning": ["–ø–µ–∫—É—á–∏–π","–ø–µ—á—ñ–Ω–Ω—è"],
        "Pressing": ["—Ç–∏—Å–Ω—É—á–∏–π","—Ç–∏—Å–Ω–µ","—Å—Ç–∏—Å–∫–∞—î","–¥–∞–≤–∏—Ç—å"],
    },
    "es": {
        "Dull": ["sordo","sorda"],
        "Sharp": ["agudo","aguda","punzante","cortante"],
        "Throbbing": ["palpitante","puls√°til","latente"],
        "Burning": ["ardor","ardiente","quemaz√≥n"],
        "Pressing": ["opresivo","opresi√≥n","aprieta"],
    },
}

DUR_PATTERNS = {
    "ru": r"(\d+)\s*(–º–∏–Ω|–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|—Å—É—Ç|–¥–Ω|–¥–Ω–µ–π|–Ω–µ–¥|–Ω–µ–¥–µ–ª)",
    "en": r"(\d+)\s*(min|mins|minute|minutes|hour|hours|day|days|week|weeks)",
    "uk": r"(\d+)\s*(—Ö–≤|—Ö–≤–∏–ª–∏–Ω|–≥–æ–¥|–≥–æ–¥–∏–Ω|–¥–Ω|–¥–Ω—ñ–≤|—Ç–∏–∂–¥|—Ç–∏–∂–Ω—ñ–≤)",
    "es": r"(\d+)\s*(min|minutos|minuto|hora|horas|d√≠a|d√≠as|semana|semanas)",
}

SEVERITY_PATTERNS = [
    r"\b([0-9]|10)\s*/\s*10\b",
    r"\b–Ω–∞\s*([0-9]|10)\b",
    r"\b([0-9]|10)\s*–∏–∑\s*10\b",
    r"\b([0-9]|10)\b",
]

def _match_from_map(text: str, mapping: dict[str, list[str]]) -> str | None:
    tl = text.lower()
    for canon, syns in mapping.items():
        for s in syns:
            if s in tl:
                return canon
    return None

def _match_duration(text: str, lang: str) -> str | None:
    m = re.search(DUR_PATTERNS.get(lang, ""), text.lower())
    if not m: return None
    num, unit = m.group(1), m.group(2)
    return f"{num} {unit}"

def _match_severity(text: str) -> int | None:
    tl = text.lower()
    for pat in SEVERITY_PATTERNS:
        m = re.search(pat, tl)
        if m:
            try:
                val = int(m.group(1))
                if 0 <= val <= 10:
                    return val
            except Exception:
                pass
    return None

def extract_slots(text: str, lang: str) -> dict:
    slots = {}
    if not text: return slots
    loc = _match_from_map(text, LOC_SYNS.get(lang, {}))
    if loc: slots["loc"] = loc
    kind = _match_from_map(text, KIND_SYNS.get(lang, {}))
    if kind: slots["kind"] = kind
    dur = _match_duration(text, lang)
    if dur: slots["duration"] = dur
    sev = _match_severity(text)
    if sev is not None: slots["severity"] = sev
    return slots

# =========================
# Sheets helpers
# =========================
def utcnow(): return datetime.now(timezone.utc)
def iso(dt: datetime | None) -> str:
    if not dt: return ""
    return dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def users_get_row_index(user_id: int) -> int | None:
    vals = ws_users.get_all_records()
    for i, row in enumerate(vals, start=2):
        if str(row.get("user_id")) == str(user_id):
            return i
    return None

def users_get(user_id: int) -> dict:
    vals = ws_users.get_all_records()
    for row in vals:
        if str(row.get("user_id")) == str(user_id):
            return row
    return {}

def users_upsert(user_id: int, username: str, lang: str):
    idx = users_get_row_index(user_id)
    row = [str(user_id), username or "", lang, "no", "0", "", "no"]
    if idx:
        ws_users.update(f"A{idx}:G{idx}", [row])
    else:
        ws_users.append_row(row)

def users_set(user_id: int, field: str, value: str):
    idx = users_get_row_index(user_id)
    if not idx: return
    headers = ws_users.row_values(1)
    if field in headers:
        col = headers.index(field) + 1
        ws_users.update_cell(idx, col, value)

def episode_create(user_id: int, topic: str, baseline_severity: int, red_flags: str) -> str:
    eid = f"{user_id}-{uuid.uuid4().hex[:8]}"
    now = iso(utcnow())
    ws_episodes.append_row([
        eid, str(user_id), topic, now,
        str(baseline_severity), red_flags, "0", "<=3/10",
        "", "", "open", now, ""
    ])
    return eid

def episode_find_open(user_id: int) -> dict | None:
    vals = ws_episodes.get_all_records()
    for row in vals:
        if str(row.get("user_id")) == str(user_id) and row.get("status") == "open":
            return row
    return None

def episode_set(eid: str, field: str, value: str):
    vals = ws_episodes.get_all_values()
    headers = vals[0]
    if field not in headers: return
    col = headers.index(field) + 1
    for i in range(2, len(vals) + 1):
        if ws_episodes.cell(i, 1).value == eid:
            ws_episodes.update_cell(i, col, value)
            ws_episodes.update_cell(i, headers.index("last_update") + 1, iso(utcnow()))
            return

def schedule_from_sheet_on_start(app):
    vals = ws_episodes.get_all_records()
    now = utcnow()
    for row in vals:
        if row.get("status") != "open": continue
        eid = row.get("episode_id")
        uid = int(row.get("user_id"))
        nca = row.get("next_checkin_at") or ""
        if not nca: continue
        try:
            dt = datetime.strptime(nca, "%Y-%m-%d %H:%M:%S%z")
        except Exception:
            continue
        delay = (dt - now).total_seconds()
        if delay < 60: delay = 60
        app.job_queue.run_once(job_checkin, when=delay, data={"user_id": uid, "episode_id": eid})

# =========================
# UI helpers
# =========================
TOPIC_KEYS = {
    "en": {"Pain": "pain", "Throat/Cold": "throat", "Sleep": "sleep", "Stress": "stress", "Digestion": "digestion", "Energy": "energy"},
    "ru": {"–ë–æ–ª—å": "pain", "–ì–æ—Ä–ª–æ/–ø—Ä–æ—Å—Ç—É–¥–∞": "throat", "–°–æ–Ω": "sleep", "–°—Ç—Ä–µ—Å—Å": "stress", "–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ": "digestion", "–≠–Ω–µ—Ä–≥–∏—è": "energy"},
    "uk": {"–ë—ñ–ª—å": "pain", "–ì–æ—Ä–ª–æ/–∑–∞—Å—Ç—É–¥–∞": "throat", "–°–æ–Ω": "sleep", "–°—Ç—Ä–µ—Å": "stress", "–¢—Ä–∞–≤–ª–µ–Ω–Ω—è": "digestion", "–ï–Ω–µ—Ä–≥—ñ—è": "energy"},
    "es": {"Dolor": "pain", "Garganta/Resfriado": "throat", "Sue√±o": "sleep", "Estr√©s": "stress", "Digesti√≥n": "digestion", "Energ√≠a": "energy"},
}

def main_menu(lang: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([T[lang]["menu"]], resize_keyboard=True)

def inline_kb_for_step(lang: str, step: int):
    if step == 1:
        labels = T[lang]["triage_pain_q1_opts"]
    elif step == 2:
        labels = T[lang]["triage_pain_q2_opts"]
    elif step == 3:
        labels = T[lang]["triage_pain_q3_opts"]
    elif step == 5:
        labels = T[lang]["triage_pain_q5_opts"]
    else:
        return None
    per_row = 3 if len(labels) >= 6 else 2
    rows = []
    for i in range(0, len(labels), per_row):
        row = [
            InlineKeyboardButton(text=labels[j], callback_data=f"pain|s|{step}|{j}")
            for j in range(i, min(i + per_row, len(labels)))
        ]
        rows.append(row)
    return InlineKeyboardMarkup(rows)

def inline_kb_numbers_0_10(prefix: str) -> InlineKeyboardMarkup:
    nums = [str(i) for i in range(0, 11)]
    rows, row = [], []
    for i, n in enumerate(nums, start=1):
        row.append(InlineKeyboardButton(n, callback_data=f"{prefix}|{n}"))
        if i % 6 == 0:
            rows.append(row); row = []
    if row: rows.append(row)
    return InlineKeyboardMarkup(rows)

def inline_kb_accept_with_feedback(lang: str, eid: str) -> InlineKeyboardMarkup:
    acc = T[lang]["accept_opts"]
    rows = [
        [
            InlineKeyboardButton(acc[0], callback_data=f"plan|accept|yes|{eid}"),
            InlineKeyboardButton(acc[1], callback_data=f"plan|accept|later|{eid}"),
            InlineKeyboardButton(acc[2], callback_data=f"plan|accept|no|{eid}"),
        ],
        [
            InlineKeyboardButton(t(lang,"fb_like"), callback_data=f"fb|like|plan|{eid}"),
            InlineKeyboardButton(t(lang,"fb_dislike"), callback_data=f"fb|dislike|plan|{eid}"),
            InlineKeyboardButton(t(lang,"fb_write"), callback_data=f"fb|write|plan|{eid}"),
        ]
    ]
    return InlineKeyboardMarkup(rows)

def inline_kb_remind(lang: str, eid: str) -> InlineKeyboardMarkup:
    opts = T[lang]["remind_opts"]
    rows = [
        [
            InlineKeyboardButton(opts[0], callback_data=f"plan|remind|4h|{eid}"),
            InlineKeyboardButton(opts[1], callback_data=f"plan|remind|evening|{eid}"),
        ],
        [
            InlineKeyboardButton(opts[2], callback_data=f"plan|remind|morning|{eid}"),
            InlineKeyboardButton(opts[3], callback_data=f"plan|remind|none|{eid}"),
        ]
    ]
    return InlineKeyboardMarkup(rows)

def inline_kb_confirm(lang: str) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(t(lang,"confirm_ok"), callback_data="confirm|ok")],
        [
            InlineKeyboardButton(t(lang,"confirm_change_loc"), callback_data="confirm|change|loc"),
            InlineKeyboardButton(t(lang,"confirm_change_kind"), callback_data="confirm|change|kind"),
        ],
        [
            InlineKeyboardButton(t(lang,"confirm_change_duration"), callback_data="confirm|change|duration"),
            InlineKeyboardButton(t(lang,"confirm_change_severity"), callback_data="confirm|change|severity"),
        ],
    ]
    return InlineKeyboardMarkup(rows)

def inline_kb_zone(lang: str, zone_key: str, idx: int) -> InlineKeyboardMarkup:
    y = t(lang, "ans_yes"); n = t(lang, "ans_no"); m = t(lang, "ans_maybe")
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(y, callback_data=f"zone|{zone_key}|{idx}|yes"),
            InlineKeyboardButton(n, callback_data=f"zone|{zone_key}|{idx}|no"),
            InlineKeyboardButton(m, callback_data=f"zone|{zone_key}|{idx}|maybe"),
        ]
    ])

async def send_step_question(message, lang: str, step: int):
    key = {1: "triage_pain_q1", 2: "triage_pain_q2", 3: "triage_pain_q3", 4: "triage_pain_q4", 5: "triage_pain_q5"}[step]
    if step in {1, 2, 3, 5}:
        await message.reply_text(t(lang, key), reply_markup=inline_kb_for_step(lang, step))
    elif step == 4:
        await message.reply_text(t(lang, key), reply_markup=inline_kb_numbers_0_10("pain|sev"))

# =========================
# Plans / Hypotheses (–ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞)
# =========================
def build_hypotheses(lang: str, ans: dict, zone: dict) -> list[tuple[str, float, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–∏–ø–æ—Ç–µ–∑ (name, score, because)
    –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–æ–Ω–µ.
    """
    loc = (ans.get("loc") or "").lower()
    kind = (ans.get("kind") or "").lower()
    duration = (ans.get("duration") or "").lower()
    sev = int(ans.get("severity", 5))
    zq = zone.get("q", {}) if zone else {}
    H = []

    def add(name, score, because):
        H.append((name, float(score), because))

    # Head
    if "head" in loc or "–≥–æ–ª–æ–≤–∞" in loc or "cabeza" in loc:
        # migraine
        if "throbb" in kind or "–ø—É–ª—å—Å" in kind:
            add("Migraine-like", 0.7 + 0.05*(sev>=6), "Throbbing + moderate/severe")
        # tension
        if "press" in kind or "tight" in kind or "–¥–∞–≤" in kind:
            add("Tension-type", 0.6, "Pressing/tight character")
        # sinus
        if "3‚Äì24" in duration or ">1 day" in duration or ">1 –¥–Ω—è" in duration:
            add("Tension/sinus", 0.4, "Lasts many hours")

        # zone answers
        if zq.get(1) == "yes":  # thunderclap
            add("Urgent risk pattern", 1.0, "Sudden worst-ever ‚Üí escalate")
        if zq.get(2) == "yes":  # neuro
            add("Neurologic red flag", 1.0, "Speech/vision/weakness ‚Üí escalate")
        if zq.get(3) == "yes":  # neck stiffness/fever
            add("Infection/meningeal concern", 0.9, "Neck stiffness/fever")

    # Back
    if "back" in loc or "—Å–ø–∏–Ω–∞" in loc or "espalda" in loc:
        if "shoot" in kind or "–ø—Ä–æ—Å—Ç—Ä–µ–ª" in kind or zq.get(3) == "yes":
            add("Radicular pain (sciatica-like)", 0.7, "Shooting below knee/‚Äò–ø—Ä–æ—Å—Ç—Ä–µ–ª‚Äô")
        else:
            add("Mechanical low back pain", 0.6, "Typical pattern without red flags")
        if zq.get(1) == "yes" or zq.get(2) == "yes":
            add("Serious back red flag", 0.95, "Perineal numbness/retention or trauma/fever/cancer")

    # Belly
    if "belly" in loc or "–∂–∏–≤–æ—Ç" in loc or "abdomen" in loc or "vientre" in loc or "stomach" in loc:
        if "vomit" in (ans.get("red","") or "").lower():
            add("Gastroenteritis-like", 0.6, "Nausea/vomiting")
        add("Dyspepsia/gastritis-like", 0.5, "Common benign causes if no red flags")

    # Chest
    if "chest" in loc or "–≥—Ä—É–¥" in loc or "pecho" in loc:
        if zq.get(1) == "yes":
            add("Possible cardiac pattern", 1.0, "Pressure >10min + dyspnea/sweat")
        elif zq.get(2) == "yes":
            add("Pleuritic/musculoskeletal", 0.7, "Worse with breathing/movement/press")
        elif zq.get(3) == "yes":
            add("Respiratory infection", 0.6, "Cough/fever")

    # Throat
    if "throat" in loc or "–≥–æ—Ä–ª–æ" in loc or "garganta" in loc:
        if zq.get(1) == "yes" and zq.get(2) == "no":
            add("Probable bacterial pharyngitis", 0.6, "Fever + exudate, no cough")
        else:
            add("Viral sore throat", 0.6, "Common viral pattern")

    # Normalize & sort
    H.sort(key=lambda x: x[1], reverse=True)
    return H[:3]

def pain_plan(lang: str, ans: dict, zone: dict, hypotheses: list[tuple[str,float,str]]) -> list[str]:
    red = (ans.get("red") or "").lower()
    # —Å—Ä–æ—á–Ω–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –ø—Ä–∏ —è–≤–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö
    urgent = any(s in red for s in ["fever", "vomit", "weakness", "speech", "vision", "—Ç—Ä–∞–≤–º", "trauma"]) and (ans.get("severity", 0) >= 7)
    # —Ç–∞–∫–∂–µ –ø–æ –≥–∏–ø–æ—Ç–µ–∑–∞–º
    for name, score, because in hypotheses:
        if "Urgent" in name or "cardiac" in name or "Neurologic" in name or "red flag" in name:
            urgent = True
    if urgent:
        return {
            "ru": ["‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ–π —É–≥—Ä–æ–∑—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â—å—é."],
            "uk": ["‚ö†Ô∏è –Ñ –æ–∑–Ω–∞–∫–∏ –º–æ–∂–ª–∏–≤–æ—ó –∑–∞–≥—Ä–æ–∑–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –ø–æ –º–µ–¥–∏—á–Ω—É –¥–æ–ø–æ–º–æ–≥—É."],
            "en": ["‚ö†Ô∏è Some answers suggest urgent risks. Please seek medical care as soon as possible."],
            "es": ["‚ö†Ô∏è Hay se√±ales de posible urgencia. Por favor busca atenci√≥n m√©dica lo antes posible."],
        }[lang]

    base = {
        "ru": [
            "1) –í–æ–¥–∞ 400‚Äì600 –º–ª –∏ 15‚Äì20 –º–∏–Ω—É—Ç –ø–æ–∫–æ—è –≤ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ.",
            "2) –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –∏–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ 1 —Ä–∞–∑ —Å –µ–¥–æ–π.",
            "3) –ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É, —Å–Ω–∏–∑–∏—Ç—å —ç–∫—Ä–∞–Ω—ã –Ω–∞ 30‚Äì60 –º–∏–Ω—É—Ç.",
            "–¶–µ–ª—å: –∫ –≤–µ—á–µ—Ä—É –±–æ–ª—å ‚â§3/10."
        ],
        "uk": [
            "1) 400‚Äì600 –º–ª –≤–æ–¥–∏ —Ç–∞ 15‚Äì20 —Ö–≤ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É —É —Ç–∏—Ö–æ–º—É –º—ñ—Å—Ü—ñ.",
            "2) –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω—å ‚Äî —ñ–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ 1 —Ä–∞–∑ —ñ–∑ —ó–∂–µ—é.",
            "3) –ü—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É, –∑–º–µ–Ω—à–∏—Ç–∏ –µ–∫—Ä–∞–Ω–∏ –Ω–∞ 30‚Äì60 —Ö–≤.",
            "–ú–µ—Ç–∞: –¥–æ –≤–µ—á–æ—Ä–∞ –±—ñ–ª—å ‚â§3/10."
        ],
        "en": [
            "1) Drink 400‚Äì600 ml of water and rest 15‚Äì20 minutes in a quiet place.",
            "2) If no contraindications ‚Äî ibuprofen 200‚Äì400 mg once with food.",
            "3) Air the room; reduce screen time for 30‚Äì60 minutes.",
            "Target: by evening pain ‚â§3/10."
        ],
        "es": [
            "1) Bebe 400‚Äì600 ml de agua y descansa 15‚Äì20 min en un lugar tranquilo.",
            "2) Si no hay contraindicaciones ‚Äî ibuprofeno 200‚Äì400 mg una vez con comida.",
            "3) Ventila la habitaci√≥n; reduce pantallas 30‚Äì60 min.",
            "Objetivo: por la tarde dolor ‚â§3/10."
        ],
    }
    # –õ—ë–≥–∫–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ —Å–ø–∏–Ω–∞ ‚Üí –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–ø–ª–æ/—Ä–∞—Å—Ç—è–∂–∫–∞; –≥–æ—Ä–ª–æ ‚Üí —Ç—ë–ø–ª—ã–µ –Ω–∞–ø–∏—Ç–∫–∏/–ø–æ–ª–æ—Å–∫–∞–Ω–∏–µ
    loc = (ans.get("loc") or "").lower()
    if "back" in loc or "—Å–ø–∏–Ω–∞" in loc or "espalda" in loc:
        extra = {
            "ru": ["4) –¢—ë–ø–ª—ã–π –∫–æ–º–ø—Ä–µ—Å—Å 10‚Äì15 –º–∏–Ω 2‚Äì3 —Ä–∞–∑–∞/–¥–µ–Ω—å, –º—è–≥–∫–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è/—Ä–∞—Å—Ç—è–∂–∫–∞."],
            "uk": ["4) –¢–µ–ø–ª–∏–π –∫–æ–º–ø—Ä–µ—Å 10‚Äì15 —Ö–≤ 2‚Äì3 —Ä/–¥–µ–Ω—å, –º‚Äô—è–∫–∞ –º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—è/—Ä–æ–∑—Ç—è–∂–∫–∞."],
            "en": ["4) Warm compress 10‚Äì15 min 2‚Äì3√ó/day, gentle mobility/stretching."],
            "es": ["4) Compresa tibia 10‚Äì15 min 2‚Äì3√ó/d√≠a, movilidad/estiramientos suaves."],
        }[lang]
        return base[lang] + extra
    if "throat" in loc or "–≥–æ—Ä–ª–æ" in loc or "garganta" in loc:
        extra = {
            "ru": ["4) –¢—ë–ø–ª–æ–µ –ø–∏—Ç—å—ë, –ø–æ–ª–æ—Å–∫–∞–Ω–∏—è —Å–æ–ª–µ–≤—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º 3‚Äì4 —Ä–∞–∑–∞/–¥–µ–Ω—å."],
            "uk": ["4) –¢–µ–ø–ª—ñ –Ω–∞–ø–æ—ó, –ø–æ–ª–æ—Å–∫–∞–Ω–Ω—è —Å–æ–ª—å–æ–≤–∏–º —Ä–æ–∑—á–∏–Ω–æ–º 3‚Äì4 —Ä/–¥–µ–Ω—å."],
            "en": ["4) Warm fluids; saline gargles 3‚Äì4√ó/day."],
            "es": ["4) L√≠quidos tibios; g√°rgaras salinas 3‚Äì4√ó/d√≠a."],
        }[lang]
        return base[lang] + extra
    return base[lang]

# =========================
# Jobs (check-ins)
# =========================
async def job_checkin(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data or {}
    uid = data.get("user_id")
    eid = data.get("episode_id")
    if not uid or not eid: return
    u = users_get(uid)
    if (u.get("paused") or "").lower() == "yes": return
    lang = u.get("lang") or "en"
    try:
        await context.bot.send_message(
            chat_id=uid,
            text=t(lang, "checkin_ping"),
            reply_markup=inline_kb_numbers_0_10("checkin|sev"),
        )
        episode_set(eid, "next_checkin_at", "")
    except Exception as e:
        logging.error(f"job_checkin send error: {e}")

# =========================
# Commands
# =========================
async def on_startup(app):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        logging.info("Webhook cleared")
    except Exception:
        pass
    schedule_from_sheet_on_start(app)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = users_get(user.id).get("lang")
    if not lang:
        txt = (update.message.text or "").strip() if update.message else ""
        cand = None
        if detect:
            try:
                cand = detect(txt) if txt else None
            except Exception:
                cand = None
        lang = norm_lang(cand or getattr(user, "language_code", None))
        users_upsert(user.id, user.username or "", lang)
    await update.message.reply_text(t(lang, "welcome"), reply_markup=main_menu(lang))
    u = users_get(user.id)
    if (u.get("consent") or "").lower() not in {"yes","no"}:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(t(lang,"yes"),callback_data="consent|yes"),
                                    InlineKeyboardButton(t(lang,"no"),callback_data="consent|no")]])
        await update.message.reply_text(t(lang, "ask_consent"), reply_markup=kb)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang, "help"))

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang, "privacy"))

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    users_set(uid, "paused", "yes")
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang, "paused_on"))

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    users_set(uid, "paused", "no")
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang, "paused_off"))

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    idx = users_get_row_index(uid)
    if idx:
        ws_users.delete_rows(idx)
    vals = ws_episodes.get_all_values()
    to_delete = []
    for i in range(2, len(vals)+1):
        if ws_episodes.cell(i,2).value == str(uid):
            to_delete.append(i)
    for j, row_i in enumerate(to_delete):
        ws_episodes.delete_rows(row_i - j)
    lang = norm_lang(getattr(update.effective_user, "language_code", None))
    await update.message.reply_text(t(lang, "deleted"), reply_markup=ReplyKeyboardRemove())

async def cmd_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
        await update.message.reply_text(t(lang, "help_lang"))
        return
    candidate = norm_lang(context.args[0])
    if candidate not in SUPPORTED:
        cur = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
        await update.message.reply_text(t(cur, "help_lang"))
        return
    users_set(uid, "lang", candidate)
    await update.message.reply_text(t(candidate, "lang_set"), reply_markup=main_menu(candidate))

async def cmd_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    s = sessions.get(uid, {})
    if s.get("awaiting_comment"):
        s["awaiting_comment"] = False
        s["feedback_context"] = ""
        lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
        await update.message.reply_text(t(lang, "skip_ok"))
    else:
        lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
        await update.message.reply_text(t(lang, "use_buttons"))

async def cmd_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(
        t(lang, "fb_prompt"),
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton(t(lang,"fb_like"), callback_data="fb|like|general|"),
                InlineKeyboardButton(t(lang,"fb_dislike"), callback_data="fb|dislike|general|"),
                InlineKeyboardButton(t(lang,"fb_write"), callback_data="fb|write|general|"),
            ]
        ])
    )

# =========================
# Auto language switch & scope filter
# =========================
GREET_WORDS = {
    "en": {"hi", "hello", "hey"},
    "ru": {"–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Ö–∞–π"},
    "uk": {"–ø—Ä–∏–≤—ñ—Ç", "–≤—ñ—Ç–∞—é"},
    "es": {"hola", "buenas"},
}

def maybe_autoswitch_lang(uid: int, text: str, cur_lang: str) -> str:
    if not text or text.startswith("/"):
        return cur_lang
    tl = text.strip().lower()
    for lang_code, words in GREET_WORDS.items():
        if tl in words:
            if lang_code != cur_lang:
                users_set(uid, "lang", lang_code)
            return lang_code
    has_lat = bool(re.search(r"[A-Za-z]", text))
    has_cyr = bool(re.search(r"[–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î]", text))
    if has_lat and not has_cyr and cur_lang != "en":
        users_set(uid, "lang", "en")
        return "en"
    if detect:
        try:
            cand = norm_lang(detect(text))
            if cand in SUPPORTED and cand != cur_lang and len(tl) >= 2:
                users_set(uid, "lang", cand)
                return cand
        except Exception:
            pass
    return cur_lang

CARE_KEYWORDS = {
    "en": {
        "pain","headache","throat","cough","cold","fever","back","belly","stomach","chest",
        "sleep","insomnia","stress","anxiety","energy","fatigue","digestion","diarrhea","constipation",
        "nausea","vomit","symptom","medicine","ibuprofen","health","wellness"
    },
    "ru": {
        "–±–æ–ª—å","–±–æ–ª–∏—Ç","–≥–æ–ª–æ–≤–∞","–≥–æ–ª–æ–≤–Ω–∞—è","–≥–æ—Ä–ª–æ","–∫–∞—à–µ–ª—å","–ø—Ä–æ—Å—Ç—É–¥–∞","—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞","–∂–∞—Ä",
        "—Å–ø–∏–Ω–∞","–∂–∏–≤–æ—Ç","–∂–µ–ª—É–¥–æ–∫","–≥—Ä—É–¥—å","—Å–æ–Ω","–±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞","—Å—Ç—Ä–µ—Å—Å","—Ç—Ä–µ–≤–æ–≥–∞","—ç–Ω–µ—Ä–≥–∏—è","—Å–ª–∞–±–æ—Å—Ç—å",
        "–ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ","–¥–∏–∞—Ä–µ—è","–ø–æ–Ω–æ—Å","–∑–∞–ø–æ—Ä","—Ç–æ—à–Ω–æ—Ç–∞","—Ä–≤–æ—Ç–∞","—Å–∏–º–ø—Ç–æ–º","–∑–¥–æ—Ä–æ–≤—å–µ","–∏–±—É–ø—Ä–æ—Ñ–µ–Ω"
    },
    "uk": {
        "–±—ñ–ª—å","–±–æ–ª–∏—Ç—å","–≥–æ–ª–æ–≤–∞","–≥–æ—Ä–ª–æ","–∫–∞—à–µ–ª—å","–∑–∞—Å—Ç—É–¥–∞","—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞","–∂–∞—Ä","—Å–ø–∏–Ω–∞","–∂–∏–≤—ñ—Ç","—à–ª—É–Ω–æ–∫",
        "–≥—Ä—É–¥–∏","—Å–æ–Ω","–±–µ–∑—Å–æ–Ω–Ω—è","—Å—Ç—Ä–µ—Å","—Ç—Ä–∏–≤–æ–≥–∞","–µ–Ω–µ—Ä–≥—ñ—è","—Å–ª–∞–±–∫—ñ—Å—Ç—å","—Ç—Ä–∞–≤–ª–µ–Ω–Ω—è","–¥—ñ–∞—Ä–µ—è","–∑–∞–ø–æ—Ä",
        "–Ω—É–¥–æ—Ç–∞","–±–ª—é–≤–∞–Ω–Ω—è","—Å–∏–º–ø—Ç–æ–º","–∑–¥–æ—Ä–æ–≤'—è","—ñ–±—É–ø—Ä–æ—Ñ–µ–Ω"
    },
    "es": {
        "dolor","cabeza","garganta","tos","resfriado","fiebre","espalda","vientre","est√≥mago","pecho",
        "sue√±o","insomnio","estr√©s","ansiedad","energ√≠a","cansancio","digesti√≥n","diarrea","estre√±imiento",
        "n√°usea","v√≥mito","s√≠ntoma","salud","ibuprofeno"
    },
}
def is_care_related(lang: str, text: str) -> bool:
    tl = (text or "").lower()
    words = CARE_KEYWORDS.get(lang, CARE_KEYWORDS["en"])
    if tl in GREET_WORDS.get(lang, set()) or tl in {"hi","hello","hola","–ø—Ä–∏–≤–µ—Ç","–ø—Ä–∏–≤—ñ—Ç"}:
        return True
    return any(w in tl for w in words)

# =========================
# LLM hybrid parser (JSON ‚Üí —Å–ª–æ—Ç—ã)
# =========================
def parse_with_llm(text: str, lang_hint: str) -> dict:
    if not oai or not text:
        return {}
    sys = (
        "You are a triage extractor for a health self-care assistant. "
        "Extract fields from user's text. Return ONLY a compact JSON object with keys: "
        "intent, loc, kind, duration, severity, red_flags, lang, confidence. "
        "Allowed values: intent in [pain, throat, sleep, stress, digestion, energy]; "
        "loc in [Head, Throat, Back, Belly, Chest, Other]; "
        "kind in [Dull, Sharp, Throbbing, Burning, Pressing]; "
        "duration in [\"<3h\",\"3‚Äì24h\",\">1 day\",\">1 week\"]; "
        "severity integer 0..10; red_flags subset of "
        "[\"High fever\",\"Vomiting\",\"Weakness/numbness\",\"Speech/vision issues\",\"Trauma\"]. "
        "lang in [ru,en,uk,es]. confidence 0..1. "
        "If unknown, use nulls. Respond with JSON only."
    )
    try:
        resp = oai.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.0,
            max_tokens=200,
            messages=[
                {"role": "system", "content": sys},
                {"role": "user", "content": f"User text (lang hint {lang_hint}): {text}"},
            ],
        )
        raw = (resp.choices[0].message.content or "").strip()
        m = re.search(r"\{[\s\S]*\}", raw)
        data = json.loads(m.group(0)) if m else json.loads(raw)
        if not isinstance(data, dict):
            return {}
        return data
    except Exception as e:
        logging.warning(f"LLM parse failed: {e}")
        return {}

def normalize_llm_slots(data: dict, lang: str) -> dict:
    slots = {}
    if not data: return slots
    if data.get("loc") in {"Head","Throat","Back","Belly","Chest","Other"}:
        slots["loc"] = data["loc"]
    if data.get("kind") in {"Dull","Sharp","Throbbing","Burning","Pressing"}:
        slots["kind"] = data["kind"]
    if data.get("duration") in {"<3h","3‚Äì24h",">1 day",">1 week"}:
        slots["duration"] = data["duration"]
    sev = data.get("severity")
    if isinstance(sev, int) and 0 <= sev <= 10:
        slots["severity"] = sev
    r = data.get("red_flags") or []
    if isinstance(r, list) and r:
        allowed = {"High fever","Vomiting","Weakness/numbness","Speech/vision issues","Trauma","None"}
        slots["red"] = next((x for x in r if x in allowed), None) or "None"
    return slots

# =========================
# Topic detection
# =========================
def detect_or_choose_topic(lang: str, text: str) -> str | None:
    tl = text.lower().strip()
    if any(w in tl for w in ["–±–æ–ª–∏—Ç","–±–æ–ª—å","hurt","pain","dolor","–±–æ–ª—é"]): return "pain"
    if any(w in tl for w in ["–≥–æ—Ä–ª–æ","throat","garganta","–ø—Ä–æ—Å—Ç—É–¥","cold"]): return "throat"
    if any(w in tl for w in ["—Å–æ–Ω","sleep","sue√±"]): return "sleep"
    if any(w in tl for w in ["—Å—Ç—Ä–µ—Å—Å","stress","estr√©s"]): return "stress"
    if any(w in tl for w in ["–∂–∏–≤–æ—Ç","–∂–µ–ª—É–¥","–∂–∏–≤—ñ—Ç","—Å—Ç—É–ª","–ø–æ–Ω–æ—Å","–¥–∏–∞—Ä","digest","est√≥mago","barriga","abdomen"]): return "digestion"
    if any(w in tl for w in ["—ç–Ω–µ—Ä–≥","–µ–Ω–µ—Ä–≥","energy","fatigue","—Å–ª–∞–±–æ—Å—Ç—å","energ√≠a","cansancio"]): return "energy"
    for label, key in TOPIC_KEYS.get(lang, TOPIC_KEYS["en"]).items():
        if text.strip() == label: return key
    return None

# =========================
# FLOW HELPERS
# =========================
def next_missing_step(ans: dict) -> int:
    if "loc" not in ans: return 1
    if "kind" not in ans: return 2
    if "duration" not in ans: return 3
    if "severity" not in ans: return 4
    if "red" not in ans: return 5
    return 0  # all present

def render_confirm(lang: str, ans: dict) -> str:
    def val(k, default="‚Äî"):
        v = ans.get(k)
        return str(v) if v not in [None, ""] else default
    parts = [
        t(lang, "confirm_title"),
        t(lang, "confirm_loc").format(loc=val("loc","‚Äî")),
        t(lang, "confirm_kind").format(kind=val("kind","‚Äî")),
        t(lang, "confirm_duration").format(duration=val("duration","‚Äî")),
        t(lang, "confirm_severity").format(severity=val("severity","‚Äî")),
    ]
    return "\n".join(parts)

def zone_key_from_loc(ans_loc: str) -> str:
    if not ans_loc: return "general"
    tl = ans_loc.lower()
    if "head" in tl or "–≥–æ–ª–æ–≤" in tl or "cabeza" in tl: return "head"
    if "back" in tl or "—Å–ø–∏–Ω–∞" in tl or "espalda" in tl or "–ø–æ—è—Å" in tl: return "back"
    if "belly" in tl or "–∂–∏–≤" in tl or "abdomen" in tl or "stomach" in tl or "vientre" in tl: return "belly"
    if "chest" in tl or "–≥—Ä—É–¥" in tl or "pecho" in tl: return "chest"
    if "throat" in tl or "–≥–æ—Ä–ª–æ" in tl or "garganta" in tl: return "throat"
    return "general"

def zone_question_text(lang: str, zone_key: str, idx: int) -> str:
    key = f"zone_{zone_key}_q{idx}"
    return t(lang, key)

# =========================
# Callback handler
# =========================
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    uid = q.from_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(q.from_user,"language_code",None))
    s = sessions.setdefault(uid, {})

    if data.startswith("consent|"):
        users_set(uid, "consent", "yes" if data.endswith("|yes") else "no")
        try:
            await q.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass
        await q.message.reply_text(t(lang, "thanks"))
        return

    # Feedback
    if data.startswith("fb|"):
        _, action, context_name, eid = (data.split("|") + ["","","",""])[:4]
        name = context_name or "general"
        rating = ""
        comment = ""
        if action == "like":
            rating = "1"
            ws_feedback.append_row([datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"), str(uid), name, q.from_user.username or "", rating, comment])
            await q.message.reply_text(t(lang, "fb_thanks"))
        elif action == "dislike":
            rating = "0"
            ws_feedback.append_row([datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"), str(uid), name, q.from_user.username or "", rating, comment])
            await q.message.reply_text(t(lang, "fb_thanks"))
        elif action == "write":
            s["awaiting_comment"] = True
            s["feedback_context"] = name
            await q.message.reply_text(t(lang, "comment_prompt"))
        try:
            await q.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass
        sessions[uid] = s
        return

    # Confirm flow
    if data.startswith("confirm|"):
        parts = data.split("|")
        if parts[1] == "ok":
            # move to red flags
            s["flow"] = "redflags"
            sessions[uid] = s
            await q.message.reply_text(t(lang, "triage_pain_q5"), reply_markup=inline_kb_for_step(lang, 5))
            try:
                await q.edit_message_reply_markup(reply_markup=None)
            except Exception:
                pass
            return
        elif parts[1] == "change":
            field = parts[2] if len(parts) > 2 else ""
            # ask specific step
            if field == "loc":
                await q.message.reply_text(t(lang,"triage_pain_q1"), reply_markup=inline_kb_for_step(lang,1))
            elif field == "kind":
                await q.message.reply_text(t(lang,"triage_pain_q2"), reply_markup=inline_kb_for_step(lang,2))
            elif field == "duration":
                await q.message.reply_text(t(lang,"triage_pain_q3"), reply_markup=inline_kb_for_step(lang,3))
            elif field == "severity":
                await q.message.reply_text(t(lang,"triage_pain_q4"), reply_markup=inline_kb_numbers_0_10("pain|sev"))
            return

    # Pain inline selections (loc/kind/duration/red)
    if data.startswith("pain|s|"):
        try:
            _, _, step_str, idx_str = data.split("|")
            step = int(step_str)
            idx = int(idx_str)
        except Exception:
            return
        ans = s.setdefault("answers", {})
        labels_map = {
            1: T[lang]["triage_pain_q1_opts"],
            2: T[lang]["triage_pain_q2_opts"],
            3: T[lang]["triage_pain_q3_opts"],
            5: T[lang]["triage_pain_q5_opts"],
        }
        labels = labels_map.get(step, [])
        if idx < 0 or idx >= len(labels):
            return
        label = labels[idx]

        if step == 1:
            ans["loc"] = label
            # after picking loc during confirm-change ‚Üí re-render confirm
            if s.get("flow") in {"confirm","collect"}:
                text = render_confirm(lang, ans)
                await q.message.reply_text(text, reply_markup=inline_kb_confirm(lang))
        elif step == 2:
            ans["kind"] = label
            if s.get("flow") in {"confirm","collect"}:
                text = render_confirm(lang, ans)
                await q.message.reply_text(text, reply_markup=inline_kb_confirm(lang))
        elif step == 3:
            ans["duration"] = label
            if s.get("flow") in {"confirm","collect"}:
                text = render_confirm(lang, ans)
                await q.message.reply_text(text, reply_markup=inline_kb_confirm(lang))
        elif step == 5:
            ans["red"] = label
            # after red flags ‚Üí zone or escalate
            s["flow"] = "zone"
            # If red flag present and not "None" ‚Üí still proceed to zone but plan may escalate later
            zname = zone_key_from_loc(ans.get("loc",""))
            s["zone"] = {"name": zname, "idx": 1, "q": {}}
            # ask zone q1 if exists, else skip to plan
            if zname != "general":
                txt = zone_question_text(lang, zname, 1)
                await q.message.reply_text(txt, reply_markup=inline_kb_zone(lang, zname, 1))
            else:
                # no specific zone ‚Üí go plan directly
                hyps = build_hypotheses(lang, ans, s.get("zone", {}))
                eid = s.get("episode_id")
                if not eid:
                    eid = episode_create(uid, "pain", int(ans.get("severity",5)), ans.get("red","None"))
                    s["episode_id"] = eid
                plan_lines = pain_plan(lang, ans, s.get("zone", {}), hyps)
                await q.message.reply_text(f"{t(lang,'plan_header')}\n" + "\n".join(plan_lines))
                await q.message.reply_text(t(lang,"plan_accept"), reply_markup=inline_kb_accept_with_feedback(lang, eid))
                s["flow"] = "accept_wait"

        sessions[uid] = s
        try:
            await q.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass
        return

    if data.startswith("pain|sev|"):
        n = int(data.split("|")[-1])
        ans = s.setdefault("answers", {})
        ans["severity"] = n
        sessions[uid] = s
        try:
            await q.edit_message_text(f"{t(lang, 'triage_pain_q4')}\n‚Ä¢ {n} ‚úÖ")
        except Exception:
            pass
        # If we are in confirm/collect ‚Üí re-render confirm; else if we were asking sev during flow, continue
        if s.get("flow") in {"confirm","collect"}:
            text = render_confirm(lang, ans)
            await q.message.reply_text(text, reply_markup=inline_kb_confirm(lang))
        else:
            await send_step_question(q.message, lang, 5)
        return

    if data.startswith("checkin|sev|"):
        try:
            val = int(data.split("|")[-1])
        except Exception:
            return
        ep = episode_find_open(uid)
        if not ep:
            await q.message.reply_text(t(lang, "thanks"), reply_markup=main_menu(lang))
            return
        eid = ep.get("episode_id")
        episode_set(eid, "notes", f"checkin:{val}")
        if val <= 3:
            await q.message.reply_text(t(lang, "checkin_better"), reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(t(lang,"fb_like"), callback_data="fb|like|checkin|"),
                 InlineKeyboardButton(t(lang,"fb_dislike"), callback_data="fb|dislike|checkin|"),
                 InlineKeyboardButton(t(lang,"fb_write"), callback_data="fb|write|checkin|"),]
            ]))
            episode_set(eid, "status", "resolved")
        else:
            await q.message.reply_text(t(lang, "checkin_worse"), reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(t(lang,"fb_like"), callback_data="fb|like|checkin|"),
                 InlineKeyboardButton(t(lang,"fb_dislike"), callback_data="fb|dislike|checkin|"),
                 InlineKeyboardButton(t(lang,"fb_write"), callback_data="fb|write|checkin|"),]
            ]))
        try:
            await q.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass
        return

    # Zone questions
    if data.startswith("zone|"):
        _, zname, idx_str, answ = data.split("|")
        idx = int(idx_str)
        zone = s.setdefault("zone", {"name": zname, "idx": 1, "q": {}})
        zone["name"] = zname
        zone["q"][idx] = answ
        sessions[uid] = s
        try:
            await q.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass

        if idx < 3:
            nxt = idx + 1
            txt = zone_question_text(lang, zname, nxt)
            await q.message.reply_text(txt, reply_markup=inline_kb_zone(lang, zname, nxt))
            zone["idx"] = nxt
            sessions[uid] = s
            return
        else:
            # compute hypotheses + plan
            ans = s.setdefault("answers", {})
            hyps = build_hypotheses(lang, ans, zone)
            # show quick hypotheses with because
            if hyps:
                lines = []
                for name, score, because in hyps:
                    lines.append(f"‚Ä¢ {name} ({int(score*100)}%) ‚Äî {because}")
                await q.message.reply_text("\n".join(lines))
            eid = s.get("episode_id")
            if not eid:
                eid = episode_create(uid, "pain", int(ans.get("severity",5)), ans.get("red","None"))
                s["episode_id"] = eid
            plan_lines = pain_plan(lang, ans, zone, hyps)
            await q.message.reply_text(f"{t(lang,'plan_header')}\n" + "\n".join(plan_lines))
            await q.message.reply_text(t(lang,"plan_accept"), reply_markup=inline_kb_accept_with_feedback(lang, eid))
            s["flow"] = "accept_wait"
            sessions[uid] = s
            return

    # Plan acceptance & remind
    if data.startswith("plan|accept|"):
        _, _, choice, eid = data.split("|")
        if choice == "yes":
            episode_set(eid, "plan_accepted", "1")
            s["flow"] = "remind_wait"
            await q.message.reply_text(t(lang, "remind_when"), reply_markup=inline_kb_remind(lang, eid))
        elif choice == "later":
            episode_set(eid, "plan_accepted", "later")
            s["flow"] = "remind_wait"
            await q.message.reply_text(t(lang, "remind_when"), reply_markup=inline_kb_remind(lang, eid))
        else:
            episode_set(eid, "plan_accepted", "0")
            s["flow"] = "plan"
            await q.message.reply_text(t(lang, "thanks"), reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(t(lang,"fb_like"), callback_data="fb|like|plan|"+eid),
                 InlineKeyboardButton(t(lang,"fb_dislike"), callback_data="fb|dislike|plan|"+eid),
                 InlineKeyboardButton(t(lang,"fb_write"), callback_data="fb|write|plan|"+eid)]
            ]))
        try:
            await q.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass
        sessions[uid] = s
        return

    if data.startswith("plan|remind|"):
        _, _, code, eid = data.split("|")
        urec = users_get(uid)
        tz_off = 0
        try:
            tz_off = int(urec.get("tz_offset") or "0")
        except Exception:
            tz_off = 0
        now_utc = utcnow()
        user_now = now_utc + timedelta(hours=tz_off)
        if code == "4h":
            target_user = user_now + timedelta(hours=4)
        elif code == "evening":
            target_user = user_now.replace(hour=19, minute=0, second=0, microsecond=0)
            if target_user < user_now:
                target_user = target_user + timedelta(days=1)
        elif code == "morning":
            target_user = user_now.replace(hour=9, minute=0, second=0, microsecond=0)
            if target_user < user_now:
                target_user = target_user + timedelta(days=1)
        else:  # none
            target_user = None

        if target_user:
            target_utc = target_user - timedelta(hours=tz_off)
            episode_set(eid, "next_checkin_at", iso(target_utc))
            delay = (target_utc - now_utc).total_seconds()
            if delay < 60: delay = 60
            context.job_queue.run_once(job_checkin, when=delay, data={"user_id": uid, "episode_id": eid})
        await q.message.reply_text(t(lang, "thanks"), reply_markup=main_menu(lang))
        try:
            await q.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass
        s["flow"] = "plan"
        sessions[uid] = s
        return

# =========================
# Triaging: start/collect/confirm
# =========================
async def start_pain_triage(update: Update, lang: str, uid: int):
    sessions[uid] = {"topic": "pain", "flow": "collect", "answers": {}}
    await update.message.reply_text(t(lang, "open_prompt"))

async def proceed_to_confirm(message, lang: str, uid: int):
    s = sessions.setdefault(uid, {})
    ans = s.setdefault("answers", {})
    text = render_confirm(lang, ans)
    s["flow"] = "confirm"
    sessions[uid] = s
    await message.reply_text(text, reply_markup=inline_kb_confirm(lang))

async def continue_collect(update: Update, context: ContextTypes.DEFAULT_TYPE, lang: str, uid: int, text_input: str):
    s = sessions.setdefault(uid, {"topic": "pain", "flow": "collect", "answers": {}})
    ans = s.setdefault("answers", {})

    # LLM-–≥–∏–±—Ä–∏–¥
    llm_data = parse_with_llm(text_input, lang)
    if llm_data and llm_data.get("confidence", 0) >= 0.5:
        ans.update(normalize_llm_slots(llm_data, lang))

    # –ü—Ä–∞–≤–∏–ª–∞
    slots = extract_slots(text_input, lang)
    for k, v in slots.items():
        ans.setdefault(k, v)

    # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –ø—Ä–∏–º–µ—Ä—ã –µ—â—ë —Ä–∞–∑
    if not ans:
        await update.message.reply_text(t(lang, "open_prompt"))
        return

    sessions[uid] = s
    await proceed_to_confirm(update.message, lang, uid)

# =========================
# Text handlers
# =========================
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    text = (update.message.text or "").strip()

    # —è–∑—ã–∫ –∏ –∞–≤—Ç–æ—Å–≤–∏—Ç—á
    urec = users_get(uid)
    if not urec:
        cand = None
        if detect:
            try:
                cand = detect(text) if text else None
            except Exception:
                cand = None
        lang = norm_lang(cand or getattr(user,"language_code",None))
        users_upsert(uid, user.username or "", lang)
    else:
        lang = norm_lang(urec.get("lang") or getattr(user,"language_code",None))
        lang = maybe_autoswitch_lang(uid, text, lang)

    # –∂–¥—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?
    s = sessions.get(uid, {})
    if s.get("awaiting_comment") and not text.startswith("/"):
        name = s.get("feedback_context") or "general"
        ws_feedback.append_row([datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"), str(uid), f"comment:{name}", user.username or "", "", text])
        s["awaiting_comment"] = False
        s["feedback_context"] = ""
        sessions[uid] = s
        await update.message.reply_text(t(lang, "comment_saved"))
        return

    # –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–≤–µ—Ç—ã ‚Üí –º–µ–Ω—é
    if text.lower() in {"hi","hello","hey","hola","–ø—Ä–∏–≤–µ—Ç","–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ","–ø—Ä–∏–≤—ñ—Ç","–≤—ñ—Ç–∞—é","buenas"}:
        await update.message.reply_text(t(lang, "welcome"), reply_markup=main_menu(lang))
        return

    # –æ—Ñ—Ñ—Ç–æ–ø?
    if not is_care_related(lang, text):
        await update.message.reply_text(t(lang, "oos"), reply_markup=main_menu(lang))
        return

    # ACTIVE FLOW
    if s and s.get("topic") == "pain":
        flow = s.get("flow") or "collect"
        if flow == "collect":
            await continue_collect(update, context, lang, uid, text)
            return
        elif flow in {"confirm"}:
            # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ—Ç—ã –∏ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å confirm
            await continue_collect(update, context, lang, uid, text)
            return
        elif flow in {"redflags","zone","accept_wait","remind_wait"}:
            await update.message.reply_text(t(lang, "use_buttons"))
            return

    # –Ω–æ–≤–∞—è —Ç–µ–º–∞ ‚Üí —Ç—Ä–∏–∞–∂
    topic = detect_or_choose_topic(lang, text) or "pain"
    if topic in {"pain","throat","sleep","stress","digestion","energy"}:
        await start_pain_triage(update, lang, uid)
        # —Å—Ä–∞–∑—É –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        if text:
            await continue_collect(update, context, lang, uid, text)
        return

    # —Ñ–æ–ª–±—ç–∫
    await update.message.reply_text(t(lang, "unknown"), reply_markup=main_menu(lang))

# =========================
# Runner
# =========================
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(on_startup).build()

    schedule_from_sheet_on_start(app)

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("privacy", cmd_privacy))
    app.add_handler(CommandHandler("pause", cmd_pause))
    app.add_handler(CommandHandler("resume", cmd_resume))
    app.add_handler(CommandHandler("delete_data", cmd_delete_data))
    app.add_handler(CommandHandler("lang", cmd_lang))
    app.add_handler(CommandHandler("skip", cmd_skip))
    app.add_handler(CommandHandler("feedback", cmd_feedback))

    app.add_handler(CallbackQueryHandler(on_callback))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
