# -*- coding: utf-8 -*-
# ===== TendAI ‚Äî Part 1/2: –ë–∞–∑–∞ –∏ UX =====
import os, re, json, uuid, logging, math, random
from datetime import datetime, timedelta, timezone, time as dtime, date
from typing import List, Tuple, Dict, Optional, Set
from difflib import SequenceMatcher

from dotenv import load_dotenv
from langdetect import detect, DetectorFactory

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

from openai import OpenAI

# ---------- Google Sheets (robust + memory fallback) ----------
import gspread
from gspread.exceptions import SpreadsheetNotFound, WorksheetNotFound
import gspread.utils as gsu
from oauth2client.service_account import ServiceAccountCredentials


# ---------------- Boot & Config ----------------
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
DetectorFactory.seed = 0

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")

SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Sheets")
SHEET_ID = os.getenv("SHEET_ID", "")
ALLOW_CREATE_SHEET = os.getenv("ALLOW_CREATE_SHEET", "0") == "1"
DEFAULT_CHECKIN_LOCAL = "08:30"
DEFAULT_EVENING_LOCAL = "20:00"
DEFAULT_QUIET_HOURS = "22:00-08:00"
AUTO_MAX_PER_DAY = 2

oai: Optional[OpenAI] = None
try:
    if OPENAI_API_KEY:
        os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
    oai = OpenAI()
except Exception as e:
    logging.error(f"OpenAI init error: {e}")
    oai = None


# ---------------- i18n ----------------
SUPPORTED = {"ru", "en", "uk", "es"}

def norm_lang(code: Optional[str]) -> str:
    if not code:
        return "en"
    c = code.split("-")[0].lower()
    return c if c in SUPPORTED else "en"

T = {
    "en": {
        "welcome": (
            "Hi! I‚Äôm TendAI ‚Äî your health & longevity assistant.\n"
            "I build an *AI habit profile* (age, surgeries, chronic, meds/supps, routine & habits) "
            "and tailor advice more precisely over time. "
            "Let‚Äôs do a short intake (40‚Äì60s). You can also use quick buttons anytime."
        ),
        "help": "Short checkups, 24‚Äì48h plans, reminders, daily check-ins.\n"
                "Commands: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 "
                "/checkin_off /evening_on 20:00 /evening_off /settz +2 /health60 /mood /energy /hydrate "
                "/skintip /cycle /youth /life /ru /uk /en /es",
        "privacy": "TendAI is not a medical service and can‚Äôt replace a doctor. "
                   "We store minimal data for reminders. /delete_data to erase.",
        "paused_on": "Notifications paused. Use /resume to enable.",
        "paused_off": "Notifications resumed.",
        "deleted": "All your data was deleted. Use /start to begin again.",
        "ask_consent": "May I send you a follow-up to check how you feel later?",
        "yes":"Yes","no":"No",
        "unknown":"I need a bit more info: where exactly and for how long?",
        "profile_intro":"Quick intake (~40s). Use buttons or type your answer.",
        "p_step_1":"Step 1/8. Sex:",
        "p_step_2":"Step 2/8. Age:",
        "p_step_3":"Step 3/8. Main goal:",
        "p_step_4":"Step 4/8. Chronic conditions:",
        "p_step_5":"Step 5/8. Meds/supplements/allergies:",
        "p_step_6":"Step 6/8. Sleep (bed/wake, e.g., 23:30/07:00):",
        "p_step_7":"Step 7/8. Activity:",
        "p_step_8":"Step 8/8. Diet most of the time:",
        "write":"‚úçÔ∏è Write",
        "skip":"‚è≠Ô∏è Skip",
        "saved_profile":"Saved: ",
        "start_where":"Where do you want to start now? (symptom/sleep/nutrition/labs/habits/longevity)",
        # Quickbar / hybrid
        "quick_title":"Quick actions",
        "quick_health":"‚ö° Health in 60s",
        "quick_er":"üöë ER info",
        "quick_lab":"üß™ Lab",
        "quick_rem":"‚è∞ Reminder",
        # Morning check-in
        "daily_gm":"Good morning! üåû How do you feel today?",
        "mood_excellent":"üëç Great","mood_ok":"üôÇ Okay","mood_tired":"üòê Tired","mood_pain":"ü§ï Pain","mood_skip":"‚è≠Ô∏è Skip",
        "mood_note":"‚úçÔ∏è Comment",
        "mood_thanks":"Thanks! Have a smooth day üëã",
        "mood_cmd":"How do you feel right now?",
        # Health60
        "h60_btn": "Health in 60 seconds",
        "h60_intro": "Briefly write what bothers you (e.g., ‚Äúheadache‚Äù, ‚Äúfatigue‚Äù, ‚Äústomach pain‚Äù). I‚Äôll give you 3 key tips in 60 seconds.",
        "h60_t1": "Possible causes",
        "h60_t2": "Do now (next 24‚Äì48h)",
        "h60_t3": "When to see a doctor",
        "h60_serious": "Serious to rule out",
        "plan_accept":"Will you try this today?",
        "accept_opts":["‚úÖ Yes","üîÅ Later","‚úñÔ∏è No"],
        "remind_when":"When shall I check on you?",
        "remind_opts":["in 4h","this evening","tomorrow morning","no need"],
        "thanks":"Got it üôå",
        # Youth Pack
        "youth_pack": "Youth Pack",
        "gm_energy": "‚ö° Energy",
        "gm_energy_q": "How‚Äôs your energy (1‚Äì5)?",
        "gm_energy_done": "Logged energy ‚Äî thanks!",
        "gm_evening_btn": "‚è∞ Remind this evening",
        "hydrate_btn": "üíß Hydration",
        "hydrate_nudge": "üíß Time for a glass of water",
        "skintip_btn": "üß¥ Skin/Body tip",
        "skintip_sent": "Tip sent.",
        "daily_tip_prefix": "üçé Daily tip:",
        "streak_day": "Day of care",
        "challenge_btn": "üéØ 7-day hydration challenge",
        "challenge_started": "Challenge started! I‚Äôll track your daily check-ins.",
        "challenge_progress": "Challenge progress: {d}/{len} days.",
        "cycle_btn": "ü©∏ Cycle",
        "cycle_consent": "Would you like to track your cycle for gentle timing tips?",
        "cycle_ask_last": "Enter the date of your last period (YYYY-MM-DD):",
        "cycle_ask_len": "Average cycle length in days (e.g., 28):",
        "cycle_saved": "Cycle tracking saved.",
        "quiet_saved": "Quiet hours saved: {qh}",
        "set_quiet_btn": "üåô Set quiet hours",
        "ask_quiet": "Type quiet hours as HH:MM-HH:MM (local), e.g. 22:00-08:00",
        "evening_intro": "Evening check-in:",
        "evening_tip_btn": "ü™Ñ Tip of the day",
        "evening_set": "Evening check-in set to {t} (local).",
        "evening_off": "Evening check-in disabled.",
        # ER & misc
        "act_er":"üöë Emergency info",
        "er_text":"If symptoms worsen, severe shortness of breath, chest pain, confusion, or persistent high fever ‚Äî seek urgent care/emergency.",
        # Feedback
        "ask_fb":"Was this helpful?",
        "fb_thanks":"Thanks for your feedback! ‚úÖ",
        "fb_write":"Write a short feedback message:",
        "fb_good":"üëç Like",
        "fb_bad":"üëé Dislike",
        "fb_free":"üìù Feedback",
        # Life metrics
        "life_today":"Today is your {n}-th day of life üéâ. Target ‚Äî 36,500 (100 years).",
        "life_percent":"You‚Äôve passed {p}% of the way to 100 years.",
        "life_estimate":"(estimated by age)",
        "life_bar":"Progress: {bar} {p}%",
        # Personalization prefix
        "px":"Considering your profile: {sex}, {age}y; goal ‚Äî {goal}.",
        "back":"‚óÄ Back",
        "exit":"Exit",
    },
    "ru": {
        "welcome": (
            "–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n"
            "–Ø —Ñ–æ—Ä–º–∏—Ä—É—é *AI-–ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–≤—ã—á–µ–∫* (–≤–æ–∑—Ä–∞—Å—Ç, –æ–ø–µ—Ä–∞—Ü–∏–∏, —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ, –¥–æ–±–∞–≤–∫–∏, —Ä–µ–∂–∏–º –∏ –ø—Ä–∏–≤—ã—á–∫–∏) "
            "–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —Ç–æ—á–Ω–µ–µ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—é —Å–æ–≤–µ—Ç—ã. "
            "–î–∞–≤–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å (40‚Äì60—Å). –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–¥–∞."
        ),
        "help":"–ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã.\n"
               "–ö–æ–º–∞–Ω–¥—ã: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 "
               "/checkin_off /evening_on 20:00 /evening_off /settz +3 /health60 /mood /energy /hydrate "
               "/skintip /cycle /youth /life /ru /uk /en /es",
        "privacy":"TendAI –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞. –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. /delete_data ‚Äî —É–¥–∞–ª–∏—Ç—å.",
        "paused_on":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ø–∞—É–∑–µ. /resume ‚Äî –≤–∫–ª—é—á–∏—Ç—å.",
        "paused_off":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.",
        "deleted":"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        "ask_consent":"–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã?",
        "yes":"–î–∞","no":"–ù–µ—Ç",
        "unknown":"–ù—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: –≥–¥–µ –∏–º–µ–Ω–Ω–æ –∏ —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?",
        "profile_intro":"–ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å (~40—Å). –ú–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç.",
        "p_step_1":"–®–∞–≥ 1/8. –ü–æ–ª:",
        "p_step_2":"–®–∞–≥ 2/8. –í–æ–∑—Ä–∞—Å—Ç:",
        "p_step_3":"–®–∞–≥ 3/8. –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:",
        "p_step_4":"–®–∞–≥ 4/8. –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏:",
        "p_step_5":"–®–∞–≥ 5/8. –õ–µ–∫–∞—Ä—Å—Ç–≤–∞/–¥–æ–±–∞–≤–∫–∏/–∞–ª–ª–µ—Ä–≥–∏–∏:",
        "p_step_6":"–®–∞–≥ 6/8. –°–æ–Ω (–æ—Ç–±–æ–π/–ø–æ–¥—ä—ë–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        "p_step_7":"–®–∞–≥ 7/8. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:",
        "p_step_8":"–®–∞–≥ 8/8. –ü–∏—Ç–∞–Ω–∏–µ —á–∞—â–µ –≤—Å–µ–≥–æ:",
        "write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
        "skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "saved_profile":"–°–æ—Ö—Ä–∞–Ω–∏–ª: ",
        "start_where":"–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/–ø–∏—Ç–∞–Ω–∏–µ/–∞–Ω–∞–ª–∏–∑—ã/–ø—Ä–∏–≤—ã—á–∫–∏/–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ)",
        # Quickbar / hybrid
        "quick_title":"–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
        "quick_health":"‚ö° –ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫",
        "quick_er":"üöë –°—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é",
        "quick_lab":"üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è",
        "quick_rem":"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
        # Morning check-in
        "daily_gm":"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üåû –ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "mood_excellent":"üëç –û—Ç–ª–∏—á–Ω–æ","mood_ok":"üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ","mood_tired":"üòê –£—Å—Ç–∞–ª","mood_pain":"ü§ï –ë–æ–ª–∏—Ç","mood_skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "mood_note":"‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        "mood_thanks":"–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üëã",
        "mood_cmd":"–ö–∞–∫ —Å–µ–π—á–∞—Å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        # Health60
        "h60_btn": "–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥",
        "h60_intro": "–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞¬ª, ¬´—É—Å—Ç–∞–ª–æ—Å—Ç—å¬ª, ¬´–±–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ¬ª). –î–∞–º 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–≤–µ—Ç–∞ –∑–∞ 60 —Å–µ–∫—É–Ω–¥.",
        "h60_t1": "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã",
        "h60_t2": "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å (24‚Äì48 —á)",
        "h60_t3": "–ö–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É",
        "h60_serious": "–ß—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ–µ –∏—Å–∫–ª—é—á–∏—Ç—å",
        "plan_accept":"–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
        "accept_opts":["‚úÖ –î–∞","üîÅ –ü–æ–∑–∂–µ","‚úñÔ∏è –ù–µ—Ç"],
        "remind_when":"–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "remind_opts":["—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞","–≤–µ—á–µ—Ä–æ–º","–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º","–Ω–µ –Ω–∞–¥–æ"],
        "thanks":"–ü—Ä–∏–Ω—è—Ç–æ üôå",
        # Youth Pack
        "youth_pack": "–ú–æ–ª–æ–¥—ë–∂–Ω—ã–π –ø–∞–∫–µ—Ç",
        "gm_energy": "‚ö° –≠–Ω–µ—Ä–≥–∏—è",
        "gm_energy_q": "–ö–∞–∫ —ç–Ω–µ—Ä–≥–∏—è (1‚Äì5)?",
        "gm_energy_done": "–ó–∞–ø–∏—Å–∞–ª —ç–Ω–µ—Ä–≥–∏—é ‚Äî —Å–ø–∞—Å–∏–±–æ!",
        "gm_evening_btn": "‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –≤–µ—á–µ—Ä–æ–º",
        "hydrate_btn": "üíß –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è",
        "hydrate_nudge": "üíß –í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã",
        "skintip_btn": "üß¥ –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–æ–∂–∏/—Ç–µ–ª–∞",
        "skintip_sent": "–°–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
        "daily_tip_prefix": "üçé –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–Ω—è:",
        "streak_day": "–î–µ–Ω—å –∑–∞–±–æ—Ç—ã",
        "challenge_btn": "üéØ –ß–µ–ª–ª–µ–Ω–¥–∂ 7 –¥–Ω–µ–π (–≤–æ–¥–∞)",
        "challenge_started": "–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞—Ç! –ë—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã.",
        "challenge_progress": "–ü—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–∞: {d}/{len} –¥–Ω–µ–π.",
        "cycle_btn": "ü©∏ –¶–∏–∫–ª",
        "cycle_consent": "–•–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–∏–∫–ª –∏ –ø–æ–ª—É—á–∞—Ç—å –º—è–≥–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤–æ–≤—Ä–µ–º—è?",
        "cycle_ask_last": "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö (–ì–ì–ì–ì-–ú–ú-–î–î):",
        "cycle_ask_len": "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28):",
        "cycle_saved": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
        "quiet_saved": "–¢–∏—Ö–∏–µ —á–∞—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {qh}",
        "set_quiet_btn": "üåô –¢–∏—Ö–∏–µ —á–∞—Å—ã",
        "ask_quiet": "–í–≤–µ–¥–∏—Ç–µ —Ç–∏—Ö–∏–µ —á–∞—Å—ã –∫–∞–∫ –ß–ß:–ú–ú-–ß–ß:–ú–ú (–ª–æ–∫–∞–ª—å–Ω–æ), –Ω–∞–ø—Ä. 22:00-08:00",
        "evening_intro": "–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω:",
        "evening_tip_btn": "ü™Ñ –°–æ–≤–µ—Ç –¥–Ω—è",
        "evening_set": "–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {t} (–ª–æ–∫–∞–ª—å–Ω–æ).",
        "evening_off": "–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω.",
        # ER & misc
        "act_er":"üöë –ö–æ–≥–¥–∞ —Å—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é",
        "er_text":"–ï—Å–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç, —Å–∏–ª—å–Ω–∞—è –æ–¥—ã—à–∫–∞, –±–æ–ª—å –≤ –≥—Ä—É–¥–∏, —Å–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å, —Å—Ç–æ–π–∫–∞—è –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∫ –Ω–µ–æ—Ç–ª–æ–∂–∫–µ/—Å–∫–æ—Ä–æ–π.",
        # Feedback
        "ask_fb":"–≠—Ç–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ?",
        "fb_thanks":"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! ‚úÖ",
        "fb_write":"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        "fb_good":"üëç –ù—Ä–∞–≤–∏—Ç—Å—è",
        "fb_bad":"üëé –ù–µ –ø–æ–ª–µ–∑–Ω–æ",
        "fb_free":"üìù –û—Ç–∑—ã–≤",
        # Life metrics
        "life_today":"–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π {n}-–π –¥–µ–Ω—å –∂–∏–∑–Ω–∏ üéâ. –¶–µ–ª—å ‚Äî 36 500 (100 –ª–µ—Ç).",
        "life_percent":"–¢—ã –ø—Ä–æ—à—ë–ª —É–∂–µ {p}% –ø—É—Ç–∏ –∫ 100 –≥–æ–¥–∞–º.",
        "life_estimate":"(–æ—Ü–µ–Ω–æ—á–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É)",
        "life_bar":"–ü—Ä–æ–≥—Ä–µ—Å—Å: {bar} {p}%",
        # Personalization prefix
        "px":"–° —É—á—ë—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è: {sex}, {age} –ª–µ—Ç; —Ü–µ–ª—å ‚Äî {goal}.",
        "back":"‚óÄ –ù–∞–∑–∞–¥",
        "exit":"–í—ã–π—Ç–∏",
    },
    "uk": {
        "welcome":"–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è.\n"
                  "–Ø —Å—Ç–≤–æ—Ä—é—é *AI-–ø—Ä–æ—Ñ—ñ–ª—å –∑–≤–∏—á–æ–∫* —ñ –∑ —á–∞—Å–æ–º —Ç–æ—á–Ω—ñ—à–µ –ø—ñ–¥–ª–∞—à—Ç–æ–≤—É—é –ø–æ—Ä–∞–¥–∏. "
                  "–ü–æ—á–Ω—ñ–º–æ –∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ–ø–∏—Ç–Ω–∏–∫–∞ (40‚Äì60—Å). –®–≤–∏–¥–∫—ñ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–≤–∂–¥–∏.",
        "help":"–ö–æ—Ä–æ—Ç–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ–¥–µ–Ω–Ω—ñ —á–µ–∫-—ñ–Ω–∏.\n"
               "–ö–æ–º–∞–Ω–¥–∏: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 "
               "/checkin_off /evening_on 20:00 /evening_off /settz +2 /health60 /mood /energy /hydrate "
               "/skintip /cycle /youth /life /ru /uk /en /es",
        "privacy":"TendAI –Ω–µ –∑–∞–º—ñ–Ω—é—î –ª—ñ–∫–∞—Ä—è. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ–Ω—ñ–º—É–º –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å. /delete_data ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏.",
        "paused_on":"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ. /resume ‚Äî —É–≤—ñ–º–∫–Ω—É—Ç–∏.",
        "paused_off":"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω–µ–Ω—ñ.",
        "deleted":"–£—Å—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ. /start ‚Äî –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.",
        "ask_consent":"–ú–æ–∂—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—ñ–∑–Ω—ñ—à–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ –≤–∏?",
        "yes":"–¢–∞–∫","no":"–ù—ñ",
        "unknown":"–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ: –¥–µ —Å–∞–º–µ —ñ —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î?",
        "profile_intro":"–®–≤–∏–¥–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ (~40—Å). –ú–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –ø–∏—Å–∞—Ç–∏ —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç.",
        "p_step_1":"–ö—Ä–æ–∫ 1/8. –°—Ç–∞—Ç—å:",
        "p_step_2":"–ö—Ä–æ–∫ 2/8. –í—ñ–∫:",
        "p_step_3":"–ö—Ä–æ–∫ 3/8. –ì–æ–ª–æ–≤–Ω–∞ –º–µ—Ç–∞:",
        "p_step_4":"–ö—Ä–æ–∫ 4/8. –•—Ä–æ–Ω—ñ—á–Ω—ñ —Ö–≤–æ—Ä–æ–±–∏:",
        "p_step_5":"–ö—Ä–æ–∫ 5/8. –õ—ñ–∫–∏/–¥–æ–±–∞–≤–∫–∏/–∞–ª–µ—Ä–≥—ñ—ó:",
        "p_step_6":"–ö—Ä–æ–∫ 6/8. –°–æ–Ω (–≤—ñ–¥–±—ñ–π/–ø—ñ–¥–π–æ–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        "p_step_7":"–ö—Ä–æ–∫ 7/8. –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:",
        "p_step_8":"–ö—Ä–æ–∫ 8/8. –•–∞—Ä—á—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–∂–Ω–æ:",
        "write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏",
        "skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "saved_profile":"–ó–±–µ—Ä—ñ–≥: ",
        "start_where":"–ó —á–æ–≥–æ –ø–æ—á–Ω–µ–º–æ? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è/–∞–Ω–∞–ª—ñ–∑–∏/–∑–≤–∏—á–∫–∏/–¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è)",
        "quick_title":"–®–≤–∏–¥–∫—ñ –¥—ñ—ó",
        "quick_health":"‚ö° –ó–¥–æ—Ä–æ–≤‚Äô—è –∑–∞ 60 —Å–µ–∫",
        "quick_er":"üöë –¢–µ—Ä–º—ñ–Ω–æ–≤–æ –≤ —à–≤–∏–¥–∫—É",
        "quick_lab":"üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—è",
        "quick_rem":"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è",
        "daily_gm":"–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! üåû –Ø–∫ —Å—å–æ–≥–æ–¥–Ω—ñ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è?",
        "mood_excellent":"üëç –ß—É–¥–æ–≤–æ","mood_ok":"üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ","mood_tired":"üòê –í—Ç–æ–º–∞","mood_pain":"ü§ï –ë–æ–ª—é","mood_skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "mood_note":"‚úçÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä",
        "mood_thanks":"–î—è–∫—É—é! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üëã",
        "mood_cmd":"–Ø–∫ –ø–æ—á—É–≤–∞—î—Ç–µ—Å—å –∑–∞—Ä–∞–∑?",
        "h60_btn": "–ó–¥–æ—Ä–æ–≤‚Äô—è –∑–∞ 60 —Å–µ–∫—É–Ω–¥",
        "h60_intro": "–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à—ñ—Ç—å, —â–æ —Ç—É—Ä–±—É—î‚Ä¶ –Ø –¥–∞–º 3 –∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏ –∑–∞ 60 —Å–µ–∫—É–Ω–¥.",
        "h60_t1": "–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏",
        "h60_t2": "–©–æ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞—Ä–∞–∑ (24‚Äì48 –≥–æ–¥)",
        "h60_t3": "–ö–æ–ª–∏ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è",
        "h60_serious": "–©–æ —Å–µ—Ä–π–æ–∑–Ω–µ –≤–∏–∫–ª—é—á–∏—Ç–∏",
        "plan_accept":"–ì–æ—Ç–æ–≤—ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "accept_opts":["‚úÖ –¢–∞–∫","üîÅ –ü—ñ–∑–Ω—ñ—à–µ","‚úñÔ∏è –ù—ñ"],
        "remind_when":"–ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏ —Ç–∞ —Å–ø–∏—Ç–∞—Ç–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è?",
        "remind_opts":["—á–µ—Ä–µ–∑ 4 –≥–æ–¥","—É–≤–µ—á–µ—Ä—ñ","–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ","–Ω–µ —Ç—Ä–µ–±–∞"],
        "thanks":"–ü—Ä–∏–π–Ω—è—Ç–æ üôå",
        "youth_pack": "–ú–æ–ª–æ–¥—ñ–∂–Ω–∏–π –ø–∞–∫–µ—Ç",
        "gm_energy": "‚ö° –ï–Ω–µ—Ä–≥—ñ—è",
        "gm_energy_q": "–Ø–∫ –µ–Ω–µ—Ä–≥—ñ—è (1‚Äì5)?",
        "gm_energy_done": "–ï–Ω–µ—Ä–≥—ñ—é –∑–∞–ø–∏—Å–∞–Ω–æ ‚Äî –¥—è–∫—É—é!",
        "gm_evening_btn": "‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏ –≤–≤–µ—á–µ—Ä—ñ",
        "hydrate_btn": "üíß –ì—ñ–¥—Ä–∞—Ç–∞—Ü—ñ—è",
        "hydrate_nudge": "üíß –ß–∞—Å –¥–ª—è —Å–∫–ª—è–Ω–∫–∏ –≤–æ–¥–∏",
        "skintip_btn": "üß¥ –ü–æ—Ä–∞–¥–∞ –¥–ª—è —à–∫—ñ—Ä–∏/—Ç—ñ–ª–∞",
        "skintip_sent": "–ü–æ—Ä–∞–¥—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.",
        "daily_tip_prefix": "üçé –ü—ñ–¥–∫–∞–∑–∫–∞ –¥–Ω—è:",
        "streak_day": "–î–µ–Ω—å —Ç—É—Ä–±–æ—Ç–∏",
        "challenge_btn": "üéØ –ß–µ–ª–µ–Ω–¥–∂ 7 –¥–Ω—ñ–≤ (–≤–æ–¥–∞)",
        "challenge_started": "–ß–µ–ª–µ–Ω–¥–∂ –∑–∞–ø—É—â–µ–Ω–æ!",
        "challenge_progress": "–ü—Ä–æ–≥—Ä–µ—Å: {d}/{len} –¥–Ω—ñ–≤.",
        "cycle_btn": "ü©∏ –¶–∏–∫–ª",
        "cycle_consent": "–í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Ü–∏–∫–ª?",
        "cycle_ask_last": "–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –º–µ–Ω—Å—Ç—Ä—É–∞—Ü—ñ–π (–†–†–†–†-–ú–ú-–î–î):",
        "cycle_ask_len": "–°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (–Ω–∞–ø—Ä., 28):",
        "cycle_saved": "–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
        "quiet_saved": "–¢–∏—Ö—ñ –≥–æ–¥–∏–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {qh}",
        "set_quiet_btn": "üåô –¢–∏—Ö—ñ –≥–æ–¥–∏–Ω–∏",
        "ask_quiet": "–ì–ì:–•–•-–ì–ì:–•–•, –Ω–∞–ø—Ä. 22:00-08:00",
        "evening_intro": "–í–µ—á—ñ—Ä–Ω—ñ–π —á–µ–∫-—ñ–Ω:",
        "evening_tip_btn": "ü™Ñ –ü–æ—Ä–∞–¥–∞ –¥–Ω—è",
        "evening_set": "–í–µ—á—ñ—Ä–Ω—ñ–π —á–µ–∫-—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {t} (–ª–æ–∫–∞–ª—å–Ω–æ).",
        "evening_off": "–í–∏–º–∫–Ω–µ–Ω–æ.",
        "act_er":"üöë –ö–æ–ª–∏ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –≤ —à–≤–∏–¥–∫—É",
        "er_text":"–Ø–∫—â–æ –ø–æ—Å–∏–ª—é—î—Ç—å—Å—è‚Ä¶ ‚Äî —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –¥–æ –Ω–µ–≤—ñ–¥–∫–ª–∞–¥–Ω–æ—ó.",
        "ask_fb":"–ß–∏ –±—É–ª–æ —Ü–µ –∫–æ—Ä–∏—Å–Ω–æ?",
        "fb_thanks":"–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫! ‚úÖ",
        "fb_write":"–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ñ–¥–≥—É–∫:",
        "fb_good":"üëç –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è",
        "fb_bad":"üëé –ù–µ –∫–æ—Ä–∏—Å–Ω–æ",
        "fb_free":"üìù –í—ñ–¥–≥—É–∫",
        "life_today":"–°—å–æ–≥–æ–¥–Ω—ñ —Ç–≤—ñ–π {n}-–π –¥–µ–Ω—å –∂–∏—Ç—Ç—è üéâ. –ú–µ—Ç–∞ ‚Äî 36 500 (100 —Ä–æ–∫—ñ–≤).",
        "life_percent":"–¢–∏ –ø—Ä–æ–π—à–æ–≤ {p}% —à–ª—è—Ö—É –¥–æ 100 —Ä–æ–∫—ñ–≤.",
        "life_estimate":"(–æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –∑–∞ –≤—ñ–∫–æ–º)",
        "life_bar":"–ü—Ä–æ–≥—Ä–µ—Å: {bar} {p}%",
        "px":"–ó —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ—Ñ—ñ–ª—é: {sex}, {age} —Ä.; –º–µ—Ç–∞ ‚Äî {goal}.",
        "back":"‚óÄ –ù–∞–∑–∞–¥",
        "exit":"–í–∏–π—Ç–∏",
    },
}
T["es"] = T["en"]  # –∑–∞–≥–ª—É—à–∫–∞


# --- Personalized prefix shown before LLM reply ---
def personalized_prefix(lang: str, profile: dict) -> str:
    sex = (profile.get("sex") or "").strip()
    goal = (profile.get("goal") or "").strip()
    age_raw = str(profile.get("age") or "")
    m = re.search(r"\d+", age_raw)
    age = m.group(0) if m else ""
    if sum(bool(x) for x in (sex, age, goal)) >= 2:
        tpl = (T.get(lang) or T["en"]).get("px", T["en"]["px"])
        return tpl.format(sex=sex or "‚Äî", age=age or "‚Äî", goal=goal or "‚Äî")
    return ""


# ---------------- Helpers ----------------
def utcnow():
    return datetime.now(timezone.utc)

def iso(dt: Optional[datetime]) -> str:
    return "" if not dt else dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def detect_lang_from_text(text: str, fallback: str) -> str:
    s = (text or "").strip()
    if not s:
        return fallback
    low = s.lower()
    if re.search(r"[–∞-—è—ë—ñ—ó—î“ë]", low):
        return "uk" if re.search(r"[—ñ—ó—î“ë]", low) else "ru"
    try:
        return norm_lang(detect(s))
    except Exception:
        return fallback

def profile_is_incomplete(profile_row: dict) -> bool:
    keys = ["sex","age","goal"]
    return sum(1 for k in keys if str(profile_row.get(k) or "").strip()) < 2

def age_to_band(age: int) -> str:
    if age <= 0: return "unknown"
    if age <= 25: return "18‚Äì25"
    if age <= 35: return "26‚Äì35"
    if age <= 45: return "36‚Äì45"
    if age <= 60: return "46‚Äì60"
    return "60+"


# ===== ONBOARDING GATE (–®—Ç–æ—Ä–∫–∞) =====
GATE_FLAG_KEY = "menu_unlocked"

def _is_menu_unlocked(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if context.user_data.get(GATE_FLAG_KEY):
        return True
    prof = profiles_get(update.effective_user.id) or {}
    return not profile_is_incomplete(prof)

async def gate_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    kb = [
        [InlineKeyboardButton("üß© –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å (40‚Äì60 —Å–µ–∫)" if lang!="en" else "üß© Take the 40‚Äì60s intake", callback_data="intake:start")],
        [InlineKeyboardButton("‚û°Ô∏è –ü–æ–∑–∂–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é" if lang!="en" else "‚û°Ô∏è Later ‚Äî open menu", callback_data="gate:skip")],
    ]
    text = ("–ß—Ç–æ–±—ã —Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å. –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ."
            if lang!="en" else
            "To personalize answers, please take a short intake. You can skip and do it later.")
    await update.effective_chat.send_message(text, reply_markup=InlineKeyboardMarkup(kb))

async def gate_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "gate:skip":
        context.user_data[GATE_FLAG_KEY] = True
        await q.edit_message_text("–û–∫, –æ—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶" if context.user_data.get("lang","en")!="en" else "OK, opening the menu‚Ä¶")
        lang = _user_lang(q.from_user.id)
        await context.bot.send_message(update.effective_chat.id, T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
        await show_quickbar(context, update.effective_chat.id, lang)


# === MINI-INTAKE (—Å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è) ===
MINI_KEYS = ["sex","age","goal","diet_focus","steps_target","conditions","meds_allergies","habits"]
MINI_FREE_KEYS: Set[str] = {"meds_allergies"}
MINI_STEPS = {
    "sex": {
        "ru":[("–ú—É–∂—Å–∫–æ–π","male"),("–ñ–µ–Ω—Å–∫–∏–π","female"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("Male","male"),("Female","female"),("Other","other")],
        "uk":[("–ß–æ–ª–æ–≤—ñ—á–∞","male"),("–ñ—ñ–Ω–æ—á–∞","female"),("–Ü–Ω—à–∞","other")],
        "es":[("Hombre","male"),("Mujer","female"),("Otro","other")],
        "label":{"ru":"–ü–æ–ª:","en":"Sex:","uk":"–°—Ç–∞—Ç—å:","es":"Sexo:"}
    },
    "age": {
        "ru":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "en":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "uk":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "es":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "label":{"ru":"–í–æ–∑—Ä–∞—Å—Ç:","en":"Age:","uk":"–í—ñ–∫:","es":"Edad:"}
    },
    "goal": {
        "ru":[("–≠–Ω–µ—Ä–≥–∏—è","energy"),("–°–æ–Ω","sleep"),("–ü–æ—Ö—É–¥–µ–Ω–∏–µ","weight"),("–°–∏–ª–∞","strength"),("–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ","longevity")],
        "en":[("Energy","energy"),("Sleep","sleep"),("Weight","weight"),("Strength","strength"),("Longevity","longevity")],
        "uk":[("–ï–Ω–µ—Ä–≥—ñ—è","energy"),("–°–æ–Ω","sleep"),("–í–∞–≥–∞","weight"),("–°–∏–ª–∞","strength"),("–î–æ–≤–≥–æ–ª—ñ—Ç—Ç—è","longevity")],
        "es":[("Energ√≠a","energy"),("Sue√±o","sleep"),("Peso","weight"),("Fuerza","strength"),("Longevidad","longevity")],
        "label":{"ru":"–¶–µ–ª—å:","en":"Main goal:","uk":"–ú–µ—Ç–∞:","es":"Objetivo:"}
    },
    "diet_focus": {
        "ru":[("–°–±–∞–ª–∞–Ω—Å.","balanced"),("–ù–∏–∑–∫–æ—É–≥–ª","lowcarb"),("–†–∞—Å—Ç–∏—Ç.","plant"),("–ù–µ—Ä–µ–≥—É–ª.","irregular")],
        "en":[("Balanced","balanced"),("Low-carb","lowcarb"),("Plant-based","plant"),("Irregular","irregular")],
        "uk":[("–ó–±–∞–ª–∞–Ω—Å.","balanced"),("–ú–∞–ª–æ–≤—É–≥–ª.","lowcarb"),("–†–æ—Å–ª–∏–Ω–Ω–µ","plant"),("–ù–µ—Ä–µ–≥—É–ª.","irregular")],
        "es":[("Equilibrada","balanced"),("Baja carb.","lowcarb"),("Vegetal","plant"),("Irregular","irregular")],
        "label":{"ru":"–ü–∏—Ç–∞–Ω–∏–µ:","en":"Diet mostly:","uk":"–•–∞—Ä—á—É–≤–∞–Ω–Ω—è:","es":"Dieta:"}
    },
    "steps_target": {
        "ru":[("<5–∫","5000"),("5‚Äì8–∫","8000"),("8‚Äì12–∫","12000"),("–°–ø–æ—Ä—Ç","15000")],
        "en":[("<5k","5000"),("5‚Äì8k","8000"),("8‚Äì12k","12000"),("Sport","15000")],
        "uk":[("<5–∫","5000"),("5‚Äì8–∫","8000"),("8‚Äì12–∫","12000"),("–°–ø–æ—Ä—Ç","15000")],
        "es":[("<5k","5000"),("5‚Äì8k","8000"),("8‚Äì12k","12000"),("Deporte","15000")],
        "label":{"ru":"–®–∞–≥–∏/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:","en":"Steps/activity:","uk":"–ö—Ä–æ–∫–∏/–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:","es":"Pasos/actividad:"}
    },
    "conditions": {
        "ru":[("–ù–µ—Ç","none"),("–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥.","cvd"),("–©–ñ/—ç–Ω–¥–æ–∫—Ä.","endocrine"),("–ñ–ö–¢","gi"),("–ê–ª–ª–µ—Ä–≥–∏—è","allergy"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("None","none"),("Cardio/vascular","cvd"),("Thyroid/endocrine","endocrine"),("GI","gi"),("Allergy","allergy"),("Other","other")],
        "uk":[("–ù–µ–º–∞—î","none"),("–°–µ—Ä—Ü–µ–≤–æ-—Å—É–¥.","cvd"),("–©–ó/–µ–Ω–¥–æ–∫—Ä.","endocrine"),("–®–ö–¢","gi"),("–ê–ª–µ—Ä–≥—ñ—è","allergy"),("–Ü–Ω—à–µ","other")],
        "es":[("Ninguno","none"),("Cardio/vascular","cvd"),("Tiroides/end√≥cr.","endocrine"),("GI","gi"),("Alergia","allergy"),("Otro","other")],
        "label":{"ru":"–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:","en":"Chronic conditions:","uk":"–•—Ä–æ–Ω—ñ—á–Ω—ñ —Å—Ç–∞–Ω–∏:","es":"Condiciones cr√≥nicas:"}
    },
    "meds_allergies": {
        "ru":[], "en":[], "uk":[], "es":[],
        "label":{"ru":"–õ–µ–∫–∞—Ä—Å—Ç–≤–∞/–¥–æ–±–∞–≤–∫–∏/–∞–ª–ª–µ—Ä–≥–∏–∏ (–∫–æ—Ä–æ—Ç–∫–æ):","en":"Meds/supplements/allergies (short):","uk":"–õ—ñ–∫–∏/–¥–æ–±–∞–≤–∫–∏/–∞–ª–µ—Ä–≥—ñ—ó (–∫–æ—Ä–æ—Ç–∫–æ):","es":"Medicamentos/suplementos/alergias (corto):"}
    },
    "habits": {
        "ru":[("–ù–µ –∫—É—Ä—é","no_smoke"),("–ö—É—Ä—é","smoke"),("–ê–ª–∫–æ–≥–æ–ª—å —Ä–µ–¥–∫–æ","alc_low"),("–ê–ª–∫–æ–≥–æ–ª—å —á–∞—Å—Ç–æ","alc_high"),("–ö–æ—Ñ–µ–∏–Ω 0‚Äì1","caf_low"),("–ö–æ—Ñ–µ–∏–Ω 2‚Äì3","caf_mid"),("–ö–æ—Ñ–µ–∏–Ω 4+","caf_high")],
        "en":[("No smoking","no_smoke"),("Smoking","smoke"),("Alcohol rare","alc_low"),("Alcohol often","alc_high"),("Caffeine 0‚Äì1","caf_low"),("Caffeine 2‚Äì3","caf_mid"),("Caffeine 4+","caf_high")],
        "uk":[("–ù–µ –∫—É—Ä—é","no_smoke"),("–ö—É—Ä—é","smoke"),("–ê–ª–∫–æ–≥–æ–ª—å —Ä—ñ–¥–∫–æ","alc_low"),("–ê–ª–∫–æ–≥–æ–ª—å —á–∞—Å—Ç–æ","alc_high"),("–ö–æ—Ñ–µ—ó–Ω 0‚Äì1","caf_low"),("–ö–æ—Ñ–µ—ó–Ω 2‚Äì3","caf_mid"),("–ö–æ—Ñ–µ—ó–Ω 4+","caf_high")],
        "es":[("No fuma","no_smoke"),("Fuma","smoke"),("Alcohol raro","alc_low"),("Alcohol a menudo","alc_high"),("Cafe√≠na 0‚Äì1","caf_low"),("Cafe√≠na 2‚Äì3","caf_mid"),("Cafe√≠na 4+","caf_high")],
        "label":{"ru":"–ü—Ä–∏–≤—ã—á–∫–∏ (–≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ):","en":"Habits (pick closest):","uk":"–ó–≤–∏—á–∫–∏ (–æ–±–µ—Ä—ñ—Ç—å –±–ª–∏–∂—á–µ):","es":"H√°bitos (elige):"}
    },
}

async def start_mini_intake(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    sessions[uid] = {"mini_active": True, "mini_step": 0, "mini_answers": {}}
    await context.bot.send_message(chat_id, {
        "ru":"üîé –ú–∏–Ω–∏-–æ–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (4‚Äì6 –∫–ª–∏–∫–æ–≤).",
        "uk":"üîé –ú—ñ–Ω—ñ-–æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó (4‚Äì6 –∫–ª—ñ–∫—ñ–≤).",
        "en":"üîé Mini-intake for personalization (4‚Äì6 taps).",
        "es":"üîé Mini-intake para personalizaci√≥n (4‚Äì6 toques).",
    }[lang], reply_markup=ReplyKeyboardRemove())
    await ask_next_mini(context, chat_id, lang, uid)

def build_mini_kb(lang: str, key: str) -> InlineKeyboardMarkup:
    opts = MINI_STEPS[key].get(lang, [])
    rows, row = [], []
    for label, val in opts:
        row.append(InlineKeyboardButton(label, callback_data=f"mini|choose|{key}|{val}"))
        if len(row) == 3:
            rows.append(row); row=[]
    if row: rows.append(row)
    if key in MINI_FREE_KEYS or (not opts):
        rows.append([InlineKeyboardButton(T[lang]["write"], callback_data=f"mini|write|{key}")])
    rows.append([InlineKeyboardButton(T[lang]["skip"], callback_data=f"mini|skip|{key}")])
    return InlineKeyboardMarkup(rows)

async def ask_next_mini(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    s = sessions.get(uid, {})
    step_idx = s.get("mini_step", 0)
    if step_idx >= len(MINI_KEYS):
        answers = s.get("mini_answers", {})
        if answers.get("meds_allergies"):
            profiles_upsert(uid, {"meds":answers["meds_allergies"], "allergies":answers["meds_allergies"]})
        profiles_upsert(uid, answers)
        sessions[uid]["mini_active"] = False
        # –ø–µ—Ä–≤–∏—á–Ω—ã–π –Ω–∞–±—Ä–æ—Å–æ–∫ ai_profile
        ap = {"goals": answers.get("goal",""), "habits": answers.get("habits",""), "diet_focus": answers.get("diet_focus","")}
        profiles_upsert(uid, {"ai_profile": json.dumps(ap, ensure_ascii=False), "updated_at": iso(utcnow())})
        await context.bot.send_message(chat_id, T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
        await show_quickbar(context, chat_id, lang)
        return
    key = MINI_KEYS[step_idx]
    label = MINI_STEPS[key]["label"][lang]
    await context.bot.send_message(chat_id, label, reply_markup=build_mini_kb(lang, key))

def mini_handle_choice(uid: int, key: str, value: str):
    s = sessions.setdefault(uid, {"mini_active": True, "mini_step": 0, "mini_answers": {}})
    s["mini_answers"][key] = value
    s["mini_step"] = int(s.get("mini_step", 0)) + 1


# ---------- Anti-duplicate questions ----------
def _ratio(a: str, b: str) -> float:
    return SequenceMatcher(None, (a or "").lower(), (b or "").lower()).ratio()

def is_duplicate_question(uid: int, text: str, thresh: float = 0.93) -> bool:
    s = sessions.setdefault(uid, {})
    asked = s.setdefault("asked_prompts", [])
    for prev in asked[-4:]:
        if _ratio(prev, text) >= thresh:
            return True
    asked.append(text)
    if len(asked) > 16:
        s["asked_prompts"] = asked[-16:]
    return False

async def send_unique(msg_obj, uid: int, text: str, reply_markup=None, force: bool = False):
    if force or not is_duplicate_question(uid, text):
        await msg_obj.reply_text(text, reply_markup=reply_markup)


# -------- Sheets (with memory fallback) --------
SHEETS_ENABLED = True
ss = None
ws_feedback = ws_users = ws_profiles = ws_episodes = ws_reminders = ws_daily = None
ws_rules = ws_challenges = None

GSPREAD_CLIENT: Optional[gspread.client.Client] = None
SPREADSHEET_ID_FOR_INTAKE: str = ""

def _ws_headers(ws):
    return ws.row_values(1) if ws and ws.row_values(1) else []

def _ws_ensure_columns(ws, desired_headers: List[str]):
    """
    –ù–∞–¥—ë–∂–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ + –∞–≤—Ç–æ—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ª–∏—Å—Ç–∞.
    """
    try:
        current = _ws_headers(ws)
        if not current:
            if ws.col_count < len(desired_headers):
                ws.add_cols(len(desired_headers) - ws.col_count)
            ws.append_row(desired_headers)
            return
        if ws.col_count < len(desired_headers):
            ws.add_cols(len(desired_headers) - ws.col_count)
        missing = [h for h in desired_headers if h not in current]
        if missing:
            for h in missing:
                ws.update_cell(1, len(current)+1, h)
                current.append(h)
    except Exception as e:
        logging.warning(f"ensure columns failed for {getattr(ws,'title','?')}: {e}")

def _sheets_init():
    global SHEETS_ENABLED, ss, ws_feedback, ws_users, ws_profiles, ws_episodes, ws_reminders, ws_daily, ws_rules, ws_challenges
    global GSPREAD_CLIENT, SPREADSHEET_ID_FOR_INTAKE
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if not creds_json:
            raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
        creds = json.loads(creds_json)
        credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds, scope)
        gclient = gspread.authorize(credentials)
        GSPREAD_CLIENT = gclient

        try:
            ss = gclient.open_by_key(SHEET_ID) if SHEET_ID else gclient.open(SHEET_NAME)
        except SpreadsheetNotFound:
            if ALLOW_CREATE_SHEET:
                ss = gclient.create(SHEET_NAME)
            else:
                raise

        try:
            SPREADSHEET_ID_FOR_INTAKE = ss.id
        except Exception:
            SPREADSHEET_ID_FOR_INTAKE = SHEET_ID or ""

        def _ensure_ws(title: str, headers: List[str]):
            try:
                ws = ss.worksheet(title)
            except gspread.WorksheetNotFound:
                ws = ss.add_worksheet(title=title, rows=4000, cols=max(50, len(headers)))
                ws.append_row(headers)
            if not ws.get_all_values():
                ws.append_row(headers)
            _ws_ensure_columns(ws, headers)
            return ws

        ws_feedback   = _ensure_ws("Feedback",   ["timestamp","user_id","name","username","rating","comment"])
        ws_users      = _ensure_ws("Users",      ["user_id","username","lang","consent","tz_offset","checkin_hour","evening_hour","paused","last_seen","last_auto_date","last_auto_count","streak","streak_best","gm_last_date"])
        ws_profiles   = _ensure_ws("Profiles",   [
            "user_id","sex","age","goal","goals","conditions","meds","allergies",
            "sleep","activity","diet","diet_focus","steps_target","habits",
            "cycle_enabled","cycle_last_date","cycle_avg_len","last_cycle_tip_date",
            "quiet_hours","consent_flags","notes","updated_at","city",
            "surgeries","ai_profile","birth_date"
        ])
        ws_episodes   = _ensure_ws("Episodes",   ["episode_id","user_id","topic","started_at","baseline_severity","red_flags","plan_accepted","target","reminder_at","next_checkin_at","status","last_update","notes"])
        ws_daily      = _ensure_ws("DailyCheckins",["timestamp","user_id","mood","energy","comment"])
        ws_rules      = _ensure_ws("Rules",      ["rule_id","topic","segment","trigger","advice_text","citation","last_updated","enabled"])
        ws_challenges = _ensure_ws("Challenges", ["user_id","challenge_id","name","start_date","length_days","days_done","status"])
        ws_reminders  = _ensure_ws("Reminders",  ["id","user_id","text","when_utc","created_at","status"])

        logging.info("Google Sheets connected.")
    except Exception as e:
        SHEETS_ENABLED = False
        logging.error(f"SHEETS disabled (fallback to memory). Reason: {e}")

_sheets_init()

# --------- Memory fallback stores ----------
MEM_USERS: Dict[int, dict] = {}
MEM_PROFILES: Dict[int, dict] = {}
MEM_EPISODES: List[dict] = []
MEM_REMINDERS: List[dict] = []
MEM_FEEDBACK: List[dict] = []
MEM_DAILY: List[dict] = []
MEM_CHALLENGES: List[dict] = []
MEM_RULES: List[dict] = []

# --------- Sessions ----------
sessions: Dict[int, dict] = {}

# -------- Sheets wrappers --------
def _headers(ws):
    return ws.row_values(1)

def users_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        for r in ws_users.get_all_records():
            if str(r.get("user_id")) == str(uid):
                return r
        return {}
    return MEM_USERS.get(uid, {})

def users_upsert(uid: int, username: str, lang: str):
    base = {
        "user_id": str(uid),
        "username": username or "",
        "lang": lang,
        "consent": "no",
        "tz_offset": "0",
        "checkin_hour": DEFAULT_CHECKIN_LOCAL,
        "evening_hour": "",
        "paused": "no",
        "last_seen": iso(utcnow()),
        "last_auto_date": "",
        "last_auto_count": "0",
        "streak": "0",
        "streak_best": "0",
        "gm_last_date": "",
    }

    if SHEETS_ENABLED:
        vals = ws_users.get_all_records()
        hdr = _headers(ws_users)
        end_col = gsu.rowcol_to_a1(1, len(hdr)).rstrip("1")
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                merged = {**r, **{k: base[k] for k in base if not str(r.get(k) or "").strip()}}
                ws_users.update(f"A{i}:{end_col}{i}", [[merged.get(h, "") for h in hdr]])
                return
        ws_users.append_row([base.get(h, "") for h in hdr])
    else:
        MEM_USERS[uid] = {**MEM_USERS.get(uid, {}), **base}

def users_set(uid: int, field: str, value: str):
    if SHEETS_ENABLED:
        vals = ws_users.get_all_records()
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                hdr = _headers(ws_users)
                if field not in hdr:
                    _ws_ensure_columns(ws_users, hdr + [field])
                    hdr = _headers(ws_users)
                ws_users.update_cell(i, hdr.index(field)+1, value)
                return
    else:
        u = MEM_USERS.setdefault(uid, {})
        u[field] = value

def profiles_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        for r in ws_profiles.get_all_records():
            if str(r.get("user_id")) == str(uid):
                return r
        return {}
    return MEM_PROFILES.get(uid, {})

def profiles_upsert(uid: int, data: Dict[str, str]):
    data = dict(data or {})
    data["user_id"] = str(uid)
    data.setdefault("updated_at", iso(utcnow()))
    if SHEETS_ENABLED:
        vals = ws_profiles.get_all_records()
        hdr = _headers(ws_profiles)
        for k in data:
            if k not in hdr:
                _ws_ensure_columns(ws_profiles, hdr + [k]); hdr = _headers(ws_profiles)
        end_col = gsu.rowcol_to_a1(1, len(hdr)).rstrip("1")
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                merged = {**r, **data}
                ws_profiles.update(f"A{i}:{end_col}{i}", [[merged.get(h, "") for h in hdr]])
                return
        ws_profiles.append_row([data.get(h, "") for h in hdr])
    else:
        MEM_PROFILES[uid] = {**MEM_PROFILES.get(uid, {}), **data}

def feedback_add(ts: str, uid: int, name: str, username: str, rating: str, comment: str):
    rec = {"timestamp": ts, "user_id": str(uid), "name": name, "username": username, "rating": rating, "comment": comment}
    if SHEETS_ENABLED:
        ws_feedback.append_row([rec.get(h, "") for h in _headers(ws_feedback)])
    else:
        MEM_FEEDBACK.append(rec)

def daily_add(ts: str, uid: int, mood: str="", comment: str="", energy: Optional[int]=None):
    rec = {"timestamp": ts, "user_id": str(uid), "mood": mood, "comment": comment, "energy": "" if energy is None else str(energy)}
    if SHEETS_ENABLED:
        ws_daily.append_row([rec.get(h, "") for h in _headers(ws_daily)])
    else:
        MEM_DAILY.append(rec)

def episode_create(uid: int, topic: str, severity: int=5, red: str="") -> str:
    eid = str(uuid.uuid4())
    rec = {"episode_id": eid, "user_id": str(uid), "topic": topic, "started_at": iso(utcnow()),
           "baseline_severity": str(severity), "red_flags": red, "plan_accepted": "", "target":"", "reminder_at":"",
           "next_checkin_at":"", "status":"open", "last_update": iso(utcnow()), "notes":""}
    if SHEETS_ENABLED:
        ws_episodes.append_row([rec.get(h, "") for h in _headers(ws_episodes)])
    else:
        MEM_EPISODES.append(rec)
    return eid

def episode_find_open(uid: int) -> Optional[dict]:
    store = ws_episodes.get_all_records() if SHEETS_ENABLED else MEM_EPISODES
    for r in store:
        if str(r.get("user_id")) == str(uid) and (r.get("status") or "") == "open":
            return r
    return None

def episode_set(eid: str, field: str, value: str):
    if SHEETS_ENABLED:
        vals = ws_episodes.get_all_records()
        hdr = _headers(ws_episodes)
        if field not in hdr:
            _ws_ensure_columns(ws_episodes, hdr + [field]); hdr = _headers(ws_episodes)
        for i, r in enumerate(vals, start=2):
            if str(r.get("episode_id")) == str(eid):
                ws_episodes.update_cell(i, hdr.index(field)+1, value); return
    else:
        for r in MEM_EPISODES:
            if r["episode_id"] == eid:
                r[field] = value; return

def challenge_get(uid: int) -> Optional[dict]:
    store = ws_challenges.get_all_records() if SHEETS_ENABLED else MEM_CHALLENGES
    for r in store:
        if str(r.get("user_id")) == str(uid) and str(r.get("status")) != "done":
            return r
    return None

def challenge_start(uid: int, length_days:int=7):
    rec = {"user_id": str(uid), "challenge_id": str(uuid.uuid4()), "name": "hydrate7",
           "start_date": iso(utcnow()), "length_days": str(length_days), "days_done":"0", "status":"active"}
    if SHEETS_ENABLED:
        ws_challenges.append_row([rec.get(h, "") for h in _headers(ws_challenges)])
    else:
        MEM_CHALLENGES.append(rec)

def reminder_add(uid: int, text: str, when_utc: datetime) -> str:
    rid = str(uuid.uuid4())
    rec = {"id": rid, "user_id": str(uid), "text": text, "when_utc": iso(when_utc), "created_at": iso(utcnow()), "status":"open"}
    if SHEETS_ENABLED:
        ws_reminders.append_row([rec.get(h, "") for h in _headers(ws_reminders)])
    else:
        MEM_REMINDERS.append(rec)
    return rid


# ---------- Time & quiet hours helpers ----------
def _user_tz_off(uid:int) -> int:
    try:
        return int(str(users_get(uid).get("tz_offset") or "0"))
    except Exception:
        return 0

def hhmm_tuple(hhmm: str) -> Tuple[int,int]:
    m = re.match(r"^\s*([01]?\d|2[0-3]):([0-5]\d)\s*$", str(hhmm or ""))
    if not m: return (8,30)
    return (int(m.group(1)), int(m.group(2)))

def user_local_now(uid:int) -> datetime:
    off = _user_tz_off(uid)
    return utcnow() + timedelta(hours=off)

def local_to_utc_dt(uid:int, dt_local: datetime) -> datetime:
    off = _user_tz_off(uid)
    return (dt_local - timedelta(hours=off)).astimezone(timezone.utc)

def utc_to_local_dt(uid:int, dt_utc: datetime) -> datetime:
    off = _user_tz_off(uid)
    return (dt_utc + timedelta(hours=off))

def _user_quiet_hours(uid:int) -> str:
    prof = profiles_get(uid) or {}
    qh = (prof.get("quiet_hours") or DEFAULT_QUIET_HOURS).strip()
    return qh if re.match(r"^\s*([01]?\d|2[0-3]):[0-5]\d-([01]?\d|2[0-3]):[0-5]\d\s*$", qh) else DEFAULT_QUIET_HOURS

def adjust_out_of_quiet(dt_local: datetime, qh: str) -> datetime:
    m = re.match(r"^\s*([01]?\d|2[0-3]):([0-5]\d)-([01]?\d|2[0-3]):([0-5]\d)\s*$", qh)
    if not m: return dt_local
    start = dt_local.replace(hour=int(m.group(1)), minute=int(m.group(2)), second=0, microsecond=0)
    end   = dt_local.replace(hour=int(m.group(3)), minute=int(m.group(4)), second=0, microsecond=0)
    if start <= end:
        if start <= dt_local <= end: return end
    else:
        if dt_local >= start or dt_local <= end:
            return end if dt_local <= end else (start + timedelta(days=1))
    return dt_local


# ---------- Quickbar & menus ----------
def quickbar_kb(lang: str) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(T[lang]["quick_health"], callback_data="menu|h60")],
        [InlineKeyboardButton(T[lang]["quick_er"],     callback_data="menu|er"),
         InlineKeyboardButton(T[lang]["quick_lab"],    callback_data="menu|lab")],
        [InlineKeyboardButton(T[lang]["quick_rem"],    callback_data="menu|rem")],
    ]
    return InlineKeyboardMarkup(rows)

async def show_quickbar(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str):
    try:
        await context.bot.send_message(chat_id, T[lang]["quick_title"], reply_markup=quickbar_kb(lang))
    except Exception as e:
        logging.warning(f"quickbar send failed: {e}")

def inline_topic_kb(lang: str) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(T[lang]["h60_btn"], callback_data="menu|h60")],
        [InlineKeyboardButton(T[lang]["hydrate_btn"], callback_data="menu|hydrate"),
         InlineKeyboardButton(T[lang]["gm_energy"],   callback_data="menu|energy")],
        [InlineKeyboardButton(T[lang]["set_quiet_btn"], callback_data="youth:set_quiet"),
         InlineKeyboardButton(T[lang]["gm_evening_btn"], callback_data="youth:gm_evening")],
    ]
    return InlineKeyboardMarkup(rows)


# ------------- LLM Router (with personalization) -------------
SYS_ROUTER = (
    "You are TendAI ‚Äî a concise, warm, professional health & longevity assistant (not a doctor). "
    "Always answer strictly in {lang}. Keep replies short (<=6 lines + up to 4 bullets). "
    "Personalize using profile (sex/age/goal/conditions, diet_focus, steps_target). "
    "TRIAGE: ask 1‚Äì2 clarifiers first; advise ER only for clear red flags. "
    "Return JSON ONLY: {\"intent\":\"symptom\"|\"nutrition\"|\"sleep\"|\"labs\"|\"habits\"|\"longevity\"|\"other\","
    "\"assistant_reply\":\"string\",\"followups\":[\"string\"],\"needs_more\":true,\"red_flags\":false,\"confidence\":0.0}"
)

def llm_router_answer(text: str, lang: str, profile: dict) -> dict:
    if not oai:
        return {"intent":"other","assistant_reply":T[lang]["unknown"],"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}

    sys = SYS_ROUTER.replace("{lang}", lang) + f"\nUserProfile: {json.dumps(profile, ensure_ascii=False)}"
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.25,
            max_tokens=420,
            response_format={"type":"json_object"},
            messages=[
                {"role":"system","content":sys},
                {"role":"user","content":text}
            ]
        )
        out = resp.choices[0].message.content.strip()
        data = json.loads(out)
        if "followups" not in data or data["followups"] is None:
            data["followups"] = []
        return data
    except Exception as e:
        logging.error(f"router LLM error: {e}")
        return {"intent":"other","assistant_reply":T[lang]["unknown"],"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}


# ===== Health60 =====
def _fmt_bullets(items: list) -> str:
    return "\n".join([f"‚Ä¢ {x}" for x in items if isinstance(x, str) and x.strip()])

SYS_H60 = (
    "You are TendAI ‚Äî a concise, warm, professional health & longevity assistant (not a doctor). "
    "Always answer strictly in {lang}. Keep it short and practical. "
    "Given a symptom text and a brief user profile, produce JSON ONLY: "
    "{\"causes\":[\"...\"],\"serious\":\"...\",\"do_now\":[\"...\"],\"see_doctor\":[\"...\"]}. "
    "Rules: 2‚Äì4 simple causes, exactly 1 serious item to rule out, "
    "3‚Äì5 do_now concrete steps for the next 24‚Äì48h, 2‚Äì3 see_doctor cues."
)

def health60_make_plan(lang: str, symptom_text: str, profile: dict) -> str:
    fallback_map = {
        "ru": (
            f"{T['ru']['h60_t1']}:\n‚Ä¢ –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –±—ã—Ç–æ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã\n"
            f"{T['ru']['h60_serious']}: ‚Ä¢ –ò—Å–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∫–∏–µ, –Ω–æ —Å–µ—Ä—å—ë–∑–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏\n\n"
            f"{T['ru']['h60_t2']}:\n‚Ä¢ –í–æ–¥–∞ 300‚Äì500 –º–ª\n‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–¥—ã—Ö 15‚Äì20 –º–∏–Ω\n‚Ä¢ –ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ, –º–µ–Ω—å—à–µ —ç–∫—Ä–∞–Ω–æ–≤\n\n"
            f"{T['ru']['h60_t3']}:\n‚Ä¢ –£—Å–∏–ª–µ–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤\n‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª\n‚Ä¢ –ë–æ–ª—å ‚â•7/10"
        ),
        "uk": (
            f"{T['uk']['h60_t1']}:\n‚Ä¢ –ù–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ –ø–æ–±—É—Ç–æ–≤—ñ –ø—Ä–∏—á–∏–Ω–∏\n"
            f"{T['uk']['h60_serious']}: ‚Ä¢ –í–∏–∫–ª—é—á–∏—Ç–∏ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ, –∞–ª–µ —Å–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–∞–Ω–∏ –ø—Ä–∏ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—ñ\n\n"
            f"{T['uk']['h60_t2']}:\n‚Ä¢ –í–æ–¥–∞ 300‚Äì500 –º–ª\n‚Ä¢ –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ 15‚Äì20 —Ö–≤\n‚Ä¢ –ü—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è, –º–µ–Ω—à–µ –µ–∫—Ä–∞–Ω—ñ–≤\n\n"
            f"{T['uk']['h60_t3']}:\n‚Ä¢ –ü–æ—Å–∏–ª–µ–Ω–Ω—è —Å–∏–º–ø—Ç–æ–º—ñ–≤\n‚Ä¢ –í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/¬´—á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ¬ª\n‚Ä¢ –ë—ñ–ª—å ‚â•7/10"
        ),
        "en": (
            f"{T['en']['h60_t1']}:\n‚Ä¢ Most likely everyday causes\n"
            f"{T['en']['h60_serious']}: ‚Ä¢ Rule out rare but serious issues if worsening\n\n"
            f"{T['en']['h60_t2']}:\n‚Ä¢ Drink 300‚Äì500 ml water\n‚Ä¢ 15‚Äì20 min rest\n‚Ä¢ Ventilate, reduce screens\n\n"
            f"{T['en']['h60_t3']}:\n‚Ä¢ Worsening symptoms\n‚Ä¢ High fever/red flags\n‚Ä¢ Pain ‚â•7/10"
        ),
    }
    fallback = fallback_map.get(lang, fallback_map["en"])

    if not oai:
        return fallback

    sys = SYS_H60.replace("{lang}", lang)
    user = {
        "symptom": (symptom_text or "").strip()[:500],
        "profile": {k: profile.get(k, "") for k in ["sex","age","goal","conditions","meds","sleep","activity","diet","diet_focus","steps_target"]}
    }
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.2,
            max_tokens=420,
            response_format={"type": "json_object"},
            messages=[
                {"role":"system","content": sys},
                {"role":"user","content": json.dumps(user, ensure_ascii=False)}
            ]
        )
        data = json.loads(resp.choices[0].message.content.strip())
        causes = _fmt_bullets(data.get("causes") or [])
        serious = (data.get("serious") or "").strip()
        do_now = _fmt_bullets(data.get("do_now") or [])
        see_doc = _fmt_bullets(data.get("see_doctor") or [])

        parts = []
        if causes:
            parts.append(f"{T[lang]['h60_t1']}:\n{causes}")
        if serious:
            parts.append(f"{T[lang]['h60_serious']}: {serious}")
        if do_now:
            parts.append(f"\n{T[lang]['h60_t2']}:\n{do_now}")
        if see_doc:
            parts.append(f"\n{T[lang]['h60_t3']}:\n{see_doc}")
        return "\n".join(parts).strip()
    except Exception as e:
        logging.error(f"health60 LLM error: {e}")
        return fallback


# ---------- Scheduling stubs (safe, no NameError) ----------
def _has_jq_ctx(context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        return hasattr(context.application, "job_queue") and (context.application.job_queue is not None)
    except Exception:
        return False

def schedule_daily_checkin(app, uid:int, tz_off:int, hhmm:str, lang:str):
    try:
        # –ß–∞—Å—Ç—å 2 –¥–æ–±–∞–≤–∏—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ; –∑–¥–µ—Å—å ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π no-op.
        for j in app.job_queue.get_jobs_by_name(f"daily_{uid}"):
            j.schedule_removal()
    except Exception:
        pass

def schedule_evening_checkin(app, uid:int, tz_off:int, hhmm:str, lang:str):
    try:
        for j in app.job_queue.get_jobs_by_name(f"evening_{uid}"):
            j.schedule_removal()
    except Exception:
        pass

def schedule_from_sheet_on_start(app):
    # –ó–∞–≥–ª—É—à–∫–∞ ‚Äî –≤ –ß.2 –º–æ–∂–Ω–æ –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è/—á–µ–∫-–∏–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    return


# ---------- One-off reminder job (stubbed) ----------
async def job_oneoff_reminder(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid = d.get("user_id"); rid = d.get("reminder_id")
    try:
        await context.bot.send_message(uid, T[_user_lang(uid)]["thanks"])
    except Exception as e:
        logging.error(f"job_oneoff_reminder send error: {e}")


# ---------- Helpers for daily/evening ----------
def _schedule_oneoff_with_sheet(context: ContextTypes.DEFAULT_TYPE, uid: int, when_local: datetime, text: str):
    qh = _user_quiet_hours(uid)
    adjusted_local = adjust_out_of_quiet(when_local, qh)
    when_utc = local_to_utc_dt(uid, adjusted_local)
    rid = reminder_add(uid, text, when_utc)
    if _has_jq_ctx(context):
        delay = max(60, (when_utc - utcnow()).total_seconds())
        try:
            context.application.job_queue.run_once(job_oneoff_reminder, when=delay, data={"user_id":uid,"reminder_id":rid})
        except Exception as e:
            logging.error(f"run_once failed: {e}")
    return adjusted_local

def _format_hhmm(dt: datetime) -> str:
    return dt.strftime("%H:%M")


# ---------- Morning/Evening jobs (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ß.2) ----------
async def job_daily_checkin(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid = d.get("user_id"); lang = norm_lang((d.get("lang") or "en"))
    if not uid: return
    u = users_get(uid)
    if (u.get("paused") or "").lower() == "yes":
        return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["mood_excellent"], callback_data="gm|mood|excellent"),
         InlineKeyboardButton(T[lang]["mood_ok"],        callback_data="gm|mood|ok")],
        [InlineKeyboardButton(T[lang]["mood_tired"],     callback_data="gm|mood|tired"),
         InlineKeyboardButton(T[lang]["mood_pain"],      callback_data="gm|mood|pain")],
        [InlineKeyboardButton(T[lang]["mood_skip"],      callback_data="gm|skip")]
    ])
    try:
        await context.bot.send_message(uid, T[lang]["daily_gm"], reply_markup=kb)
    except Exception as e:
        logging.error(f"job_daily_checkin send error: {e}")

async def job_evening_checkin(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid = d.get("user_id"); lang = norm_lang((d.get("lang") or "en"))
    if not uid: return
    u = users_get(uid)
    if (u.get("paused") or "").lower() == "yes":
        return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["evening_tip_btn"], callback_data="youth:tip")],
        [InlineKeyboardButton("0", callback_data="num|0"),
         InlineKeyboardButton("3", callback_data="num|3"),
         InlineKeyboardButton("6", callback_data="num|6"),
         InlineKeyboardButton("8", callback_data="num|8"),
         InlineKeyboardButton("10", callback_data="num|10")]
    ])
    try:
        await context.bot.send_message(uid, T[lang]["evening_intro"], reply_markup=kb)
    except Exception as e:
        logging.error(f"job_evening_checkin send error: {e}")


# ---------- Misc helpers ----------
def _user_lang(uid:int) -> str:
    return norm_lang((users_get(uid) or {}).get("lang") or "en")

def update_last_seen(uid:int):
    users_set(uid, "last_seen", iso(utcnow()))

def _get_skin_tip(lang:str, sex:str, age:int) -> str:
    bank = {
        "ru": [
            "–£–º—ã–≤–∞–Ω–∏–µ —Ç—ë–ø–ª–æ–π –≤–æ–¥–æ–π –∏ 30‚Äì60 —Å–µ–∫ –º—è–≥–∫–æ–≥–æ –º–∞—Å—Å–∞–∂–∞ ‚Äî —É–ª—É—á—à–∞–µ—Ç –º–∏–∫—Ä–æ—Ü–∏—Ä–∫—É–ª—è—Ü–∏—é.",
            "–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–∞ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ ‚Äî —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π anti-age."
        ],
        "en": [
            "Rinse with warm water and gentle 30‚Äì60s massage ‚Äî boosts microcirculation.",
            "Daily sunscreen is the most cost-effective anti-age step."
        ],
        "uk": [
            "–£–º–∏–≤–∞–Ω–Ω—è —Ç–µ–ø–ª–æ—é –≤–æ–¥–æ—é —Ç–∞ 30‚Äì60—Å –º–∞—Å–∞–∂ ‚Äî –∫—Ä–∞—â–∞ –º—ñ–∫—Ä–æ—Ü–∏—Ä–∫—É–ª—è—Ü—ñ—è.",
            "–°–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å—Ç —â–æ—Ä–∞–Ω–∫—É ‚Äî –Ω–∞–π–¥–µ—à–µ–≤—à–∏–π anti-age."
        ]
    }
    return random.choice(bank.get(lang, bank["en"]))

def _get_daily_tip(profile:dict, lang:str) -> str:
    tips = {
        "ru": ["–°–¥–µ–ª–∞–π 20 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ ‚Äî –º–æ–∑–≥ —Å–∫–∞–∂–µ—Ç ¬´—Å–ø–∞—Å–∏–±–æ¬ª.", "5 –º–∏–Ω—É—Ç –Ω–∞ —Å–≤–µ—Ç –∏ –≤–æ–∑–¥—É—Ö ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞."],
        "en": ["Take 20 deep breaths ‚Äî your brain will thank you.", "5 minutes of light & air ‚Äî soft reset."],
        "uk": ["–ó—Ä–æ–±–∏ 20 –≥–ª–∏–±–æ–∫–∏—Ö –≤–¥–∏—Ö—ñ–≤ ‚Äî –º–æ–∑–æ–∫ —Å–∫–∞–∂–µ ¬´–¥—è–∫—É—é¬ª.", "5 —Ö–≤–∏–ª–∏–Ω —Å–≤—ñ—Ç–ª–∞ —Ç–∞ –ø–æ–≤—ñ—Ç—Ä—è ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫."]
    }
    return random.choice(tips.get(lang, tips["en"]))


# ===== Life metrics =====
def progress_bar(percent: float, width:int=12) -> str:
    p = max(0, min(100, int(round(percent))))
    done = max(0, min(width, int(round(width * p / 100.0))))
    return "‚ñà"*done + "‚ñë"*(width-done)

def life_metrics(profile: dict) -> Dict[str, int]:
    # –ï—Å–ª–∏ –µ—Å—Ç—å birth_date (YYYY-MM-DD) ‚Äî —Ç–æ—á–Ω–µ–µ; –∏–Ω–∞—á–µ –æ—Ü–µ–Ω–æ—á–Ω–æ –ø–æ age*365
    today = date.today()
    bd = (profile.get("birth_date") or "").strip()
    days = 0
    if re.match(r"^\d{4}-\d{2}-\d{2}$", bd):
        try:
            y,m,d = map(int, bd.split("-")); born = date(y,m,d)
            days = (today - born).days
        except Exception:
            days = 0
    if days <= 0:
        try:
            age = int(re.findall(r"\d+", str(profile.get("age") or "0"))[0])
        except Exception:
            age = 0
        days = max(0, age*365)
    percent = min(100.0, round(days/365.0/100.0*100, 1))  # –∫ 100 –≥–æ–¥–∞–º
    return {"days_lived": days, "percent_to_100": percent}


# ------------- Commands (shells) -------------
async def post_init(app):
    me = await app.bot.get_me()
    logging.info(f"BOT READY: @{me.username} (id={me.id})")
    try:
        schedule_from_sheet_on_start(app)
    except Exception as e:
        logging.warning(f"schedule_from_sheet_on_start failed: {e}")

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = norm_lang(getattr(user, "language_code", None))
    users_upsert(user.id, user.username or "", lang)
    context.user_data["lang"] = lang
    sessions.setdefault(user.id, {})["last_user_text"] = "/start"
    update_last_seen(user.id)

    await update.message.reply_text(T[lang]["welcome"], reply_markup=ReplyKeyboardRemove())
    # –ì–∏–±—Ä–∏–¥: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º quickbar —Å—Ä–∞–∑—É
    await show_quickbar(context, update.effective_chat.id, lang)

    prof = profiles_get(user.id)
    if profile_is_incomplete(prof):
        await start_mini_intake(context, update.effective_chat.id, lang, user.id)
    else:
        await update.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
        await show_quickbar(context, update.effective_chat.id, lang)

    u = users_get(user.id)
    if (u.get("consent") or "").lower() not in {"yes","no"}:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang]["yes"], callback_data="consent|yes"),
                                    InlineKeyboardButton(T[lang]["no"], callback_data="consent|no")]])
        await update.message.reply_text(T[lang]["ask_consent"], reply_markup=kb)

    tz_off = int(str(u.get("tz_offset") or "0"))
    hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, user.id, tz_off, hhmm, lang)
        eh = (u.get("evening_hour") or "").strip()
        if eh:
            schedule_evening_checkin(context.application, user.id, tz_off, eh, lang)
    else:
        logging.warning("JobQueue not available on /start ‚Äì daily/evening check-in not scheduled.")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or "en")
    update_last_seen(update.effective_user.id)
    await update.message.reply_text(T[lang]["help"])
    await show_quickbar(context, update.effective_chat.id, lang)

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or "en")
    update_last_seen(update.effective_user.id)
    await update.message.reply_text(T[lang]["privacy"])

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "yes")
    lang = norm_lang(users_get(uid).get("lang") or "en")
    update_last_seen(uid)
    await update.message.reply_text(T[lang]["paused_on"])

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "no")
    lang = norm_lang(users_get(uid).get("lang") or "en")
    update_last_seen(uid)
    await update.message.reply_text(T[lang]["paused_off"])

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    update_last_seen(uid)
    if SHEETS_ENABLED:
        vals = ws_users.get_all_values()
        for i in range(2, len(vals)+1):
            if ws_users.cell(i,1).value == str(uid):
                ws_users.delete_rows(i); break
        try:
            vals = ws_profiles.get_all_values()
            idxs = []
            for i in range(2, len(vals)+1):
                if ws_profiles.cell(i,1).value == str(uid):
                    idxs.append(i)
            for shift, i in enumerate(idxs):
                ws_profiles.delete_rows(i - shift)
        except Exception:
            pass
    else:
        MEM_USERS.pop(uid, None); MEM_PROFILES.pop(uid, None)
        global MEM_EPISODES, MEM_REMINDERS, MEM_DAILY
        MEM_EPISODES = [r for r in MEM_EPISODES if r["user_id"]!=str(uid)]
        MEM_REMINDERS = [r for r in MEM_REMINDERS if r["user_id"]!=str(uid)]
        MEM_DAILY = [r for r in MEM_DAILY if r["user_id"]!=str(uid)]
    lang = norm_lang(getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(T[lang]["deleted"], reply_markup=ReplyKeyboardRemove())

# ---------- /profile ----------
async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üß© Start intake" if lang=="en" else "üß© –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å",
                                                      callback_data="intake:start")]])
    await update.message.reply_text(T[lang]["profile_intro"], reply_markup=kb)

# ---------- /settz ----------
async def cmd_settz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    txt = (update.message.text or "").strip()
    m = re.search(r"(-?\+?\d{1,2})", txt)
    if not m:
        await update.message.reply_text("Usage: /settz +2  |  –ü—Ä–∏–º–µ—Ä: /settz +3")
        return
    try:
        off = int(m.group(1))
        off = max(-12, min(14, off))
        users_set(uid, "tz_offset", str(off))
        await update.message.reply_text(f"UTC offset set: {off:+d}")
        u = users_get(uid)
        hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
        if _has_jq_ctx(context):
            schedule_daily_checkin(context.application, uid, off, hhmm, lang)
    except Exception as e:
        logging.error(f"/settz error: {e}")
        await update.message.reply_text("Failed to set timezone offset.")

# ---------- /checkin_on /checkin_off ----------
async def cmd_checkin_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    txt = (update.message.text or "").strip()
    m = re.search(r"([01]?\d|2[0-3]):([0-5]\d)", txt)
    hhmm = m.group(0) if m else DEFAULT_CHECKIN_LOCAL
    users_set(uid, "checkin_hour", hhmm)
    users_set(uid, "paused", "no")
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, uid, _user_tz_off(uid), hhmm, lang)
    await update.message.reply_text(f"Daily check-in set to {hhmm} (local).")

async def cmd_checkin_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if _has_jq_ctx(context):
        for j in context.application.job_queue.get_jobs_by_name(f"daily_{uid}"):
            j.schedule_removal()
    users_set(uid, "paused", "yes")
    await update.message.reply_text("Daily check-in disabled.")

# ---------- Lang switches ----------
async def cmd_lang_ru(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "ru")
    context.user_data["lang"] = "ru"
    await update.message.reply_text("–Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π.")

async def cmd_lang_en(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "en")
    context.user_data["lang"] = "en"
    await update.message.reply_text("Language set: English.")

async def cmd_lang_uk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "uk")
    context.user_data["lang"] = "uk"
    await update.message.reply_text("–ú–æ–≤–∞: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞.")

async def cmd_lang_es(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "es")
    context.user_data["lang"] = "es"
    await update.message.reply_text("Idioma: espa√±ol (beta).")

# ---------- Health60 ----------
async def cmd_health60(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    sessions.setdefault(uid, {})["awaiting_h60_text"] = True
    await update.message.reply_text(T[lang]["h60_intro"])
# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–ø—Ä–æ—Ñ–∏–ª—è –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ----------
def _user_lang(uid: int) -> str:
    try:
        return norm_lang(users_get(uid).get("lang") or "en")
    except Exception:
        return "en"

def _user_tz_off(uid: int) -> int:
    try:
        return int(str(users_get(uid).get("tz_offset") or "0"))
    except Exception:
        return 0

def _user_quiet_hours(uid: int) -> str:
    prof = profiles_get(uid) or {}
    return (prof.get("quiet_hours") or DEFAULT_QUIET_HOURS).strip()

def hhmm_tuple(s: str) -> Tuple[int, int]:
    m = re.match(r"^\s*([01]?\d|2[0-3]):([0-5]\d)\s*$", s or "")
    if not m:
        return (8, 30)
    return (int(m.group(1)), int(m.group(2)))

def user_local_now(uid: int) -> datetime:
    return utcnow() + timedelta(hours=_user_tz_off(uid))

def local_to_utc_dt(uid: int, local_dt: datetime) -> datetime:
    return local_dt - timedelta(hours=_user_tz_off(uid))

def adjust_out_of_quiet(dt_local: datetime, quiet: str) -> datetime:
    """–°–¥–≤–∏–≥–∞–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ç–∏—Ö–∏–µ —á–∞—Å—ã HH:MM-HH:MM (–ª–æ–∫–∞–ª—å–Ω–æ)."""
    try:
        m = re.match(r"^\s*([01]?\d|2[0-3]):([0-5]\d)-([01]?\d|2[0-3]):([0-5]\d)\s*$", quiet or "")
        if not m:
            return dt_local
        start = dt_local.replace(hour=int(m.group(1)), minute=int(m.group(2)), second=0, microsecond=0)
        end   = dt_local.replace(hour=int(m.group(3)), minute=int(m.group(4)), second=0, microsecond=0)
        inside = False
        if start <= end:
            inside = start <= dt_local <= end
        else:
            # –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
            inside = not (end < dt_local < start)
        return (end + timedelta(minutes=5)) if inside else dt_local
    except Exception:
        return dt_local


# ---------- –ë—ã—Å—Ç—Ä—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≥–∏–±—Ä–∏–¥-–æ–±—â–µ–Ω–∏–µ) ----------
def quickbar_kb(lang: str) -> InlineKeyboardMarkup:
    row1 = [
        InlineKeyboardButton("‚ö° " + (T[lang]["h60_btn"] if "h60_btn" in T[lang] else "Health60"), callback_data="menu|h60"),
    ]
    row2 = [
        InlineKeyboardButton("üöë " + (T[lang].get("act_er","ER")), callback_data="menu|er"),
        InlineKeyboardButton("üß™ " + (T[lang].get("act_find_lab","Lab")), callback_data="menu|lab"),
    ]
    row3 = [
        InlineKeyboardButton("‚è∞ " + (T[lang].get("quick_rem","Reminder")), callback_data="menu|rem")
    ]
    return InlineKeyboardMarkup([row1, row2, row3])

async def show_quickbar(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str):
    try:
        await context.bot.send_message(chat_id, (T[lang].get("quick_title") or "Quick actions"), reply_markup=quickbar_kb(lang))
    except Exception as e:
        logging.warning(f"show_quickbar error: {e}")

def inline_topic_kb(lang: str) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("‚ö° " + (T[lang]["h60_btn"] if "h60_btn" in T[lang] else "Health60"), callback_data="menu|h60"),
         InlineKeyboardButton(T[lang].get("youth_pack","Youth"), callback_data="menu|youth")],
        [InlineKeyboardButton(T[lang].get("hydrate_btn","Hydrate"), callback_data="menu|hydrate"),
         InlineKeyboardButton(T[lang].get("skintip_btn","Skin tip"), callback_data="menu|skintip")],
        [InlineKeyboardButton("üß™ " + (T[lang].get("act_find_lab","Lab")), callback_data="menu|lab"),
         InlineKeyboardButton("‚è∞ " + (T[lang].get("quick_rem","Reminder")), callback_data="menu|rem")],
    ]
    return InlineKeyboardMarkup(rows)


# ---------- –•—Ä–∞–Ω–∏–ª–∏—â–∞ –æ–±—ë—Ä—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ß.1 ----------
def profiles_upsert(uid: int, updates: Dict[str, str]):
    if SHEETS_ENABLED:
        hdr = _headers(ws_profiles)
        _ws_ensure_columns(ws_profiles, list(dict.fromkeys(hdr + list(updates.keys()))))
        vals = ws_profiles.get_all_records()
        row_i = None
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                row_i = i
                base = {**r, **updates, "user_id": str(uid), "updated_at": iso(utcnow())}
                ws_profiles.update(f"A{i}:{gsu.rowcol_to_a1(1,len(_headers(ws_profiles))).rstrip('1')}{i}",
                                   [[base.get(h,"") for h in _headers(ws_profiles)]])
                break
        if row_i is None:
            base = {"user_id": str(uid), "updated_at": iso(utcnow())}
            base.update(updates)
            ws_profiles.append_row([base.get(h,"") for h in _headers(ws_profiles)])
    else:
        prof = MEM_PROFILES.setdefault(uid, {})
        prof.update(updates)
        prof["updated_at"] = iso(utcnow())

def feedback_add(ts: str, uid: int, name: str, username: str, rating: str, comment: str):
    if SHEETS_ENABLED:
        ws_feedback.append_row([ts, str(uid), name, username, rating, comment])
    else:
        MEM_FEEDBACK.append({"timestamp":ts,"user_id":str(uid),"name":name,"username":username,"rating":rating,"comment":comment})

def daily_add(ts: str, uid: int, mood: str, comment: str, energy: Optional[int]):
    rec = {"timestamp": ts, "user_id": str(uid), "mood": mood, "energy": ("" if energy is None else str(energy)), "comment": comment}
    if SHEETS_ENABLED:
        _ws_ensure_columns(ws_daily, list(rec.keys()))
        ws_daily.append_row([rec.get(h,"") for h in _headers(ws_daily)])
    else:
        MEM_DAILY.append(rec)

def episode_create(uid: int, topic: str, severity: int, red: str) -> str:
    eid = uuid.uuid4().hex[:12]
    rec = {
        "episode_id": eid, "user_id": str(uid), "topic": topic,
        "started_at": iso(utcnow()), "baseline_severity": str(severity),
        "red_flags": red, "plan_accepted": "", "target": "", "reminder_at": "",
        "next_checkin_at": "", "status": "open", "last_update": iso(utcnow()), "notes":""
    }
    if SHEETS_ENABLED:
        _ws_ensure_columns(ws_episodes, list(rec.keys()))
        ws_episodes.append_row([rec.get(h,"") for h in _headers(ws_episodes)])
    else:
        MEM_EPISODES.append(rec)
    return eid

def episode_find_open(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED:
        vals = ws_episodes.get_all_records()
        for r in reversed(vals):
            if str(r.get("user_id")) == str(uid) and (r.get("status") or "open") != "closed":
                return r
        return None
    for r in reversed(MEM_EPISODES):
        if r["user_id"] == str(uid) and r.get("status","open") != "closed":
            return r
    return None

def episode_set(eid: str, field: str, value: str):
    if SHEETS_ENABLED:
        vals = ws_episodes.get_all_records()
        hdr = _headers(ws_episodes)
        for i, r in enumerate(vals, start=2):
            if (r.get("episode_id") or "") == eid:
                if field not in hdr:
                    _ws_ensure_columns(ws_episodes, hdr + [field]); hdr = _headers(ws_episodes)
                ws_episodes.update_cell(i, hdr.index(field)+1, value)
                ws_episodes.update_cell(i, hdr.index("last_update")+1, iso(utcnow()))
                return
    else:
        for r in MEM_EPISODES:
            if r["episode_id"] == eid:
                r[field] = value
                r["last_update"] = iso(utcnow())
                return

def reminder_add(uid: int, text: str, when_utc: datetime) -> str:
    rid = uuid.uuid4().hex[:10]
    rec = {"id": rid, "user_id": str(uid), "text": text, "when_utc": iso(when_utc), "created_at": iso(utcnow()), "status":"scheduled"}
    if SHEETS_ENABLED:
        _ws_ensure_columns(ws_reminders, list(rec.keys()))
        ws_reminders.append_row([rec.get(h,"") for h in _headers(ws_reminders)])
    else:
        MEM_REMINDERS.append(rec)
    return rid

def challenge_get(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED:
        for r in ws_challenges.get_all_records():
            if str(r.get("user_id")) == str(uid) and (r.get("status") or "") != "done":
                return r
        return None
    for r in MEM_CHALLENGES:
        if str(r.get("user_id")) == str(uid) and r.get("status")!="done":
            return r
    return None

def challenge_start(uid: int, length_days: int = 7):
    rec = {"user_id": str(uid), "challenge_id": uuid.uuid4().hex[:8], "name":"hydrate7",
           "start_date": date.today().isoformat(), "length_days": str(length_days),
           "days_done":"0", "status":"active"}
    if SHEETS_ENABLED:
        _ws_ensure_columns(ws_challenges, list(rec.keys()))
        ws_challenges.append_row([rec.get(h,"") for h in _headers(ws_challenges)])
    else:
        MEM_CHALLENGES.append(rec)

def challenge_inc(uid: int):
    ch = challenge_get(uid)
    if not ch: return
    try:
        done = int(str(ch.get("days_done") or "0")) + 1
        length = int(str(ch.get("length_days") or "7"))
    except Exception:
        done, length = 1, 7
    ch["days_done"] = str(done)
    if done >= length:
        ch["status"] = "done"
    if SHEETS_ENABLED:
        vals = ws_challenges.get_all_records()
        hdr = _headers(ws_challenges)
        for i, r in enumerate(vals, start=2):
            if r.get("challenge_id")==ch["challenge_id"]:
                ws_challenges.update_cell(i, hdr.index("days_done")+1, ch["days_done"])
                ws_challenges.update_cell(i, hdr.index("status")+1, ch["status"])
                break


# ---------- –ü–æ–ª–µ–∑–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (—Å–∫–∏–Ω/–¥–µ–Ω—å) ----------
def _get_skin_tip(lang: str, sex: str, age: int) -> str:
    if lang not in T: lang = "en"
    if age >= 40:
        return {"ru":"SPF 30+ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏ —Ä–µ—Ç–∏–Ω–æ–∏–¥ 2‚Äì3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é.","uk":"SPF 30+ —â–æ–¥–Ω—è —Ç–∞ —Ä–µ—Ç–∏–Ω–æ—ó–¥ 2‚Äì3 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å.",
                "en":"SPF 30+ daily and a retinoid 2‚Äì3√ó/week.","es":"SPF 30+ diario y retinoide 2‚Äì3√ó/sem."}[lang]
    return {"ru":"SPF 30+ –∏ –º—è–≥–∫–∏–π –Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥ 2‚Äì3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é.","uk":"SPF 30+ —ñ –º'—è–∫–∏–π –Ω—ñ–∞—Ü–∏–Ω–∞–º—ñ–¥ 2‚Äì3 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å.",
            "en":"SPF 30+ and gentle niacinamide 2‚Äì3√ó/week.","es":"SPF 30+ y niacinamida suave 2‚Äì3√ó/sem."}[lang]

def _get_daily_tip(prof: dict, lang: str) -> str:
    goal = (prof.get("goal") or "").lower()
    opts = {
        "sleep": ["20‚Äì30 –º–∏–Ω –±–µ–∑ —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.","–¢—ë–ø–ª—ã–π –¥—É—à –∑–∞ 60 –º–∏–Ω –ø–æ–º–æ–≥–∞–µ—Ç —É—Å–Ω—É—Ç—å."],
        "energy": ["–°—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –∏ 5-–º–∏–Ω –ø—Ä–æ–≥—É–ª–∫–∞.","2√ó –±—ã—Å—Ç—Ä—ã–µ —Ä–∞—Å—Ç—è–∂–∫–∏ ‚Äî –≤–∑–±–æ–¥—Ä—è—Ç."],
        "weight": ["–û–≤–æ—â–∏ –∫ –∫–∞–∂–¥–æ–º—É –ø—Ä–∏—ë–º—É –ø–∏—â–∏.","–ë–æ–ª—å—à–µ –±–µ–ª–∫–∞ —É—Ç—Ä–æ–º ‚Äî –º–µ–Ω—å—à–µ —Ç—è–≥–∏ –∫ —Å–ª–∞–¥–∫–æ–º—É."],
        "strength": ["2‚Äì3 –ø–æ–¥—Ö–æ–¥–∞ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –¥–æ–º–∞.","–ü–ª–∞–Ω–∫–∞ 3√ó –ø–æ 20‚Äì40—Å."],
    }
    arr = opts.get(goal, ["–ö–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ.", "–°—Ç–∞–∫–∞–Ω –≤–æ–¥—ã ‚Äî –¥–ª—è –º–æ–∑–≥–æ–≤ –ø–æ–ª–µ–∑–Ω–æ."])
    return random.choice(arr)


# ---------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ ----------
def _has_jq_ctx(context_or_app) -> bool:
    try:
        jq = context_or_app.job_queue if hasattr(context_or_app, "job_queue") else context_or_app.application.job_queue
        return jq is not None
    except Exception:
        return False

def _sec_until_next_local(uid: int, hhmm: str) -> int:
    now = user_local_now(uid)
    hh, mm = hhmm_tuple(hhmm)
    target = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
    if target <= now:
        target = target + timedelta(days=1)
    # —Ç–∏—Ö–∏–µ —á–∞—Å—ã
    qh = _user_quiet_hours(uid)
    target = adjust_out_of_quiet(target, qh)
    return max(5, int((local_to_utc_dt(uid, target) - utcnow()).total_seconds()))

def schedule_daily_checkin(app, uid: int, tz_off: int, hhmm: str, lang: str):
    # —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ
    for j in app.job_queue.get_jobs_by_name(f"daily_{uid}"):
        j.schedule_removal()
    delay = _sec_until_next_local(uid, hhmm)
    app.job_queue.run_repeating(
        job_daily_checkin,
        interval=24*3600,
        first=delay,
        name=f"daily_{uid}",
        data={"user_id": uid, "lang": lang}
    )
    logging.info(f"scheduled daily check-in for {uid} in {delay}s")

def schedule_evening_checkin(app, uid: int, tz_off: int, hhmm: str, lang: str):
    for j in app.job_queue.get_jobs_by_name(f"evening_{uid}"):
        j.schedule_removal()
    delay = _sec_until_next_local(uid, hhmm)
    app.job_queue.run_repeating(
        job_evening_checkin,
        interval=24*3600,
        first=delay,
        name=f"evening_{uid}",
        data={"user_id": uid, "lang": lang}
    )
    logging.info(f"scheduled evening check-in for {uid} in {delay}s")

def schedule_from_sheet_on_start(app):
    try:
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ Users
        if SHEETS_ENABLED:
            rows = ws_users.get_all_records()
            for r in rows:
                uid = int(str(r.get("user_id") or "0") or "0")
                if uid <= 0: continue
                lang = norm_lang(r.get("lang") or "en")
                tz = int(str(r.get("tz_offset") or "0") or "0")
                hh = (r.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
                if (r.get("paused") or "no").lower() != "yes":
                    schedule_daily_checkin(app, uid, tz, hh, lang)
                eh = (r.get("evening_hour") or "").strip()
                if eh:
                    schedule_evening_checkin(app, uid, tz, eh, lang)
        else:
            for uid, u in MEM_USERS.items():
                lang = norm_lang(u.get("lang") or "en")
                tz = int(str(u.get("tz_offset") or "0") or "0")
                hh = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
                if (u.get("paused") or "no").lower() != "yes":
                    schedule_daily_checkin(app, uid, tz, hh, lang)
                eh = (u.get("evening_hour") or "").strip()
                if eh:
                    schedule_evening_checkin(app, uid, tz, eh, lang)
    except Exception as e:
        logging.warning(f"schedule_from_sheet_on_start failed: {e}")


# ---------- One-off –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ----------
async def job_oneoff_reminder(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid = d.get("user_id"); rid = d.get("reminder_id")
    if not uid:
        return
    try:
        await context.bot.send_message(uid, T[_user_lang(uid)]["thanks"])
    except Exception as e:
        logging.error(f"job_oneoff_reminder send error: {e}")
    # –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
    if SHEETS_ENABLED and rid:
        try:
            vals = ws_reminders.get_all_records()
            hdr = _headers(ws_reminders)
            for i, r in enumerate(vals, start=2):
                if r.get("id")==rid:
                    ws_reminders.update_cell(i, hdr.index("status")+1, "done")
                    break
        except Exception as e:
            logging.warning(f"reminder status update failed: {e}")
    else:
        for r in MEM_REMINDERS:
            if r.get("id")==rid:
                r["status"]="done"


# ---------- –£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∂–æ–± (–ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ –ß.1, –¥–æ–±–∞–≤–ª—è–µ—Ç skip/–±–æ–ª—å—à–µ –∫–Ω–æ–ø–æ–∫) ----------
async def job_daily_checkin(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid = d.get("user_id"); lang = norm_lang((d.get("lang") or "en"))
    if not uid:
        return
    u = users_get(uid)
    if (u.get("paused") or "").lower() == "yes":
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ + –º–µ—Ç—Ä–∏–∫–∞ –∂–∏–∑–Ω–∏ (–∏–Ω–æ–≥–¥–∞)
    greet = T[lang]["daily_gm"]
    try:
        prof = profiles_get(uid) or {}
        # —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 1/4 –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É
        if random.random() < 0.25:
            # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –º–µ—Ç—Ä–∏–∫–∞ –ø–æ age (–µ—Å–ª–∏ birth_date –Ω–µ—Ç)
            bdate = (prof.get("birth_date") or "").strip()
            days = 0
            if re.match(r"^\d{4}-\d{2}-\d{2}$", bdate):
                days = (date.today() - datetime.strptime(bdate, "%Y-%m-%d").date()).days
            else:
                try:
                    age = int(re.findall(r"\d+", str(prof.get("age") or "0"))[0])
                    days = age * 365
                except Exception:
                    days = 0
            percent = min(100, round((days / 36500) * 100, 1)) if days>0 else 0
            bar = "‚ñà" * max(1, int(percent/8)) + "‚ñë" * (12 - max(1, int(percent/8)))
            extra = f"\n{('–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π' if lang=='ru' else 'Today is your')} {days}-th day. {bar} {percent}%"
            greet += extra
    except Exception:
        pass

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üëç", callback_data="gm|mood|excellent"),
         InlineKeyboardButton("üôÇ", callback_data="gm|mood|ok"),
         InlineKeyboardButton("üòê", callback_data="gm|mood|tired"),
         InlineKeyboardButton("ü§ï", callback_data="gm|mood|pain")],
        [InlineKeyboardButton("‚è≠", callback_data="gm|skip")],
        [InlineKeyboardButton(T[lang]["gm_evening_btn"], callback_data="youth:gm_evening")]
    ])
    try:
        await context.bot.send_message(uid, greet, reply_markup=kb)
    except Exception as e:
        logging.error(f"job_daily_checkin send error: {e}")


# ---------- streak helper ----------
def _bump_streak(uid: int, did_answer: bool):
    prof = profiles_get(uid) or {}
    today = date.today().isoformat()
    last = (prof.get("gm_last_date") or "")
    streak = int(str(prof.get("streak") or "0") or "0")
    best = int(str(prof.get("streak_best") or "0") or "0")
    if not did_answer:
        # skip –Ω–µ –º–µ–Ω—è–µ—Ç
        profiles_upsert(uid, {"gm_last_date": today})
        return
    if last == today:
        # —É–∂–µ —Å—á–∏—Ç–∞–ª–∏
        return
    if last and (datetime.strptime(today, "%Y-%m-%d").date() - datetime.strptime(last, "%Y-%m-%d").date()).days == 1:
        streak += 1
    else:
        streak = 1
    best = max(best, streak)
    updates = {"streak": str(streak), "streak_best": str(best), "gm_last_date": today}
    profiles_upsert(uid, updates)
    # –±–æ–Ω—É—Å –∑–∞ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥
    if streak == 3:
        try:
            lang = _user_lang(uid)
            await_text = {
                "ru":"–ú–æ–ª–æ–¥–µ—Ü! 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥ ‚Äî –±–æ–Ω—É—Å–Ω—ã–π —Å–æ–≤–µ—Ç: –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—Ä—è–¥–∫–∞ —É—Ç—Ä–æ–º –ø–æ–≤—ã—à–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é —Ü–µ–ª—ã–π –¥–µ–Ω—å.",
                "uk":"–°—É–ø–µ—Ä! 3 –¥–Ω—ñ –ø—ñ–¥—Ä—è–¥ ‚Äî –±–æ–Ω—É—Å–Ω–∞ –ø–æ—Ä–∞–¥–∞: —Ä–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑–º–∏–Ω–∫–∞ –ø—ñ–¥–≤–∏—â—É—î –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å.",
                "en":"Nice! 3 days streak ‚Äî bonus tip: a short morning warm-up boosts focus for the whole day.",
                "es":"¬°Bien! Racha de 3 d√≠as ‚Äî consejo bono: un calentamiento matutino breve mejora el enfoque."
            }[lang]
            # ¬´–ª–µ–Ω–∏–≤–∞—è¬ª –¥–æ—Å—Ç–∞–≤–∫–∞: –ø–æ–ª–æ–∂–∏–º –≤ –ø–∞–º—è—Ç—å ‚Äî –æ—Ç–¥–∞–¥–∏–º –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            s = sessions.setdefault(uid, {})
            s["bonus_msg"] = await_text
        except Exception:
            pass


# ---------- –†–∞—Å—à–∏—Ä—è–µ–º cb_handler –¥–ª—è –≥–∏–±—Ä–∏–¥-–∫–Ω–æ–ø–æ–∫, mini –∏ gm ----------
# (–ü–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∏–≤–∫–æ–π –Ω–æ–≤—ã—Ö –≤–µ—Ç–æ–∫; –Ω–µ–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Ä–∞–±–æ—á–∏–º–∏)
_old_cb_handler = cb_handler
async def cb_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    lang = _user_lang(uid)
    data = (q.data or "")

    # --- –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã ¬´–≥–∏–±—Ä–∏–¥-–æ–±—â–µ–Ω–∏—è¬ª ---
    if data.startswith("menu|"):
        act = data.split("|",1)[1]
        if act == "h60":
            sessions.setdefault(uid, {})["awaiting_h60_text"] = True
            await context.bot.send_message(uid, T[lang]["h60_intro"])
            await show_quickbar(context, uid, lang)
            return
        if act == "er":
            await context.bot.send_message(uid, T[lang]["er_text"])
            await show_quickbar(context, uid, lang)
            return
        if act == "lab":
            sessions.setdefault(uid, {})["await_lab_city"] = True
            await context.bot.send_message(uid, T[lang]["act_city_prompt"])
            return
        if act == "rem":
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton(T[lang]["act_rem_4h"],  callback_data="h60|rem|4h")],
                [InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="h60|rem|eve")],
                [InlineKeyboardButton(T[lang]["act_rem_morn"],callback_data="h60|rem|morn")]
            ])
            await context.bot.send_message(uid, T[lang]["remind_when"], reply_markup=kb)
            return
        # –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–æ–≤—ã–µ ‚Äî –æ—Ç–¥–∞—ë–º –Ω–∞ —Å—Ç–∞—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    # --- –¥–æ–ø. –≤–µ—Ç–∫–∏ –º–∏–Ω–∏-–æ–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ) ---
    if data.startswith("mini|"):
        parts = data.split("|")
        action = parts[1] if len(parts)>1 else ""
        key = parts[2] if len(parts)>2 else ""
        if action == "write":
            s = sessions.setdefault(uid, {"mini_active": True, "mini_step": 0, "mini_answers": {}})
            s["mini_wait_key"] = key
            await q.edit_message_text(T[lang]["write"] + "‚Ä¶")
            return
        if action == "choose":
            value = parts[3] if len(parts)>3 else ""
            mini_handle_choice(uid, key, value)
            await ask_next_mini(context, update.effective_chat.id, lang, uid)
            return
        if action == "skip":
            s = sessions.setdefault(uid, {"mini_active": True, "mini_step": 0, "mini_answers": {}})
            s["mini_step"] = int(s.get("mini_step", 0)) + 1
            await ask_next_mini(context, update.effective_chat.id, lang, uid)
            return

    # --- GM —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏ skip ---
    if data.startswith("gm|"):
        _, kind, *rest = data.split("|")
        if kind == "mood":
            mood = rest[0] if rest else "ok"
            daily_add(iso(utcnow()), uid, mood=mood, comment="", energy=None)
            await q.edit_message_reply_markup(None)
            await context.bot.send_message(uid, T[lang]["mood_thanks"])
            _bump_streak(uid, did_answer=True)
            await show_quickbar(context, uid, lang)
            return
        if kind == "skip":
            await q.edit_message_reply_markup(None)
            _bump_streak(uid, did_answer=False)
            await context.bot.send_message(uid, T[lang]["thanks"])
            await show_quickbar(context, uid, lang)
            return

    # --- –ü—Ä–∏–Ω—è—Ç–∏–µ –ø–ª–∞–Ω–∞ Health60 —Ç–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º —ç–ø–∏–∑–æ–¥ ---
    if data.startswith("h60|accept|"):
        # —Å–æ–∑–¥–∞—ë–º —ç–ø–∏–∑–æ–¥, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
        s = sessions.setdefault(uid, {})
        if not s.get("last_eid"):
            s["last_eid"] = episode_create(uid, topic="h60", severity=5, red="")
        await q.edit_message_reply_markup(None)
        await context.bot.send_message(uid, T[lang]["thanks"])
        await show_quickbar(context, uid, lang)
        return

    # –∏–Ω–∞—á–µ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∞—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    await _old_cb_handler(update, context)


# ---------- –î–æ–±–∏–≤–∫–∞ msg_text: –º–∏–Ω–∏-–∏–Ω–ø—É—Ç—ã, lab-–≥–æ—Ä–æ–¥, –±–æ–Ω—É—Å—ã ----------
_old_msg_text = msg_text
async def msg_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    text = (update.message.text or "").strip()

    # –≥–æ—Ä–æ–¥ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    s = sessions.setdefault(uid, {})
    if s.get("await_lab_city"):
        s["await_lab_city"] = False
        profiles_upsert(uid, {"city": text})
        await update.message.reply_text(T[lang]["act_saved"])
        await show_quickbar(context, update.effective_chat.id, lang)
        return

    # –º–∏–Ω–∏-–æ–ø—Ä–æ—Å: —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è write-–ø–æ–ª–µ–π
    if s.get("mini_active") and s.get("mini_wait_key"):
        key = s["mini_wait_key"]
        s["mini_wait_key"] = None
        s["mini_answers"][key] = text
        s["mini_step"] = int(s.get("mini_step", 0)) + 1
        await ask_next_mini(context, update.effective_chat.id, lang, uid)
        return

    # –±–æ–Ω—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ streak (–ª–µ–Ω–∏–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞)
    if s.get("bonus_msg"):
        await update.message.reply_text(s.pop("bonus_msg"))

    # –æ–∂–∏–¥–∞–Ω–∏–µ Health60 -> –ø–ª–∞–Ω + quickbar (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ quickbar)
    if s.get("awaiting_h60_text"):
        s["awaiting_h60_text"] = False
        await _process_health60(uid, lang, text, update.message)
        await show_quickbar(context, update.effective_chat.id, lang)
        return

    # –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –æ—Ç–¥–∞—Ç—å –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä + quickbar
    await _old_msg_text(update, context)
    await show_quickbar(context, update.effective_chat.id, lang)


# ---------- –£—Ç–∏–ª–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_seen (–µ—Å–ª–∏ –Ω–µ—Ç –≤ –ß.1) ----------
def update_last_seen(uid: int):
    try:
        users_set(uid, "last_seen", iso(utcnow()))
    except Exception:
        pass
