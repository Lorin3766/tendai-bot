import os, json, logging
from datetime import datetime

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: OpenAI –∏ Google Sheets –ø–æ–¥–∫–ª—é—á–∞–µ–º –º—è–≥–∫–æ
try:
    from openai import OpenAI
except Exception:
    OpenAI = None

try:
    import gspread
    from oauth2client.service_account import ServiceAccountCredentials
except Exception:
    gspread = None
    ServiceAccountCredentials = None

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ----------
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
logging.basicConfig(format="%(asctime)s | %(levelname)s | %(name)s | %(message)s", level=logging.INFO)

if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

client = OpenAI(api_key=OPENAI_API_KEY) if (OPENAI_API_KEY and OpenAI) else None

# ---------- Google Sheets ----------
sheet = None
if gspread and ServiceAccountCredentials:
    creds_env = os.getenv("GOOGLE_CREDENTIALS_JSON")
    if creds_env:
        try:
            scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
            creds_dict = json.loads(creds_env)
            credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
            gclient = gspread.authorize(credentials)
            sheet = gclient.open("TendAI Feedback").worksheet("Feedback")
            logging.info("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        except Exception as e:
            logging.exception(f"Sheets error: {e}")
    else:
        logging.info("GOOGLE_CREDENTIALS_JSON –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –æ—Ç–∑—ã–≤—ã –ø–∏—Å–∞—Ç—å –Ω–µ –±—É–¥–µ–º")

def add_feedback_row(user, name, rating, comment):
    """–ü–∏—à–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–∑—ã–≤–∞. –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: timestamp, user_id, name, username, rating, comment"""
    if not sheet:
        return
    try:
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        username = (user.username or "")
        sheet.append_row([ts, str(user.id), name, username, rating, comment or ""])
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –≤ Sheets")

# ---------- –ü–∞–º—è—Ç—å/—à–∞–±–ª–æ–Ω—ã ----------
user_memory = {}
pending_feedback = {}  # user_id -> {"name": "feedback_yes|feedback_no", "rating": 1|0}

quick_mode_symptoms = {
    "–≥–æ–ª–æ–≤–∞": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Å—Ç—Ä–µ—Å—Å, –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ, –Ω–µ–¥–æ—Å—ã–ø
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –≤—ã–ø–µ–π –≤–æ–¥—ã, –æ—Ç–¥–æ—Ö–Ω–∏, –ø—Ä–æ–≤–µ—Ç—Ä–∏ –∫–æ–º–Ω–∞—Ç—É
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ –±–æ–ª—å –≤–Ω–µ–∑–∞–ø–Ω–∞—è, —Å–∏–ª—å–Ω–∞—è, —Å —Ç–æ—à–Ω–æ—Ç–æ–π –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –∑—Ä–µ–Ω–∏—è""",
    "head": """[Quick Health Check]
üí° Possible causes: stress, dehydration, fatigue
ü™™ Try: rest, hydration, fresh air
üö® See a doctor if pain is sudden, severe, or with nausea/vision issues""",
    "–∂–∏–≤–æ—Ç": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –≥–∞—Å—Ç—Ä–∏—Ç, –ø–∏—Ç–∞–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: —Ç—ë–ø–ª–∞—è –≤–æ–¥–∞, –ø–æ–∫–æ–π, –∏—Å–∫–ª—é—á–∏ –µ–¥—É –Ω–∞ 2 —á–∞—Å–∞
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ –±–æ–ª—å —Ä–µ–∑–∫–∞—è, —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π, —Ä–≤–æ—Ç–æ–π –∏–ª–∏ –¥–ª–∏—Ç—Å—è >1 –¥–Ω—è""",
    "stomach": """[Quick Health Check]
üí° Possible causes: gastritis, poor diet, stress
ü™™ Try: warm water, rest, skip food for 2 hours
üö® See a doctor if pain is sharp, with fever or vomiting""",
    "—Å–ª–∞–±–æ—Å—Ç—å": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —É—Å—Ç–∞–ª–æ—Å—Ç—å, –≤–∏—Ä—É—Å, –∞–Ω–µ–º–∏—è
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –æ—Ç–¥—ã—Ö, –ø–æ–µ—à—å, –≤—ã–ø–µ–π –≤–æ–¥—ã
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ —Å–ª–∞–±–æ—Å—Ç—å –¥–ª–∏—Ç—Å—è >2 –¥–Ω–µ–π –∏–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç""",
    "weakness": """[Quick Health Check]
üí° Possible causes: fatigue, virus, low iron
ü™™ Try: rest, eat, hydrate
üö® Doctor: if weakness lasts >2 days or gets worse"""
}

def feedback_buttons():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üëç –î–∞", callback_data="feedback_yes"),
                                  InlineKeyboardButton("üëé –ù–µ—Ç", callback_data="feedback_no")]])

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def on_startup(app):
    me = await app.bot.get_me()
    logging.info(f"Running as @{me.username}")
    await app.bot.delete_webhook(drop_pending_updates=True)
    logging.info("Webhook cleared")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è? –ï—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ?",
        reply_markup=feedback_buttons()
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

async def skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid in pending_feedback:
        data = pending_feedback.pop(uid)
        add_feedback_row(update.effective_user, data["name"], data["rating"], "")
        await update.message.reply_text("–û–∫–µ–π, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –°–ø–∞—Å–∏–±–æ! üôè")
    else:
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å üôÇ")

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–¥–±–µ–∫–∞ ----------
async def feedback_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        q = update.callback_query
        await q.answer()
        user = q.from_user
        choice = q.data  # "feedback_yes" | "feedback_no"
        rating = 1 if choice == "feedback_yes" else 0

        # –ó–∞–ø—Ä–æ—Å–∏–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∑–∞–ø–æ–º–Ω–∏–º –≤—ã–±–æ—Ä
        pending_feedback[user.id] = {"name": choice, "rating": rating}

        try:
            await q.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass

        await q.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É üôè\n"
            "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç.\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
        )
    except Exception:
        logging.exception("feedback_callback error")

# ---------- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ----------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        text = (update.message.text or "").strip()
        low = text.lower()
        logging.info(f"Message from {user_id}: {text!r}")

        # –ï—Å–ª–∏ –∂–¥—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É –∏ –ø—Ä–∏—à—ë–ª –Ω–µ-–∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫—Å—Ç ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if user_id in pending_feedback and not text.startswith("/"):
            data = pending_feedback.pop(user_id)
            add_feedback_row(update.effective_user, data["name"], data["rating"], text)
            await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å–ø–∞—Å–∏–±–æ! üôå")
            return

        # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
        if "#60—Å–µ–∫" in low or "/fast" in low:
            for k, reply in quick_mode_symptoms.items():
                if k in low:
                    await update.message.reply_text(reply, reply_markup=feedback_buttons())
                    return
            await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Å–∏–º–ø—Ç–æ–º: ¬´#60—Å–µ–∫ –≥–æ–ª–æ–≤–∞¬ª –∏–ª–∏ ¬´/fast stomach¬ª.", reply_markup=feedback_buttons())
            return

        # –ü—Ä–æ—Å—Ç—ã–µ –º–∏–Ω–∏-–¥–∏–∞–ª–æ–≥–∏
        if "–≥–æ–ª–æ–≤–∞" in low or "headache" in low:
            await update.message.reply_text(
                "–ì–¥–µ –∏–º–µ–Ω–Ω–æ –±–æ–ª–∏—Ç: –ª–æ–±, –∑–∞—Ç—ã–ª–æ–∫, –≤–∏—Å–∫–∏?\n"
                "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: —Ç—É–ø–∞—è, –æ—Å—Ç—Ä–∞—è, –ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è?\n"
                "–ï—Å—Ç—å –ª–∏ —Ç–æ—à–Ω–æ—Ç–∞/—Å–≤–µ—Ç–æ–±–æ—è–∑–Ω—å?"
            )
            user_memory[user_id] = "–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å"
            return

        if "–≥–æ—Ä–ª–æ" in low or "throat" in low:
            await update.message.reply_text(
                "–ë–æ–ª–∏—Ç –ø—Ä–∏ –≥–ª–æ—Ç–∞–Ω–∏–∏ –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ?\n"
                "–ï—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–∫–∞—à–µ–ª—å?\n"
                "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ—Å—å?"
            )
            user_memory[user_id] = "–±–æ–ª—å –≤ –≥–æ—Ä–ª–µ"
            return

        if "–∫–∞—à–µ–ª—å" in low or "cough" in low:
            await update.message.reply_text(
                "–ö–∞—à–µ–ª—å —Å—É—Ö–æ–π –∏–ª–∏ —Å –º–æ–∫—Ä–æ—Ç–æ–π?\n"
                "–î–∞–≤–Ω–æ?\n"
                "–ï—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–±–æ–ª—å –≤ –≥—Ä—É–¥–∏/–æ–¥—ã—à–∫–∞?"
            )
            user_memory[user_id] = "–∫–∞—à–µ–ª—å"
            return

        memory_text = f"(–†–∞–Ω–µ–µ —É–ø–æ–º–∏–Ω–∞–ª: {user_memory[user_id]})\n" if user_id in user_memory else ""

        # –û—Ç–≤–µ—Ç –ò–ò (–µ—Å–ª–∏ –∫–ª—é—á –∑–∞–¥–∞–Ω), –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç
        reply_text = "–ú–Ω–µ –Ω—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
        if client:
            try:
                system_prompt = (
                    "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –ø–æ –∏–º–µ–Ω–∏ TendAI. "
                    "–û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º ‚Äî 1‚Äì2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, "
                    "2‚Äì3 –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ–º–∞, –∏ –∫–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É."
                )
                resp = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": text}
                    ],
                    temperature=0.6,
                    max_tokens=400
                )
                reply_text = memory_text + (resp.choices[0].message.content or "").strip()
            except Exception as e:
                logging.exception("OpenAI error")
                reply_text = f"–°–µ—Ä–≤–∏—Å –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"

        await update.message.reply_text(reply_text, reply_markup=feedback_buttons())

    except Exception:
        logging.exception("handle_message fatal error")

# ---------- –ó–∞–ø—É—Å–∫ ----------
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("skip", skip_comment))
    app.add_handler(CallbackQueryHandler(feedback_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling(drop_pending_updates=True)
