import os
import json
import logging
import time
from typing import Optional
from dotenv import load_dotenv
from langdetect import detect
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ForceReply
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CommandHandler,
    ContextTypes, filters, CallbackQueryHandler
)
from openai import OpenAI
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(os.getenv("GOOGLE_CREDENTIALS_JSON"))
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client_sheet = gspread.authorize(credentials)
sheet = client_sheet.open("TendAI Feedback").worksheet("Feedback")

def add_feedback(user_id, feedback_text):
    # –°–¢–ê–†–´–ô —Ñ–æ—Ä–º–∞—Ç (–æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è üëç/üëé)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([timestamp, str(user_id), feedback_text])

def add_detailed_feedback(user, rating: Optional[int|str], comment: Optional[str]):
    # –ù–û–í–´–ô —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∑–≤—ë–∑–¥ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    # –ö–æ–ª–æ–Ω–∫–∏: timestamp | user_id | name | username | rating | comment
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    username = f"@{user.username}" if user.username else ""
    sheet.append_row([timestamp, str(user.id), name, username, str(rating or ""), comment or ""])

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tendai-bot")

# –ü–∞–º—è—Ç—å –∏ —Å—á—ë—Ç—á–∏–∫–∏
user_memory = {}
message_counter = {}
last_comment_at = {}  # –∞–Ω—Ç–∏-—Å–ø–∞–º –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ—Ç–∑—ã–≤–∞–º

# –ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã
quick_mode_symptoms = {
    "–≥–æ–ª–æ–≤–∞": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Å—Ç—Ä–µ—Å—Å, –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ, –Ω–µ–¥–æ—Å—ã–ø  
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –≤—ã–ø–µ–π –≤–æ–¥—ã, –æ—Ç–¥–æ—Ö–Ω–∏, –ø—Ä–æ–≤–µ—Ç—Ä–∏ –∫–æ–º–Ω–∞—Ç—É  
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ –±–æ–ª—å –≤–Ω–µ–∑–∞–ø–Ω–∞—è, —Å–∏–ª—å–Ω–∞—è, —Å —Ç–æ—à–Ω–æ—Ç–æ–π –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –∑—Ä–µ–Ω–∏—è""",

    "head": """[Quick Health Check]
üí° Possible causes: stress, dehydration, fatigue  
ü™™ Try: rest, hydration, fresh air  
üö® See a doctor if pain is sudden, severe, or with nausea/vision issues""",

    "–∂–∏–≤–æ—Ç": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –≥–∞—Å—Ç—Ä–∏—Ç, –ø–∏—Ç–∞–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å  
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: —Ç—ë–ø–ª–∞—è –≤–æ–¥–∞, –ø–æ–∫–æ–π, –∏—Å–∫–ª—é—á–∏ –µ–¥—É –Ω–∞ 2 —á–∞—Å–∞  
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ –±–æ–ª—å —Ä–µ–∑–∫–∞—è, —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π, —Ä–≤–æ—Ç–æ–π –∏–ª–∏ –¥–ª–∏—Ç—Å—è >1 –¥–Ω—è""",

    "stomach": """[Quick Health Check]
üí° Possible causes: gastritis, poor diet, stress  
ü™™ Try: warm water, rest, skip food for 2 hours  
üö® See a doctor if pain is sharp, with fever or vomiting""",

    "—Å–ª–∞–±–æ—Å—Ç—å": """[–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥]
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —É—Å—Ç–∞–ª–æ—Å—Ç—å, –≤–∏—Ä—É—Å, –∞–Ω–µ–º–∏—è  
ü™™ –ß—Ç–æ –¥–µ–ª–∞—Ç—å: –æ—Ç–¥—ã—Ö, –ø–æ–µ—à—å, –≤—ã–ø–µ–π –≤–æ–¥—ã  
üö® –ö–æ–≥–¥–∞ –∫ –≤—Ä–∞—á—É: –µ—Å–ª–∏ —Å–ª–∞–±–æ—Å—Ç—å –¥–ª–∏—Ç—Å—è >2 –¥–Ω–µ–π –∏–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç""",

    "weakness": """[Quick Health Check]
üí° Possible causes: fatigue, virus, low iron  
ü™™ Try: rest, eat, hydrate  
üö® Doctor: if weakness lasts >2 days or gets worse"""
}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è TendAI ü§ó –ß—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏ –≤–æ–ª–Ω—É–µ—Ç? –Ø –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å.")

# --- –°–¢–ê–†–´–ï –∫–Ω–æ–ø–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ (–æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –±—ã–ª–æ) ---
def feedback_buttons():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üëç –î–∞", callback_data="feedback_yes"),
                                  InlineKeyboardButton("üëé –ù–µ—Ç", callback_data="feedback_no")]])

# --- –ù–û–í–´–ï –∫–Ω–æ–ø–∫–∏: –∑–≤—ë–∑–¥—ã + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π + —Å—Ç–∞—Ä—ã–µ üëç/üëé ---
def combined_feedback_buttons():
    stars = [InlineKeyboardButton(f"{i}‚≠ê", callback_data=f"rate_{i}") for i in range(1, 5+1)]
    row1 = stars
    row2 = [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="comment")]
    row3 = [InlineKeyboardButton("üëç –î–∞", callback_data="feedback_yes"),
            InlineKeyboardButton("üëé –ù–µ—Ç", callback_data="feedback_no")]
    return InlineKeyboardMarkup([row1, row2, row3])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –°–¢–ê–†–û–ì–û —Ñ–∏–¥–±–µ–∫–∞ üëç/üëé (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def feedback_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    feedback = query.data
    try:
        add_feedback(user_id, feedback)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")

    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass

    await query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ üôè")

# --- –ù–û–í–û–ï: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–≤—ë–∑–¥–∞–º–∏ ---
async def handle_rate_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    try:
        rating = int(q.data.split("_")[1])
    except Exception:
        rating = None

    context.user_data["last_rating"] = rating
    try:
        add_detailed_feedback(update.effective_user, rating=rating, comment="")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")

    try:
        await q.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass

    await q.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {rating}‚≠ê")

# --- –ù–û–í–û–ï: –∑–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –ø—Ä–∏—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–∑—ã–≤–∞ ---
async def handle_comment_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    uid = update.effective_user.id
    now = time.time()
    # –∞–Ω—Ç–∏-—Å–ø–∞–º (20 —Å–µ–∫ –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏)
    if uid in last_comment_at and now - last_comment_at[uid] < 20:
        wait = int(20 - (now - last_comment_at[uid]))
        await q.message.reply_text(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait} —Å–µ–∫. –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º üôè")
        return

    context.user_data["awaiting_comment"] = True
    await q.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).",
        reply_markup=ForceReply(selective=True)
    )

async def receive_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã ‚Äî —ç—Ç–æ—Ç –ø—Ä–æ—Å—Ç–æ —Å–ª—É—à–∞–µ—Ç, –∫–æ–≥–¥–∞ –∂–¥—ë–º –æ—Ç–∑—ã–≤
    if not context.user_data.get("awaiting_comment"):
        return

    uid = update.effective_user.id
    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–û—Ç–∑—ã–≤ –ø—É—Å—Ç–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä—É —Ñ—Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return
    if len(text) > 600:
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –£–∫–æ—Ä–æ—Ç–∏—Ç–µ –¥–æ ~600 —Å–∏–º–≤–æ–ª–æ–≤ üôè")
        return

    rating = context.user_data.get("last_rating", "")
    try:
        add_detailed_feedback(update.effective_user, rating=rating, comment=text)
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")

    last_comment_at[uid] = time.time()
    context.user_data["awaiting_comment"] = False
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω üôè")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∫ –±—ã–ª–æ, —Ç–æ–ª—å–∫–æ –º–µ–Ω—è—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text.strip()
    user_lower = user_message.lower()
    message_counter[user_id] = message_counter.get(user_id, 0) + 1
    lang = detect(user_message)

    if "#60—Å–µ–∫" in user_lower or "/fast" in user_lower:
        for keyword, reply in quick_mode_symptoms.items():
            if keyword in user_lower:
                await update.message.reply_text(reply, reply_markup=combined_feedback_buttons())
                return
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Å–∏–º–ø—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´#60—Å–µ–∫ –≥–æ–ª–æ–≤–∞¬ª –∏–ª–∏ ¬´/fast stomach¬ª.", reply_markup=combined_feedback_buttons())
        return

    if "–≥–æ–ª–æ–≤–∞" in user_lower or "headache" in user_lower:
        await update.message.reply_text(
            "–ì–¥–µ –∏–º–µ–Ω–Ω–æ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞? –õ–æ–±, –∑–∞—Ç—ã–ª–æ–∫, –≤–∏—Å–∫–∏?\n"
            "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏: —Ç—É–ø–∞—è, –æ—Å—Ç—Ä–∞—è, –ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è?\n"
            "–ï—Å—Ç—å –ª–∏ –µ—â—ë —Å–∏–º–ø—Ç–æ–º—ã ‚Äî —Ç–æ—à–Ω–æ—Ç–∞, —Å–≤–µ—Ç–æ–±–æ—è–∑–Ω—å?"
        )
        user_memory[user_id] = "–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å"
        return

    if "–≥–æ—Ä–ª–æ" in user_lower or "throat" in user_lower:
        await update.message.reply_text(
            "–ì–æ—Ä–ª–æ –±–æ–ª–∏—Ç –ø—Ä–∏ –≥–ª–æ—Ç–∞–Ω–∏–∏ –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ?\n"
            "–ï—Å—Ç—å –ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–ª–∏ –∫–∞—à–µ–ª—å?\n"
            "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ—Å—å?"
        )
        user_memory[user_id] = "–±–æ–ª—å –≤ –≥–æ—Ä–ª–µ"
        return

    if "–∫–∞—à–µ–ª—å" in user_lower or "cough" in user_lower:
        await update.message.reply_text(
            "–ö–∞—à–µ–ª—å —Å—É—Ö–æ–π –∏–ª–∏ —Å –º–æ–∫—Ä–æ—Ç–æ–π?\n"
            "–î–∞–≤–Ω–æ –ª–∏ –æ–Ω —É –≤–∞—Å?\n"
            "–ï—Å—Ç—å –ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –±–æ–ª—å –≤ –≥—Ä—É–¥–∏ –∏–ª–∏ –æ–¥—ã—à–∫–∞?"
        )
        user_memory[user_id] = "–∫–∞—à–µ–ª—å"
        return

    memory_text = ""
    if user_id in user_memory:
        memory_text = f"(–¢—ã —Ä–∞–Ω–µ–µ —É–ø–æ–º–∏–Ω–∞–ª: {user_memory[user_id]})\n"

    system_prompt = (
        "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é –ø–æ –∏–º–µ–Ω–∏ TendAI.\n"
        "–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≥–æ–≤–æ—Ä–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n"
        "–ë—É–¥—å —Ç—ë–ø–ª—ã–º, –Ω–æ –æ—Ç–≤–µ—á–∞–π –ø–æ —Å—É—Ç–∏, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤.\n"
        "–ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è —Å–∏–º–ø—Ç–æ–º ‚Äî –∑–∞–¥–∞–π 1‚Äì2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, –Ω–∞–∑–æ–≤–∏ 2‚Äì3 –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã,\n"
        "–ø—Ä–µ–¥–ª–æ–∂–∏, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ–º–∞, –∏ –≤ –∫–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –∏–¥—Ç–∏ –∫ –≤—Ä–∞—á—É.\n"
        "–ï—Å–ª–∏ –±–æ–ª–∏ –Ω–µ—Ç ‚Äî –Ω–µ –Ω–∞–≥–Ω–µ—Ç–∞–π, –ø—Ä–æ—Å—Ç–æ –æ–±—ä—è—Å–Ω–∏ —Å–ø–æ–∫–æ–π–Ω–æ.\n"
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç ‚Äî –æ—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏.\n"
        "–ì–æ–≤–æ—Ä–∏ —è—Å–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ –∏ —Å –∑–∞–±–æ—Ç–æ–π."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ],
            temperature=0.7,
            max_tokens=400
        )
        bot_reply = memory_text + response.choices[0].message.content.strip()
    except Exception as e:
        bot_reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}"
        logging.error(bot_reply)

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∑–≤—ë–∑–¥—ã + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π + üëç/üëé)
    await update.message.reply_text(bot_reply, reply_markup=combined_feedback_buttons())

# --- –°–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ polling (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤) ---
async def _post_init(app):
    await app.bot.delete_webhook(drop_pending_updates=True)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(_post_init).build()
    app.add_handler(CommandHandler("start", start))

    # –ü–æ—Ä—è–¥–æ–∫ callbacks: –Ω–æ–≤—ã–µ + —Å—Ç–∞—Ä—ã–µ
    app.add_handler(CallbackQueryHandler(handle_rate_cb, pattern=r"^rate_[1-5]$"))
    app.add_handler(CallbackQueryHandler(handle_comment_cb, pattern=r"^comment$"))
    app.add_handler(CallbackQueryHandler(feedback_callback, pattern=r"^feedback_(yes|no)$"))  # —Å—Ç–∞—Ä—ã–µ üëç/üëé

    # –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ‚Äî –ù–ï –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_comment, block=False))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling(drop_pending_updates=True)
