import os
import logging
import json
import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)
from openai import OpenAI
from langdetect import detect

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ===
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
CREDS_FILE = "credentials.json"
SHEET_NAME = "TendAI Feedback"
WORKSHEET_NAME = "Feedback"

try:
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client_sheet = gspread.authorize(creds)
    sheet = client_sheet.open(SHEET_NAME).worksheet(WORKSHEET_NAME)
    logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    sheet = None

# === OpenAI –∫–ª–∏–µ–Ω—Ç ===
client_ai = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ü–∞–º—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
user_sessions = {}

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —è TendAI. –ß—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏ –≤–æ–ª–Ω—É–µ—Ç? –Ø –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Å–∏–º–ø—Ç–æ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∞ —è –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å.")

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_text = update.message.text.strip()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
    try:
        lang = detect(user_text)
    except:
        lang = "unknown"

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if user_id not in user_sessions:
        user_sessions[user_id] = []
    user_sessions[user_id].append({"role": "user", "content": user_text})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∂–∏–º "–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥"
    if "#60—Å–µ–∫" in user_text.lower():
        system_prompt = (
            "–û—Ç–≤–µ—á–∞–π –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ (3 –ø—É–Ω–∫—Ç–∞): –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å, –∏ –∫–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É."
        )
    else:
        system_prompt = (
            "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é. "
            "–ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ —Å–∏–º–ø—Ç–æ–º –Ω–µ —è—Å–µ–Ω. "
            "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –∏ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏."
        )

    # –ó–∞–ø—Ä–æ—Å –≤ OpenAI
    try:
        completion = client_ai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                *user_sessions[user_id]
            ],
            temperature=0.7
        )
        bot_reply = completion.choices[0].message["content"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        bot_reply = "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞."

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    await update.message.reply_text(bot_reply)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ Google Sheets
    if sheet:
        try:
            sheet.append_row([
                str(datetime.datetime.now()),
                str(user_id),
                user_text,
                bot_reply,
                lang
            ])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("ü§ñ TendAI –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
