# -*- coding: utf-8 -*-
# =========================
# TendAI ‚Äî Full Bot (Part 1/2)
# =========================

import os, re, json, uuid, logging, random
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Optional, Set
from difflib import SequenceMatcher

from dotenv import load_dotenv
from langdetect import detect, DetectorFactory

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ---------- OpenAI (optional) ----------
try:
    from openai import OpenAI  # type: ignore
except Exception:
    OpenAI = None  # type: ignore

# ---------- Google Sheets (robust + memory fallback) ----------
import gspread
import gspread.utils as gsu
from gspread.exceptions import SpreadsheetNotFound, WorksheetNotFound
from oauth2client.service_account import ServiceAccountCredentials


# ---------------- Boot & Config ----------------
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
DetectorFactory.seed = 0

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")

SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Sheets")
SHEET_ID = os.getenv("SHEET_ID", "")
ALLOW_CREATE_SHEET = os.getenv("ALLOW_CREATE_SHEET", "0") == "1"

DEFAULT_CHECKIN_LOCAL = "08:30"
DEFAULT_EVENING_LOCAL = "20:00"
DEFAULT_QUIET_HOURS = "22:00-08:00"

AUTO_MAX_PER_DAY = 2  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∞–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# OpenAI client (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
oai = None
if OpenAI and OPENAI_API_KEY:
    try:
        os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
        oai = OpenAI()
    except Exception as e:
        logging.error(f"OpenAI init error: {e}")
        oai = None


# ---------------- i18n & text ----------------
SUPPORTED = {"ru", "en", "uk", "es"}

def norm_lang(code: Optional[str]) -> str:
    if not code:
        return "en"
    c = code.split("-")[0].lower()
    return c if c in SUPPORTED else "en"

T: Dict[str, Dict[str, str]] = {
    "en": {
        "welcome": "Hi! I‚Äôm TendAI ‚Äî a caring health & longevity assistant.\nWe‚Äôll keep it short, useful, and friendly. Let‚Äôs do a 40s intake to tailor advice.",
        "help": "Short checkups, 24‚Äì48h plans, reminders, daily check-ins.\nCommands: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /evening_on 20:00 /evening_off /settz +2 /health60 /mood /energy /hydrate /skintip /cycle /youth /ru /uk /en /es",
        "privacy": "I‚Äôm not a medical service and can‚Äôt replace a doctor. Minimal data is stored for reminders. Use /delete_data to erase.",
        "quick_title": "Quick actions",
        "quick_h60": "‚ö° Health in 60s",
        "quick_er": "üöë Emergency info",
        "quick_lab": "üß™ Lab",
        "quick_rem": "‚è∞ Reminder",
        "profile_intro": "Quick intake (~40s). Use buttons or type your answer.",
        "write": "‚úçÔ∏è Write",
        "skip": "‚è≠Ô∏è Skip",
        "start_where": "Where do you want to start? (symptom/sleep/nutrition/labs/habits/longevity)",
        "saved_profile": "Saved: ",
        "daily_gm": "Good morning! üåû How do you feel today?",
        "gm_excellent": "üëç Excellent",
        "gm_ok": "üôÇ Okay",
        "gm_tired": "üòê Tired",
        "gm_pain": "ü§ï In pain",
        "gm_skip": "‚è≠Ô∏è Skip today",
        "mood_note": "‚úçÔ∏è Comment",
        "mood_thanks": "Thanks! Have a smooth day üëã",
        "h60_btn": "Health in 60 seconds",
        "h60_intro": "Briefly write what‚Äôs bothering you (e.g., ‚Äúheadache‚Äù, ‚Äúfatigue‚Äù, ‚Äústomach pain‚Äù). I‚Äôll give 3 key tips in 60 seconds.",
        "h60_t1": "Possible causes",
        "h60_t2": "Do now (next 24‚Äì48h)",
        "h60_t3": "When to see a doctor",
        "h60_serious": "Serious to rule out",
        "ask_fb": "Was this helpful?",
        "fb_good": "üëç Like",
        "fb_bad": "üëé Dislike",
        "fb_free": "üìù Feedback",
        "fb_write": "Write a short feedback message:",
        "fb_thanks": "Thanks for your feedback! ‚úÖ",
        "youth_pack": "Youth Pack",
        "gm_energy": "‚ö° Energy",
        "gm_energy_q": "How‚Äôs your energy (1‚Äì5)?",
        "gm_energy_done": "Logged energy ‚Äî thanks!",
        "gm_evening_btn": "‚è∞ Remind this evening",
        "hydrate_btn": "üíß Hydration",
        "hydrate_nudge": "üíß Time for a glass of water",
        "skintip_btn": "üß¥ Skin/Body tip",
        "skintip_sent": "Tip sent.",
        "daily_tip_prefix": "üçé Daily tip:",
        "challenge_btn": "üéØ 7-day hydration challenge",
        "challenge_started": "Challenge started! I‚Äôll track your daily check-ins.",
        "challenge_progress": "Challenge progress: {d}/{len} days.",
        "cycle_btn": "ü©∏ Cycle",
        "cycle_consent": "Would you like to track your cycle for gentle timing tips?",
        "cycle_ask_last": "Enter the date of your last period (YYYY-MM-DD):",
        "cycle_ask_len": "Average cycle length in days (e.g., 28):",
        "cycle_saved": "Cycle tracking saved.",
        "quiet_saved": "Quiet hours saved: {qh}",
        "set_quiet_btn": "üåô Quiet hours",
        "ask_quiet": "Type quiet hours as HH:MM-HH:MM (local), e.g. 22:00-08:00",
        "evening_intro": "Evening check-in:",
        "evening_tip_btn": "ü™Ñ Tip of the day",
        "evening_set": "Evening check-in set to {t} (local).",
        "evening_off": "Evening check-in disabled.",
        "ask_consent": "May I send you a follow-up later to check how you feel?",
        "yes": "Yes", "no": "No",
        "unknown": "I need a bit more info: where exactly and for how long?",
        "thanks": "Got it üôå",
        "back": "‚óÄ Back",
        "exit": "Exit",
        "paused_on": "Notifications paused. Use /resume to enable.",
        "paused_off": "Notifications resumed.",
        "deleted": "All your data was deleted. Use /start to begin again.",
        "life_today": "Today is your {n}-th day of life üéâ. Target ‚Äî 36,500 (100y).",
        "life_percent": "You‚Äôve already passed {p}% toward 100 years.",
        "life_estimate": "(estimated by age, set birth_date for accuracy)",
        "px": "Considering your profile: {sex}, {age}y; goal ‚Äî {goal}.",
        "act_rem_4h": "‚è∞ Remind in 4h",
        "act_rem_eve": "‚è∞ This evening",
        "act_rem_morn": "‚è∞ Tomorrow morning",
        "act_save_episode": "üíæ Save episode",
        "act_ex_neck": "üßò 5-min neck routine",
        "act_er": "üöë Emergency info",
    },
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–ë—É–¥–µ–º –∫—Ä–∞—Ç–∫–æ, –ø–æ–ª–µ–∑–Ω–æ –∏ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏. –î–∞–≤–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å (~40—Å) –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.",
        "help": "–ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã.\n–ö–æ–º–∞–Ω–¥—ã: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /evening_on 20:00 /evening_off /settz +3 /health60 /mood /energy /hydrate /skintip /cycle /youth /ru /uk /en /es",
        "privacy": "–Ø –Ω–µ –∑–∞–º–µ–Ω—è—é –≤—Ä–∞—á–∞. –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. /delete_data ‚Äî —É–¥–∞–ª–∏—Ç—å.",
        "quick_title": "–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
        "quick_h60": "‚ö° –ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫",
        "quick_er": "üöë –°—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é",
        "quick_lab": "üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è",
        "quick_rem": "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
        "profile_intro": "–ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å (~40—Å). –ú–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç.",
        "write": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
        "skip": "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "start_where": "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/–ø–∏—Ç–∞–Ω–∏–µ/–∞–Ω–∞–ª–∏–∑—ã/–ø—Ä–∏–≤—ã—á–∫–∏/–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ)",
        "saved_profile": "–°–æ—Ö—Ä–∞–Ω–∏–ª: ",
        "daily_gm": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üåû –ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "gm_excellent": "üëç –û—Ç–ª–∏—á–Ω–æ",
        "gm_ok": "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
        "gm_tired": "üòê –£—Å—Ç–∞–ª",
        "gm_pain": "ü§ï –ë–æ–ª–∏—Ç",
        "gm_skip": "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "mood_note": "‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        "mood_thanks": "–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üëã",
        "h60_btn": "–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥",
        "h60_intro": "–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞¬ª, ¬´—É—Å—Ç–∞–ª–æ—Å—Ç—å¬ª, ¬´–±–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ¬ª). –î–∞–º 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–≤–µ—Ç–∞ –∑–∞ 60 —Å–µ–∫—É–Ω–¥.",
        "h60_t1": "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã",
        "h60_t2": "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å (24‚Äì48 —á)",
        "h60_t3": "–ö–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É",
        "h60_serious": "–ß—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ–µ –∏—Å–∫–ª—é—á–∏—Ç—å",
        "ask_fb": "–≠—Ç–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ?",
        "fb_good": "üëç –ù—Ä–∞–≤–∏—Ç—Å—è",
        "fb_bad": "üëé –ù–µ –ø–æ–ª–µ–∑–Ω–æ",
        "fb_free": "üìù –û—Ç–∑—ã–≤",
        "fb_write": "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤:",
        "fb_thanks": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! ‚úÖ",
        "youth_pack": "–ú–æ–ª–æ–¥—ë–∂–Ω—ã–π –ø–∞–∫–µ—Ç",
        "gm_energy": "‚ö° –≠–Ω–µ—Ä–≥–∏—è",
        "gm_energy_q": "–ö–∞–∫ —ç–Ω–µ—Ä–≥–∏—è (1‚Äì5)?",
        "gm_energy_done": "–ó–∞–ø–∏—Å–∞–ª —ç–Ω–µ—Ä–≥–∏—é ‚Äî —Å–ø–∞—Å–∏–±–æ!",
        "gm_evening_btn": "‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –≤–µ—á–µ—Ä–æ–º",
        "hydrate_btn": "üíß –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è",
        "hydrate_nudge": "üíß –í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã",
        "skintip_btn": "üß¥ –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–æ–∂–∏/—Ç–µ–ª–∞",
        "skintip_sent": "–°–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
        "daily_tip_prefix": "üçé –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–Ω—è:",
        "challenge_btn": "üéØ –ß–µ–ª–ª–µ–Ω–¥–∂ 7 –¥–Ω–µ–π (–≤–æ–¥–∞)",
        "challenge_started": "–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞—Ç! –ë—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã.",
        "challenge_progress": "–ü—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–∞: {d}/{len} –¥–Ω–µ–π.",
        "cycle_btn": "ü©∏ –¶–∏–∫–ª",
        "cycle_consent": "–•–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–∏–∫–ª –∏ –ø–æ–ª—É—á–∞—Ç—å –º—è–≥–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤–æ–≤—Ä–µ–º—è?",
        "cycle_ask_last": "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö (–ì–ì–ì–ì-–ú–ú-–î–î):",
        "cycle_ask_len": "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28):",
        "cycle_saved": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
        "quiet_saved": "–¢–∏—Ö–∏–µ —á–∞—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {qh}",
        "set_quiet_btn": "üåô –¢–∏—Ö–∏–µ —á–∞—Å—ã",
        "ask_quiet": "–í–≤–µ–¥–∏—Ç–µ —Ç–∏—Ö–∏–µ —á–∞—Å—ã –∫–∞–∫ –ß–ß:–ú–ú-–ß–ß:–ú–ú (–ª–æ–∫–∞–ª—å–Ω–æ), –Ω–∞–ø—Ä. 22:00-08:00",
        "evening_intro": "–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω:",
        "evening_tip_btn": "ü™Ñ –°–æ–≤–µ—Ç –¥–Ω—è",
        "evening_set": "–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {t} (–ª–æ–∫–∞–ª—å–Ω–æ).",
        "evening_off": "–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω.",
        "ask_consent": "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã?",
        "yes": "–î–∞", "no": "–ù–µ—Ç",
        "unknown": "–ù—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: –≥–¥–µ –∏–º–µ–Ω–Ω–æ –∏ —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?",
        "thanks": "–ü—Ä–∏–Ω—è—Ç–æ üôå",
        "back": "‚óÄ –ù–∞–∑–∞–¥",
        "exit": "–í—ã–π—Ç–∏",
        "paused_on": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–∞—É–∑—É. /resume ‚Äî –≤–∫–ª—é—á–∏—Ç—å.",
        "paused_off": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.",
        "deleted": "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        "life_today": "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π {n}-–π –¥–µ–Ω—å –∂–∏–∑–Ω–∏ üéâ. –¶–µ–ª—å ‚Äî 36 500 (100 –ª–µ—Ç).",
        "life_percent": "–¢—ã –ø—Ä–æ—à—ë–ª —É–∂–µ {p}% –ø—É—Ç–∏ –∫ 100 –≥–æ–¥–∞–º.",
        "life_estimate": "(–æ—Ü–µ–Ω–æ—á–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É ‚Äî —É–∫–∞–∂–∏ birth_date –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)",
        "px": "–° —É—á—ë—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è: {sex}, {age} –ª–µ—Ç; —Ü–µ–ª—å ‚Äî {goal}.",
        "act_rem_4h": "‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 4 —á",
        "act_rem_eve": "‚è∞ –°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º",
        "act_rem_morn": "‚è∞ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º",
        "act_save_episode": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–ø–∏–∑–æ–¥",
        "act_ex_neck": "üßò 5-–º–∏–Ω —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —à–µ–∏",
        "act_er": "üöë –ö–æ–≥–¥–∞ —Å—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é",
    },
    "uk": {
        "welcome":"–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî —Ç—É—Ä–±–æ—Ç–ª–∏–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤‚Äô—è.\n–ó—Ä–æ–±—ñ–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ (~40—Å) –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó.",
        "help":"–ö–æ—Ä–æ—Ç–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ–¥–µ–Ω–Ω—ñ —á–µ–∫-—ñ–Ω–∏.\n–ö–æ–º–∞–Ω–¥–∏: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /evening_on 20:00 /evening_off /settz +2 /health60 /mood /energy /hydrate /skintip /cycle /youth /ru /uk /en /es",
        "privacy":"–Ø –Ω–µ –∑–∞–º—ñ–Ω—é—é –ª—ñ–∫–∞—Ä—è. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ–Ω—ñ–º—É–º –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å. /delete_data ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏.",
        "quick_title":"–®–≤–∏–¥–∫—ñ –¥—ñ—ó",
        "quick_h60":"‚ö° –ó–¥–æ—Ä–æ–≤‚Äô—è –∑–∞ 60 —Å",
        "quick_er":"üöë –ù–µ–≤—ñ–¥–∫–ª–∞–¥–Ω–æ",
        "quick_lab":"üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—è",
        "quick_rem":"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è",
        "profile_intro":"–®–≤–∏–¥–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ (~40—Å). –ú–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.",
        "write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏",
        "skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "start_where":"–ó —á–æ–≥–æ –ø–æ—á–Ω–µ–º–æ? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è/–∞–Ω–∞–ª—ñ–∑–∏/–∑–≤–∏—á–∫–∏/–¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è)",
        "saved_profile":"–ó–±–µ—Ä—ñ–≥: ",
        "daily_gm":"–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! üåû –Ø–∫ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "gm_excellent":"üëç –ß—É–¥–æ–≤–æ",
        "gm_ok":"üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
        "gm_tired":"üòê –í—Ç–æ–º–∞",
        "gm_pain":"ü§ï –ë–æ–ª–∏—Ç—å",
        "gm_skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "mood_note":"‚úçÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä",
        "mood_thanks":"–î—è–∫—É—é! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üëã",
        "h60_btn":"–ó–¥–æ—Ä–æ–≤‚Äô—è –∑–∞ 60 —Å–µ–∫—É–Ω–¥",
        "h60_intro":"–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à—ñ—Ç—å, —â–æ —Ç—É—Ä–±—É—î. –î–∞–º 3 –∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏ –∑–∞ 60 —Å–µ–∫—É–Ω–¥.",
        "h60_t1":"–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏",
        "h60_t2":"–©–æ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞—Ä–∞–∑ (24‚Äì48 –≥–æ–¥)",
        "h60_t3":"–ö–æ–ª–∏ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –ª—ñ–∫–∞—Ä—è",
        "h60_serious":"–©–æ —Å–µ—Ä–π–æ–∑–Ω–µ –≤–∏–∫–ª—é—á–∏—Ç–∏",
        "ask_fb":"–¶–µ –±—É–ª–æ –∫–æ—Ä–∏—Å–Ω–æ?",
        "fb_good":"üëç –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è",
        "fb_bad":"üëé –ù–µ –∫–æ—Ä–∏—Å–Ω–æ",
        "fb_free":"üìù –í—ñ–¥–≥—É–∫",
        "fb_write":"–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ñ–¥–≥—É–∫:",
        "fb_thanks":"–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫! ‚úÖ",
        "youth_pack":"–ú–æ–ª–æ–¥—ñ–∂–Ω–∏–π –ø–∞–∫–µ—Ç",
        "gm_energy":"‚ö° –ï–Ω–µ—Ä–≥—ñ—è",
        "gm_energy_q":"–Ø–∫ –µ–Ω–µ—Ä–≥—ñ—è (1‚Äì5)?",
        "gm_energy_done":"–ó–∞–ø–∏—Å–∞–≤ –µ–Ω–µ—Ä–≥—ñ—é ‚Äî –¥—è–∫—É—é!",
        "gm_evening_btn":"‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏ –≤–≤–µ—á–µ—Ä—ñ",
        "hydrate_btn":"üíß –ì—ñ–¥—Ä–∞—Ç–∞—Ü—ñ—è",
        "hydrate_nudge":"üíß –ß–∞—Å –¥–ª—è —Å–∫–ª—è–Ω–∫–∏ –≤–æ–¥–∏",
        "skintip_btn":"üß¥ –ü–æ—Ä–∞–¥–∞ –¥–ª—è —à–∫—ñ—Ä–∏/—Ç—ñ–ª–∞",
        "skintip_sent":"–ü–æ—Ä–∞–¥—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.",
        "daily_tip_prefix":"üçé –ü—ñ–¥–∫–∞–∑–∫–∞ –¥–Ω—è:",
        "challenge_btn":"üéØ –ß–µ–ª–µ–Ω–¥–∂ 7 –¥–Ω—ñ–≤ (–≤–æ–¥–∞)",
        "challenge_started":"–ß–µ–ª–µ–Ω–¥–∂ –∑–∞–ø—É—â–µ–Ω–æ!",
        "challenge_progress":"–ü—Ä–æ–≥—Ä–µ—Å: {d}/{len} –¥–Ω—ñ–≤.",
        "cycle_btn":"ü©∏ –¶–∏–∫–ª",
        "cycle_consent":"–í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Ü–∏–∫–ª —ñ –º‚Äô—è–∫—ñ –ø–æ—Ä–∞–¥–∏?",
        "cycle_ask_last":"–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –º–µ–Ω—Å—Ç—Ä—É–∞—Ü—ñ–π (–†–†–†–†-–ú–ú-–î–î):",
        "cycle_ask_len":"–°–µ—Ä–µ–¥–Ω—è –¥–æ–≤–∂–∏–Ω–∞ —Ü–∏–∫–ª—É (–Ω–∞–ø—Ä., 28):",
        "cycle_saved":"–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ü–∏–∫–ª—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
        "quiet_saved":"–¢–∏—Ö—ñ –≥–æ–¥–∏–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {qh}",
        "set_quiet_btn":"üåô –¢–∏—Ö—ñ –≥–æ–¥–∏–Ω–∏",
        "ask_quiet":"–í–≤–µ–¥—ñ—Ç—å —è–∫ –ì–ì:–•–•-–ì–ì:–•–• (–ª–æ–∫–∞–ª—å–Ω–æ), –Ω–∞–ø—Ä. 22:00-08:00",
        "evening_intro":"–í–µ—á—ñ—Ä–Ω—ñ–π —á–µ–∫-—ñ–Ω:",
        "evening_tip_btn":"ü™Ñ –ü–æ—Ä–∞–¥–∞ –¥–Ω—è",
        "evening_set":"–í–µ—á—ñ—Ä–Ω—ñ–π —á–µ–∫-—ñ–Ω –Ω–∞ {t} (–ª–æ–∫–∞–ª—å–Ω–æ).",
        "evening_off":"–í–∏–º–∫–Ω–µ–Ω–æ –≤–µ—á—ñ—Ä–Ω—ñ–π —á–µ–∫-—ñ–Ω.",
        "ask_consent":"–ú–æ–∂—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—ñ–∑–Ω—ñ—à–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —è–∫ –≤–∏?",
        "yes":"–¢–∞–∫", "no":"–ù—ñ",
        "unknown":"–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: –¥–µ —Å–∞–º–µ —ñ —è–∫ –¥–æ–≤–≥–æ?",
        "thanks":"–ü—Ä–∏–π–Ω—è—Ç–æ üôå",
        "back":"‚óÄ –ù–∞–∑–∞–¥",
        "exit":"–í–∏–π—Ç–∏",
        "paused_on":"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ. /resume ‚Äî —É–≤—ñ–º–∫–Ω—É—Ç–∏.",
        "paused_off":"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω–µ–Ω—ñ.",
        "deleted":"–£—Å—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ. /start ‚Äî –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.",
        "life_today":"–°—å–æ–≥–æ–¥–Ω—ñ —Ç–≤—ñ–π {n}-–π –¥–µ–Ω—å –∂–∏—Ç—Ç—è üéâ. –ú–µ—Ç–∞ ‚Äî 36 500 (100 —Ä–æ–∫—ñ–≤).",
        "life_percent":"–¢–∏ –ø—Ä–æ–π—à–æ–≤ {p}% —à–ª—è—Ö—É –¥–æ 100 —Ä–æ–∫—ñ–≤.",
        "life_estimate":"(–æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –∑–∞ –≤—ñ–∫–æ–º ‚Äî –≤–∫–∞–∂–∏ birth_date –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ)",
        "px":"–ó —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ—Ñ—ñ–ª—é: {sex}, {age} —Ä.; –º–µ—Ç–∞ ‚Äî {goal}.",
        "act_rem_4h":"‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ 4 –≥–æ–¥",
        "act_rem_eve":"‚è∞ –°—å–æ–≥–æ–¥–Ω—ñ –≤–≤–µ—á–µ—Ä—ñ",
        "act_rem_morn":"‚è∞ –ó–∞–≤—Ç—Ä–∞ –∑—Ä–∞–Ω–∫—É",
        "act_save_episode":"üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –µ–ø—ñ–∑–æ–¥",
        "act_ex_neck":"üßò 5-—Ö–≤ –¥–ª—è —à–∏—ó",
        "act_er":"üöë –ö–æ–ª–∏ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ",
    },
}
T["es"] = T["en"]  # –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞

# --- Personalized prefix shown before LLM reply ---
def personalized_prefix(lang: str, profile: dict) -> str:
    sex = (profile.get("sex") or "").strip()
    goal = (profile.get("goal") or "").strip()
    age_raw = str(profile.get("age") or "")
    m = re.search(r"\d+", age_raw)
    age = m.group(0) if m else ""
    if sum(bool(x) for x in (sex, age, goal)) >= 2:
        tpl = (T.get(lang) or T["en"]).get("px", T["en"]["px"])
        return tpl.format(sex=sex or "‚Äî", age=age or "‚Äî", goal=goal or "‚Äî")
    return ""


# ---------------- Helpers ----------------
def utcnow() -> datetime:
    return datetime.now(timezone.utc)

def iso(dt: Optional[datetime]) -> str:
    return "" if not dt else dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def detect_lang_from_text(text: str, fallback: str) -> str:
    s = (text or "").strip()
    if not s:
        return fallback
    low = s.lower()
    if re.search(r"[–∞-—è—ë—ñ—ó—î“ë]", low):
        return "uk" if re.search(r"[—ñ—ó—î“ë]", low) else "ru"
    try:
        return norm_lang(detect(s))
    except Exception:
        return fallback

def profile_is_incomplete(profile_row: dict) -> bool:
    keys = ["sex","age","goal"]
    return sum(1 for k in keys if str(profile_row.get(k) or "").strip()) < 2

def _user_lang(uid: int) -> str:
    return norm_lang((users_get(uid) or {}).get("lang") or "en")


# ===== ONBOARDING GATE (–º–∏–Ω–∏-–æ–ø—Ä–æ—Å) =====
GATE_FLAG_KEY = "menu_unlocked"

async def gate_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    kb = [
        [InlineKeyboardButton("üß© –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å (40‚Äì60 —Å–µ–∫)" if lang!="en" else "üß© Take the 40‚Äì60s intake", callback_data="intake:start")],
        [InlineKeyboardButton("‚û°Ô∏è –ü–æ–∑–∂–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é" if lang!="en" else "‚û°Ô∏è Later ‚Äî open menu", callback_data="gate:skip")],
    ]
    text = ("–ß—Ç–æ–±—ã —Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å. –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ."
            if lang!="en" else
            "To personalize answers, please take a short intake. You can skip and do it later.")
    await update.effective_chat.send_message(text, reply_markup=InlineKeyboardMarkup(kb))


# === MINI-INTAKE ===
MINI_KEYS = ["sex","age","goal","conditions","meds_allergies","activity","diet_focus","steps_target","habits","birth_date"]
MINI_FREE_KEYS: Set[str] = {"meds_allergies","birth_date"}
MINI_STEPS = {
    "sex": {
        "ru":[("–ú—É–∂—Å–∫–æ–π","male"),("–ñ–µ–Ω—Å–∫–∏–π","female"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("Male","male"),("Female","female"),("Other","other")],
        "uk":[("–ß–æ–ª–æ–≤—ñ—á–∞","male"),("–ñ—ñ–Ω–æ—á–∞","female"),("–Ü–Ω—à–∞","other")],
        "es":[("Hombre","male"),("Mujer","female"),("Otro","other")],
        "label":{"ru":"–ü–æ–ª:","en":"Sex:","uk":"–°—Ç–∞—Ç—å:","es":"Sexo:"}
    },
    "age": {
        "ru":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "en":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "uk":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "es":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "label":{"ru":"–í–æ–∑—Ä–∞—Å—Ç:","en":"Age:","uk":"–í—ñ–∫:","es":"Edad:"}
    },
    "goal": {
        "ru":[("–≠–Ω–µ—Ä–≥–∏—è","energy"),("–°–æ–Ω","sleep"),("–ü–æ—Ö—É–¥–µ–Ω–∏–µ","weight"),("–°–∏–ª–∞","strength"),("–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ","longevity")],
        "en":[("Energy","energy"),("Sleep","sleep"),("Weight","weight"),("Strength","strength"),("Longevity","longevity")],
        "uk":[("–ï–Ω–µ—Ä–≥—ñ—è","energy"),("–°–æ–Ω","sleep"),("–í–∞–≥–∞","weight"),("–°–∏–ª–∞","strength"),("–î–æ–≤–≥–æ–ª—ñ—Ç—Ç—è","longevity")],
        "es":[("Energ√≠a","energy"),("Sue√±o","sleep"),("Peso","weight"),("Fuerza","strength"),("Longevidad","longevity")],
        "label":{"ru":"–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:","en":"Main goal:","uk":"–ú–µ—Ç–∞:","es":"Objetivo:"}
    },
    "conditions": {
        "ru":[("–ù–µ—Ç","none"),("–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥.","cvd"),("–©–ñ/—ç–Ω–¥–æ–∫—Ä.","endocrine"),("–ñ–ö–¢","gi"),("–ê–ª–ª–µ—Ä–≥–∏—è","allergy"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("None","none"),("Cardio/vascular","cvd"),("Thyroid/endocrine","endocrine"),("GI","gi"),("Allergy","allergy"),("Other","other")],
        "uk":[("–ù–µ–º–∞—î","none"),("–°–µ—Ä—Ü–µ–≤–æ-—Å—É–¥.","cvd"),("–©–ó/–µ–Ω–¥–æ–∫—Ä.","endocrine"),("–®–ö–¢","gi"),("–ê–ª–µ—Ä–≥—ñ—è","allergy"),("–Ü–Ω—à–µ","other")],
        "es":[("Ninguno","none"),("Cardio/vascular","cvd"),("Tiroides","endocrine"),("GI","gi"),("Alergia","allergy"),("Otro","other")],
        "label":{"ru":"–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:","en":"Chronic conditions:","uk":"–•—Ä–æ–Ω—ñ—á–Ω—ñ —Å—Ç–∞–Ω–∏:","es":"Condiciones cr√≥nicas:"}
    },
    "meds_allergies": {
        "ru":[], "en":[], "uk":[], "es":[],
        "label":{"ru":"–õ–µ–∫–∞—Ä—Å—Ç–≤–∞/–¥–æ–±–∞–≤–∫–∏/–∞–ª–ª–µ—Ä–≥–∏–∏ (–∫–æ—Ä–æ—Ç–∫–æ):","en":"Meds/supplements/allergies (short):","uk":"–õ—ñ–∫–∏/–¥–æ–±–∞–≤–∫–∏/–∞–ª–µ—Ä–≥—ñ—ó (–∫–æ—Ä–æ—Ç–∫–æ):","es":"Medicamentos/suplementos/alergias (corto):"}
    },
    "activity": {
        "ru":[("–ù–∏–∑–∫–∞—è","low"),("–°—Ä–µ–¥–Ω—è—è","mid"),("–í—ã—Å–æ–∫–∞—è","high"),("–°–ø–æ—Ä—Ç","sport")],
        "en":[("Low","low"),("Medium","mid"),("High","high"),("Sport","sport")],
        "uk":[("–ù–∏–∑—å–∫–∞","low"),("–°–µ—Ä–µ–¥–Ω—è","mid"),("–í–∏—Å–æ–∫–∞","high"),("–°–ø–æ—Ä—Ç","sport")],
        "es":[("Baja","low"),("Media","mid"),("Alta","high"),("Deporte","sport")],
        "label":{"ru":"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:","en":"Activity:","uk":"–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:","es":"Actividad:"}
    },
    "diet_focus": {
        "ru":[("–°–±–∞–ª–∞–Ω—Å.","balanced"),("–ù–∏–∑–∫–æ—É–≥–ª.","lowcarb"),("–†–∞—Å—Ç–∏—Ç.","plant"),("–ù–µ—Ä–µ–≥—É–ª.","irregular")],
        "en":[("Balanced","balanced"),("Low-carb","lowcarb"),("Plant-based","plant"),("Irregular","irregular")],
        "uk":[("–ó–±–∞–ª–∞–Ω—Å.","balanced"),("–ú–∞–ª–æ–≤—É–≥–ª.","lowcarb"),("–†–æ—Å–ª–∏–Ω–Ω–µ","plant"),("–ù–µ—Ä–µ–≥—É–ª.","irregular")],
        "es":[("Equilibrada","balanced"),("Baja carb.","lowcarb"),("Vegetal","plant"),("Irregular","irregular")],
        "label":{"ru":"–ü–∏—Ç–∞–Ω–∏–µ —á–∞—â–µ –≤—Å–µ–≥–æ:","en":"Diet mostly:","uk":"–•–∞—Ä—á—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–∂–Ω–æ:","es":"Dieta:"}
    },
    "steps_target": {
        "ru":[("<5–∫","5000"),("5‚Äì8–∫","8000"),("8‚Äì12–∫","12000"),("–°–ø–æ—Ä—Ç","15000")],
        "en":[("<5k","5000"),("5‚Äì8k","8000"),("8‚Äì12k","12000"),("Sport","15000")],
        "uk":[("<5–∫","5000"),("5‚Äì8–∫","8000"),("8‚Äì12–∫","12000"),("–°–ø–æ—Ä—Ç","15000")],
        "es":[("<5k","5000"),("5‚Äì8k","8000"),("8‚Äì12k","12000"),("Deporte","15000")],
        "label":{"ru":"–®–∞–≥–∏/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:","en":"Steps/activity:","uk":"–ö—Ä–æ–∫–∏/–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:","es":"Pasos/actividad:"}
    },
    "habits": {
        "ru":[("–ù–µ –∫—É—Ä—é","no_smoke"),("–ö—É—Ä—é","smoke"),("–ê–ª–∫. —Ä–µ–¥–∫–æ","alc_low"),("–ê–ª–∫. —á–∞—Å—Ç–æ","alc_high"),("–ö–æ—Ñ–µ–∏–Ω 0‚Äì1","caf_low"),("–ö–æ—Ñ–µ–∏–Ω 2‚Äì3","caf_mid"),("–ö–æ—Ñ–µ–∏–Ω 4+","caf_high")],
        "en":[("No smoking","no_smoke"),("Smoking","smoke"),("Alcohol rare","alc_low"),("Alcohol often","alc_high"),("Caffeine 0‚Äì1","caf_low"),("Caffeine 2‚Äì3","caf_mid"),("Caffeine 4+","caf_high")],
        "uk":[("–ù–µ –∫—É—Ä—é","no_smoke"),("–ö—É—Ä—é","smoke"),("–ê–ª–∫. —Ä—ñ–¥–∫–æ","alc_low"),("–ê–ª–∫. —á–∞—Å—Ç–æ","alc_high"),("–ö–æ—Ñ–µ—ó–Ω 0‚Äì1","caf_low"),("–ö–æ—Ñ–µ—ó–Ω 2‚Äì3","caf_mid"),("–ö–æ—Ñ–µ—ó–Ω 4+","caf_high")],
        "es":[("No fuma","no_smoke"),("Fuma","smoke"),("Alcohol raro","alc_low"),("Alcohol a menudo","alc_high"),("Cafe√≠na 0‚Äì1","caf_low"),("Cafe√≠na 2‚Äì3","caf_mid"),("Cafe√≠na 4+","caf_high")],
        "label":{"ru":"–ü—Ä–∏–≤—ã—á–∫–∏ (–≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ):","en":"Habits (pick closest):","uk":"–ó–≤–∏—á–∫–∏ (–æ–±–µ—Ä—ñ—Ç—å –±–ª–∏–∂—á–µ):","es":"H√°bitos (elige):"}
    },
    "birth_date": {
        "ru":[], "en":[], "uk":[], "es":[],
        "label":{"ru":"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î) ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é:","en":"Birth date (YYYY-MM-DD) ‚Äî optional:","uk":"–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–†–†–†–†-–ú–ú-–î–î) ‚Äî –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º:","es":"Fecha de nacimiento (AAAA-MM-DD) ‚Äî opcional:"}
    },
}

# ---- Sheets + memory fallback ----
SHEETS_ENABLED = True
ss = None
ws_feedback = ws_users = ws_profiles = ws_episodes = ws_reminders = ws_daily = None
ws_rules = ws_challenges = None
GSPREAD_CLIENT: Optional[gspread.client.Client] = None

def _ws_headers(ws):
    try:
        return ws.row_values(1) if ws else []
    except Exception:
        return []

def _ws_ensure_columns(ws, desired_headers: List[str]):
    try:
        current = _ws_headers(ws)
        if not current:
            if ws.col_count < len(desired_headers):
                ws.add_cols(len(desired_headers) - ws.col_count)
            ws.append_row(desired_headers)
            return
        if ws.col_count < len(desired_headers):
            ws.add_cols(len(desired_headers) - ws.col_count)
        missing = [h for h in desired_headers if h not in current]
        if missing:
            for h in missing:
                ws.update_cell(1, len(current)+1, h)
                current.append(h)
    except Exception as e:
        logging.warning(f"ensure columns failed for {getattr(ws,'title','?')}: {e}")

def _sheets_init():
    global SHEETS_ENABLED, ss, ws_feedback, ws_users, ws_profiles, ws_episodes, ws_reminders, ws_daily, ws_rules, ws_challenges, GSPREAD_CLIENT
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if not creds_json:
            raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
        creds = json.loads(creds_json)
        credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds, scope)
        gclient = gspread.authorize(credentials)
        GSPREAD_CLIENT = gclient

        try:
            ss = gclient.open_by_key(SHEET_ID) if SHEET_ID else gclient.open(SHEET_NAME)
        except SpreadsheetNotFound:
            if ALLOW_CREATE_SHEET:
                ss = gclient.create(SHEET_NAME)
            else:
                raise

        def _ensure_ws(title: str, headers: List[str]):
            try:
                ws = ss.worksheet(title)
            except WorksheetNotFound:
                ws = ss.add_worksheet(title=title, rows=4000, cols=max(60, len(headers)))
                ws.append_row(headers)
            if not ws.get_all_values():
                ws.append_row(headers)
            _ws_ensure_columns(ws, headers)
            return ws

        ws_feedback   = _ensure_ws("Feedback",   ["timestamp","user_id","name","username","rating","comment"])
        ws_users      = _ensure_ws("Users",      ["user_id","username","lang","consent","tz_offset","checkin_hour","evening_hour","paused","last_seen","last_auto_date","last_auto_count","streak","streak_best","gm_last_date"])
        ws_profiles   = _ensure_ws("Profiles",   [
            "user_id","sex","age","goal","goals","conditions","meds","allergies",
            "sleep","activity","diet","diet_focus","steps_target","habits",
            "cycle_enabled","cycle_last_date","cycle_avg_len","last_cycle_tip_date",
            "quiet_hours","consent_flags","notes","updated_at","city","surgeries","ai_profile","birth_date"
        ])
        ws_episodes   = _ensure_ws("Episodes",   ["episode_id","user_id","topic","started_at","baseline_severity","red_flags","plan_accepted","target","reminder_at","next_checkin_at","status","last_update","notes"])
        ws_daily      = _ensure_ws("DailyCheckins",["timestamp","user_id","mood","energy","comment"])
        ws_rules      = _ensure_ws("Rules",      ["rule_id","topic","segment","trigger","advice_text","citation","last_updated","enabled"])
        ws_challenges = _ensure_ws("Challenges", ["user_id","challenge_id","name","start_date","length_days","days_done","status"])
        ws_reminders  = _ensure_ws("Reminders",  ["id","user_id","text","when_utc","created_at","status"])

        logging.info("Google Sheets connected.")
    except Exception as e:
        SHEETS_ENABLED = False
        logging.error(f"SHEETS disabled (fallback to memory) | Possibly 429 quota exceeded. Reason: {e}")

_sheets_init()

# --------- Memory fallback stores ----------
MEM_USERS: Dict[int, dict] = {}
MEM_PROFILES: Dict[int, dict] = {}
MEM_EPISODES: List[dict] = []
MEM_REMINDERS: List[dict] = []
MEM_FEEDBACK: List[dict] = []
MEM_DAILY: List[dict] = []
MEM_CHALLENGES: List[dict] = []
MEM_RULES: List[dict] = []

# --------- Sessions (runtime) ----------
sessions: Dict[int, dict] = {}

# -------- Wrappers: Users / Profiles / Daily / Episodes / Reminders / Feedback / Challenges --------
def _headers(ws): return _ws_headers(ws)

def users_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        try:
            for r in ws_users.get_all_records():
                if str(r.get("user_id")) == str(uid):
                    return r
        except Exception as e:
            logging.warning(f"users_get fallback: {e}")
    return MEM_USERS.get(uid, {})

def users_upsert(uid: int, username: str, lang: str):
    base = {
        "user_id": str(uid),
        "username": username or "",
        "lang": lang,
        "consent": "no",
        "tz_offset": "0",
        "checkin_hour": DEFAULT_CHECKIN_LOCAL,
        "evening_hour": "",
        "paused": "no",
        "last_seen": iso(utcnow()),
        "last_auto_date": "",
        "last_auto_count": "0",
        "streak": "0",
        "streak_best": "0",
        "gm_last_date": "",
    }
    if SHEETS_ENABLED:
        try:
            vals = ws_users.get_all_records()
            hdr = _headers(ws_users)
            end_col = gsu.rowcol_to_a1(1, len(hdr)).rstrip("1")
            for i, r in enumerate(vals, start=2):
                if str(r.get("user_id")) == str(uid):
                    merged = {**r, **{k: base[k] for k in base if not str(r.get(k) or "").strip()}}
                    ws_users.update(f"A{i}:{end_col}{i}", [[merged.get(h, "") for h in hdr]])
                    return
            ws_users.append_row([base.get(h, "") for h in hdr])
            return
        except Exception as e:
            logging.warning(f"users_upsert -> memory fallback: {e}")
    MEM_USERS[uid] = {**MEM_USERS.get(uid, {}), **base}

def users_set(uid: int, field: str, value: str):
    if SHEETS_ENABLED:
        try:
            vals = ws_users.get_all_records()
            for i, r in enumerate(vals, start=2):
                if str(r.get("user_id")) == str(uid):
                    hdr = _headers(ws_users)
                    if field not in hdr:
                        _ws_ensure_columns(ws_users, hdr + [field])
                        hdr = _headers(ws_users)
                    ws_users.update_cell(i, hdr.index(field)+1, value)
                    return
        except Exception as e:
            logging.warning(f"users_set -> memory fallback: {e}")
    u = MEM_USERS.setdefault(uid, {})
    u[field] = value

def profiles_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        try:
            for r in ws_profiles.get_all_records():
                if str(r.get("user_id")) == str(uid):
                    return r
        except Exception as e:
            logging.warning(f"profiles_get fallback: {e}")
    return MEM_PROFILES.get(uid, {})

def profiles_upsert(uid: int, patch: dict):
    patch = dict(patch or {})
    patch["user_id"] = str(uid)
    patch["updated_at"] = iso(utcnow())
    if SHEETS_ENABLED:
        try:
            vals = ws_profiles.get_all_records()
            hdr = _headers(ws_profiles)
            if hdr:
                for k in patch.keys():
                    if k not in hdr:
                        _ws_ensure_columns(ws_profiles, hdr + [k])
                        hdr = _headers(ws_profiles)
            for i, r in enumerate(vals, start=2):
                if str(r.get("user_id")) == str(uid):
                    merged = {**r, **patch}
                    ws_profiles.update(f"A{i}:{gsu.rowcol_to_a1(i, len(hdr))}", [[merged.get(h, "") for h in hdr]])
                    return
            ws_profiles.append_row([patch.get(h, "") for h in hdr])
            return
        except Exception as e:
            logging.warning(f"profiles_upsert -> memory fallback: {e}")
    MEM_PROFILES[uid] = {**MEM_PROFILES.get(uid, {}), **patch}

def feedback_add(ts: str, uid: int, name: str, username: str, rating: str, comment: str):
    row = {"timestamp":ts, "user_id":str(uid), "name":name, "username":username, "rating":rating, "comment":comment}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_feedback)
            ws_feedback.append_row([row.get(h, "") for h in hdr])
            return
        except Exception as e:
            logging.warning(f"feedback_add -> memory fallback: {e}")
    MEM_FEEDBACK.append(row)

def daily_add(ts: str, uid: int, mood: str="", comment: str="", energy: Optional[int]=None):
    row = {"timestamp":ts, "user_id":str(uid), "mood":mood, "energy":("" if energy is None else str(energy)), "comment":comment}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_daily)
            ws_daily.append_row([row.get(h, "") for h in hdr])
            return
        except Exception as e:
            logging.warning(f"daily_add -> memory fallback: {e}")
    MEM_DAILY.append(row)

def episode_create(uid: int, topic: str, severity: int=5, red: str="") -> str:
    eid = str(uuid.uuid4())
    row = {"episode_id":eid,"user_id":str(uid),"topic":topic,"started_at":iso(utcnow()),
           "baseline_severity":str(severity),"red_flags":red,"plan_accepted":"","target":"","reminder_at":"","next_checkin_at":"",
           "status":"open","last_update":iso(utcnow()),"notes":""}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_episodes)
            ws_episodes.append_row([row.get(h, "") for h in hdr])
        except Exception as e:
            logging.warning(f"episode_create -> memory fallback: {e}")
            MEM_EPISODES.append(row)
    else:
        MEM_EPISODES.append(row)
    return eid

def episode_set(eid: str, key: str, val: str):
    if SHEETS_ENABLED:
        try:
            vals = ws_episodes.get_all_records()
            hdr = _headers(ws_episodes)
            for i, r in enumerate(vals, start=2):
                if r.get("episode_id") == eid:
                    if key not in hdr:
                        _ws_ensure_columns(ws_episodes, hdr + [key]); hdr=_headers(ws_episodes)
                    row = [r.get(h, "") if h!=key else val for h in hdr]
                    ws_episodes.update(f"A{i}:{gsu.rowcol_to_a1(i,len(hdr))}", [row]); return
        except Exception as e:
            logging.warning(f"episode_set -> memory fallback: {e}")
    for r in MEM_EPISODES:
        if r.get("episode_id")==eid:
            r[key]=val; return

def episode_find_open(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED:
        try:
            for r in ws_episodes.get_all_records():
                if str(r.get("user_id"))==str(uid) and (r.get("status")=="open"):
                    return r
        except Exception as e:
            logging.warning(f"episode_find_open fallback: {e}")
    for r in reversed(MEM_EPISODES):
        if r.get("user_id")==str(uid) and r.get("status")=="open":
            return r
    return None

def reminder_add(uid: int, text: str, when_utc: datetime) -> str:
    rid = str(uuid.uuid4())
    row = {"id":rid,"user_id":str(uid),"text":text,"when_utc":iso(when_utc),"created_at":iso(utcnow()),"status":"open"}
    if SHEETS_ENABLED:
        try:
            hdr = _headers(ws_reminders)
            ws_reminders.append_row([row.get(h, "") for h in hdr]); return rid
        except Exception as e:
            logging.warning(f"reminder_add -> memory fallback: {e}")
    MEM_REMINDERS.append(row); return rid

# ---------- Quickbar & Menus ----------
def quickbar_kb(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["quick_h60"], callback_data="menu|h60")],
        [InlineKeyboardButton(T[lang]["quick_er"], callback_data="menu|er"),
         InlineKeyboardButton(T[lang]["quick_lab"], callback_data="menu|lab")],
        [InlineKeyboardButton(T[lang]["quick_rem"], callback_data="menu|rem")]
    ])

async def show_quickbar(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str):
    try:
        await context.bot.send_message(chat_id, T[lang]["quick_title"], reply_markup=quickbar_kb(lang))
    except Exception as e:
        logging.warning(f"show_quickbar failed: {e}")

def inline_topic_kb(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ö° " + T[lang]["h60_btn"], callback_data="menu|h60")],
        [InlineKeyboardButton("üß™ Lab", callback_data="menu|lab"),
         InlineKeyboardButton("ü©∫ Sleep", callback_data="menu|sleep")],
        [InlineKeyboardButton("ü•ó Food", callback_data="menu|food"),
         InlineKeyboardButton("üèÉ Habits", callback_data="menu|habits")],
    ])

# ---------- LLM helpers ----------
def _fmt_bullets(items: list) -> str:
    return "\n".join([f"‚Ä¢ {x}" for x in items if isinstance(x, str) and x.strip()])

SYS_H60 = (
    "You are TendAI ‚Äî a concise, warm, professional assistant (not a doctor). "
    "Answer strictly in {lang}. JSON ONLY: {\"causes\":[\"...\"],\"serious\":\"...\",\"do_now\":[\"...\"],\"see_doctor\":[\"...\"]}. "
    "Rules: 2‚Äì4 simple causes; exactly 1 serious item to rule out; 3‚Äì5 concrete do_now steps; 2‚Äì3 see_doctor cues."
)

def health60_make_plan(lang: str, symptom_text: str, profile: dict) -> str:
    fallback_map = {
        "ru": (f"{T['ru']['h60_t1']}:\n‚Ä¢ –ë—ã—Ç–æ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã\n{T['ru']['h60_serious']}: ‚Ä¢ –ò—Å–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∫–∏–µ, –Ω–æ —Å–µ—Ä—å—ë–∑–Ω—ã–µ –ø—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏\n\n"
               f"{T['ru']['h60_t2']}:\n‚Ä¢ –í–æ–¥–∞ 300‚Äì500 –º–ª\n‚Ä¢ –û—Ç–¥—ã—Ö 15‚Äì20 –º–∏–Ω\n‚Ä¢ –ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ\n\n"
               f"{T['ru']['h60_t3']}:\n‚Ä¢ –£—Ö—É–¥—à–µ–Ω–∏–µ\n‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏\n‚Ä¢ –ë–æ–ª—å ‚â•7/10"),
        "uk": (f"{T['uk']['h60_t1']}:\n‚Ä¢ –ü–æ–±—É—Ç–æ–≤—ñ –ø—Ä–∏—á–∏–Ω–∏\n{T['uk']['h60_serious']}: ‚Ä¢ –í–∏–∫–ª—é—á–∏—Ç–∏ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ, –∞–ª–µ —Å–µ—Ä–π–æ–∑–Ω—ñ –ø—Ä–∏ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—ñ\n\n"
               f"{T['uk']['h60_t2']}:\n‚Ä¢ –í–æ–¥–∞ 300‚Äì500 –º–ª\n‚Ä¢ –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ 15‚Äì20 —Ö–≤\n‚Ä¢ –ü—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è\n\n"
               f"{T['uk']['h60_t3']}:\n‚Ä¢ –ü–æ–≥—ñ—Ä—à–µ–Ω–Ω—è\n‚Ä¢ –í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–ø—Ä–∞–ø–æ—Ä—Ü—ñ\n‚Ä¢ –ë—ñ–ª—å ‚â•7/10"),
        "en": (f"{T['en']['h60_t1']}:\n‚Ä¢ Everyday causes\n{T['en']['h60_serious']}: ‚Ä¢ Rule out rare but serious if worsening\n\n"
               f"{T['en']['h60_t2']}:\n‚Ä¢ Drink 300‚Äì500 ml water\n‚Ä¢ 15‚Äì20 min rest\n‚Ä¢ Ventilate\n\n"
               f"{T['en']['h60_t3']}:\n‚Ä¢ Worsening\n‚Ä¢ High fever/red flags\n‚Ä¢ Pain ‚â•7/10"),
    }
    fallback = fallback_map.get(lang, fallback_map["en"])
    if not oai:
        return fallback
    sys = SYS_H60.replace("{lang}", lang)
    user = {"symptom": (symptom_text or "").strip()[:500],
            "profile": {k: profile.get(k, "") for k in ["sex","age","goal","conditions","meds","sleep","activity","diet","diet_focus","steps_target"]}}
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL, temperature=0.2, max_tokens=420,
            response_format={"type":"json_object"},
            messages=[{"role":"system","content":sys},{"role":"user","content":json.dumps(user, ensure_ascii=False)}]
        )
        data = json.loads(resp.choices[0].message.content.strip())
        causes = _fmt_bullets(data.get("causes") or [])
        serious = (data.get("serious") or "").strip()
        do_now = _fmt_bullets(data.get("do_now") or [])
        see_doc = _fmt_bullets(data.get("see_doctor") or [])
        parts = []
        if causes: parts.append(f"{T[lang]['h60_t1']}:\n{causes}")
        if serious: parts.append(f"{T[lang]['h60_serious']}: {serious}")
        if do_now: parts.append(f"\n{T[lang]['h60_t2']}:\n{do_now}")
        if see_doc: parts.append(f"\n{T[lang]['h60_t3']}:\n{see_doc}")
        return "\n".join(parts).strip()
    except Exception as e:
        logging.error(f"health60 LLM error: {e}")
        return fallback

def _get_skin_tip(lang: str) -> str:
    pool_ru = [
        "–ú—è–≥–∫–æ–µ SPF –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —Å–∞–º–∞—è –Ω–µ–¥–æ–æ—Ü–µ–Ω—ë–Ω–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫–æ–∂—É.",
        "–î—É—à: —Ç—ë–ø–ª–∞—è –≤–æ–¥–∞, –Ω–µ –≥–æ—Ä—è—á–∞—è; 3‚Äì5 –º–∏–Ω—É—Ç ‚Äî –∫–æ–∂–∞ —Å–∫–∞–∂–µ—Ç —Å–ø–∞—Å–∏–±–æ.",
        "–£–º—ã–≤–∞–ª–∫–∞ –±–µ–∑ SLS, —É–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º –ø–æ—Å–ª–µ –≤–æ–¥—ã ‚Äî –º–∏–Ω–∏–º—É–º, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç."
    ]
    pool_en = [
        "Daily light SPF is the most underrated skin investment.",
        "Keep showers warm, not hot; 3‚Äì5 minutes helps your skin barrier.",
        "Use a gentle cleanser and moisturize right after water."
    ]
    pools = {"ru": pool_ru, "uk": pool_ru, "en": pool_en, "es": pool_en}
    return random.choice(pools.get(lang, pool_en))

# ---------- Scheduling stubs (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–æ–Ω–æ–º–µ—Ç–æ–∫ –≤ Part 2) ----------
def _has_jq_ctx(context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        return bool(context.application.job_queue)
    except Exception:
        return False

def schedule_from_sheet_on_start(app):  # stub
    logging.info("schedule_from_sheet_on_start: stub (—Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ ‚Äî –≤ –ß–∞—Å—Ç–∏ 2)")

def schedule_daily_checkin(app, uid: int, tz_off: int, hhmm: str, lang: str):  # stub
    logging.info(f"schedule_daily_checkin (stub) uid={uid} at {hhmm} tz={tz_off}")

def schedule_evening_checkin(app, uid: int, tz_off: int, hhmm: str, lang: str):  # stub
    logging.info(f"schedule_evening_checkin (stub) uid={uid} at {hhmm} tz={tz_off}")

# ---------- Commands ----------
async def post_init(app):
    me = await app.bot.get_me()
    logging.info(f"BOT READY: @{me.username} (id={me.id})")
    try:
        schedule_from_sheet_on_start(app)
    except Exception as e:
        logging.warning(f"schedule_from_sheet_on_start failed: {e}")

def update_last_seen(uid: int):
    users_set(uid, "last_seen", iso(utcnow()))

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = norm_lang(getattr(user, "language_code", None))
    users_upsert(user.id, user.username or "", lang)
    context.user_data["lang"] = lang
    sessions.setdefault(user.id, {})["last_user_text"] = "/start"
    update_last_seen(user.id)

    await update.message.reply_text(T[lang]["welcome"], reply_markup=ReplyKeyboardRemove())

    prof = profiles_get(user.id) or {}
    if profile_is_incomplete(prof):
        await gate_show(update, context)
    else:
        await update.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
        await show_quickbar(context, update.effective_chat.id, lang)

    u = users_get(user.id)
    if (u.get("consent") or "").lower() not in {"yes","no"}:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang]["yes"], callback_data="consent|yes"),
                                    InlineKeyboardButton(T[lang]["no"], callback_data="consent|no")]])
        await update.message.reply_text(T[lang]["ask_consent"], reply_markup=kb)

    tz_off = int(str(u.get("tz_offset") or "0"))
    hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, user.id, tz_off, hhmm, lang)
        eh = (u.get("evening_hour") or "").strip()
        if eh:
            schedule_evening_checkin(context.application, user.id, tz_off, eh, lang)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = _user_lang(update.effective_user.id)
    update_last_seen(update.effective_user.id)
    await update.message.reply_text(T[lang]["help"])

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = _user_lang(update.effective_user.id)
    update_last_seen(update.effective_user.id)
    await update.message.reply_text(T[lang]["privacy"])

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "yes")
    lang = _user_lang(uid); update_last_seen(uid)
    await update.message.reply_text(T[lang]["paused_on"])

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "no")
    lang = _user_lang(uid); update_last_seen(uid)
    await update.message.reply_text(T[lang]["paused_off"])

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    update_last_seen(uid)
    if SHEETS_ENABLED:
        try:
            vals = ws_users.get_all_values()
            for i in range(2, len(vals)+1):
                if ws_users.cell(i,1).value == str(uid):
                    ws_users.delete_rows(i); break
            try:
                vals = ws_profiles.get_all_values()
                idxs = []
                for i in range(2, len(vals)+1):
                    if ws_profiles.cell(i,1).value == str(uid):
                        idxs.append(i)
                for shift, i in enumerate(idxs):
                    ws_profiles.delete_rows(i - shift)
            except Exception:
                pass
        except Exception as e:
            logging.warning(f"delete_data sheets err: {e}")
    else:
        MEM_USERS.pop(uid, None); MEM_PROFILES.pop(uid, None)
        global MEM_EPISODES, MEM_REMINDERS, MEM_DAILY
        MEM_EPISODES = [r for r in MEM_EPISODES if r["user_id"]!=str(uid)]
        MEM_REMINDERS = [r for r in MEM_REMINDERS if r["user_id"]!=str(uid)]
        MEM_DAILY = [r for r in MEM_DAILY if r["user_id"]!=str(uid)]
    lang = norm_lang(getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(T[lang]["deleted"], reply_markup=ReplyKeyboardRemove())

async def cmd_settz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    txt = (update.message.text or "").strip()
    m = re.search(r"(-?\+?\d{1,2})", txt)
    if not m:
        await update.message.reply_text("Usage: /settz +2  |  –ü—Ä–∏–º–µ—Ä: /settz +3")
        return
    try:
        off = int(m.group(1)); off = max(-12, min(14, off))
        users_set(uid, "tz_offset", str(off))
        await update.message.reply_text(f"UTC offset set: {off:+d}")
        u = users_get(uid); hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
        if _has_jq_ctx(context):
            schedule_daily_checkin(context.application, uid, off, hhmm, lang)
    except Exception as e:
        logging.error(f"/settz error: {e}")
        await update.message.reply_text("Failed to set timezone offset.")

async def cmd_checkin_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    txt = (update.message.text or "").strip()
    m = re.search(r"([01]?\d|2[0-3]):([0-5]\d)", txt)
    hhmm = m.group(0) if m else DEFAULT_CHECKIN_LOCAL
    users_set(uid, "checkin_hour", hhmm); users_set(uid, "paused", "no")
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, uid, int((users_get(uid) or {}).get("tz_offset") or 0), hhmm, lang)
    await update.message.reply_text(f"Daily check-in set to {hhmm} (local).")

async def cmd_checkin_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    users_set(uid, "paused", "yes")
    await update.message.reply_text("Daily check-in disabled.")

async def cmd_health60(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    sessions.setdefault(uid, {})["awaiting_h60_text"] = True
    await update.message.reply_text(T[lang]["h60_intro"])
    await show_quickbar(context, update.effective_chat.id, lang)

async def cmd_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["gm_excellent"], callback_data="gm|mood|excellent"),
         InlineKeyboardButton(T[lang]["gm_ok"],        callback_data="gm|mood|ok")],
        [InlineKeyboardButton(T[lang]["gm_tired"],     callback_data="gm|mood|tired"),
         InlineKeyboardButton(T[lang]["gm_pain"],      callback_data="gm|mood|pain")],
        [InlineKeyboardButton(T[lang]["gm_skip"],      callback_data="gm|skip")],
        [InlineKeyboardButton(T[lang]["mood_note"],    callback_data="gm|note")]
    ])
    await update.message.reply_text(T[lang]["daily_gm"], reply_markup=kb)

async def cmd_energy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; lang = _user_lang(uid)
    row = [InlineKeyboardButton(str(i), callback_data=f"energy|rate|{i}") for i in range(1,6)]
    kb = InlineKeyboardMarkup([row])
    await update.message.reply_text(T[lang]["gm_energy_q"], reply_markup=kb)

# ---------- Text handler ----------
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    text = (update.message.text or "").strip()
    sess = sessions.setdefault(uid, {})

    # –º–∏–Ω–∏-–æ–ø—Ä–æ—Å: —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥
    if sess.get("awaiting_free_key"):
        key = sess.pop("awaiting_free_key")
        ma = sess.setdefault("mini_answers", {})
        ma[key] = text
        # —à–∞–≥ –≤–ø–µ—Ä—ë–¥
        step = int(sess.get("mini_step", 0)) + 1
        sess["mini_step"] = step
        await update.message.reply_text(T[lang]["thanks"])
        # –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        await ask_next_mini(context, update.effective_chat.id, lang, uid)
        return

    # –∑–∞–º–µ—Ç–∫–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
    if sess.get("awaiting_mood_note"):
        sess.pop("awaiting_mood_note", None)
        daily_add(iso(utcnow()), uid, comment=text)
        await update.message.reply_text(T[lang]["mood_thanks"])
        return

    # Health60 —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥
    if sess.get("awaiting_h60_text"):
        sess["awaiting_h60_text"] = False
        prof = profiles_get(uid) or {}
        plan = health60_make_plan(lang, text, prof)
        px = personalized_prefix(lang, prof)
        reply = (px + "\n\n" if px else "") + plan
        await update.message.reply_text(reply)
        await show_quickbar(context, update.effective_chat.id, lang)
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º "–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç"
    sess["last_user_text"] = text
    await update.message.reply_text(T[lang]["unknown"])

# ---------- CallbackQueryHandler ----------
async def cb_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = update.effective_user.id
    lang = _user_lang(uid)
    data = q.data or ""
    sess = sessions.setdefault(uid, {})

    # –ì–µ–π—Ç/–∏–Ω—Ç–µ–π–∫
    if data == "intake:start":
        sess.clear()
        sess.update({"mini_active": True, "mini_step": 0, "mini_answers": {}})
        await q.edit_message_reply_markup(None)
        await context.bot.send_message(update.effective_chat.id, T[lang]["profile_intro"])
        # –ø–µ—Ä–≤—ã–π —à–∞–≥
        label = MINI_STEPS[MINI_KEYS[0]]["label"][lang]
        await context.bot.send_message(update.effective_chat.id, label, reply_markup=build_mini_kb(lang, MINI_KEYS[0]))
        return
    if data == "gate:skip":
        await q.edit_message_reply_markup(None)
        await context.bot.send_message(update.effective_chat.id, T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
        await show_quickbar(context, update.effective_chat.id, lang)
        return

    # MINI choices
    if data.startswith("mini|"):
        parts = data.split("|")
        action = parts[1] if len(parts)>1 else ""
        if action == "choose" and len(parts) >= 4:
            key, val = parts[2], parts[3]
            ma = sess.setdefault("mini_answers", {})
            ma[key] = val
            sess["mini_step"] = int(sess.get("mini_step", 0)) + 1
            await q.edit_message_reply_markup(None)
            await ask_next_mini(context, update.effective_chat.id, lang, uid)
            return
        if action == "write" and len(parts) >= 3:
            key = parts[2]
            sess["awaiting_free_key"] = key
            await q.edit_message_reply_markup(None)
            await context.bot.send_message(update.effective_chat.id, T[lang]["write"])
            return
        if action == "skip" and len(parts) >= 3:
            # –ø—Ä–æ—Å—Ç–æ –¥–≤–∏–≥–∞–µ–º —à–∞–≥
            sess["mini_step"] = int(sess.get("mini_step", 0)) + 1
            await q.edit_message_reply_markup(None)
            await ask_next_mini(context, update.effective_chat.id, lang, uid)
            return

    # Consent
    if data.startswith("consent|"):
        choice = data.split("|",1)[1]
        users_set(uid, "consent", "yes" if choice=="yes" else "no")
        await q.edit_message_reply_markup(None)
        await q.message.reply_text(T[lang]["thanks"])
        return

    # Main menu routing
    if data.startswith("menu|"):
        route = data.split("|",1)[1]
        if route == "h60":
            sessions.setdefault(uid, {})["awaiting_h60_text"] = True
            await q.message.reply_text(T[lang]["h60_intro"])
            return
        if route == "rem":
            rid = reminder_add(uid, "Hydrate", utcnow()+timedelta(hours=4))
            await q.message.reply_text("Reminder set (4h).")
            return
        if route == "er":
            await q.message.reply_text("If severe chest pain, trouble breathing, confusion, or fainting ‚Äî call local emergency services.")
            return
        await q.message.reply_text(T[lang]["thanks"])
        return

    # Good morning mood
    if data.startswith("gm|"):
        parts = data.split("|")
        action = parts[1] if len(parts)>1 else ""
        if action == "mood" and len(parts)>=3:
            mood = parts[2]
            daily_add(iso(utcnow()), uid, mood=mood)
            await q.edit_message_reply_markup(None)
            await q.message.reply_text(T[lang]["mood_thanks"])
            return
        if action == "note":
            sessions.setdefault(uid,{})["awaiting_mood_note"] = True
            await q.message.reply_text(T[lang]["mood_note"])
            return
        if action == "skip":
            await q.edit_message_reply_markup(None)
            await q.message.reply_text(T[lang]["thanks"])
            return

    # Energy
    if data.startswith("energy|rate|"):
        try:
            score = int(data.split("|")[2])
        except Exception:
            score = None
        daily_add(iso(utcnow()), uid, energy=score or 0)
        await q.edit_message_reply_markup(None)
        await q.message.reply_text(T[lang]["gm_energy_done"])
        return

# ====== END OF PART 1/2 ======
# =========================
# TendAI ‚Äî Part 2: Logic, callbacks, run
# =========================

# -------- –î–æ–ø. –∫–æ–º–∞–Ω–¥—ã (–≤–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω, —Å–æ–≤–µ—Ç—ã, –ø—Ä–æ—Ñ–∏–ª—å, —Ü–∏–∫–ª) --------
async def cmd_evening_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    txt = (update.message.text or "").strip()
    m = re.search(r"([01]?\d|2[0-3]):([0-5]\d)", txt)
    hhmm = m.group(0) if m else DEFAULT_EVENING_LOCAL
    users_set(uid, "evening_hour", hhmm)
    if _has_jq_ctx(context):
        schedule_evening_checkin(context.application, uid, _user_tz_off(uid), hhmm, lang)
    await update.message.reply_text(T[lang]["evening_set"].format(t=hhmm))

async def cmd_evening_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    users_set(uid, "evening_hour", "")
    await update.message.reply_text(T[lang]["evening_off"])

async def cmd_hydrate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    await update.message.reply_text(T[lang]["hydrate_nudge"])

async def cmd_skintip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    prof = profiles_get(uid) or {}
    sex = (prof.get("sex") or "")
    try:
        age = int(re.search(r"\d+", str(prof.get("age","") or "0")).group(0))
    except Exception:
        age = 0
    await update.message.reply_text(f"{T[lang]['daily_tip_prefix']} {_get_skin_tip(lang, sex, age)}")

async def cmd_youth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    prof = profiles_get(uid) or {}
    lm = life_metrics(prof)
    bar = progress_bar(lm["percent_to_100"])
    text = (T[lang]["youth_pack"] + "\n" +
            T[lang]["life_today"].format(n=lm["days_lived"]) + "\n" +
            T[lang]["life_percent"].format(p=lm["percent_to_100"]) + "\n" +
            f"{bar}")
    await update.message.reply_text(text)

async def cmd_cycle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    # –ø—Ä–æ—Å—Ç–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞ ‚Äî –¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏ –≤ –º–µ–Ω—é (cb_handler)
    profiles_upsert(uid, {"cycle_enabled":"yes"})
    await update.message.reply_text(T[lang]["cycle_consent"])

async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = _user_lang(uid)
    u = users_get(uid) or {}
    p = profiles_get(uid) or {}
    key_order = ["sex","age","goal","conditions","meds","allergies","activity","diet_focus","steps_target","habits","birth_date","quiet_hours","city"]
    parts = [f"id: {uid}", f"lang: {u.get('lang','')}  tz: {u.get('tz_offset','0')}"]
    for k in key_order:
        v = str(p.get(k,"")).strip()
        if v:
            parts.append(f"{k}: {v}")
    await update.message.reply_text(T[lang]["saved_profile"] + "; ".join(parts))


# -------- –°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: –º–∏–Ω–∏-–æ–ø—Ä–æ—Å, –∑–∞–º–µ—Ç–∫–∏, Health60 --------
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    uid = update.effective_user.id
    lang = _user_lang(uid)
    text = (update.message.text or "").strip()
    update_last_seen(uid)

    s = sessions.setdefault(uid, {})

    # –≤–≤–æ–¥ –¥–ª—è "mini|write|<key>"
    free_key = s.get("awaiting_free_key")
    if free_key:
        # –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è birth_date
        if free_key == "birth_date":
            if not re.match(r"^\d{4}-\d{2}-\d{2}$", text):
                await update.message.reply_text({"ru":"–§–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î",
                                                 "uk":"–§–æ—Ä–º–∞—Ç: –†–†–†–†-–ú–ú-–î–î",
                                                 "en":"Use YYYY-MM-DD",
                                                 "es":"Usa AAAA-MM-DD"}[lang])
                return
        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –∏ —à–∞–≥ –≤–ø–µ—Ä—ë–¥
        mini_handle_choice(uid, free_key, text)
        s.pop("awaiting_free_key", None)
        await ask_next_mini(context, update.effective_chat.id, lang, uid)
        return

    # –∑–∞–º–µ—Ç–∫–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
    if s.get("awaiting_mood_note"):
        daily_add(iso(utcnow()), uid, mood="", comment=text)
        s.pop("awaiting_mood_note", None)
        await update.message.reply_text(T[lang]["mood_thanks"])
        return

    # Health60 —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–∞
    if s.get("awaiting_h60_text"):
        s["awaiting_h60_text"] = False
        prof = profiles_get(uid) or {}
        prefix = personalized_prefix(lang, prof)
        plan = health60_make_plan(lang, text, prof)
        output = (prefix + "\n\n" if prefix else "") + plan
        # –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥ –æ—Ç–≤–µ—Ç–æ–º
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton(T[lang]["act_rem_4h"], callback_data="h60|rem|4h"),
             InlineKeyboardButton(T[lang]["act_rem_eve"], callback_data="h60|rem|eve")],
            [InlineKeyboardButton(T[lang]["act_ex_neck"], callback_data="h60|neck"),
             InlineKeyboardButton(T[lang]["act_save_episode"], callback_data="h60|save")],
            [InlineKeyboardButton(T[lang]["fb_good"], callback_data="h60|fb|good"),
             InlineKeyboardButton(T[lang]["fb_bad"],  callback_data="h60|fb|bad"),
             InlineKeyboardButton(T[lang]["fb_free"], callback_data="h60|fb|free")],
        ])
        await update.message.reply_text(output, reply_markup=kb)
        return

    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–∂–∏–¥–∞–µ–º ‚Äî –º—è–≥–∫–∏–π —Ä–æ—É—Ç–µ—Ä (–ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞)
    prof = profiles_get(uid) or {}
    data = llm_router_answer(text, lang, prof)
    prefix = personalized_prefix(lang, prof)
    reply = (prefix + "\n\n" if prefix else "") + (data.get("assistant_reply") or T[lang]["unknown"])
    await send_unique(update.message, uid, reply)
    await show_quickbar(context, update.effective_chat.id, lang)


# -------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π (–ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô cb_handler) --------
async def cb_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    uid = query.from_user.id
    lang = _user_lang(uid)
    data = query.data or ""
    update_last_seen(uid)

    try:
        # --- –ì–µ–π—Ç/–∏–Ω—Ç–µ–π–∫ ---
        if data == "intake:start":
            await query.answer()
            await start_mini_intake(context, query.message.chat_id, lang, uid)
            return

        if data == "gate:skip":
            await query.answer()
            await query.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
            await show_quickbar(context, query.message.chat_id, lang)
            return

        # --- –ú–∏–Ω–∏-–æ–ø—Ä–æ—Å ---
        if data.startswith("mini|choose|"):
            _, _, key, value = data.split("|", 3)
            mini_handle_choice(uid, key, value)
            await query.answer()
            await ask_next_mini(context, query.message.chat_id, lang, uid)
            return

        if data.startswith("mini|write|"):
            _, _, key = data.split("|", 2)
            sessions.setdefault(uid, {})["awaiting_free_key"] = key
            await query.answer()
            await query.message.reply_text(T[lang]["write"])
            return

        if data.startswith("mini|skip|"):
            _, _, key = data.split("|", 2)
            mini_handle_choice(uid, key, "")
            await query.answer()
            await ask_next_mini(context, query.message.chat_id, lang, uid)
            return

        # --- –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ñ–æ–ª–ª–æ—É-–∞–ø ---
        if data.startswith("consent|"):
            _, ans = data.split("|", 1)
            users_set(uid, "consent", "yes" if ans == "yes" else "no")
            await query.answer()
            await query.message.reply_text(T[lang]["thanks"])
            return

        # --- –ú–µ–Ω—é –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π ---
        if data == "menu|h60":
            sessions.setdefault(uid, {})["awaiting_h60_text"] = True
            await query.answer()
            await query.message.reply_text(T[lang]["h60_intro"])
            return

        if data == "menu|er":
            await query.answer()
            txt = {"ru":"üöë –°—Ä–æ—á–Ω–æ: —Å–∏–ª—å–Ω–∞—è –æ–¥—ã—à–∫–∞, –±–æ–ª—å/—Å–¥–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–¥–∏, –≤–Ω–µ–∑–∞–ø–Ω–∞—è —Å–ª–∞–±–æ—Å—Ç—å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, —Å–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å —Å–æ–∑–Ω–∞–Ω–∏—è, –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ, —Ç—Ä–∞–≤–º–∞ –≥–æ–ª–æ–≤—ã ‚Äî –≤—ã–∑—ã–≤–∞–π—Ç–µ —Å–∫–æ—Ä—É—é.",
                   "uk":"üöë –ù–µ–≥–∞–π–Ω–æ: —Å–∏–ª—å–Ω–∞ –∑–∞–¥–∏—à–∫–∞, –±—ñ–ª—å/—Å—Ç–∏—Å–Ω–µ–Ω–Ω—è —É –≥—Ä—É–¥—è—Ö, —Ä—ñ–∑–∫–∞ —Å–ª–∞–±–∫—ñ—Å—Ç—å –æ–¥–Ω—ñ—î—ó —Å—Ç–æ—Ä–æ–Ω–∏, —Å–ø–ª—É—Ç–∞–Ω—ñ—Å—Ç—å, –∫—Ä–æ–≤–æ—Ç–µ—á–∞, —Ç—Ä–∞–≤–º–∞ –≥–æ–ª–æ–≤–∏ ‚Äî –≤–∏–∫–ª–∏–∫–∞–π—Ç–µ —à–≤–∏–¥–∫—É.",
                   "en":"üöë Urgent: severe shortness of breath, chest pain/pressure, sudden one-sided weakness, confusion, major bleeding, head trauma ‚Äî call emergency."}[lang]
            await query.message.reply_text(txt)
            return

        if data == "menu|lab":
            await query.answer()
            await query.message.reply_text({"ru":"üß™ –õ–∞–±: –¥–æ–±–∞–≤–ª—é —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º –∞–ø–¥–µ–π—Ç–µ.",
                                            "uk":"üß™ –õ–∞–±: –¥–æ–¥–∞–º —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤–∏—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤ —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –∞–ø–¥–µ–π—Ç—ñ.",
                                            "en":"üß™ Lab: a short baseline panel will be added in the next update."}[lang])
            return

        if data == "menu|sleep":
            await query.answer()
            await query.message.reply_text({"ru":"üõå –°–æ–Ω: —Ü–µ–ª—å ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∏ 7‚Äì8 —á —Å–Ω–∞.",
                                            "uk":"üõå –°–æ–Ω: –º–µ—Ç–∞ ‚Äî —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ —ñ 7‚Äì8 –≥–æ–¥–∏–Ω.",
                                            "en":"üõå Sleep: target 7‚Äì8h, stable schedule."}[lang])
            return

        if data == "menu|food":
            await query.answer()
            await query.message.reply_text({"ru":"ü•ó –ü–∏—Ç–∞–Ω–∏–µ: –±–æ–ª—å—à–µ –±–µ–ª–∫–∞/–∫–ª–µ—Ç—á–∞—Ç–∫–∏, –º–µ–Ω—å—à–µ —É–ª—å—Ç—Ä–∞–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ.",
                                            "uk":"ü•ó –•–∞—Ä—á—É–≤–∞–Ω–Ω—è: –±—ñ–ª—å—à–µ –±—ñ–ª–∫–∞/–∫–ª—ñ—Ç–∫–æ–≤–∏–Ω–∏, –º–µ–Ω—à–µ —É–ª—å—Ç—Ä–∞–ø–µ—Ä–µ—Ä–æ–±–ª–µ–Ω–æ–≥–æ.",
                                            "en":"ü•ó Food: more protein/fiber, less ultra-processed."}[lang])
            return

        if data == "menu|habits":
            await query.answer()
            await query.message.reply_text({"ru":"üèÉ –ü—Ä–∏–≤—ã—á–∫–∏: 6‚Äì8k —à–∞–≥–æ–≤/–¥–µ–Ω—å + –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–∞—Å—Ç—è–∂–∫–∏.",
                                            "uk":"üèÉ –ó–≤–∏—á–∫–∏: 6‚Äì8k –∫—Ä–æ–∫—ñ–≤/–¥–µ–Ω—å + –∫–æ—Ä–æ—Ç–∫—ñ —Ä–æ–∑—Ç—è–∂–∫–∏.",
                                            "en":"üèÉ Habits: 6‚Äì8k steps/day + short stretching."}[lang])
            return

        if data == "menu|rem":
            await query.answer()
            # –ø—Ä–∏–º–µ—Ä –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞
            when_local = user_local_now(uid) + timedelta(hours=4)
            qh = _user_quiet_hours(uid)
            when_local = adjust_out_of_quiet(when_local, qh)
            when_utc = local_to_utc_dt(uid, when_local)
            rid = reminder_add(uid, "gentle-followup", when_utc)
            if _has_jq_ctx(context):
                context.application.job_queue.run_once(job_oneoff_reminder, when=timedelta(seconds=max(5, (when_utc-utcnow()).total_seconds())), data={"user_id":uid,"reminder_id":rid})
            await query.message.reply_text(T[lang]["thanks"])
            return

        # --- –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ---
        if data.startswith("gm|mood|"):
            _, _, mood = data.split("|", 2)
            daily_add(iso(utcnow()), uid, mood=mood)
            users_set(uid, "gm_last_date", datetime.utcnow().strftime("%Y-%m-%d"))
            await query.answer()
            kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang]["mood_note"], callback_data="gm|note")]])
            await query.message.reply_text(T[lang]["mood_thanks"], reply_markup=kb)
            return

        if data == "gm|note":
            sessions.setdefault(uid, {})["awaiting_mood_note"] = True
            await query.answer()
            await query.message.reply_text(T[lang]["mood_note"])
            return

        if data == "gm|skip":
            await query.answer()
            await query.message.reply_text(T[lang]["thanks"])
            return

        # --- –û—Ü–µ–Ω–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ ---
        if data.startswith("energy|rate|"):
            _, _, val = data.split("|", 2)
            try:
                v = int(val)
            except:
                v = 3
            daily_add(iso(utcnow()), uid, energy=v)
            await query.answer()
            await query.message.reply_text(T[lang]["gm_energy_done"])
            return

        # --- Health60 –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
        if data == "h60|neck":
            await query.answer()
            txt = {"ru":"üßò 5 –º–∏–Ω—É—Ç: –∫—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–ª–µ—á–∞–º–∏, –ª—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ —Ç—Ä–∞–ø–µ—Ü–∏–π, –ø–æ–≤–æ—Ä–æ—Ç—ã –≥–æ–ª–æ–≤—ã –±–µ–∑ –±–æ–ª–∏.",
                   "uk":"üßò 5 —Ö–≤: –∫—Ä—É–≥–æ–≤—ñ —Ä—É—Ö–∏ –ø–ª–µ—á–∏–º–∞, –º º—è–∫–∞ —Ä–æ–∑—Ç—è–∂–∫–∞ —Ç—Ä–∞–ø–µ—Ü—ñ–π, –ø–æ–≤–æ—Ä–æ—Ç–∏ –≥–æ–ª–æ–≤–∏ –±–µ–∑ –±–æ–ª—é.",
                   "en":"üßò 5 min: shoulder rolls, gentle trapezius stretch, pain-free neck turns."}[lang]
            await query.message.reply_text(txt)
            return

        if data == "h60|save":
            eid = episode_create(uid, topic="h60", severity=5)
            episode_set(eid, "notes", "saved from Health60")
            await query.answer()
            await query.message.reply_text(T[lang]["thanks"])
            return

        if data.startswith("h60|rem|"):
            _, _, which = data.split("|", 2)
            now_local = user_local_now(uid)
            if which == "4h":
                when_local = now_local + timedelta(hours=4)
            else:  # 'eve'
                hh, mm = hhmm_tuple(users_get(uid).get("evening_hour") or DEFAULT_EVENING_LOCAL)
                when_local = now_local.replace(hour=hh, minute=mm, second=0, microsecond=0)
                if when_local < now_local:
                    when_local += timedelta(days=1)
            when_local = adjust_out_of_quiet(when_local, _user_quiet_hours(uid))
            rid = reminder_add(uid, "h60-followup", local_to_utc_dt(uid, when_local))
            if _has_jq_ctx(context):
                delay = max(5, (local_to_utc_dt(uid, when_local)-utcnow()).total_seconds())
                context.application.job_queue.run_once(job_oneoff_reminder, when=timedelta(seconds=delay), data={"user_id":uid,"reminder_id":rid})
            await query.answer()
            await query.message.reply_text(T[lang]["thanks"])
            return

        if data.startswith("h60|fb|"):
            _, _, fb = data.split("|", 2)
            feedback_add(iso(utcnow()), uid, query.from_user.full_name or "", query.from_user.username or "", fb, "")
            if fb == "free":
                sessions.setdefault(uid, {})["awaiting_feedback_free"] = True
                await query.message.reply_text(T[lang]["fb_write"])
            else:
                await query.message.reply_text(T[lang]["fb_thanks"])
            await query.answer()
            return

    except Exception as e:
        logging.error(f"cb_handler error: {e}")

    # –¥–µ—Ñ–æ–ª—Ç
    try:
        await query.answer()
    except Exception:
        pass


# -------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ --------
def build_app() -> "Application":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start",        cmd_start))
    app.add_handler(CommandHandler("help",         cmd_help))
    app.add_handler(CommandHandler("privacy",      cmd_privacy))
    app.add_handler(CommandHandler("pause",        cmd_pause))
    app.add_handler(CommandHandler("resume",       cmd_resume))
    app.add_handler(CommandHandler("delete_data",  cmd_delete_data))
    app.add_handler(CommandHandler("settz",        cmd_settz))
    app.add_handler(CommandHandler("checkin_on",   cmd_checkin_on))
    app.add_handler(CommandHandler("checkin_off",  cmd_checkin_off))
    app.add_handler(CommandHandler("evening_on",   cmd_evening_on))
    app.add_handler(CommandHandler("evening_off",  cmd_evening_off))
    app.add_handler(CommandHandler("hydrate",      cmd_hydrate))
    app.add_handler(CommandHandler("skintip",      cmd_skintip))
    app.add_handler(CommandHandler("youth",        cmd_youth))
    app.add_handler(CommandHandler("cycle",        cmd_cycle))
    app.add_handler(CommandHandler("profile",      cmd_profile))

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
    app.add_handler(CommandHandler("ru",           cmd_lang_ru))
    app.add_handler(CommandHandler("en",           cmd_lang_en))
    app.add_handler(CommandHandler("uk",           cmd_lang_uk))
    app.add_handler(CommandHandler("es",           cmd_lang_es))

    # –°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text), group=1)

    # –í–ù–ò–ú–ê–ù–ò–ï: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback-—Ö–µ–Ω–¥–ª–µ—Ä–∞ —Ä–æ–≤–Ω–æ –û–î–ò–ù —Ä–∞–∑,
    # –ü–û–°–õ–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è cb_handler (–Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö _old_cb_handler)
    app.add_handler(CallbackQueryHandler(cb_handler), group=2)

    return app


def main():
    if not TELEGRAM_TOKEN:
        logging.error("TELEGRAM_TOKEN is not set in environment.")
        return
    app = build_app()
    logging.info("Starting polling...")
    app.run_polling(drop_pending_updates=True, allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
