# -*- coding: utf-8 -*-
import os, re, json, uuid, logging
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv

# langdetect (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
try:
    from langdetect import detect, DetectorFactory
    DetectorFactory.seed = 0
except Exception:
    detect = None

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ===== OpenAI =====
try:
    from openai import OpenAI
except Exception:
    OpenAI = None

# ===== Google Sheets =====
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# =========================
# Boot & Config
# =========================
load_dotenv()
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)

TELEGRAM_TOKEN  = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL    = os.getenv("OPENAI_MODEL", "gpt-4o-mini")  # –ø–æ—Å—Ç–∞–≤—å gpt-5, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
SHEET_NAME      = os.getenv("SHEET_NAME", "TendAI Feedback")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is missing")

# OpenAI client
oai = OpenAI(api_key=OPENAI_API_KEY) if (OPENAI_API_KEY and OpenAI) else None
logging.info(f"OPENAI enabled={bool(OPENAI_API_KEY)} client={bool(oai)} model={OPENAI_MODEL}")

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
if not creds_json:
    raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
credentials = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(creds_json), scope)
gclient = gspread.authorize(credentials)
ss = gclient.open(SHEET_NAME)

def _get_or_create_ws(title: str, headers: list[str]):
    try:
        ws = ss.worksheet(title)
    except gspread.WorksheetNotFound:
        ws = ss.add_worksheet(title=title, rows=2000, cols=20)
        ws.append_row(headers)
    if not ws.get_all_values():
        ws.append_row(headers)
    return ws

ws_feedback = _get_or_create_ws("Feedback", ["timestamp", "user_id", "name", "username", "rating", "comment"])
ws_users    = _get_or_create_ws("Users", ["user_id", "username", "lang", "consent", "tz_offset", "checkin_hour", "paused"])
ws_eps      = _get_or_create_ws("Episodes", [
    "episode_id","user_id","topic","started_at","baseline_severity","red_flags","plan_accepted",
    "target","reminder_at","next_checkin_at","status","last_update","notes"
])

# =========================
# State (RAM)
# =========================
# sessions[user_id] = {
#   "chat_history": [...],
#   "answers": {"intent","loc","kind","duration","severity","red"},
#   "mode": "chat"|"await_rating"|"await_plan"|"await_reminder"|"await_consent",
#   "episode_id": "...",
# }
sessions: dict[int, dict] = {}

# =========================
# i18n
# =========================
SUPPORTED = {"ru","en","uk","es"}
def norm_lang(code: str | None) -> str:
    if not code: return "en"
    c = code.split("-")[0].lower()
    if c.startswith("ua"): c = "uk"
    return c if c in SUPPORTED else "en"

T = {
    "ru": {
        "welcome":"–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî —Ç—ë–ø–ª—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é. –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç ‚Äî –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ –ø—Ä–µ–¥–ª–æ–∂—É –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –ø–ª–∞–Ω.",
        "help":"–ö–æ–º–∞–Ω–¥—ã: /help, /privacy, /pause, /resume, /delete_data, /lang <ru|en|uk|es>, /feedback",
        "privacy":"–Ø –Ω–µ –∑–∞–º–µ–Ω—è—é –≤—Ä–∞—á–∞. –î–∞—é –º—è–≥–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥–æ–π /delete_data.",
        "thanks":"–°–ø–∞—Å–∏–±–æ, —É—Å–ª—ã—à–∞–ª.",
        "consent":"–ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "ok_menu":"–ï—Å–ª–∏ —á—Ç–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–∞–º–∏. –ö–Ω–æ–ø–æ–∫ –Ω–µ –±—É–¥–µ—Ç üôÇ",
    },
    "en": {
        "welcome":"Hi! I‚Äôm TendAI ‚Äî a warm health & longevity assistant. Tell me briefly what‚Äôs going on and I‚Äôll guide you gently.",
        "help":"Commands: /help, /privacy, /pause, /resume, /delete_data, /lang <ru|en|uk|es>, /feedback",
        "privacy":"I don‚Äôt replace a doctor. I offer gentle self-care steps and check-ins. Use /delete_data to erase your data.",
        "thanks":"Thanks, got it.",
        "consent":"May I check in with you later about how you feel?",
        "ok_menu":"Just type in natural language. There are no buttons üôÇ",
    },
    "uk": {
        "welcome":"–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî —Ç–µ–ø–ª–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑—ñ –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è. –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å, —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è ‚Äî —è –¥–æ–ø–æ–º–æ–∂—É.",
        "help":"–ö–æ–º–∞–Ω–¥–∏: /help, /privacy, /pause, /resume, /delete_data, /lang <ru|en|uk|es>, /feedback",
        "privacy":"–Ø –Ω–µ –∑–∞–º—ñ–Ω—é—é –ª—ñ–∫–∞—Ä—è. –î–∞—é –º‚Äô—è–∫—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è. /delete_data ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–∞–Ω—ñ.",
        "thanks":"–î—è–∫—É—é, –ø–æ—á—É–ª–æ.",
        "consent":"–ú–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –π –∑–∞–ø–∏—Ç–∞—Ç–∏, —è–∫ –≤–∏?",
        "ok_menu":"–ü—Ä–æ—Å—Ç–æ –ø–∏—à—ñ—Ç—å –∑–≤–∏—á–∞–π–Ω–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. –ö–Ω–æ–ø–æ–∫ –Ω–µ –±—É–¥–µ üôÇ",
    },
    "es": {
        "welcome":"¬°Hola! Soy TendAI ‚Äî un asistente c√°lido de salud y longevidad. Cu√©ntame brevemente y te guiar√© con cuidado.",
        "help":"Comandos: /help, /privacy, /pause, /resume, /delete_data, /lang <ru|en|uk|es>, /feedback",
        "privacy":"No sustituyo a un m√©dico. Ofrezco pasos de autocuidado y seguimientos. /delete_data para borrar tus datos.",
        "thanks":"¬°Gracias!",
        "consent":"¬øPuedo escribirte m√°s tarde para saber c√≥mo sigues?",
        "ok_menu":"Escribe de forma natural. No habr√° botones üôÇ",
    },
}
def t(lang: str, key: str) -> str:
    return T.get(lang, T["en"]).get(key, T["en"].get(key, key))

# =========================
# Sheets helpers
# =========================
def now_utc(): return datetime.now(timezone.utc)
def iso(dt: datetime | None) -> str:
    return "" if not dt else dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def users_row_idx(uid: int) -> int | None:
    for i, row in enumerate(ws_users.get_all_records(), start=2):
        if str(row.get("user_id")) == str(uid): return i
    return None
def users_get(uid: int) -> dict:
    for row in ws_users.get_all_records():
        if str(row.get("user_id")) == str(uid): return row
    return {}
def users_upsert(uid: int, username: str, lang: str):
    idx = users_row_idx(uid)
    row = [str(uid), username or "", lang, "no", "0", "", "no"]
    if idx: ws_users.update(f"A{idx}:G{idx}", [row])
    else:   ws_users.append_row(row)
def users_set(uid: int, field: str, value: str):
    idx = users_row_idx(uid)
    if not idx: return
    headers = ws_users.row_values(1)
    if field in headers:
        ws_users.update_cell(idx, headers.index(field)+1, value)

def episode_create(uid: int, topic: str, baseline_sev: int, red: str) -> str:
    eid = f"{uid}-{uuid.uuid4().hex[:8]}"
    ws_eps.append_row([eid, str(uid), topic, iso(now_utc()), str(baseline_sev), red,
                       "0","<=3/10","","","open", iso(now_utc()), ""])
    return eid
def episode_find_open(uid: int) -> dict | None:
    for row in ws_eps.get_all_records():
        if str(row.get("user_id")) == str(uid) and row.get("status") == "open":
            return row
    return None
def episode_set(eid: str, field: str, value: str):
    vals = ws_eps.get_all_values(); headers = vals[0]
    if field not in headers: return
    col = headers.index(field)+1
    for i in range(2, len(vals)+1):
        if ws_eps.cell(i,1).value == eid:
            ws_eps.update_cell(i, col, value)
            ws_eps.update_cell(i, headers.index("last_update")+1, iso(now_utc()))
            return

def reschedule_from_sheet(app):
    for row in ws_eps.get_all_records():
        if row.get("status") != "open": continue
        nca = row.get("next_checkin_at") or ""
        if not nca: continue
        try:
            dt = datetime.strptime(nca, "%Y-%m-%d %H:%M:%S%z")
        except Exception:
            continue
        delay = (dt - now_utc()).total_seconds()
        if delay < 60: delay = 60
        app.job_queue.run_once(job_checkin, when=delay, data={"user_id": int(row["user_id"]), "episode_id": row["episode_id"]})

# =========================
# LLM core (chat-first)
# =========================
SYS_PROMPT = (
    "You are TendAI, a professional yet warm health & longevity coach. "
    "Speak in the user's language, 2‚Äì5 sentences, supportive, clear and practical. "
    "No diagnosis, no fear-mongering. When info is missing, ask ONE focused question. "
    "Offer simple home-care steps only when appropriate. Do not show buttons; list choices inline with short phrases. "
    "Return ONLY JSON with keys: "
    "assistant (string), next_action (one of: followup, rate_0_10, confirm_plan, pick_reminder, escalate, none), "
    "slots (object; may include: intent in [pain, throat, sleep, stress, digestion, energy]; "
    "loc in [Head, Throat, Back, Belly, Chest, Other]; kind in [Dull, Sharp, Throbbing, Burning, Pressing]; "
    "duration (string), severity (int 0..10), red (string among [High fever, Vomiting, Weakness/numbness, Speech/vision issues, Trauma, None]), "
    "), plan_steps (array of strings, optional)."
)

def _force_json(messages, temperature=0.2, max_tokens=450):
    """Try response_format=json_object; fallback if unsupported."""
    if not oai: return None
    try:
        return oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=temperature,
            max_tokens=max_tokens,
            response_format={"type":"json_object"},
            messages=messages,
        )
    except Exception as e:
        logging.warning(f"response_format disabled, fallback: {e}")
        return oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=temperature,
            max_tokens=max_tokens,
            messages=messages,
        )

def _json_from_text(raw: str) -> dict:
    raw = (raw or "").strip()
    try:
        m = re.search(r"\{[\s\S]*\}", raw)
        return json.loads(m.group(0)) if m else json.loads(raw)
    except Exception:
        return {}

def llm_chat(uid: int, lang: str, user_text: str) -> dict:
    """messages: chat history (short), returns dict"""
    hist = sessions.setdefault(uid, {}).setdefault("chat_history", [])[-12:]
    messages = [{"role":"system","content":SYS_PROMPT}] + hist + [{"role":"user","content":f"[lang={lang}] {user_text}"}]
    try:
        resp = _force_json(messages)
        content = (resp.choices[0].message.content or "").strip()
        data = _json_from_text(content)
        if not isinstance(data, dict):
            data = {}
        # save compact natural assistant text back into history
        assistant_text = data.get("assistant", "")
        hist.append({"role":"user","content":user_text[:1000]})
        if assistant_text:
            hist.append({"role":"assistant","content":assistant_text[:1000]})
        sessions[uid]["chat_history"] = hist[-14:]
        logging.info(f"LLM ok | text='{user_text[:40]}' -> next_action={data.get('next_action')}")
        return data
    except Exception as e:
        logging.warning(f"LLM error: {e}")
        return {}

# =========================
# Parsing helpers (free-text)
# =========================
YES = {"ru":{"–¥–∞","–∞–≥–∞","–æ–∫","—Ö–æ—Ä–æ—à–æ","–≥–æ—Ç–æ–≤","–≥–æ"},
       "en":{"yes","yep","ok","sure","ready","yeah"},
       "uk":{"—Ç–∞–∫","–æ–∫","–≥–∞—Ä–∞–∑–¥","–≥–æ—Ç–æ–≤–∏–π","–≥–æ—Ç–æ–≤–∞"},
       "es":{"s√≠","si","ok","vale","listo","lista"}}
LATER = {"ru":{"–ø–æ–∑–∂–µ","–ø–æ—Ç–æ–º","–Ω–µ —Å–µ–π—á–∞—Å"},
         "en":{"later","not now"},
         "uk":{"–ø—ñ–∑–Ω—ñ—à–µ","–Ω–µ –∑–∞—Ä–∞–∑"},
         "es":{"m√°s tarde","luego","no ahora"}}
NO = {"ru":{"–Ω–µ—Ç","–Ω–µ–∞","–Ω–µ –±—É–¥—É"},
      "en":{"no","nope"},
      "uk":{"–Ω—ñ","–Ω–µ –±—É–¥—É"},
      "es":{"no"}}

def is_yes(lang, s): return s.lower() in YES.get(lang, set())
def is_no(lang, s): return s.lower() in NO.get(lang, set())
def is_later(lang, s): return s.lower() in LATER.get(lang, set())

def parse_rating(s: str):
    m = re.search(r"\b(10|[0-9])\b", s.strip())
    return int(m.group(1)) if m else None

def parse_reminder_code(lang: str, s: str) -> str:
    tl = s.lower()
    if any(k in tl for k in ["4h","4 h","4—á","4 —á","—á–µ—Ä–µ–∑ 4","4 hours","en 4 h","4 horas","—á–µ—Ä–µ–∑ —á–µ—Ç—ã—Ä–µ","—á–µ—Ä–µ–∑ —á–æ—Ç–∏—Ä–∏"]):
        return "4h"
    if any(k in tl for k in ["–≤–µ—á–µ—Ä","–≤–µ—á–µ—Ä–æ–º","evening","tarde","—É–≤–µ—á–µ—Ä—ñ","–≤–µ—á—ñ—Ä"]):
        return "evening"
    if any(k in tl for k in ["—É—Ç—Ä–æ","—É—Ç—Ä–æ–º","morning","ma√±ana","—Ä–∞–Ω–∫–æ–º","–≤—Ä–∞–Ω—Ü—ñ"]):
        return "morning"
    if any(k in tl for k in ["–Ω–µ –Ω–∞–¥–æ","–Ω–µ –Ω—É–∂–Ω–æ","–±–µ–∑","no need","none","not necessary","no hace falta"]):
        return "none"
    return ""

# =========================
# Plan builder (–ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞)
# =========================
def build_hypotheses(ans: dict) -> list[str]:
    loc = (ans.get("loc") or "").lower()
    kind = (ans.get("kind") or "").lower()
    lines=[]
    if any(w in loc for w in ["head","–≥–æ–ª–æ–≤","cabeza"]):
        if "throbb" in kind or "–ø—É–ª—å—Å" in kind: lines.append("–ü–æ—Ö–æ–∂–µ –Ω–∞ –º–∏–≥—Ä–µ–Ω–æ–∑–Ω—ã–π —Ç–∏–ø.")
        elif "–¥–∞–≤" in kind or "press" in kind or "tight" in kind: lines.append("–ü–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ/—Å—Ç—Ä–µ—Å—Å-–≥–æ–ª–æ–≤–Ω—É—é –±–æ–ª—å.")
    if any(w in loc for w in ["back","—Å–ø–∏–Ω","espalda"]):
        if "–ø—Ä–æ—Å—Ç—Ä–µ–ª" in kind or "shoot" in kind: lines.append("–ï—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ—Ä–µ—à–∫–æ–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.")
        else: lines.append("–ë–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫—É—é –±–æ–ª—å –≤ —Å–ø–∏–Ω–µ.")
    if any(w in loc for w in ["throat","–≥–æ—Ä–ª–æ","garganta"]):
        lines.append("–ß–∞—Å—Ç–æ —ç—Ç–æ –≤–∏—Ä—É—Å–Ω–∞—è –±–æ–ª—å –≤ –≥–æ—Ä–ª–µ.")
    return lines

def make_plan(lang: str, ans: dict) -> list[str]:
    red = (ans.get("red") or "None").lower()
    sev = int(ans.get("severity", 5))
    urgent = any(w in red for w in ["fever","vomit","weak","speech","vision","—Ç—Ä–∞–≤–º","trauma"]) and sev >= 7
    if urgent:
        return {
            "ru":[ "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ–π —É–≥—Ä–æ–∑—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â—å—é." ],
            "en":[ "‚ö†Ô∏è Some answers suggest urgent risks. Please seek medical care as soon as possible." ],
            "uk":[ "‚ö†Ô∏è –Ñ –æ–∑–Ω–∞–∫–∏ –º–æ–∂–ª–∏–≤–æ—ó –∑–∞–≥—Ä–æ–∑–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –ø–æ –º–µ–¥–∏—á–Ω—É –¥–æ–ø–æ–º–æ–≥—É." ],
            "es":[ "‚ö†Ô∏è Hay se√±ales de posible urgencia. Busca atenci√≥n m√©dica lo antes posible." ],
        }[lang]

    base = {
        "ru":[
            "1) –í–æ–¥–∞ 400‚Äì600 –º–ª –∏ 15‚Äì20 –º–∏–Ω—É—Ç –ø–æ–∫–æ—è –≤ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ.",
            "2) –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –∏–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ 1 —Ä–∞–∑ —Å –µ–¥–æ–π.",
            "3) –ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É; —É–º–µ–Ω—å—à–∏—Ç—å —ç–∫—Ä–∞–Ω—ã –Ω–∞ 30‚Äì60 –º–∏–Ω—É—Ç.",
            "–¶–µ–ª—å: –∫ –≤–µ—á–µ—Ä—É –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å ‚â§3/10."
        ],
        "en":[
            "1) Drink 400‚Äì600 ml water and rest 15‚Äì20 minutes in a quiet place.",
            "2) If no contraindications ‚Äî ibuprofen 200‚Äì400 mg once with food.",
            "3) Air the room; reduce screens for 30‚Äì60 minutes.",
            "Target: pain/strain ‚â§3/10 by evening."
        ],
        "uk":[
            "1) 400‚Äì600 –º–ª –≤–æ–¥–∏ —Ç–∞ 15‚Äì20 —Ö–≤ —Å–ø–æ–∫–æ—é —É —Ç–∏—Ö–æ–º—É –º—ñ—Å—Ü—ñ.",
            "2) –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω—å ‚Äî —ñ–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ 1 —Ä–∞–∑ —ñ–∑ —ó–∂–µ—é.",
            "3) –ü—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É; –º–µ–Ω—à–µ –µ–∫—Ä–∞–Ω—ñ–≤ 30‚Äì60 —Ö–≤.",
            "–ú–µ—Ç–∞: –¥–æ –≤–µ—á–æ—Ä–∞ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å ‚â§3/10."
        ],
        "es":[
            "1) Bebe 400‚Äì600 ml de agua y descansa 15‚Äì20 min en un lugar tranquilo.",
            "2) Si no hay contraindicaciones ‚Äî ibuprofeno 200‚Äì400 mg una vez con comida.",
            "3) Ventila la habitaci√≥n; menos pantallas 30‚Äì60 min.",
            "Objetivo: por la tarde ‚â§3/10."
        ],
    }[lang]

    loc = (ans.get("loc") or "").lower()
    if any(w in loc for w in ["back","—Å–ø–∏–Ω","espalda"]):
        extra = {"ru":["4) –¢—ë–ø–ª—ã–π –∫–æ–º–ø—Ä–µ—Å—Å 10‚Äì15 –º–∏–Ω 2‚Äì3—Ä/–¥–µ–Ω—å, –º—è–≥–∫–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è/—Ä–∞—Å—Ç—è–∂–∫–∞."],
                 "en":["4) Warm compress 10‚Äì15 min 2‚Äì3√ó/day; gentle mobility."],
                 "uk":["4) –¢–µ–ø–ª–∏–π –∫–æ–º–ø—Ä–µ—Å 10‚Äì15 —Ö–≤ 2‚Äì3—Ä/–¥–µ–Ω—å; –º‚Äô—è–∫–∞ –º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—è."],
                 "es":["4) Compresa tibia 10‚Äì15 min 2‚Äì3√ó/d√≠a; movilidad suave."]}[lang]
        return base + extra
    if any(w in loc for w in ["throat","–≥–æ—Ä–ª–æ","garganta"]):
        extra = {"ru":["4) –¢—ë–ø–ª–æ–µ –ø–∏—Ç—å—ë; –ø–æ–ª–æ—Å–∫–∞–Ω–∏–µ —Å–æ–ª–∏ 3‚Äì4—Ä/–¥–µ–Ω—å."],
                 "en":["4) Warm fluids; saline gargles 3‚Äì4√ó/day."],
                 "uk":["4) –¢–µ–ø–ª—ñ –Ω–∞–ø–æ—ó; –ø–æ–ª–æ—Å–∫–∞–Ω–Ω—è —Å–æ–ª—å–æ–≤–∏–º —Ä–æ–∑—á–∏–Ω–æ–º 3‚Äì4—Ä/–¥–µ–Ω—å."],
                 "es":["4) L√≠quidos tibios; g√°rgaras salinas 3‚Äì4√ó/d√≠a."]}[lang]
        return base + extra
    return base

# =========================
# Jobs (check-in)
# =========================
async def job_checkin(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data or {}
    uid = data.get("user_id"); eid = data.get("episode_id")
    if not uid or not eid: return
    u = users_get(uid)
    if (u.get("paused") or "").lower() == "yes": return
    lang = u.get("lang") or "en"
    try:
        await context.bot.send_message(uid, {
            "ru":"–ù–µ–±–æ–ª—å—à–æ–π —á–µ–∫-–∏–Ω: –∫–∞–∫ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ 0‚Äì10? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ.",
            "en":"Quick check-in: how is it now (0‚Äì10)? Please reply with a number.",
            "uk":"–ö–æ—Ä–æ—Ç–∫–∏–π —á–µ–∫-—ñ–Ω: —è–∫ –∑–∞—Ä–∞–∑ (0‚Äì10)? –ù–∞–ø–∏—à—ñ—Ç—å —á–∏—Å–ª–æ.",
            "es":"Revisi√≥n r√°pida: ¬øc√≥mo est√°s ahora (0‚Äì10)? Responde con un n√∫mero.",
        }[lang])
        s = sessions.setdefault(uid, {})
        s["mode"] = "await_rating"
        s["episode_id"] = eid
        episode_set(eid, "next_checkin_at", "")
    except Exception as e:
        logging.error(f"job_checkin send error: {e}")

# =========================
# Commands
# =========================
async def on_startup(app):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        logging.info("Webhook cleared")
    except Exception:
        pass
    reschedule_from_sheet(app)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; uid = user.id
    lang = users_get(uid).get("lang")
    if not lang:
        txt = (update.message.text or "").strip() if update.message else ""
        cand = None
        if detect:
            try: cand = detect(txt) if txt else None
            except Exception: cand = None
        lang = norm_lang(cand or getattr(user,"language_code",None))
        users_upsert(uid, user.username or "", lang)

    await update.message.reply_text(t(lang,"welcome"))
    await update.message.reply_text(t(lang,"ok_menu"))
    u = users_get(uid)
    if (u.get("consent") or "").lower() not in {"yes","no"}:
        s = sessions.setdefault(uid, {})
        s["mode"] = "await_consent"
        await update.message.reply_text(t(lang,"consent") + " (–ù–∞–ø–∏—à–∏—Ç–µ: –¥–∞/–Ω–µ—Ç)")
    else:
        sessions.setdefault(uid, {}).setdefault("mode","chat")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang,"help"))

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang,"privacy"))

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid,"paused","yes")
    await update.message.reply_text("‚è∏Ô∏è Paused.")

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid,"paused","no")
    await update.message.reply_text("‚ñ∂Ô∏è Resumed.")

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    idx = users_row_idx(uid)
    if idx: ws_users.delete_rows(idx)
    vals = ws_eps.get_all_values(); to_del=[]
    for i in range(2, len(vals)+1):
        if ws_eps.cell(i,2).value == str(uid): to_del.append(i)
    for j, row_i in enumerate(to_del):
        ws_eps.delete_rows(row_i - j)
    await update.message.reply_text("‚úÖ Deleted. /start to begin again.")

async def cmd_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        await update.message.reply_text("Usage: /lang ru|en|uk|es"); return
    cand = norm_lang(context.args[0])
    if cand not in SUPPORTED:
        await update.message.reply_text("Usage: /lang ru|en|uk|es"); return
    users_set(uid,"lang",cand)
    await update.message.reply_text("‚úÖ Language set.")

async def cmd_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. (–∏–ª–∏ /skip) ")
    s = sessions.setdefault(uid, {}); s["awaiting_comment"]=True; s["feedback_context"]="general"

async def cmd_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    s = sessions.setdefault(uid, {})
    s["awaiting_comment"]=False
    await update.message.reply_text("–û–∫, –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏.")

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—Å—Ç–æ–º.")

# =========================
# Text (chat-first)
# =========================
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; uid = user.id
    text = (update.message.text or "").strip()

    # —è–∑—ã–∫
    urec = users_get(uid)
    if not urec:
        cand=None
        if detect:
            try: cand = detect(text) if text else None
            except Exception: cand=None
        lang = norm_lang(cand or getattr(user,"language_code",None))
        users_upsert(uid, user.username or "", lang)
    else:
        lang = norm_lang(urec.get("lang") or getattr(user,"language_code",None))

    s = sessions.setdefault(uid, {"mode":"chat","answers":{}, "chat_history":[]})

    # –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è
    if s.get("mode") == "await_consent":
        low = text.lower()
        if is_yes(lang, low):
            users_set(uid,"consent","yes"); s["mode"]="chat"
            await update.message.reply_text(t(lang,"thanks")); return
        if is_no(lang, low):
            users_set(uid,"consent","no"); s["mode"]="chat"
            await update.message.reply_text(t(lang,"thanks")); return
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª."); return

    # –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    if s.get("awaiting_comment") and not text.startswith("/"):
        ws_feedback.append_row([datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"), str(uid), "comment:general", user.username or "", "", text])
        s["awaiting_comment"]=False
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!"); return

    # —á–µ–∫-–∏–Ω: –æ—Ü–µ–Ω–∫–∞ 0‚Äì10
    if s.get("mode") == "await_rating":
        rating = parse_rating(text)
        if rating is None or not (0 <= rating <= 10):
            await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ 0‚Äì10 –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."); return
        ep = episode_find_open(uid)
        if ep:
            eid = ep["episode_id"]
            episode_set(eid,"notes",f"checkin:{rating}")
            if rating <= 3:
                episode_set(eid,"status","resolved")
                await update.message.reply_text({"ru":"–•–æ—Ä–æ—à–æ! –î–µ—Ä–∂–∏–º –∫—É—Ä—Å üí™","en":"Nice! Keep it up üí™","uk":"–ß—É–¥–æ–≤–æ! –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏ üí™","es":"¬°Bien! Sigue as√≠ üí™"}[lang])
            else:
                await update.message.reply_text({"ru":"–°–æ–∂–∞–ª–µ—é, —á—Ç–æ –≤—Å—ë –µ—â—ë –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ. –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ ‚Äî –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.","en":"Sorry it still feels uncomfortable. If any red flags appear, please consider medical care.","uk":"–®–∫–æ–¥–∞, —â–æ —â–µ –Ω–µ–ø—Ä–∏—î–º–Ω–æ. –Ø–∫—â–æ –∑‚Äô—è–≤–ª—è—Ç—å—Å—è ¬´—á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ¬ª, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.","es":"Lamento que siga molesto. Si aparecen se√±ales de alarma, busca atenci√≥n m√©dica."}[lang])
        s["mode"]="chat"; return

    # –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    if s.get("mode") == "await_plan":
        low = text.lower()
        eid = s.get("episode_id")
        if is_yes(lang, low):
            if eid: episode_set(eid,"plan_accepted","1")
            s["mode"]="await_reminder"
            await update.message.reply_text({
                "ru":"–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å: ¬´—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞¬ª, ¬´–≤–µ—á–µ—Ä–æ–º¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º¬ª –∏–ª–∏ ¬´–Ω–µ –Ω–∞–¥–æ¬ª.",
                "en":"When should I check in? You can reply: ‚Äúin 4h‚Äù, ‚Äúthis evening‚Äù, ‚Äútomorrow morning‚Äù or ‚Äúno need‚Äù.",
                "uk":"–ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏? –ù–∞–ø–∏—à—ñ—Ç—å: ¬´—á–µ—Ä–µ–∑ 4 –≥–æ–¥¬ª, ¬´—É–≤–µ—á–µ—Ä—ñ¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ¬ª –∞–±–æ ¬´–Ω–µ —Ç—Ä–µ–±–∞¬ª.",
                "es":"¬øCu√°ndo te escribo? Di: ¬´en 4 h¬ª, ¬´esta tarde¬ª, ¬´ma√±ana por la ma√±ana¬ª o ¬´no hace falta¬ª.",
            }[lang]); return
        if is_later(lang, low):
            if eid: episode_set(eid,"plan_accepted","later")
            s["mode"]="await_reminder"
            await update.message.reply_text({
                "ru":"–û–∫. –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å: ¬´—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞¬ª, ¬´–≤–µ—á–µ—Ä–æ–º¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º¬ª –∏–ª–∏ ¬´–Ω–µ –Ω–∞–¥–æ¬ª?",
                "en":"Ok. When should I check in: ‚Äúin 4h‚Äù, ‚Äúthis evening‚Äù, ‚Äútomorrow morning‚Äù or ‚Äúno need‚Äù?",
                "uk":"–ì–∞—Ä–∞–∑–¥. –ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏: ¬´—á–µ—Ä–µ–∑ 4 –≥–æ–¥¬ª, ¬´—É–≤–µ—á–µ—Ä—ñ¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ¬ª —á–∏ ¬´–Ω–µ —Ç—Ä–µ–±–∞¬ª?",
                "es":"De acuerdo. ¬øCu√°ndo te escribo: ¬´en 4 h¬ª, ¬´esta tarde¬ª, ¬´ma√±ana por la ma√±ana¬ª o ¬´no hace falta¬ª?",
            }[lang]); return
        if is_no(lang, low):
            if eid: episode_set(eid,"plan_accepted","0")
            s["mode"]="chat"
            await update.message.reply_text({"ru":"–•–æ—Ä–æ—à–æ, –±–µ–∑ –ø–ª–∞–Ω–æ–≤. –Ø —Ä—è–¥–æ–º, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.","en":"Alright, no plan. I‚Äôm here if you want to continue.","uk":"–î–æ–±—Ä–µ, –±–µ–∑ –ø–ª–∞–Ω—É. –Ø –ø–æ—Ä—É—á, —è–∫—â–æ –∑–∞—Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.","es":"De acuerdo, sin plan. Estoy aqu√≠ si quieres continuar."}[lang]); return
        await update.message.reply_text({"ru":"–û—Ç–≤–µ—Ç—å—Ç–µ: ¬´–¥–∞¬ª, ¬´–ø–æ–∑–∂–µ¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.","en":"Please reply: ‚Äúyes‚Äù, ‚Äúlater‚Äù or ‚Äúno‚Äù.","uk":"–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ: ¬´—Ç–∞–∫¬ª, ¬´–ø—ñ–∑–Ω—ñ—à–µ¬ª –∞–±–æ ¬´–Ω—ñ¬ª.","es":"Responde: ¬´s√≠¬ª, ¬´m√°s tarde¬ª o ¬´no¬ª."}[lang]); return

    # –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if s.get("mode") == "await_reminder":
        code = parse_reminder_code(lang, text)
        if not code:
            await update.message.reply_text({"ru":"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ: ¬´—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞¬ª, ¬´–≤–µ—á–µ—Ä–æ–º¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º¬ª –∏–ª–∏ ¬´–Ω–µ –Ω–∞–¥–æ¬ª.","en":"Please write: ‚Äúin 4h‚Äù, ‚Äúthis evening‚Äù, ‚Äútomorrow morning‚Äù or ‚Äúno need‚Äù.","uk":"–ù–∞–ø–∏—à—ñ—Ç—å: ¬´—á–µ—Ä–µ–∑ 4 –≥–æ–¥¬ª, ¬´—É–≤–µ—á–µ—Ä—ñ¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ¬ª –∞–±–æ ¬´–Ω–µ —Ç—Ä–µ–±–∞¬ª.","es":"Escribe: ¬´en 4 h¬ª, ¬´esta tarde¬ª, ¬´ma√±ana por la ma√±ana¬ª o ¬´no hace falta¬ª."}[lang]); return

        urec = users_get(uid); tz_off = 0
        try: tz_off = int(urec.get("tz_offset") or "0")
        except Exception: tz_off = 0
        nowu = now_utc(); user_now = nowu + timedelta(hours=tz_off)
        if code == "4h":
            target_user = user_now + timedelta(hours=4)
        elif code == "evening":
            target_user = user_now.replace(hour=19, minute=0, second=0, microsecond=0)
            if target_user < user_now: target_user += timedelta(days=1)
        elif code == "morning":
            target_user = user_now.replace(hour=9, minute=0, second=0, microsecond=0)
            if target_user < user_now: target_user += timedelta(days=1)
        else:
            target_user = None

        eid = s.get("episode_id")
        if target_user and eid:
            target_utc = target_user - timedelta(hours=tz_off)
            episode_set(eid, "next_checkin_at", iso(target_utc))
            delay = max(60, (target_utc - nowu).total_seconds())
            context.job_queue.run_once(job_checkin, when=delay, data={"user_id": uid, "episode_id": eid})
        await update.message.reply_text(t(lang,"thanks"))
        s["mode"]="chat"; return

    # ===== CHAT-FIRST =====
    data = llm_chat(uid, lang, text)
    if not data:
        # –º—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫, –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤
        if lang=="ru":
            await update.message.reply_text("–ü–æ–Ω–∏–º–∞—é. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –∏–º–µ–Ω–Ω–æ –∏ –∫–∞–∫ –¥–∞–≤–Ω–æ —ç—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å? –ï—Å–ª–∏ –º–æ–∂–µ—Ç–µ ‚Äî –æ—Ü–µ–Ω–∏—Ç–µ –ø–æ —à–∫–∞–ª–µ 0‚Äì10.")
        elif lang=="uk":
            await update.message.reply_text("–†–æ–∑—É–º—ñ—é. –î–µ —Å–∞–º–µ —ñ –≤—ñ–¥–∫–æ–ª–∏ —Ü–µ –ø–æ—á–∞–ª–æ—Å—å? –Ø–∫—â–æ –º–æ–∂–µ—Ç–µ ‚Äî –æ—Ü—ñ–Ω—ñ—Ç—å 0‚Äì10.")
        elif lang=="es":
            await update.message.reply_text("Entiendo. ¬øD√≥nde exactamente y desde cu√°ndo empez√≥? Si puedes, valora 0‚Äì10.")
        else:
            await update.message.reply_text("I hear you. Where exactly is it and since when? If you can, rate it 0‚Äì10.")
        return

    assistant = data.get("assistant") or ""
    if assistant:
        await update.message.reply_text(assistant)

    # –æ–±–Ω–æ–≤–∏–º —Å–ª–æ—Ç—ã
    ans = s.setdefault("answers", {})
    for k in ["intent","loc","kind","duration","severity","red"]:
        v = (data.get("slots") or {}).get(k)
        if v not in (None,""): ans[k]=v

    # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –≥–æ—Ç–æ–≤—ã–µ —à–∞–≥–∏ –ø–ª–∞–Ω–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º
    plan_steps = data.get("plan_steps") or []
    if plan_steps:
        await update.message.reply_text(t(lang,"thanks"))
        await update.message.reply_text("\n".join(plan_steps))

    # —Ä–µ–∂–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç next_action
    na = data.get("next_action") or "followup"
    if na == "rate_0_10":
        s["mode"]="await_rating"
        await update.message.reply_text({"ru":"–û—Ü–µ–Ω–∏—Ç–µ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ 0‚Äì10 –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º.","en":"Please rate it now 0‚Äì10 with a single number.","uk":"–û—Ü—ñ–Ω—ñ—Ç—å –∑–∞—Ä–∞–∑ 0‚Äì10 –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º.","es":"Val√≥ralo ahora 0‚Äì10 con un n√∫mero."}[lang])
        return

    if na == "confirm_plan":
        # –µ—Å–ª–∏ –Ω–µ—Ç —ç–ø–∏–∑–æ–¥–∞ ‚Äî —Å–æ–∑–¥–∞–¥–∏–º
        eid = s.get("episode_id")
        if not eid:
            eid = episode_create(uid, ans.get("intent","pain"), int(ans.get("severity",5) or 5), ans.get("red","None") or "None")
            s["episode_id"]=eid
        # –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö —à–∞–≥–æ–≤ ‚Äî —Å–æ–±–µ—Ä—ë–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω
        if not plan_steps:
            hyps = build_hypotheses(ans)
            steps = make_plan(lang, ans)
            if hyps:
                await update.message.reply_text("–ì–∏–ø–æ—Ç–µ–∑—ã: " + " ".join(f"‚Ä¢ {h}" for h in hyps))
            await update.message.reply_text("\n".join(steps))
        s["mode"]="await_plan"
        await update.message.reply_text({"ru":"–ü–æ–ø—Ä–æ–±—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è? –ù–∞–ø–∏—à–∏—Ç–µ: ¬´–¥–∞¬ª, ¬´–ø–æ–∑–∂–µ¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.","en":"Will you try this today? Please reply: ‚Äúyes‚Äù, ‚Äúlater‚Äù or ‚Äúno‚Äù.","uk":"–°–ø—Ä–æ–±—É—î—Ç–µ —Å—å–æ–≥–æ–¥–Ω—ñ? –ù–∞–ø–∏—à—ñ—Ç—å: ¬´—Ç–∞–∫¬ª, ¬´–ø—ñ–∑–Ω—ñ—à–µ¬ª –∞–±–æ ¬´–Ω—ñ¬ª.","es":"¬øLo intentas hoy? Responde: ¬´s√≠¬ª, ¬´m√°s tarde¬ª o ¬´no¬ª."}[lang])
        return

    if na == "pick_reminder":
        s["mode"]="await_reminder"
        await update.message.reply_text({"ru":"–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å: ¬´—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞¬ª, ¬´–≤–µ—á–µ—Ä–æ–º¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º¬ª –∏–ª–∏ ¬´–Ω–µ –Ω–∞–¥–æ¬ª?","en":"When should I check in: ‚Äúin 4h‚Äù, ‚Äúthis evening‚Äù, ‚Äútomorrow morning‚Äù or ‚Äúno need‚Äù?","uk":"–ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏: ¬´—á–µ—Ä–µ–∑ 4 –≥–æ–¥¬ª, ¬´—É–≤–µ—á–µ—Ä—ñ¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ¬ª —á–∏ ¬´–Ω–µ —Ç—Ä–µ–±–∞¬ª?","es":"¬øCu√°ndo te escribo: ¬´en 4 h¬ª, ¬´esta tarde¬ª, ¬´ma√±ana por la ma√±ana¬ª o ¬´no hace falta¬ª?"}[lang])
        return

    if na == "escalate":
        await update.message.reply_text({
            "ru":"‚ö†Ô∏è –ß–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ —Ç—è–Ω–µ—Ç –Ω–∞ ¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª. –õ—É—á—à–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤—Ä–∞—á–æ–º.",
            "en":"‚ö†Ô∏è Some answers look concerning. Please consider contacting a clinician.",
            "uk":"‚ö†Ô∏è –î–µ—è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç—Ä–∏–≤–æ–∂–Ω—ñ. –ö—Ä–∞—â–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.",
            "es":"‚ö†Ô∏è Algunas respuestas son preocupantes. Considera contactar a un m√©dico.",
        }[lang])
        return

    # –∏–Ω–∞—á–µ –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ
    s["mode"]="chat"
    sessions[uid]=s

# =========================
# Runner
# =========================
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(on_startup).build()

    reschedule_from_sheet(app)

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("privacy", cmd_privacy))
    app.add_handler(CommandHandler("pause", cmd_pause))
    app.add_handler(CommandHandler("resume", cmd_resume))
    app.add_handler(CommandHandler("delete_data", cmd_delete_data))
    app.add_handler(CommandHandler("lang", cmd_lang))
    app.add_handler(CommandHandler("feedback", cmd_feedback))
    app.add_handler(CommandHandler("skip", cmd_skip))

    app.add_handler(CallbackQueryHandler(on_callback))  # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
