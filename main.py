# -*- coding: utf-8 -*-
import os, re, json, uuid, logging, math, random
from datetime import datetime, timedelta, timezone, time as dtime, date
from typing import List, Tuple, Dict, Optional
from difflib import SequenceMatcher

from dotenv import load_dotenv
from langdetect import detect, DetectorFactory

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

from openai import OpenAI
# === PRO-INTAKE ===
from intake_pro import register_intake_pro

# ---------- Google Sheets (robust + memory fallback) ----------
import gspread
from gspread.exceptions import SpreadsheetNotFound, WorksheetNotFound
import gspread.utils as gsu
from oauth2client.service_account import ServiceAccountCredentials


# ---------------- Boot & Config ----------------
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
DetectorFactory.seed = 0

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")

SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Sheets")
SHEET_ID = os.getenv("SHEET_ID", "")
ALLOW_CREATE_SHEET = os.getenv("ALLOW_CREATE_SHEET", "0") == "1"
DEFAULT_CHECKIN_LOCAL = "08:30"

# Evening target local time (used if user presses "remind this evening")
DEFAULT_EVENING_LOCAL = "20:00"

# Quiet hours default (local) if not set in profile (22:00-08:00)
DEFAULT_QUIET_HOURS = "22:00-08:00"

oai: Optional[OpenAI] = None
try:
    if OPENAI_API_KEY:
        os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
    oai = OpenAI()
except Exception as e:
    logging.error(f"OpenAI init error: {e}")
    oai = None


# ---------------- i18n ----------------
SUPPORTED = {"ru", "en", "uk", "es"}

def norm_lang(code: Optional[str]) -> str:
    if not code:
        return "en"
    c = code.split("-")[0].lower()
    return c if c in SUPPORTED else "en"

T = {
    "en": {
        "welcome": "Hi! I‚Äôm TendAI ‚Äî your health & longevity assistant.\nDescribe what‚Äôs bothering you; I‚Äôll guide you. Let‚Äôs do a quick 40s intake to tailor advice.",
        "help": "Short checkups, 24‚Äì48h plans, reminders, daily check-ins.\nCommands: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +2 /health60 /ru /uk /en /es\nPlus: /energy /hydrate /skintip /cycle /youth",
        "privacy": "TendAI is not a medical service and can‚Äôt replace a doctor. We store minimal data for reminders. /delete_data to erase.",
        "paused_on": "Notifications paused. Use /resume to enable.",
        "paused_off": "Notifications resumed.",
        "deleted": "All your data was deleted. Use /start to begin again.",
        "ask_consent": "May I send you a follow-up to check how you feel later?",
        "yes":"Yes","no":"No",
        "unknown":"I need a bit more info: where exactly and for how long?",
        "profile_intro":"Quick intake (~40s). Use buttons or type your answer.",
        "p_step_1":"Step 1/8. Sex:",
        "p_step_2":"Step 2/8. Age:",
        "p_step_3":"Step 3/8. Main goal:",
        "p_step_4":"Step 4/8. Chronic conditions:",
        "p_step_5":"Step 5/8. Meds/supplements/allergies:",
        "p_step_6":"Step 6/8. Sleep (bed/wake, e.g., 23:30/07:00):",
        "p_step_7":"Step 7/8. Activity:",
        "p_step_8":"Step 8/8. Diet most of the time:",
        "write":"‚úçÔ∏è Write",
        "skip":"‚è≠Ô∏è Skip",
        "saved_profile":"Saved: ",
        "start_where":"Where do you want to start now? (symptom/sleep/nutrition/labs/habits/longevity)",
        "daily_gm":"Good morning! Quick daily check-in:",
        "mood_good":"üòÉ Good","mood_ok":"üòê Okay","mood_bad":"üò£ Poor","mood_note":"‚úçÔ∏è Comment",
        "mood_thanks":"Thanks! Have a smooth day üëã",
        "triage_pain_q1":"Where does it hurt?",
        "triage_pain_q1_opts":["Head","Throat","Back","Belly","Other"],
        "triage_pain_q2":"What kind of pain?",
        "triage_pain_q2_opts":["Dull","Sharp","Pulsating","Pressing"],
        "triage_pain_q3":"How long has it lasted?",
        "triage_pain_q3_opts":["<3h","3‚Äì24h",">1 day",">1 week"],
        "triage_pain_q4":"Rate the pain (0‚Äì10):",
        "triage_pain_q5":"Any of these now?",
        "triage_pain_q5_opts":["High fever","Vomiting","Weakness/numbness","Speech/vision problems","Trauma","None"],
        "plan_header":"Your 24‚Äì48h plan:",
        "plan_accept":"Will you try this today?",
        "accept_opts":["‚úÖ Yes","üîÅ Later","‚úñÔ∏è No"],
        "remind_when":"When shall I check on you?",
        "remind_opts":["in 4h","this evening","tomorrow morning","no need"],
        "thanks":"Got it üôå",
        "checkin_ping":"Quick check-in: how is it now (0‚Äì10)?",
        "checkin_better":"Nice! Keep it up üí™",
        "checkin_worse":"Sorry to hear. If any red flags or pain ‚â•7/10 ‚Äî consider medical help.",
        "act_rem_4h":"‚è∞ Remind in 4h",
        "act_rem_eve":"‚è∞ This evening",
        "act_rem_morn":"‚è∞ Tomorrow morning",
        "act_save_episode":"üíæ Save as episode",
        "act_ex_neck":"üßò 5-min neck routine",
        "act_find_lab":"üß™ Find a lab",
        "act_er":"üöë Emergency info",
        "act_city_prompt":"Type your city/area so I can suggest a lab (text only).",
        "act_saved":"Saved.",
        "er_text":"If symptoms worsen, severe shortness of breath, chest pain, confusion, or persistent high fever ‚Äî seek urgent care/emergency.",
        "px":"Considering your profile: {sex}, {age}y; goal ‚Äî {goal}.",
        "back":"‚óÄ Back",
        "exit":"Exit",
        # feedback
        "ask_fb":"Was this helpful?",
        "fb_thanks":"Thanks for your feedback! ‚úÖ",
        "fb_write":"Write a short feedback message:",
        "fb_good":"üëç Like",
        "fb_bad":"üëé Dislike",
        "fb_free":"üìù Feedback",
        # Health60
        "h60_btn": "Health in 60 seconds",
        "h60_intro": "Write briefly what bothers you (e.g., ‚Äúheadache‚Äù, ‚Äúfatigue‚Äù, ‚Äústomach pain‚Äù). I‚Äôll give you 3 key tips in 60 seconds.",
        "h60_t1": "Possible causes",
        "h60_t2": "Do now (next 24‚Äì48h)",
        "h60_t3": "When to see a doctor",
        "h60_serious": "Serious to rule out",

        # === Youth Pack additions ===
        "youth_pack": "Youth Pack",
        "gm_energy": "‚ö° Energy",
        "gm_energy_q": "How‚Äôs your energy (1‚Äì5)?",
        "gm_energy_done": "Logged energy ‚Äî thanks!",
        "gm_evening_btn": "‚è∞ Remind this evening",
        "hydrate_btn": "üíß Hydration",
        "hydrate_nudge": "üíß Time for a glass of water",
        "skintip_btn": "üß¥ Skin/Body tip",
        "skintip_sent": "Tip sent.",
        "daily_tip_prefix": "üçé Daily tip:",
        "streak_day": "Day of care",
        "challenge_btn": "üéØ 7-day hydration challenge",
        "challenge_started": "Challenge started! I‚Äôll track your daily check-ins.",
        "challenge_progress": "Challenge progress: {d}/{len} days.",
        "cycle_btn": "ü©∏ Cycle",
        "cycle_consent": "Would you like to track your cycle for gentle timing tips?",
        "cycle_ask_last": "Enter the date of your last period (YYYY-MM-DD):",
        "cycle_ask_len": "Average cycle length in days (e.g., 28):",
        "cycle_saved": "Cycle tracking saved.",
        "quiet_saved": "Quiet hours saved: {qh}",
        "set_quiet_btn": "üåô Set quiet hours",
        "ask_quiet": "Type quiet hours as HH:MM-HH:MM (local), e.g. 22:00-08:00",
    },
    "ru": {
        "welcome":"–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç; —è –ø–æ–¥—Å–∫–∞–∂—É. –°–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å (~40—Å), —á—Ç–æ–±—ã —Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ.",
        "help":"–ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã.\n–ö–æ–º–∞–Ω–¥—ã: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +3 /health60 /ru /uk /en /es\n–î–æ–ø.: /energy /hydrate /skintip /cycle /youth",
        "privacy":"TendAI –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞. –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. /delete_data ‚Äî —É–¥–∞–ª–∏—Ç—å.",
        "paused_on":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–∞—É–∑—É. /resume ‚Äî –≤–∫–ª—é—á–∏—Ç—å.",
        "paused_off":"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.",
        "deleted":"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        "ask_consent":"–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã?",
        "yes":"–î–∞","no":"–ù–µ—Ç",
        "unknown":"–ù—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: –≥–¥–µ –∏–º–µ–Ω–Ω–æ –∏ —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è?",
        "profile_intro":"–ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å (~40—Å). –ú–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç.",
        "p_step_1":"–®–∞–≥ 1/8. –ü–æ–ª:",
        "p_step_2":"–®–∞–≥ 2/8. –í–æ–∑—Ä–∞—Å—Ç:",
        "p_step_3":"–®–∞–≥ 3/8. –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:",
        "p_step_4":"–®–∞–≥ 4/8. –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏:",
        "p_step_5":"–®–∞–≥ 5/8. –õ–µ–∫–∞—Ä—Å—Ç–≤–∞/–¥–æ–±–∞–≤–∫–∏/–∞–ª–ª–µ—Ä–≥–∏–∏:",
        "p_step_6":"–®–∞–≥ 6/8. –°–æ–Ω (–æ—Ç–±–æ–π/–ø–æ–¥—ä—ë–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        "p_step_7":"–®–∞–≥ 7/8. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:",
        "p_step_8":"–®–∞–≥ 8/8. –ü–∏—Ç–∞–Ω–∏–µ —á–∞—â–µ –≤—Å–µ–≥–æ:",
        "write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
        "skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "saved_profile":"–°–æ—Ö—Ä–∞–Ω–∏–ª: ",
        "start_where":"–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/–ø–∏—Ç–∞–Ω–∏–µ/–∞–Ω–∞–ª–∏–∑—ã/–ø—Ä–∏–≤—ã—á–∫–∏/–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ)",
        "daily_gm":"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ë—ã—Å—Ç—Ä—ã–π —á–µ–∫-–∏–Ω:",
        "mood_good":"üòÉ –•–æ—Ä–æ—à–æ","mood_ok":"üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ","mood_bad":"üò£ –ü–ª–æ—Ö–æ","mood_note":"‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        "mood_thanks":"–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üëã",
        "triage_pain_q1":"–ì–¥–µ –±–æ–ª–∏—Ç?",
        "triage_pain_q1_opts":["–ì–æ–ª–æ–≤–∞","–ì–æ—Ä–ª–æ","–°–ø–∏–Ω–∞","–ñ–∏–≤–æ—Ç","–î—Ä—É–≥–æ–µ"],
        "triage_pain_q2":"–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª–∏?",
        "triage_pain_q2_opts":["–¢—É–ø–∞—è","–û—Å—Ç—Ä–∞—è","–ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è","–î–∞–≤—è—â–∞—è"],
        "triage_pain_q3":"–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è?",
        "triage_pain_q3_opts":["<3—á","3‚Äì24—á",">1 –¥–Ω—è",">1 –Ω–µ–¥–µ–ª–∏"],
        "triage_pain_q4":"–û—Ü–µ–Ω–∏—Ç–µ –±–æ–ª—å (0‚Äì10):",
        "triage_pain_q5":"–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–µ–π—á–∞—Å?",
        "triage_pain_q5_opts":["–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞","–†–≤–æ—Ç–∞","–°–ª–∞–±–æ—Å—Ç—å/–æ–Ω–µ–º–µ–Ω–∏–µ","–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è","–¢—Ä–∞–≤–º–∞","–ù–µ—Ç"],
        "plan_header":"–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á–∞—Å–æ–≤:",
        "plan_accept":"–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
        "accept_opts":["‚úÖ –î–∞","üîÅ –ü–æ–∑–∂–µ","‚úñÔ∏è –ù–µ—Ç"],
        "remind_when":"–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "remind_opts":["—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞","–≤–µ—á–µ—Ä–æ–º","–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º","–Ω–µ –Ω–∞–¥–æ"],
        "thanks":"–ü—Ä–∏–Ω—è—Ç–æ üôå",
        "checkin_ping":"–ö–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ 0‚Äì10?",
        "checkin_better":"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üí™",
        "checkin_worse":"–ï—Å–ª–∏ –µ—Å—Ç—å ¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª –∏–ª–∏ –±–æ–ª—å ‚â•7/10 ‚Äî –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        "act_rem_4h":"‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 4 —á",
        "act_rem_eve":"‚è∞ –°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º",
        "act_rem_morn":"‚è∞ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º",
        "act_save_episode":"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–ø–∏–∑–æ–¥",
        "act_ex_neck":"üßò 5-–º–∏–Ω —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —à–µ–∏",
        "act_find_lab":"üß™ –ù–∞–π—Ç–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é",
        "act_er":"üöë –ö–æ–≥–¥–∞ —Å—Ä–æ—á–Ω–æ –≤ —Å–∫–æ—Ä—É—é",
        "act_city_prompt":"–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥/—Ä–∞–π–æ–Ω, —á—Ç–æ–±—ã –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é (—Ç–µ–∫—Å—Ç–æ–º).",
        "act_saved":"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
        "er_text":"–ï—Å–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç, —Å–∏–ª—å–Ω–∞—è –æ–¥—ã—à–∫–∞, –±–æ–ª—å –≤ –≥—Ä—É–¥–∏, —Å–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å, —Å—Ç–æ–π–∫–∞—è –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∫ –Ω–µ–æ—Ç–ª–æ–∂–∫–µ/—Å–∫–æ—Ä–æ–π.",
        "px":"–° —É—á—ë—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è: {sex}, {age} –ª–µ—Ç; —Ü–µ–ª—å ‚Äî {goal}.",
        "back":"‚óÄ –ù–∞–∑–∞–¥",
        "exit":"–í—ã–π—Ç–∏",
        # feedback
        "ask_fb":"–≠—Ç–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ?",
        "fb_thanks":"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! ‚úÖ",
        "fb_write":"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        "fb_good":"üëç –ù—Ä–∞–≤–∏—Ç—Å—è",
        "fb_bad":"üëé –ù–µ –ø–æ–ª–µ–∑–Ω–æ",
        "fb_free":"üìù –û—Ç–∑—ã–≤",
        # Health60
        "h60_btn": "–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥",
        "h60_intro": "–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞¬ª, ¬´—É—Å—Ç–∞–ª–æ—Å—Ç—å¬ª, ¬´–±–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ¬ª). –Ø –¥–∞–º 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–≤–µ—Ç–∞ –∑–∞ 60 —Å–µ–∫—É–Ω–¥.",
        "h60_t1": "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã",
        "h60_t2": "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å (24‚Äì48 —á)",
        "h60_t3": "–ö–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É",
        "h60_serious": "–ß—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ–µ –∏—Å–∫–ª—é—á–∏—Ç—å",

        # === Youth Pack additions ===
        "youth_pack": "–ú–æ–ª–æ–¥—ë–∂–Ω—ã–π –ø–∞–∫–µ—Ç",
        "gm_energy": "‚ö° –≠–Ω–µ—Ä–≥–∏—è",
        "gm_energy_q": "–ö–∞–∫ —ç–Ω–µ—Ä–≥–∏—è (1‚Äì5)?",
        "gm_energy_done": "–ó–∞–ø–∏—Å–∞–ª —ç–Ω–µ—Ä–≥–∏—é ‚Äî —Å–ø–∞—Å–∏–±–æ!",
        "gm_evening_btn": "‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –≤–µ—á–µ—Ä–æ–º",
        "hydrate_btn": "üíß –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è",
        "hydrate_nudge": "üíß –í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã",
        "skintip_btn": "üß¥ –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–æ–∂–∏/—Ç–µ–ª–∞",
        "skintip_sent": "–°–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
        "daily_tip_prefix": "üçé –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–Ω—è:",
        "streak_day": "–î–µ–Ω—å –∑–∞–±–æ—Ç—ã",
        "challenge_btn": "üéØ –ß–µ–ª–ª–µ–Ω–¥–∂ 7 –¥–Ω–µ–π (–≤–æ–¥–∞)",
        "challenge_started": "–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞—Ç! –ë—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã.",
        "challenge_progress": "–ü—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–∞: {d}/{len} –¥–Ω–µ–π.",
        "cycle_btn": "ü©∏ –¶–∏–∫–ª",
        "cycle_consent": "–•–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–∏–∫–ª –∏ –ø–æ–ª—É—á–∞—Ç—å –º—è–≥–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤–æ–≤—Ä–µ–º—è?",
        "cycle_ask_last": "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö (–ì–ì–ì–ì-–ú–ú-–î–î):",
        "cycle_ask_len": "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28):",
        "cycle_saved": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
        "quiet_saved": "–¢–∏—Ö–∏–µ —á–∞—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {qh}",
        "set_quiet_btn": "üåô –¢–∏—Ö–∏–µ —á–∞—Å—ã",
        "ask_quiet": "–í–≤–µ–¥–∏—Ç–µ —Ç–∏—Ö–∏–µ —á–∞—Å—ã –∫–∞–∫ –ß–ß:–ú–ú-–ß–ß:–ú–ú (–ª–æ–∫–∞–ª—å–Ω–æ), –Ω–∞–ø—Ä. 22:00-08:00",
    },
    "uk": {
        "welcome":"–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è.\n–†–æ–∑–∫–∞–∂–∏, —â–æ —Ç—É—Ä–±—É—î; —è –ø—ñ–¥–∫–∞–∂—É. –°–ø–µ—Ä—à—É —à–≤–∏–¥–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ (~40—Å) –¥–ª—è —Ç–æ—á–Ω—ñ—à–∏—Ö –ø–æ—Ä–∞–¥.",
        "help":"–ö–æ—Ä–æ—Ç–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ–¥–µ–Ω–Ω—ñ —á–µ–∫-—ñ–Ω–∏.\n–ö–æ–º–∞–Ω–¥–∏: /help /privacy /pause /resume /delete_data /profile /checkin_on 08:30 /checkin_off /settz +2 /health60 /ru /uk /en /es\n–î–æ–¥.: /energy /hydrate /skintip /cycle /youth",
        "privacy":"TendAI –Ω–µ –∑–∞–º—ñ–Ω—é—î –ª—ñ–∫–∞—Ä—è. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ–Ω—ñ–º—É–º –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å. /delete_data ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏.",
        "paused_on":"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ. /resume ‚Äî —É–≤—ñ–º–∫–Ω—É—Ç–∏.",
        "paused_off":"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω–µ–Ω—ñ.",
        "deleted":"–£—Å—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ. /start ‚Äî –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.",
        "ask_consent":"–ú–æ–∂—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—ñ–∑–Ω—ñ—à–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ –≤–∏?",
        "yes":"–¢–∞–∫","no":"–ù—ñ",
        "unknown":"–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ: –¥–µ —Å–∞–º–µ —ñ —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î?",
        "profile_intro":"–®–≤–∏–¥–∫–∏–π –æ–ø–∏—Ç–Ω–∏–∫ (~40—Å). –ú–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –ø–∏—Å–∞—Ç–∏ —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç.",
        "p_step_1":"–ö—Ä–æ–∫ 1/8. –°—Ç–∞—Ç—å:",
        "p_step_2":"–ö—Ä–æ–∫ 2/8. –í—ñ–∫:",
        "p_step_3":"–ö—Ä–æ–∫ 3/8. –ì–æ–ª–æ–≤–Ω–∞ –º–µ—Ç–∞:",
        "p_step_4":"–ö—Ä–æ–∫ 4/8. –•—Ä–æ–Ω—ñ—á–Ω—ñ —Ö–≤–æ—Ä–æ–±–∏:",
        "p_step_5":"–ö—Ä–æ–∫ 5/8. –õ—ñ–∫–∏/–¥–æ–±–∞–≤–∫–∏/–∞–ª–µ—Ä–≥—ñ—ó:",
        "p_step_6":"–ö—Ä–æ–∫ 6/8. –°–æ–Ω (–≤—ñ–¥–±—ñ–π/–ø—ñ–¥–π–æ–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        "p_step_7":"–ö—Ä–æ–∫ 7/8. –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:",
        "p_step_8":"–ö—Ä–æ–∫ 8/8. –•–∞—Ä—á—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–∂–Ω–æ:",
        "write":"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏",
        "skip":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        "saved_profile":"–ó–±–µ—Ä—ñ–≥: ",
        "start_where":"–ó —á–æ–≥–æ –ø–æ—á–Ω–µ–º–æ? (—Å–∏–º–ø—Ç–æ–º/—Å–æ–Ω/—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è/–∞–Ω–∞–ª—ñ–∑–∏/–∑–≤–∏—á–∫–∏/–¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è)",
        "daily_gm":"–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! –®–≤–∏–¥–∫–∏–π —á–µ–∫-—ñ–Ω:",
        "mood_good":"üòÉ –î–æ–±—Ä–µ","mood_ok":"üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ","mood_bad":"üò£ –ü–æ–≥–∞–Ω–æ","mood_note":"‚úçÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä",
        "mood_thanks":"–î—è–∫—É—é! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üëã",
        "triage_pain_q1":"–î–µ –±–æ–ª–∏—Ç—å?",
        "triage_pain_q1_opts":["–ì–æ–ª–æ–≤–∞","–ì–æ—Ä–ª–æ","–°–ø–∏–Ω–∞","–ñ–∏–≤—ñ—Ç","–Ü–Ω—à–µ"],
        "triage_pain_q2":"–Ø–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ–ª—é?",
        "triage_pain_q2_opts":["–¢—É–ø–∏–π","–ì–æ—Å—Ç—Ä–∏–π","–ü—É–ª—å—Å—É—é—á–∏–π","–¢–∏—Å–Ω—É—á–∏–π"],
        "triage_pain_q3":"–Ø–∫ –¥–æ–≤–≥–æ —Ç—Ä–∏–≤–∞—î?",
        "triage_pain_q3_opts":["<3–≥–æ–¥","3‚Äì24–≥–æ–¥",">1 –¥–Ω—è",">1 —Ç–∏–∂–Ω—è"],
        "triage_pain_q4":"–û—Ü—ñ–Ω—ñ—Ç—å –±—ñ–ª—å (0‚Äì10):",
        "triage_pain_q5":"–Ñ —â–æ—Å—å —ñ–∑ —Ü—å–æ–≥–æ –∑–∞—Ä–∞–∑?",
        "triage_pain_q5_opts":["–í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞","–ë–ª—é–≤–∞–Ω–Ω—è","–°–ª–∞–±–∫—ñ—Å—Ç—å/–æ–Ω—ñ–º—ñ–Ω–Ω—è","–ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–æ–≤–æ—é/–∑–æ—Ä–æ–º","–¢—Ä–∞–≤–º–∞","–ù–µ–º–∞—î"],
        "plan_header":"–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥:",
        "plan_accept":"–ì–æ—Ç–æ–≤—ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "accept_opts":["‚úÖ –¢–∞–∫","üîÅ –ü—ñ–∑–Ω—ñ—à–µ","‚úñÔ∏è –ù—ñ"],
        "remind_when":"–ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏ —Ç–∞ —Å–ø–∏—Ç–∞—Ç–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è?",
        "remind_opts":["—á–µ—Ä–µ–∑ 4 –≥–æ–¥","—É–≤–µ—á–µ—Ä—ñ","–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ","–Ω–µ —Ç—Ä–µ–±–∞"],
        "thanks":"–ü—Ä–∏–π–Ω—è—Ç–æ üôå",
        "checkin_ping":"–ö–æ—Ä–æ—Ç–∫–æ: —è–∫ –∑–∞—Ä–∞–∑ –∑–∞ —à–∫–∞–ª–æ—é 0‚Äì10?",
        "checkin_better":"–ß—É–¥–æ–≤–æ! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ üí™",
        "checkin_worse":"–Ø–∫—â–æ —î ¬´—á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ¬ª –∞–±–æ –±—ñ–ª—å ‚â•7/10 ‚Äî –∫—Ä–∞—â–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.",
        "act_rem_4h":"‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ 4 –≥–æ–¥",
        "act_rem_eve":"‚è∞ –°—å–æ–≥–æ–¥–Ω—ñ –≤–≤–µ—á–µ—Ä—ñ",
        "act_rem_morn":"‚è∞ –ó–∞–≤—Ç—Ä–∞ –∑—Ä–∞–Ω–∫—É",
        "act_save_episode":"üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –µ–ø—ñ–∑–æ–¥",
        "act_ex_neck":"üßò 5-—Ö–≤ –≤–ø—Ä–∞–≤–∏ –¥–ª—è —à–∏—ó",
        "act_find_lab":"üß™ –ó–Ω–∞–π—Ç–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—é",
        "act_er":"üöë –ö–æ–ª–∏ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –≤ —à–≤–∏–¥–∫—É",
        "act_city_prompt":"–ù–∞–ø–∏—à—ñ—Ç—å –º—ñ—Å—Ç–æ/—Ä–∞–π–æ–Ω, —â–æ–± –ø–æ—Ä–∞–¥–∏—Ç–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—é (—Ç–µ–∫—Å—Ç–æ–º).",
        "act_saved":"–ó–±–µ—Ä–µ–∂–µ–Ω–æ.",
        "er_text":"–Ø–∫—â–æ –ø–æ—Å–∏–ª—é—î—Ç—å—Å—è, —Å–∏–ª—å–Ω–∞ –∑–∞–¥–∏—à–∫–∞, –±—ñ–ª—å —É –≥—Ä—É–¥—è—Ö, —Å–ø–ª—É—Ç–∞–Ω—ñ—Å—Ç—å, —Ç—Ä–∏–≤–∞–ª–∞ –≤–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –¥–æ –Ω–µ–≤—ñ–¥–∫–ª–∞–¥–Ω–æ—ó/—à–≤–∏–¥–∫–æ—ó.",
        "px":"–ó —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ—Ñ—ñ–ª—é: {sex}, {age} —Ä.; –º–µ—Ç–∞ ‚Äî {goal}.",
        "back":"‚óÄ –ù–∞–∑–∞–¥",
        "exit":"–í–∏–π—Ç–∏",
        # feedback
        "ask_fb":"–ß–∏ –±—É–ª–æ —Ü–µ –∫–æ—Ä–∏—Å–Ω–æ?",
        "fb_thanks":"–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫! ‚úÖ",
        "fb_write":"–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ñ–¥–≥—É–∫ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:",
        "fb_good":"üëç –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è",
        "fb_bad":"üëé –ù–µ –∫–æ—Ä–∏—Å–Ω–æ",
        "fb_free":"üìù –í—ñ–¥–≥—É–∫",
        # Health60
        "h60_btn": "–ó–¥–æ—Ä–æ–≤‚Äô—è –∑–∞ 60 —Å–µ–∫—É–Ω–¥",
        "h60_intro": "–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à—ñ—Ç—å, —â–æ —Ç—É—Ä–±—É—î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: ¬´–±–æ–ª–∏—Ç—å –≥–æ–ª–æ–≤–∞¬ª, ¬´–≤—Ç–æ–º–∞¬ª, ¬´–±—ñ–ª—å —É –∂–∏–≤–æ—Ç—ñ¬ª). –î–∞–º 3 –∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏ –∑–∞ 60 —Å–µ–∫—É–Ω–¥.",
        "h60_t1": "–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏",
        "h60_t2": "–©–æ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞—Ä–∞–∑ (24‚Äì48 –≥–æ–¥)",
        "h60_t3": "–ö–æ–ª–∏ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è",
        "h60_serious": "–©–æ —Å–µ—Ä–π–æ–∑–Ω–µ –≤–∏–∫–ª—é—á–∏—Ç–∏",

        # === Youth Pack additions ===
        "youth_pack": "–ú–æ–ª–æ–¥—ñ–∂–Ω–∏–π –ø–∞–∫–µ—Ç",
        "gm_energy": "‚ö° –ï–Ω–µ—Ä–≥—ñ—è",
        "gm_energy_q": "–Ø–∫ –µ–Ω–µ—Ä–≥—ñ—è (1‚Äì5)?",
        "gm_energy_done": "–ï–Ω–µ—Ä–≥—ñ—é –∑–∞–ø–∏—Å–∞–Ω–æ ‚Äî –¥—è–∫—É—é!",
        "gm_evening_btn": "‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏ –≤–≤–µ—á–µ—Ä—ñ",
        "hydrate_btn": "üíß –ì—ñ–¥—Ä–∞—Ç–∞—Ü—ñ—è",
        "hydrate_nudge": "üíß –ß–∞—Å –¥–ª—è —Å–∫–ª—è–Ω–∫–∏ –≤–æ–¥–∏",
        "skintip_btn": "üß¥ –ü–æ—Ä–∞–¥–∞ –¥–ª—è —à–∫—ñ—Ä–∏/—Ç—ñ–ª–∞",
        "skintip_sent": "–ü–æ—Ä–∞–¥—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.",
        "daily_tip_prefix": "üçé –ü—ñ–¥–∫–∞–∑–∫–∞ –¥–Ω—è:",
        "streak_day": "–î–µ–Ω—å —Ç—É—Ä–±–æ—Ç–∏",
        "challenge_btn": "üéØ –ß–µ–ª–µ–Ω–¥–∂ 7 –¥–Ω—ñ–≤ (–≤–æ–¥–∞)",
        "challenge_started": "–ß–µ–ª–µ–Ω–¥–∂ –∑–∞–ø—É—â–µ–Ω–æ! –Ø –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏–º—É –≤–∞—à—ñ —â–æ–¥–µ–Ω–Ω—ñ —á–µ–∫-—ñ–Ω–∏.",
        "challenge_progress": "–ü—Ä–æ–≥—Ä–µ—Å —á–µ–ª–µ–Ω–¥–∂—É: {d}/{len} –¥–Ω—ñ–≤.",
        "cycle_btn": "ü©∏ –¶–∏–∫–ª",
        "cycle_consent": "–ë–∞–∂–∞—î—Ç–µ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Ü–∏–∫–ª –¥–ª—è –º‚Äô—è–∫–∏—Ö –ø–æ—Ä–∞–¥ —É –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–Ω—ñ?",
        "cycle_ask_last": "–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –º–µ–Ω—Å—Ç—Ä—É–∞—Ü—ñ–π (–†–†–†–†-–ú–ú-–î–î):",
        "cycle_ask_len": "–°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ü–∏–∫–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 28):",
        "cycle_saved": "–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ü–∏–∫–ª—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
        "quiet_saved": "–¢–∏—Ö—ñ –≥–æ–¥–∏–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {qh}",
        "set_quiet_btn": "üåô –¢–∏—Ö—ñ –≥–æ–¥–∏–Ω–∏",
        "ask_quiet": "–í–≤–µ–¥—ñ—Ç—å —Ç–∏—Ö—ñ –≥–æ–¥–∏–Ω–∏ —è–∫ –ì–ì:–•–•-–ì–ì:–•–• (–ª–æ–∫–∞–ª—å–Ω–æ), –Ω–∞–ø—Ä. 22:00-08:00",
    },
}
T["es"] = T["en"]  # –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞

# ---------------- Helpers ----------------
def utcnow():
    return datetime.now(timezone.utc)

def iso(dt: Optional[datetime]) -> str:
    return "" if not dt else dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def detect_lang_from_text(text: str, fallback: str) -> str:
    s = (text or "").strip()
    if not s:
        return fallback
    low = s.lower()
    if re.search(r"[–∞-—è—ë—ñ—ó—î“ë]", low):
        return "uk" if re.search(r"[—ñ—ó—î“ë]", low) else "ru"
    try:
        return norm_lang(detect(s))
    except Exception:
        return fallback

def profile_is_incomplete(profile_row: dict) -> bool:
    keys = ["sex","age","goal"]
    return sum(1 for k in keys if str(profile_row.get(k) or "").strip()) < 2

# ===== ONBOARDING GATE (–®—Ç–æ—Ä–∫–∞) =====
GATE_FLAG_KEY = "menu_unlocked"

def _is_menu_unlocked(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if context.user_data.get(GATE_FLAG_KEY):
        return True
    prof = profiles_get(update.effective_user.id) or {}
    return not profile_is_incomplete(prof)

async def gate_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    kb = [
        [InlineKeyboardButton("üß© –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å (40‚Äì60 —Å–µ–∫)" if lang!="en" else "üß© Take the 40‚Äì60s intake", callback_data="intake:start")],
        [InlineKeyboardButton("‚û°Ô∏è –ü–æ–∑–∂–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é" if lang!="en" else "‚û°Ô∏è Later ‚Äî open menu", callback_data="gate:skip")],
    ]
    text = ("–ß—Ç–æ–±—ã —Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å. –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ."
            if lang!="en" else
            "To personalize answers, please take a short intake. You can skip and do it later.")
    await update.effective_chat.send_message(text, reply_markup=InlineKeyboardMarkup(kb))

async def gate_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "gate:skip":
        context.user_data[GATE_FLAG_KEY] = True
        await q.edit_message_text("–û–∫, –æ—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶" if context.user_data.get("lang","en")!="en" else "OK, opening the menu‚Ä¶")
        render_cb = context.application.bot_data.get("render_menu_cb")
        if callable(render_cb):
            await render_cb(update, context)
        else:
            await context.application.bot.send_message(q.message.chat_id, "/start")

# === NEW: MINI-INTAKE (—Å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è) ===
MINI_KEYS = ["sex","age","goal","diet_focus","steps_target"]
MINI_STEPS = {
    "sex": {
        "ru":[("–ú—É–∂—Å–∫–æ–π","male"),("–ñ–µ–Ω—Å–∫–∏–π","female"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("Male","male"),("Female","female"),("Other","other")],
        "uk":[("–ß–æ–ª–æ–≤—ñ—á–∞","male"),("–ñ—ñ–Ω–æ—á–∞","female"),("–Ü–Ω—à–∞","other")],
        "es":[("Hombre","male"),("Mujer","female"),("Otro","other")],
        "label":{"ru":"–ü–æ–ª:","en":"Sex:","uk":"–°—Ç–∞—Ç—å:","es":"Sexo:"}
    },
    "age": {
        "ru":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "en":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "uk":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "es":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "label":{"ru":"–í–æ–∑—Ä–∞—Å—Ç:","en":"Age:","uk":"–í—ñ–∫:","es":"Edad:"}
    },
    "goal": {
        "ru":[("–≠–Ω–µ—Ä–≥–∏—è","energy"),("–°–æ–Ω","sleep"),("–ü–æ—Ö—É–¥–µ–Ω–∏–µ","weight"),("–°–∏–ª–∞","strength"),("–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ","longevity")],
        "en":[("Energy","energy"),("Sleep","sleep"),("Weight","weight"),("Strength","strength"),("Longevity","longevity")],
        "uk":[("–ï–Ω–µ—Ä–≥—ñ—è","energy"),("–°–æ–Ω","sleep"),("–í–∞–≥–∞","weight"),("–°–∏–ª–∞","strength"),("–î–æ–≤–≥–æ–ª—ñ—Ç—Ç—è","longevity")],
        "es":[("Energ√≠a","energy"),("Sue√±o","sleep"),("Peso","weight"),("Fuerza","strength"),("Longevidad","longevity")],
        "label":{"ru":"–¶–µ–ª—å:","en":"Main goal:","uk":"–ú–µ—Ç–∞:","es":"Objetivo:"}
    },
    "diet_focus": {
        "ru":[("–°–±–∞–ª–∞–Ω—Å.","balanced"),("–ù–∏–∑–∫–æ—É–≥–ª","lowcarb"),("–†–∞—Å—Ç–∏—Ç.","plant"),("–ù–µ—Ä–µ–≥—É–ª.","irregular")],
        "en":[("Balanced","balanced"),("Low-carb","lowcarb"),("Plant-based","plant"),("Irregular","irregular")],
        "uk":[("–ó–±–∞–ª–∞–Ω—Å.","balanced"),("–ú–∞–ª–æ–≤—É–≥–ª.","lowcarb"),("–†–æ—Å–ª–∏–Ω–Ω–µ","plant"),("–ù–µ—Ä–µ–≥—É–ª.","irregular")],
        "es":[("Equilibrada","balanced"),("Baja carb.","lowcarb"),("Vegetal","plant"),("Irregular","irregular")],
        "label":{"ru":"–ü–∏—Ç–∞–Ω–∏–µ:","en":"Diet mostly:","uk":"–•–∞—Ä—á—É–≤–∞–Ω–Ω—è:","es":"Dieta:"}
    },
    "steps_target": {
        "ru":[("<5–∫","5000"),("5‚Äì8–∫","8000"),("8‚Äì12–∫","12000"),("–°–ø–æ—Ä—Ç","15000")],
        "en":[("<5k","5000"),("5‚Äì8k","8000"),("8‚Äì12k","12000"),("Sport","15000")],
        "uk":[("<5–∫","5000"),("5‚Äì8–∫","8000"),("8‚Äì12–∫","12000"),("–°–ø–æ—Ä—Ç","15000")],
        "es":[("<5k","5000"),("5‚Äì8k","8000"),("8‚Äì12k","12000"),("Deporte","15000")],
        "label":{"ru":"–®–∞–≥–∏/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:","en":"Steps/activity:","uk":"–ö—Ä–æ–∫–∏/–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:","es":"Pasos/actividad:"}
    },
}

async def start_mini_intake(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    sessions[uid] = {"mini_active": True, "mini_step": 0, "mini_answers": {}}
    await context.bot.send_message(chat_id, {
        "ru":"üîé –ú–∏–Ω–∏-–æ–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (4‚Äì5 –∫–ª–∏–∫–æ–≤).",
        "uk":"üîé –ú—ñ–Ω—ñ-–æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó (4‚Äì5 –∫–ª—ñ–∫—ñ–≤).",
        "en":"üîé Mini-intake for personalization (4‚Äì5 taps).",
        "es":"üîé Mini-intake para personalizaci√≥n (4‚Äì5 toques).",
    }[lang], reply_markup=ReplyKeyboardRemove())
    await ask_next_mini(context, chat_id, lang, uid)

def build_mini_kb(lang: str, key: str) -> InlineKeyboardMarkup:
    opts = MINI_STEPS[key][lang]
    rows, row = [], []
    for label, val in opts:
        row.append(InlineKeyboardButton(label, callback_data=f"mini|choose|{key}|{val}"))
        if len(row) == 3:
            rows.append(row); row=[]
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(T[lang]["skip"], callback_data=f"mini|skip|{key}")])
    return InlineKeyboardMarkup(rows)

async def ask_next_mini(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    s = sessions.get(uid, {})
    step_idx = s.get("mini_step", 0)
    if step_idx >= len(MINI_KEYS):
        # save into Profiles and finish
        profiles_upsert(uid, s.get("mini_answers", {}))
        sessions[uid]["mini_active"] = False
        await context.bot.send_message(chat_id, T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
        # show gate for full PRO intake
        if not context.user_data.get(GATE_FLAG_KEY):
            await gate_show(Update(update_id=0, message=None), context)  # safe fallback
        return
    key = MINI_KEYS[step_idx]
    label = MINI_STEPS[key]["label"][lang]
    await context.bot.send_message(chat_id, label, reply_markup=build_mini_kb(lang, key))

def mini_handle_choice(uid: int, key: str, value: str):
    s = sessions.setdefault(uid, {"mini_active": True, "mini_step": 0, "mini_answers": {}})
    s["mini_answers"][key] = value
    s["mini_step"] = int(s.get("mini_step", 0)) + 1

# ---------- Anti-duplicate questions ----------
def _ratio(a: str, b: str) -> float:
    return SequenceMatcher(None, (a or "").lower(), (b or "").lower()).ratio()

def is_duplicate_question(uid: int, text: str, thresh: float = 0.93) -> bool:
    s = sessions.setdefault(uid, {})
    asked = s.setdefault("asked_prompts", [])
    for prev in asked[-4:]:
        if _ratio(prev, text) >= thresh:
            return True
    asked.append(text)
    if len(asked) > 16:
        s["asked_prompts"] = asked[-16:]
    return False

async def send_unique(msg_obj, uid: int, text: str, reply_markup=None, force: bool = False):
    if force or not is_duplicate_question(uid, text):
        await msg_obj.reply_text(text, reply_markup=reply_markup)

# -------- Sheets (with memory fallback) --------
SHEETS_ENABLED = True
ss = None
ws_feedback = ws_users = ws_profiles = ws_episodes = ws_reminders = ws_daily = None
ws_rules = ws_challenges = None

# === –°–æ—Ö—Ä–∞–Ω—è–µ–º gspread client –∏ id —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è register_intake_pro ===
GSPREAD_CLIENT: Optional[gspread.client.Client] = None
SPREADSHEET_ID_FOR_INTAKE: str = ""

def _ws_headers(ws):
    return ws.row_values(1) if ws and ws.row_values(1) else []

def _ws_ensure_columns(ws, desired_headers: List[str]):
    """Ensure worksheet has at least all desired headers; append missing at end."""
    try:
        current = _ws_headers(ws)
        if not current:
            ws.append_row(desired_headers)
            return
        missing = [h for h in desired_headers if h not in current]
        if missing:
            # add missing columns at end
            for h in missing:
                ws.update_cell(1, len(current)+1, h)
                current.append(h)
    except Exception as e:
        logging.warning(f"ensure columns failed for {getattr(ws,'title','?')}: {e}")

def _sheets_init():
    global SHEETS_ENABLED, ss, ws_feedback, ws_users, ws_profiles, ws_episodes, ws_reminders, ws_daily, ws_rules, ws_challenges
    global GSPREAD_CLIENT, SPREADSHEET_ID_FOR_INTAKE
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if not creds_json:
            raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
        creds = json.loads(creds_json)
        credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds, scope)
        gclient = gspread.authorize(credentials)
        GSPREAD_CLIENT = gclient

        try:
            ss = gclient.open_by_key(SHEET_ID) if SHEET_ID else gclient.open(SHEET_NAME)
        except SpreadsheetNotFound:
            if ALLOW_CREATE_SHEET:
                ss = gclient.create(SHEET_NAME)
            else:
                raise

        try:
            SPREADSHEET_ID_FOR_INTAKE = ss.id
        except Exception:
            SPREADSHEET_ID_FOR_INTAKE = SHEET_ID or ""

        def _ensure_ws(title: str, headers: List[str]):
            try:
                ws = ss.worksheet(title)
            except gspread.WorksheetNotFound:
                ws = ss.add_worksheet(title=title, rows=2000, cols=max(20, len(headers)))
                ws.append_row(headers)
            if not ws.get_all_values():
                ws.append_row(headers)
            # ensure new headers (idempotent)
            _ws_ensure_columns(ws, headers)
            return ws

        ws_feedback = _ensure_ws("Feedback", ["timestamp","user_id","name","username","rating","comment"])
        ws_users = _ensure_ws("Users", ["user_id","username","lang","consent","tz_offset","checkin_hour","paused"])
        # Profiles ‚Äî extended headers with personalization fields
        ws_profiles = _ensure_ws("Profiles", [
            "user_id","sex","age","goal","goals","conditions","meds","allergies",
            "sleep","activity","diet","diet_focus","steps_target",
            "cycle_enabled","cycle_last_date","cycle_avg_len",
            "quiet_hours","consent_flags","notes","updated_at"
        ])
        ws_episodes = _ensure_ws("Episodes", ["episode_id","user_id","topic","started_at","baseline_severity","red_flags",
                                              "plan_accepted","target","reminder_at","next_checkin_at","status","last_update","notes"])
        # Daily checkins sheet extended with energy
        ws_daily = _ensure_ws("DailyCheckins",["timestamp","user_id","mood","energy","comment"])
        # Optional: Rules (evidence-based tips)
        ws_rules = _ensure_ws("Rules", ["rule_id","topic","segment","trigger","advice_text","citation","last_updated","enabled"])
        # Optional: Challenges
        ws_challenges = _ensure_ws("Challenges", ["user_id","challenge_id","name","start_date","length_days","days_done","status"])

        logging.info("Google Sheets connected.")
    except Exception as e:
        SHEETS_ENABLED = False
        logging.error(f"SHEETS disabled (fallback to memory). Reason: {e}")

_sheets_init()

# --------- Memory fallback stores ----------
MEM_USERS: Dict[int, dict] = {}
MEM_PROFILES: Dict[int, dict] = {}
MEM_EPISODES: List[dict] = []
MEM_REMINDERS: List[dict] = []
MEM_FEEDBACK: List[dict] = []
MEM_DAILY: List[dict] = []
MEM_CHALLENGES: List[dict] = []
MEM_RULES: List[dict] = []

# --------- Sessions ----------
sessions: Dict[int, dict] = {}

# -------- Sheets wrappers --------
def _headers(ws):
    return ws.row_values(1)

def users_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        for r in ws_users.get_all_records():
            if str(r.get("user_id")) == str(uid):
                return r
        return {}
    return MEM_USERS.get(uid, {})

def users_upsert(uid: int, username: str, lang: str):
    base = {
        "user_id": str(uid),
        "username": username or "",
        "lang": lang,
        "consent": "no",
        "tz_offset": "0",
        "checkin_hour": DEFAULT_CHECKIN_LOCAL,
        "paused": "no"
    }

    if SHEETS_ENABLED:
        vals = ws_users.get_all_records()
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                ws_users.update(f"A{i}:G{i}", [[base[k] for k in _headers(ws_users)]])
                return
        ws_users.append_row([base[k] for k in _headers(ws_users)])
    else:
        MEM_USERS[uid] = base

def users_set(uid: int, field: str, value: str):
    if SHEETS_ENABLED:
        vals = ws_users.get_all_records()
        for i, r in enumerate(vals, start=2):
            if str(r.get("user_id")) == str(uid):
                hdr = _headers(ws_users)
                # expand headers if needed
                if field not in hdr:
                    _ws_ensure_columns(ws_users, hdr + [field])
                    hdr = _headers(ws_users)
                ws_users.update_cell(i, hdr.index(field)+1, value)
                return
    else:
        u = MEM_USERS.setdefault(uid, {})
        u[field] = value

def profiles_get(uid: int) -> dict:
    if SHEETS_ENABLED:
        for r in ws_profiles.get_all_records():
            if str(r.get("user_id")) == str(uid):
                return r
        return {}
    return MEM_PROFILES.get(uid, {})

def profiles_upsert(uid: int, data: dict):
    if SHEETS_ENABLED:
        hdr = _headers(ws_profiles)
        current, idx = None, None
        for i, r in enumerate(ws_profiles.get_all_records(), start=2):
            if str(r.get("user_id")) == str(uid):
                current, idx = r, i
                break
        if not current:
            current = {"user_id": str(uid)}
        for k,v in data.items():
            if k not in hdr:
                _ws_ensure_columns(ws_profiles, hdr + [k])
                hdr = _headers(ws_profiles)
            current[k] = "" if v is None else (", ".join(v) if isinstance(v,list) else str(v))
        current["updated_at"] = iso(utcnow())

        values = [current.get(h,"") for h in hdr]
        end_col = gsu.rowcol_to_a1(1, len(hdr)).rstrip("1")
        if idx:
            ws_profiles.update(f"A{idx}:{end_col}{idx}", [values])
        else:
            ws_profiles.append_row(values)
    else:
        row = MEM_PROFILES.setdefault(uid, {"user_id": str(uid)})
        for k,v in data.items():
            row[k] = "" if v is None else (", ".join(v) if isinstance(v,list) else str(v))
        row["updated_at"] = iso(utcnow())

def episode_create(uid: int, topic: str, severity: int, red: str) -> str:
    eid = f"{uid}-{uuid.uuid4().hex[:8]}"
    now = iso(utcnow())
    rec = {"episode_id":eid,"user_id":str(uid),"topic":topic,"started_at":now,
           "baseline_severity":str(severity),"red_flags":red,"plan_accepted":"0",
           "target":"<=3/10","reminder_at":"","next_checkin_at":"","status":"open",
           "last_update":now,"notes":""}
    if SHEETS_ENABLED:
        ws_episodes.append_row([rec[k] for k in _headers(ws_episodes)])
    else:
        MEM_EPISODES.append(rec)
    return eid

def episode_find_open(uid: int) -> Optional[dict]:
    if SHEETS_ENABLED:
        for r in ws_episodes.get_all_records():
            if r.get("user_id")==str(uid) and r.get("status")=="open":
                return r
        return None
    for r in MEM_EPISODES:
        if r["user_id"]==str(uid) and r["status"]=="open":
            return r
    return None

def episode_set(eid: str, field: str, value: str):
    if SHEETS_ENABLED:
        vals = ws_episodes.get_all_values(); hdr = vals[0]
        if field not in hdr:
            _ws_ensure_columns(ws_episodes, hdr + [field]); hdr = _headers(ws_episodes)
        col = hdr.index(field)+1
        for i in range(2, len(vals)+1):
            if ws_episodes.cell(i,1).value == eid:
                ws_episodes.update_cell(i,col,value)
                ws_episodes.update_cell(i,hdr.index("last_update")+1, iso(utcnow()))
                return
    else:
        for r in MEM_EPISODES:
            if r["episode_id"]==eid:
                r[field]=value; r["last_update"]=iso(utcnow()); return

def feedback_add(ts, uid, name, username, rating, comment):
    if SHEETS_ENABLED:
        ws_feedback.append_row([ts,str(uid),name,username or "",rating,comment])
    else:
        MEM_FEEDBACK.append({"timestamp":ts,"user_id":str(uid),"name":name,"username":username or "","rating":rating,"comment":comment})

def reminder_add(uid: int, text: str, when_utc: datetime):
    rid = f"{uid}-{uuid.uuid4().hex[:6]}"
    rec = {"id":rid,"user_id":str(uid),"text":text,"when_utc":iso(when_utc),"created_at":iso(utcnow()),"status":"scheduled"}
    if SHEETS_ENABLED:
        ws_reminders.append_row([rec[k] for k in _headers(ws_reminders)])
    else:
        MEM_REMINDERS.append(rec)
    return rid

def reminders_all_records():
    if SHEETS_ENABLED:
        return ws_reminders.get_all_records()
    return MEM_REMINDERS.copy()

def reminders_mark_sent(rid: str):
    if SHEETS_ENABLED:
        vals = ws_reminders.get_all_values()
        hdr = vals[0]
        for i in range(2, len(vals)+1):
            if ws_reminders.cell(i,1).value == rid:
                ws_reminders.update_cell(i,hdr.index("status")+1,"sent"); return
    else:
        for r in MEM_REMINDERS:
            if r["id"]==rid:
                r["status"]="sent"; return

def daily_add(ts, uid, mood, comment, energy: Optional[int]=None):
    if SHEETS_ENABLED:
        hdr = _headers(ws_daily)
        row = {"timestamp":ts,"user_id":str(uid),"mood":mood,"energy":("" if energy is None else str(energy)),"comment":comment or ""}
        ws_daily.append_row([row.get(h,"") for h in hdr])
    else:
        MEM_DAILY.append({"timestamp":ts,"user_id":str(uid),"mood":mood,"energy":energy,"comment":comment or ""})

# ---------- Challenges ----------
def challenge_start(uid: int, name="hydrate7", length_days=7):
    rec = {"user_id":str(uid),"challenge_id":f"{uid}-hydr7","name":name,
           "start_date":date.today().isoformat(),"length_days":str(length_days),
           "days_done":"0","status":"active"}
    if SHEETS_ENABLED:
        ws_challenges.append_row([rec[k] for k in _headers(ws_challenges)])
    else:
        MEM_CHALLENGES.append(rec)

def challenge_get(uid: int):
    if SHEETS_ENABLED:
        for r in ws_challenges.get_all_records():
            if r.get("user_id")==str(uid) and r.get("status")=="active":
                return r
        return None
    for r in MEM_CHALLENGES:
        if r["user_id"]==str(uid) and r["status"]=="active":
            return r
    return None

def challenge_inc(uid: int):
    if SHEETS_ENABLED:
        vals = ws_challenges.get_all_values(); hdr = vals[0]
        for i in range(2, len(vals)+1):
            if ws_challenges.cell(i, hdr.index("user_id")+1).value == str(uid) and \
               ws_challenges.cell(i, hdr.index("status")+1).value == "active":
                cur = int(ws_challenges.cell(i, hdr.index("days_done")+1).value or "0")
                ws_challenges.update_cell(i, hdr.index("days_done")+1, str(cur+1)); return cur+1
        return 0
    else:
        for r in MEM_CHALLENGES:
            if r["user_id"]==str(uid) and r["status"]=="active":
                r["days_done"]=str(int(r["days_done"])+1); return int(r["days_done"])
        return 0

# --------- JobQueue helper ----------
def _has_jq_app(app) -> bool:
    return getattr(app, "job_queue", None) is not None

def _has_jq_ctx(context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        return getattr(context.application, "job_queue", None) is not None
    except Exception:
        return False

# --------- Time helpers (tz + quiet hours) ---------
def hhmm_tuple(hhmm:str)->Tuple[int,int]:
    m = re.search(r'([01]?\d|2[0-3]):([0-5]\d)', hhmm.strip())
    return (int(m.group(1)), int(m.group(2))) if m else (8,30)

def local_to_utc_hour_min(tz_offset_hours:int, hhmm:str)->Tuple[int,int]:
    h,m = hhmm_tuple(hhmm); return ((h - tz_offset_hours) % 24, m)

def parse_quiet_hours(qh: str)->Tuple[Tuple[int,int], Tuple[int,int]]:
    # "22:00-08:00" -> ((22,0),(8,0))
    try:
        a,b = qh.split("-")
        return hhmm_tuple(a), hhmm_tuple(b)
    except:
        return hhmm_tuple(DEFAULT_QUIET_HOURS.split("-")[0]), hhmm_tuple(DEFAULT_QUIET_HOURS.split("-")[1])

def is_in_quiet(local_dt: datetime, qh: str)->bool:
    (sh,sm),(eh,em) = parse_quiet_hours(qh)
    start = local_dt.replace(hour=sh, minute=sm, second=0, microsecond=0)
    end   = local_dt.replace(hour=eh, minute=em, second=0, microsecond=0)
    if (sh,sm) <= (eh,em):
        return start <= local_dt < end
    # overnight wrap
    return local_dt >= start or local_dt < end

def adjust_out_of_quiet(local_dt: datetime, qh: str)->datetime:
    if not is_in_quiet(local_dt, qh):
        return local_dt
    (sh,sm),(eh,em) = parse_quiet_hours(qh)
    # If in quiet, move to next end
    end = local_dt.replace(hour=eh, minute=em, second=0, microsecond=0)
    if (sh,sm) > (eh,em) and local_dt.time() < dtime(eh,em):
        # quiet wraps overnight; if before end, today end already in morning
        return end
    return end + timedelta(days=1)

# --------- Scheduling ---------
def schedule_from_sheet_on_start(app):
    if not _has_jq_app(app):
        logging.warning("JobQueue not available ‚Äì skip scheduling on start.")
        return

    now = utcnow()
    src = ws_episodes.get_all_records() if SHEETS_ENABLED else MEM_EPISODES
    for r in src:
        if r.get("status")!="open":
            continue
        eid = r.get("episode_id"); uid = int(r.get("user_id"))
        nca = r.get("next_checkin_at") or ""
        if not nca:
            continue
        try:
            dt_ = datetime.strptime(nca, "%Y-%m-%d %H:%M:%S%z")
        except:
            continue
        delay = max(60, (dt_-now).total_seconds())
        app.job_queue.run_once(job_checkin_episode, when=delay, data={"user_id":uid,"episode_id":eid})

    for r in reminders_all_records():
        if (r.get("status") or "")!="scheduled":
            continue
        uid = int(r.get("user_id")); rid=r.get("id")
        try:
            dt_ = datetime.strptime(r.get("when_utc"), "%Y-%m-%d %H:%M:%S%z")
        except:
            continue
        delay = max(60,(dt_-now).total_seconds())
        app.job_queue.run_once(job_oneoff_reminder, when=delay, data={"user_id":uid,"reminder_id":rid})

    src_u = ws_users.get_all_records() if SHEETS_ENABLED else list(MEM_USERS.values())
    for u in src_u:
        if (u.get("paused") or "").lower()=="yes":
            continue
        uid = int(u.get("user_id"))
        tz_off = int(str(u.get("tz_offset") or "0"))
        hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
        schedule_daily_checkin(app, uid, tz_off, hhmm, norm_lang(u.get("lang") or "en"))

def schedule_daily_checkin(app, uid:int, tz_off:int, hhmm_local:str, lang:str):
    if not _has_jq_app(app):
        logging.warning(f"JobQueue not available ‚Äì skip daily scheduling for uid={uid}.")
        return
    for j in app.job_queue.get_jobs_by_name(f"daily_{uid}"):
        j.schedule_removal()
    h_utc, m_utc = local_to_utc_hour_min(tz_off, hhmm_local)
    t = dtime(hour=h_utc, minute=m_utc, tzinfo=timezone.utc)
    app.job_queue.run_daily(job_daily_checkin, time=t, name=f"daily_{uid}", data={"user_id":uid,"lang":lang})

# ------------- Jobs -------------
async def job_checkin_episode(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, eid = d.get("user_id"), d.get("episode_id")
    if not uid or not eid:
        return
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes":
        return
    lang = norm_lang(u.get("lang") or "en")
    kb = inline_numbers_0_10()
    try:
        await context.bot.send_message(uid, T[lang]["checkin_ping"], reply_markup=kb)
        episode_set(eid, "next_checkin_at", "")
    except Exception as e:
        logging.error(f"job_checkin_episode send error: {e}")

async def job_oneoff_reminder(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, rid = d.get("user_id"), d.get("reminder_id")
    text = T[norm_lang(users_get(uid).get("lang") or "en")]["thanks"]
    for r in reminders_all_records():
        if r.get("id")==rid:
            text = r.get("text") or text; break
    try:
        await context.bot.send_message(uid, text)
    except Exception as e:
        logging.error(f"reminder send error: {e}")
    reminders_mark_sent(rid)

def _get_daily_tip(profile: dict, lang: str) -> str:
    # Simple segmented tips; could be extended by Rules sheet
    goal = (profile.get("goal") or profile.get("goals") or "").lower()
    age = int(re.search(r"\d+", str(profile.get("age") or "0")).group(0)) if re.search(r"\d+", str(profile.get("age") or "")) else 0
    sex = (profile.get("sex") or "").lower()
    tips_common = {
        "en":[
            "Add 15‚Äì20 g protein to one meal today.",
            "Swap a sugary drink for water or tea.",
            "Add a fist of veggies at lunch.",
            "Take a 10-minute walk after meals.",
        ],
        "ru":[
            "–î–æ–±–∞–≤—å—Ç–µ 15‚Äì20 –≥ –±–µ–ª–∫–∞ –∫ –æ–¥–Ω–æ–º—É –ø—Ä–∏—ë–º—É –ø–∏—â–∏.",
            "–ó–∞–º–µ–Ω–∏—Ç–µ —Å–ª–∞–¥–∫–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –Ω–∞ –≤–æ–¥—É –∏–ª–∏ —á–∞–π.",
            "–î–æ–±–∞–≤—å—Ç–µ –∫—É–ª–∞–∫ –æ–≤–æ—â–µ–π –∫ –æ–±–µ–¥—É.",
            "10-–º–∏–Ω –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ—Å–ª–µ –µ–¥—ã.",
        ],
        "uk":[
            "–î–æ–¥–∞–π—Ç–µ 15‚Äì20 –≥ –±—ñ–ª–∫–∞ –¥–æ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–π–æ–º—É.",
            "–ó–∞–º—ñ–Ω—ñ—Ç—å —Å–æ–ª–æ–¥–∫–∏–π –Ω–∞–ø—ñ–π –Ω–∞ –≤–æ–¥—É –∞–±–æ —á–∞–π.",
            "–î–æ–¥–∞–π—Ç–µ –∫—É–ª–∞–∫ –æ–≤–æ—á—ñ–≤ –¥–æ –æ–±—ñ–¥—É.",
            "10-—Ö–≤ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞ –ø—ñ—Å–ª—è —ó–∂—ñ.",
        ],
        "es":[
            "A√±ade 15‚Äì20 g de prote√≠na a una comida.",
            "Cambia la bebida azucarada por agua o t√©.",
            "A√±ade un pu√±o de verduras al almuerzo.",
            "Camina 10 min tras la comida.",
        ],
    }[lang]
    if goal == "weight":
        tips = {
            "en":["Aim ‚â•25 g protein at breakfast.","Keep dinner carbs modest today."],
            "ru":["–ó–∞–≤—Ç—Ä–∞–∫ ‚â•25 –≥ –±–µ–ª–∫–∞.","–£–∂–∏–Ω —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º–∏ —É–≥–ª–µ–≤–æ–¥–∞–º–∏."],
            "uk":["–°–Ω—ñ–¥–∞–Ω–æ–∫ ‚â•25 –≥ –±—ñ–ª–∫–∞.","–ù–∞ –≤–µ—á–µ—Ä—é –ø–æ–º—ñ—Ä–Ω—ñ –≤—É–≥–ª–µ–≤–æ–¥–∏."],
            "es":["Desayuno ‚â•25 g prote√≠na.","Cena con pocos carbohidratos."],
        }[lang]
    elif goal == "energy":
        tips = {
            "en":["Drink 300‚Äì500 ml water on waking.","Get 5‚Äì10 min daylight before noon."],
            "ru":["300‚Äì500 –º–ª –≤–æ–¥—ã –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è.","5‚Äì10 –º–∏–Ω –¥–Ω–µ–≤–Ω–æ–≥–æ —Å–≤–µ—Ç–∞ –¥–æ –ø–æ–ª—É–¥–Ω—è."],
            "uk":["300‚Äì500 –º–ª –≤–æ–¥–∏ –ø—ñ—Å–ª—è –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è.","5‚Äì10 —Ö–≤ –¥–µ–Ω–Ω–æ–≥–æ —Å–≤—ñ—Ç–ª–∞ –¥–æ –ø–æ–ª—É–¥–Ω—è."],
            "es":["300‚Äì500 ml de agua al despertar.","5‚Äì10 min de luz natural antes del mediod√≠a."],
        }[lang]
    else:
        tips = []
    pool = tips + tips_common
    return random.choice(pool)

def _get_skin_tip(lang: str, sex: str, age: int) -> str:
    if lang=="ru":
        base = [
            "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ SPF 30+ —É—Ç—Ä–æ–º; —Å–º—ã–≤–∞—Ç—å –≤–µ—á–µ—Ä–æ–º.",
            "–£–º—ã–≤–∞–Ω–∏–µ —Ç—ë–ø–ª–æ–π –≤–æ–¥–æ–π, –±–µ–∑ –∂—ë—Å—Ç–∫–æ–≥–æ —Å–∫—Ä–∞–±–∞.",
            "–í–≤–µ—Å—Ç–∏ —É–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º –ø–æ—Å–ª–µ –¥—É—à–∞.",
        ]
    elif lang=="uk":
        base = [
            "–©–æ–¥–µ–Ω–Ω–æ SPF 30+ –≤—Ä–∞–Ω—Ü—ñ; –∑–º–∏–≤–∞—Ç–∏ –≤–≤–µ—á–µ—Ä—ñ.",
            "–í–º–∏–≤–∞–Ω–Ω—è —Ç–µ–ø–ª–æ—é –≤–æ–¥–æ—é, –±–µ–∑ –∂–æ—Ä—Å—Ç–∫–∏—Ö —Å–∫—Ä–∞–±—ñ–≤.",
            "–î–æ–¥–∞–π—Ç–µ –∑–≤–æ–ª–æ–∂—É–≤–∞–ª—å–Ω–∏–π –∫—Ä–µ–º –ø—ñ—Å–ª—è –¥—É—à—É.",
        ]
    elif lang=="es":
        base = [
            "SPF 30+ cada ma√±ana; retirar por la noche.",
            "Lavar con agua tibia, sin exfoliantes agresivos.",
            "A√±ade crema hidratante tras la ducha.",
        ]
    else:
        base = [
            "Use SPF 30+ each morning; cleanse at night.",
            "Wash with lukewarm water; skip harsh scrubs.",
            "Moisturizer after shower helps skin barrier.",
        ]
    return random.choice(base)

def _cycle_tip(lang: str, phase: str) -> Optional[str]:
    if phase=="luteal":
        return {"ru":"–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞: —á—É—Ç—å –±–æ–ª—å—à–µ —Å–Ω–∞ –∏ –≤–æ–¥—ã; —Ñ–æ–∫—É—Å –Ω–∞ –±–µ–ª–∫–µ –∏ –∂–µ–ª–µ–∑–µ.",
                "uk":"–õ—é—Ç–µ—ó–Ω–æ–≤–∞ —Ñ–∞–∑–∞: —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ —Å–Ω—É —ñ –≤–æ–¥–∏; –±—ñ–ª–æ–∫ —Ç–∞ –∑–∞–ª—ñ–∑–æ.",
                "en":"Luteal phase: add sleep & hydration; focus on protein and iron.",
                "es":"Fase l√∫tea: m√°s sue√±o e hidrataci√≥n; prioriza prote√≠na y hierro."}[lang]
    if phase=="follicular":
        return {"ru":"–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞: —ç–Ω–µ—Ä–≥–∏—è ‚Üë ‚Äî —Ö–æ—Ä–æ—à–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
                "uk":"–§–æ–ª—ñ–∫—É–ª—è—Ä–Ω–∞ —Ñ–∞–∑–∞: –µ–Ω–µ—Ä–≥—ñ—è ‚Üë ‚Äî –¥–æ–±—Ä–µ –ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.",
                "en":"Follicular phase: energy ‚Üë ‚Äî good time for training.",
                "es":"Fase folicular: energ√≠a ‚Üë ‚Äî buen momento para entrenar."}[lang]
    if phase=="ovulation":
        return {"ru":"–û–≤—É–ª—è—Ü–∏—è: –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –±–µ–ª–æ–∫ –∏ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—é.",
                "uk":"–û–≤—É–ª—è—Ü—ñ—è: –ø—ñ–¥—Ç—Ä–∏–º–∞–π—Ç–µ –±—ñ–ª–æ–∫ —Ç–∞ –≥—ñ–¥—Ä–∞—Ç–∞—Ü—ñ—é.",
                "en":"Ovulation: support protein and hydration.",
                "es":"Ovulaci√≥n: prioriza prote√≠na e hidrataci√≥n."}[lang]
    return None

def _cycle_phase(last_date_str: str, avg_len: int) -> Optional[str]:
    try:
        last = datetime.strptime(last_date_str, "%Y-%m-%d").date()
        day = (date.today() - last).days % max(avg_len, 21)
        if day < 10: return "follicular"
        if 10 <= day < 14: return "ovulation"
        return "luteal"
    except Exception:
        return None

async def job_daily_checkin(context: ContextTypes.DEFAULT_TYPE):
    d = context.job.data or {}
    uid, lang = d.get("user_id"), d.get("lang","en")
    u = users_get(uid)
    if (u.get("paused") or "").lower()=="yes":
        return

    # Compose dynamic text: tip + optional cycle line + challenge progress
    prof = profiles_get(uid)
    tip = _get_daily_tip(prof, lang)
    cycle_line = ""
    if (prof.get("cycle_enabled") or "").lower() == "yes" and (prof.get("cycle_last_date") or ""):
        phase = _cycle_phase(prof.get("cycle_last_date"), int(prof.get("cycle_avg_len") or "28"))
        if phase:
            ct = _cycle_tip(lang, phase)
            if ct:
                cycle_line = f"\n{ct}"

    ch = challenge_get(uid)
    ch_line = ""
    if ch:
        ch_line = "\n" + T[lang]["challenge_progress"].format(d=int(ch.get("days_done") or "0"), len=int(ch.get("length_days") or "7"))

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["mood_good"], callback_data="mood|good"),
         InlineKeyboardButton(T[lang]["mood_ok"], callback_data="mood|ok"),
         InlineKeyboardButton(T[lang]["mood_bad"], callback_data="mood|bad")],
        [InlineKeyboardButton("‚ö°1", callback_data="energy|1"),
         InlineKeyboardButton("2", callback_data="energy|2"),
         InlineKeyboardButton("3", callback_data="energy|3"),
         InlineKeyboardButton("4", callback_data="energy|4"),
         InlineKeyboardButton("5", callback_data="energy|5")],
        [InlineKeyboardButton(T[lang]["gm_evening_btn"], callback_data="act|rem|evening"),
         InlineKeyboardButton(T[lang]["hydrate_btn"], callback_data="act|hydration")],
        [InlineKeyboardButton(T[lang]["skintip_btn"], callback_data="act|skintip"),
         InlineKeyboardButton(T[lang]["set_quiet_btn"], callback_data="act|quiet"),
         InlineKeyboardButton(T[lang]["cycle_btn"], callback_data="act|cycle")],
    ])
    try:
        await context.bot.send_message(
            uid,
            f"{T[lang]['daily_gm']}\n{T[lang]['daily_tip_prefix']} {tip}{cycle_line}{ch_line}",
            reply_markup=kb
        )
    except Exception as e:
        logging.error(f"daily checkin error: {e}")

# ------------- LLM Router (with personalization) -------------
SYS_ROUTER = (
    "You are TendAI ‚Äî a concise, warm, professional health & longevity assistant (not a doctor). "
    "Always answer strictly in {lang}. Keep replies short (<=6 lines + up to 4 bullets). "
    "Personalize recommendations using the provided profile (sex/age/goal/conditions, diet_focus, steps_target). "
    "TRIAGE: ask 1‚Äì2 clarifiers first; advise ER only for clear red flags with high confidence. "
    "Return JSON ONLY like: "
    "{\"intent\":\"symptom\"|\"nutrition\"|\"sleep\"|\"labs\"|\"habits\"|\"longevity\"|\"other\","
    "\"assistant_reply\": \"string\", \"followups\": [\"string\"], \"needs_more\": true, "
    "\"red_flags\": false, \"confidence\": 0.0}"
)
def llm_router_answer(text: str, lang: str, profile: dict) -> dict:
    # –ï—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:
    if not oai:
        return {"intent":"other","assistant_reply":T[lang]["unknown"],"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}

    sys = SYS_ROUTER.replace("{lang}", lang) + f"\nUserProfile: {json.dumps(profile, ensure_ascii=False)}"
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.25,
            max_tokens=420,
            response_format={"type":"json_object"},
            messages=[
                {"role":"system","content":sys},
                {"role":"user","content":text}
            ]
        )
        out = resp.choices[0].message.content.strip()
        data = json.loads(out)
        if "followups" not in data or data["followups"] is None:
            data["followups"] = []
        return data
    except Exception as e:
        logging.error(f"router LLM error: {e}")
        return {"intent":"other","assistant_reply":T[lang]["unknown"],"followups":[],"needs_more":True,"red_flags":False,"confidence":0.3}


# ===== LLM ORCHESTRATOR FOR PAIN TRIAGE =====
def _kb_for_code(lang: str, code: str):
    if code == "painloc":
        kb = inline_list(T[lang]["triage_pain_q1_opts"], "painloc")
    elif code == "painkind":
        kb = inline_list(T[lang]["triage_pain_q2_opts"], "painkind")
    elif code == "paindur":
        kb = inline_list(T[lang]["triage_pain_q3_opts"], "paindur")
    elif code == "num":
        kb = inline_numbers_0_10()
    elif code == "painrf":
        kb = inline_list(T[lang]["triage_pain_q5_opts"], "painrf")
    else:
        kb = None
    if kb:
        rows = kb.inline_keyboard + [[InlineKeyboardButton(T[lang]["back"], callback_data="pain|exit")]]
        return InlineKeyboardMarkup(rows)
    return None

def llm_decide_next_pain_step(user_text: str, lang: str, state: dict) -> Optional[dict]:
    if not oai:
        return None

    known = state.get("answers", {})
    opts = {
        "loc": T[lang]["triage_pain_q1_opts"],
        "kind": T[lang]["triage_pain_q2_opts"],
        "duration": T[lang]["triage_pain_q3_opts"],
        "red": T[lang]["triage_pain_q5_opts"],
    }
    sys = (
        "You are a clinical triage step planner. "
        f"Language: {lang}. Reply in the user's language. "
        "You get partial fields for a PAIN complaint and a new user message. "
        "Extract any fields present from the message. Keep labels EXACTLY as in the allowed options. "
        "Field keys: loc, kind, duration, severity (0-10), red. "
        "Then decide the NEXT missing field to ask (order: loc -> kind -> duration -> severity -> red). "
        "Return STRICT JSON ONLY with keys updates, ask, kb. "
        "kb must be one of: painloc, painkind, paindur, num, painrf, done. "
        "If enough info to produce a plan (we have severity and red), set kb='done' and ask=''.\n\n"
        f"Allowed options:\nloc: {opts['loc']}\nkind: {opts['kind']}\nduration: {opts['duration']}\nred: {opts['red']}\n"
    )
    user = {"known": known, "message": user_text}
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.1,
            max_tokens=220,
            response_format={"type":"json_object"},
            messages=[
                {"role":"system","content":sys},
                {"role":"user","content":json.dumps(user, ensure_ascii=False)}
            ]
        )
        out = resp.choices[0].message.content.strip()
        data = json.loads(out)
        if "updates" in data and isinstance(data["updates"], dict) and "severity" in data["updates"]:
            try:
                sv = int(data["updates"]["severity"])
                data["updates"]["severity"] = max(0, min(10, sv))
            except:
                data["updates"].pop("severity", None)
        return data
    except Exception as e:
        logging.error(f"llm_decide_next_pain_step error: {e}")
        return None

# ----- Synonyms fallback for pain triage -----
PAIN_LOC_SYNS = {
    "ru": {
        "–ì–æ–ª–æ–≤–∞": ["–≥–æ–ª–æ–≤–∞","–≥–æ–ª–æ–≤–µ","–≥–æ–ª–æ–≤–Ω–∞—è","–º–∏–≥—Ä–µ–Ω—å","–≤–∏—Å–æ–∫","—Ç–µ–º—è","–ª–æ–±"],
        "–ì–æ—Ä–ª–æ": ["–≥–æ—Ä–ª–æ","–≤ –≥–æ—Ä–ª–µ","–∞–Ω–≥–∏–Ω–∞","—Ç–æ–Ω–∑–∏–ª–ª–∏—Ç"],
        "–°–ø–∏–Ω–∞": ["—Å–ø–∏–Ω–∞","–≤ —Å–ø–∏–Ω–µ","–ø–æ—è—Å–Ω–∏—Ü–∞","–ø–æ—è—Å–Ω–∏—á","–ª–æ–ø–∞—Ç–∫","–ø–æ–∑–≤–æ–Ω","—Å–∑–∞–¥–∏"],
        "–ñ–∏–≤–æ—Ç": ["–∂–∏–≤–æ—Ç","–≤–Ω–∏–∑—É –∂–∏–≤–æ—Ç–∞","—ç–ø–∏–≥–∞—Å—Ç—Ä","–∂–µ–ª—É–¥–æ–∫","–∫–∏—à","–ø–æ–¥—Ä–µ–±–µ—Ä"],
        "–î—Ä—É–≥–æ–µ": ["–¥—Ä—É–≥–æ–µ"]
    },
    "uk": {
        "–ì–æ–ª–æ–≤–∞": ["–≥–æ–ª–æ–≤–∞","–≤ –≥–æ–ª–æ–≤—ñ","–º—ñ–≥—Ä–µ–Ω—å","—Å–∫—Ä–æ–Ω—è","–ª–æ–±"],
        "–ì–æ—Ä–ª–æ": ["–≥–æ—Ä–ª–æ","–≤ –≥–æ—Ä–ª—ñ","–∞–Ω–≥—ñ–Ω–∞","—Ç–æ–Ω–∑–∏–ª—ñ—Ç"],
        "–°–ø–∏–Ω–∞": ["—Å–ø–∏–Ω–∞","–ø–æ–ø–µ—Ä–µ–∫","–ª–æ–ø–∞—Ç–∫","—Ö—Ä–µ–±–µ—Ç"],
        "–ñ–∏–≤—ñ—Ç": ["–∂–∏–≤—ñ—Ç","–≤–Ω–∏–∑—É –∂–∏–≤–æ—Ç–∞","—à–ª—É–Ω–æ–∫","–∫–∏—à"],
        "–Ü–Ω—à–µ": ["—ñ–Ω—à–µ"]
    },
    "en": {
        "Head": ["head","headache","migraine","temple","forehead"],
        "Throat": ["throat","sore throat","tonsil"],
        "Back": ["back","lower back","spine","shoulder blade"],
        "Belly": ["belly","stomach","abdomen","tummy","epigastr"],
        "Other": ["other"]
    },
    "es": {
        "Head": ["cabeza","dolor de cabeza","migra√±a","sien","frente"],
        "Throat": ["garganta","dolor de garganta","am√≠gdala"],
        "Back": ["espalda","lumbar","columna","om√≥plato"],
        "Belly": ["vientre","est√≥mago","abdomen","barriga","epigastrio"],
        "Other": ["otro","otra","otros"]
    }
}

PAIN_KIND_SYNS = {
    "ru": {
        "–¢—É–ø–∞—è": ["—Ç—É–ø","–Ω–æ—é—â","—Ç—è–Ω—É—â"],
        "–û—Å—Ç—Ä–∞—è": ["–æ—Å—Ç—Ä","–∫–æ–ª—é—â","—Ä–µ–∂—É—â"],
        "–ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è": ["–ø—É–ª—å—Å"],
        "–î–∞–≤—è—â–∞—è": ["–¥–∞–≤–∏—Ç","—Å–¥–∞–≤–ª–∏–≤","—Å—Ç—è–≥–∏–≤"]
    },
    "uk": {
        "–¢—É–ø–∏–π": ["—Ç—É–ø","–Ω–∏—é—á"],
        "–ì–æ—Å—Ç—Ä–∏–π": ["–≥–æ—Å—Ç—Ä","–∫–æ–ª—é—á","—Ä—ñ–∂—É—á"],
        "–ü—É–ª—å—Å—É—é—á–∏–π": ["–ø—É–ª—å—Å"],
        "–¢–∏—Å–Ω—É—á–∏–π": ["—Ç–∏—Å–Ω","—Å—Ç–∏—Å–∫–∞—î"]
    },
    "en": {
        "Dull": ["dull","aching","pulling"],
        "Sharp": ["sharp","stabbing","cutting"],
        "Pulsating": ["puls","throbb"],
        "Pressing": ["press","tight","squeez"]
    },
    "es": {
        "Dull": ["sordo","leve","molesto"],
        "Sharp": ["agudo","punzante","cortante"],
        "Pulsating": ["puls√°til","palpitante"],
        "Pressing": ["opresivo","presi√≥n","apretado"]
    }
}

RED_FLAG_SYNS = {
    "ru": {
        "–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": ["–≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø","–∂–∞—Ä","39","40"],
        "–†–≤–æ—Ç–∞": ["—Ä–≤–æ—Ç–∞","—Ç–æ—à–Ω–∏—Ç –∏ —Ä–≤","–±–ª—é—ë—Ç","–±–ª—é–µ—Ç"],
        "–°–ª–∞–±–æ—Å—Ç—å/–æ–Ω–µ–º–µ–Ω–∏–µ": ["–æ–Ω–µ–º","—Å–ª–∞–±–æ—Å—Ç—å –≤ –∫–æ–Ω–µ—á","–ø—Ä–æ–≤–∏—Å–ª–æ","–∞—Å–∏–º–º–µ—Ç—Ä–∏—è"],
        "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏/–∑—Ä–µ–Ω–∏—è": ["—Ä–µ—á—å","–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–µ","–∑—Ä–µ–Ω–∏–µ","–¥–≤–æ–∏—Ç","–∏—Å–∫—Ä—ã"],
        "–¢—Ä–∞–≤–º–∞": ["—Ç—Ä–∞–≤–º–∞","—É–¥–∞—Ä","–ø–∞–¥–µ–Ω–∏–µ","–∞–≤–∞—Ä–∏—è"],
        "–ù–µ—Ç": ["–Ω–µ—Ç","–Ω–∏—á–µ–≥–æ","none","–Ω–µ–º–∞","–≤—ñ–¥—Å—É—Ç"]
    },
    "uk": {
        "–í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": ["–≤–∏—Å–æ–∫–∞ —Ç–µ–º–ø","–∂–∞—Ä","39","40"],
        "–ë–ª—é–≤–∞–Ω–Ω—è": ["–±–ª—é–≤–∞–Ω","—Ä–≤–æ—Ç–∞"],
        "–°–ª–∞–±–∫—ñ—Å—Ç—å/–æ–Ω—ñ–º—ñ–Ω–Ω—è": ["–æ–Ω—ñ–º","—Å–ª–∞–±–∫","–ø—Ä–æ–≤–∏—Å–ª–æ"],
        "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–æ–≤–æ—é/–∑–æ—Ä–æ–º": ["–º–æ–≤–∞","–≥–æ–≤–æ—Ä–∏—Ç–∏","–∑—ñ—Ä","–¥–≤–æ—ó—Ç—å"],
        "–¢—Ä–∞–≤–º–∞": ["—Ç—Ä–∞–≤–º–∞","—É–¥–∞—Ä","–ø–∞–¥—ñ–Ω–Ω—è","–∞–≤–∞—Ä—ñ—è"],
        "–ù–µ–º–∞—î": ["–Ω–µ–º–∞","–Ω—ñ","–≤—ñ–¥—Å—É—Ç","none"]
    },
    "en": {
        "High fever": ["high fever","fever","39","102"],
        "Vomiting": ["vomit","throwing up"],
        "Weakness/numbness": ["numb","weakness","droop"],
        "Speech/vision problems": ["speech","vision","double"],
        "Trauma": ["trauma","injury","fall","accident"],
        "None": ["none","no"]
    },
    "es": {
        "High fever": ["fiebre alta","fiebre","39","40"],
        "Vomiting": ["v√≥mito","vomitar"],
        "Weakness/numbness": ["debilidad","entumecimiento","ca√≠da facial"],
        "Speech/vision problems": ["habla","visi√≥n","doble"],
        "Trauma": ["trauma","lesi√≥n","ca√≠da","accidente"],
        "None": ["ninguno","no"]
    }
}

def _match_from_syns(text: str, lang: str, syns: dict) -> Optional[str]:
    s = (text or "").lower()
    for label, keys in syns.get(lang, {}).items():
        for kw in keys:
            if re.search(rf"\b{re.escape(kw)}\b", s):
                return label
    best = ("", 0.0)
    for label, keys in syns.get(lang, {}).items():
        for kw in keys:
            r = SequenceMatcher(None, kw, s).ratio()
            if r > best[1]:
                best = (label, r)
    return best[0] if best[1] >= 0.72 else None

def _classify_duration(text: str, lang: str) -> Optional[str]:
    s = (text or "").lower()
    if re.search(r"\b([0-2]?\d)\s*(–º–∏–Ω|—Ö–≤|min)\b", s):
        return {"ru":"<3—á","uk":"<3–≥–æ–¥","en":"<3h","es":"<3h"}[lang]
    if re.search(r"\b([0-9]|1\d|2[0-4])\s*(—á–∞—Å|–≥–æ–¥|hour|hr|hora|horas)\b", s):
        n = int(re.search(r"\d+", s).group(0))
        return {"ru":"<3—á" if n<3 else "3‚Äì24—á",
                "uk":"<3–≥–æ–¥" if n<3 else "3‚Äì24–≥–æ–¥",
                "en":"<3h" if n<3 else "3‚Äì24h",
                "es":"<3h" if n<3 else "3‚Äì24h"}[lang]
    if re.search(r"\b(–¥–µ–Ω—å|–¥–Ω—è|day|d√≠a)\b", s):
        return {"ru":">1 –¥–Ω—è","uk":">1 –¥–Ω—è","en":">1 day","es":">1 day"}[lang]
    if re.search(r"\b(—Ç–∏–∂|–Ω–µ–¥–µ–ª|week|semana)\b", s):
        return {"ru":">1 –Ω–µ–¥–µ–ª–∏","uk":">1 —Ç–∏–∂–Ω—è","en":">1 week","es":">1 week"}[lang]
    if re.search(r"\b(—á–∞—Å|–≥–æ–¥|hour|hr|hora)\b", s):
        return {"ru":"3‚Äì24—á","uk":"3‚Äì24–≥–æ–¥","en":"3‚Äì24h","es":"3‚Äì24h"}[lang]
    return None


# -------- Health60 (quick triage) --------
SYS_H60 = (
    "You are TendAI ‚Äî a concise, warm, professional health & longevity assistant (not a doctor). "
    "Always answer strictly in {lang}. Keep it short and practical. "
    "Given a symptom text and a brief user profile, produce a compact JSON ONLY with keys: "
    "{\"causes\": [\"...\"], \"serious\": \"...\", \"do_now\": [\"...\"], \"see_doctor\": [\"...\"]}. "
    "Rules: 2‚Äì4 simple causes (lay language), exactly 1 serious item to rule out, "
    "3‚Äì5 \"do_now\" concrete steps for the next 24‚Äì48h, 2‚Äì3 \"see_doctor\" cues (when to seek care). "
    "No extra keys, no prose outside JSON."
)

def _fmt_bullets(items: list) -> str:
    return "\n".join([f"‚Ä¢ {x}" for x in items if isinstance(x, str) and x.strip()])

def health60_make_plan(lang: str, symptom_text: str, profile: dict) -> str:
    fallback_map = {
        "ru": (
            f"{T['ru']['h60_t1']}:\n‚Ä¢ –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –±—ã—Ç–æ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã\n"
            f"{T['ru']['h60_serious']}: ‚Ä¢ –ò—Å–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∫–∏–µ, –Ω–æ —Å–µ—Ä—å—ë–∑–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏\n\n"
            f"{T['ru']['h60_t2']}:\n‚Ä¢ –í–æ–¥–∞ 300‚Äì500 –º–ª\n‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–¥—ã—Ö 15‚Äì20 –º–∏–Ω\n‚Ä¢ –ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ, –º–µ–Ω—å—à–µ —ç–∫—Ä–∞–Ω–æ–≤\n\n"
            f"{T['ru']['h60_t3']}:\n‚Ä¢ –£—Å–∏–ª–µ–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤\n‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª\n‚Ä¢ –ë–æ–ª—å ‚â•7/10"
        ),
        "uk": (
            f"{T['uk']['h60_t1']}:\n‚Ä¢ –ù–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ –ø–æ–±—É—Ç–æ–≤—ñ –ø—Ä–∏—á–∏–Ω–∏\n"
            f"{T['uk']['h60_serious']}: ‚Ä¢ –í–∏–∫–ª—é—á–∏—Ç–∏ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ, –∞–ª–µ —Å–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–∞–Ω–∏ –ø—Ä–∏ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—ñ\n\n"
            f"{T['uk']['h60_t2']}:\n‚Ä¢ –í–æ–¥–∞ 300‚Äì500 –º–ª\n‚Ä¢ –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ 15‚Äì20 —Ö–≤\n‚Ä¢ –ü—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è, –º–µ–Ω—à–µ –µ–∫—Ä–∞–Ω—ñ–≤\n\n"
            f"{T['uk']['h60_t3']}:\n‚Ä¢ –ü–æ—Å–∏–ª–µ–Ω–Ω—è —Å–∏–º–ø—Ç–æ–º—ñ–≤\n‚Ä¢ –í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/¬´—á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ¬ª\n‚Ä¢ –ë—ñ–ª—å ‚â•7/10"
        ),
        "en": (
            f"{T['en']['h60_t1']}:\n‚Ä¢ Most likely everyday causes\n"
            f"{T['en']['h60_serious']}: ‚Ä¢ Rule out rare but serious issues if worsening\n\n"
            f"{T['en']['h60_t2']}:\n‚Ä¢ Drink 300‚Äì500 ml water\n‚Ä¢ 15‚Äì20 min rest\n‚Ä¢ Ventilate, reduce screens\n\n"
            f"{T['en']['h60_t3']}:\n‚Ä¢ Worsening symptoms\n‚Ä¢ High fever/red flags\n‚Ä¢ Pain ‚â•7/10"
        ),
    }
    fallback = fallback_map.get(lang, fallback_map["en"])

    if not oai:
        return fallback

    sys = SYS_H60.replace("{lang}", lang)
    user = {
        "symptom": (symptom_text or "").strip()[:500],
        "profile": {k: profile.get(k, "") for k in ["sex","age","goal","conditions","meds","sleep","activity","diet","diet_focus","steps_target"]}
    }
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.2,
            max_tokens=420,
            response_format={"type": "json_object"},
            messages=[
                {"role":"system","content": sys},
                {"role":"user","content": json.dumps(user, ensure_ascii=False)}
            ]
        )
        data = json.loads(resp.choices[0].message.content.strip())
        causes = _fmt_bullets(data.get("causes") or [])
        serious = (data.get("serious") or "").strip()
        do_now = _fmt_bullets(data.get("do_now") or [])
        see_doc = _fmt_bullets(data.get("see_doctor") or [])

        parts = []
        if causes:
            parts.append(f"{T[lang]['h60_t1']}:\n{causes}")
        if serious:
            parts.append(f"{T[lang]['h60_serious']}: {serious}")
        if do_now:
            parts.append(f"\n{T[lang]['h60_t2']}:\n{do_now}")
        if see_doc:
            parts.append(f"\n{T[lang]['h60_t3']}:\n{see_doc}")
        return "\n".join(parts).strip()
    except Exception as e:
        logging.error(f"health60 LLM error: {e}")
        return fallback


# ------------- Commands & init -------------
async def post_init(app):
    me = await app.bot.get_me()
    logging.info(f"BOT READY: @{me.username} (id={me.id})")

# >>> Overwrite ask_next_mini to avoid calling gate_show with dummy Update
async def ask_next_mini(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    s = sessions.get(uid, {})
    step_idx = s.get("mini_step", 0)
    if step_idx >= len(MINI_KEYS):
        profiles_upsert(uid, s.get("mini_answers", {}))
        sessions[uid]["mini_active"] = False
        await context.bot.send_message(chat_id, T[lang]["start_where"], reply_markup=inline_topic_kb(lang))
        return
    key = MINI_KEYS[step_idx]
    label = MINI_STEPS[key]["label"][lang]
    await context.bot.send_message(chat_id, label, reply_markup=build_mini_kb(lang, key))


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = norm_lang(getattr(user, "language_code", None))
    users_upsert(user.id, user.username or "", lang)
    context.user_data["lang"] = lang
    sessions.setdefault(user.id, {})["last_user_text"] = "/start"

    await update.message.reply_text(T[lang]["welcome"], reply_markup=ReplyKeyboardRemove())

    # üîé –ú–∏–Ω–∏-–æ–ø—Ä–æ—Å —Å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    prof = profiles_get(user.id)
    if profile_is_incomplete(prof):
        await start_mini_intake(context, update.effective_chat.id, lang, user.id)
    else:
        await update.message.reply_text(T[lang]["start_where"], reply_markup=inline_topic_kb(lang))

    # –°–æ–≥–ª–∞—Å–∏–µ
    u = users_get(user.id)
    if (u.get("consent") or "").lower() not in {"yes","no"}:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang]["yes"], callback_data="consent|yes"),
                                    InlineKeyboardButton(T[lang]["no"], callback_data="consent|no")]])
        await update.message.reply_text(T[lang]["ask_consent"], reply_markup=kb)

    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫–∞–ø
    tz_off = int(str(u.get("tz_offset") or "0"))
    hhmm = (u.get("checkin_hour") or DEFAULT_CHECKIN_LOCAL)
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, user.id, tz_off, hhmm, lang)
    else:
        logging.warning("JobQueue not available on /start ‚Äì daily check-in not scheduled.")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or "en")
    await update.message.reply_text(T[lang]["help"])

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or "en")
    await update.message.reply_text(T[lang]["privacy"])

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "yes")
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text(T[lang]["paused_on"])

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "no")
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text(T[lang]["paused_off"])

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if SHEETS_ENABLED:
        vals = ws_users.get_all_values()
        for i in range(2, len(vals)+1):
            if ws_users.cell(i,1).value == str(uid):
                ws_users.delete_rows(i); break
        # also delete from other sheets (best-effort)
        try:
            vals = ws_profiles.get_all_values()
            for i in range(2, len(vals)+1):
                if ws_profiles.cell(i,1).value == str(uid):
                    ws_profiles.delete_rows(i)
        except: pass
    else:
        MEM_USERS.pop(uid, None); MEM_PROFILES.pop(uid, None)
        global MEM_EPISODES, MEM_REMINDERS, MEM_DAILY
        MEM_EPISODES = [r for r in MEM_EPISODES if r["user_id"]!=str(uid)]
        MEM_REMINDERS = [r for r in MEM_REMINDERS if r["user_id"]!=str(uid)]
        MEM_DAILY = [r for r in MEM_DAILY if r["user_id"]!=str(uid)]
    lang = norm_lang(getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(T[lang]["deleted"], reply_markup=ReplyKeyboardRemove())

async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user, "language_code", None))
    await start_profile_ctx(context, update.effective_chat.id, lang, uid)

async def cmd_settz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    parts = (update.message.text or "").split()
    if len(parts)<2 or not re.fullmatch(r"[+-]?\d{1,2}", parts[1]):
        await update.message.reply_text({"ru":"–§–æ—Ä–º–∞—Ç: /settz +3","uk":"–§–æ—Ä–º–∞—Ç: /settz +2",
                                         "en":"Usage: /settz +3","es":"Uso: /settz +3"}[lang]); return
    off = int(parts[1]); users_set(uid,"tz_offset",str(off))
    hhmm = users_get(uid).get("checkin_hour") or DEFAULT_CHECKIN_LOCAL
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, uid, off, hhmm, lang)
    await update.message.reply_text({"ru":f"–°–¥–≤–∏–≥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {off}—á",
                                     "uk":f"–ó—Å—É–≤: {off} –≥–æ–¥",
                                     "en":f"Timezone offset: {off}h",
                                     "es":f"Desfase horario: {off}h"}[lang])

async def cmd_checkin_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    parts = (update.message.text or "").split(maxsplit=1)
    hhmm = DEFAULT_CHECKIN_LOCAL
    if len(parts)==2:
        m = re.search(r'([01]?\d|2[0-3]):([0-5]\d)', parts[1])
        if m:
            hhmm = m.group(0)
    users_set(uid,"checkin_hour",hhmm)
    tz_off = int(str(users_get(uid).get("tz_offset") or "0"))
    if _has_jq_ctx(context):
        schedule_daily_checkin(context.application, uid, tz_off, hhmm, lang)
    else:
        logging.warning("JobQueue not available ‚Äì daily check-in not scheduled.")
    await update.message.reply_text({"ru":f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤–∫–ª—é—á—ë–Ω ({hhmm}).",
                                     "uk":f"–©–æ–¥–µ–Ω–Ω–∏–π —á–µ–∫-—ñ–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–æ ({hhmm}).",
                                     "en":f"Daily check-in enabled ({hhmm}).",
                                     "es":f"Check-in diario activado ({hhmm})."}[lang])

async def cmd_checkin_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if _has_jq_ctx(context):
        for j in context.application.job_queue.get_jobs_by_name(f"daily_{uid}"):
            j.schedule_removal()
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text({"ru":"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤—ã–∫–ª—é—á–µ–Ω.",
                                     "uk":"–©–æ–¥–µ–Ω–Ω–∏–π —á–µ–∫-—ñ–Ω –≤–∏–º–∫–Ω–µ–Ω–æ.",
                                     "en":"Daily check-in disabled.",
                                     "es":"Check-in diario desactivado."}[lang])

async def cmd_health60(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user, "language_code", None))
    sessions.setdefault(uid, {})["awaiting_h60"] = True
    await update.message.reply_text(T[lang]["h60_intro"])

# === New quick commands (Youth Pack) ===
async def cmd_energy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ö°1", callback_data="energy|1"),
         InlineKeyboardButton("2", callback_data="energy|2"),
         InlineKeyboardButton("3", callback_data="energy|3"),
         InlineKeyboardButton("4", callback_data="energy|4"),
         InlineKeyboardButton("5", callback_data="energy|5")]
    ])
    await update.message.reply_text(T[lang]["gm_energy_q"], reply_markup=kb)

async def cmd_hydrate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    await update.message.reply_text(T[lang]["hydrate_nudge"])

async def cmd_skintip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    prof = profiles_get(uid); lang = norm_lang(users_get(uid).get("lang") or "en")
    age = int(re.search(r"\d+", str(prof.get("age") or "0")).group(0)) if re.search(r"\d+", str(prof.get("age") or "")) else 0
    tip = _get_skin_tip(lang, (prof.get("sex") or ""), age)
    await update.message.reply_text(f"{T[lang]['daily_tip_prefix']} {tip}")

async def cmd_cycle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    sessions.setdefault(uid,{})["awaiting_cycle_consent"] = True
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(T[lang]["yes"], callback_data="cycle|yes"),
                                InlineKeyboardButton(T[lang]["no"], callback_data="cycle|no")]])
    await update.message.reply_text(T[lang]["cycle_consent"], reply_markup=kb)

async def cmd_youth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or "en")
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(T[lang]["hydrate_btn"], callback_data="act|hydration"),
         InlineKeyboardButton(T[lang]["skintip_btn"], callback_data="act|skintip")],
        [InlineKeyboardButton(T[lang]["challenge_btn"], callback_data="act|challenge"),
         InlineKeyboardButton(T[lang]["cycle_btn"], callback_data="act|cycle")],
        [InlineKeyboardButton(T[lang]["set_quiet_btn"], callback_data="act|quiet")]
    ])
    await update.message.reply_text(T[lang]["youth_pack"], reply_markup=kb)

async def cmd_ru(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "ru")
    await update.message.reply_text("–û–∫, –¥–∞–ª—å—à–µ –æ—Ç–≤–µ—á–∞—é –ø–æ-—Ä—É—Å—Å–∫–∏.")

async def cmd_en(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "en")
    await update.message.reply_text("OK, I‚Äôll reply in English.")

async def cmd_uk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "uk")
    await update.message.reply_text("–û–∫, –Ω–∞–¥–∞–ª—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏–º—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.")

async def cmd_es(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_set(update.effective_user.id, "lang", "es")
    await update.message.reply_text("De acuerdo, responder√© en espa√±ol.")


# ------------- Pain / Profile helpers -------------
def detect_or_choose_topic(lang: str, text: str) -> Optional[str]:
    return None

async def start_profile_ctx(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    sessions[uid] = {"profile_active": True, "p_step": 0, "p_wait_key": None}
    await context.bot.send_message(chat_id, T[lang]["profile_intro"], reply_markup=ReplyKeyboardRemove())
    step = PROFILE_STEPS[0]
    kb = build_profile_kb(lang, step["key"], step["opts"][lang])
    await context.bot.send_message(chat_id, T[lang]["p_step_1"], reply_markup=kb)

async def advance_profile_ctx(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, uid: int):
    s = sessions.get(uid, {})
    s["p_step"] += 1
    if s["p_step"] < len(PROFILE_STEPS):
        idx = s["p_step"]; step = PROFILE_STEPS[idx]
        kb = build_profile_kb(lang, step["key"], step["opts"][lang])
        await context.bot.send_message(chat_id, T[lang][f"p_step_{idx+1}"], reply_markup=kb)
        return
    prof = profiles_get(uid); summary=[]
    for k in ["sex","age","goal","conditions","meds","sleep","activity","diet"]:
        v = prof.get(k) or sessions.get(uid,{}).get(k,"")
        if v: summary.append(f"{k}: {v}")
    profiles_upsert(uid, {})
    sessions[uid]["profile_active"] = False
    await context.bot.send_message(chat_id, T[lang]["saved_profile"] + "; ".join(summary))
    await context.bot.send_message(chat_id, T[lang]["start_where"], reply_markup=inline_topic_kb(lang))

def personalized_prefix(lang: str, profile: dict) -> str:
    sex = profile.get("sex") or ""
    age = profile.get("age") or ""
    goal = profile.get("goal") or ""
    if not (sex or age or goal):
        return ""
    return T[lang]["px"].format(sex=sex or "‚Äî", age=age or "‚Äî", goal=goal or "‚Äî")


# ------------- Plans / Serious conditions -------------
def pain_plan(lang: str, red_flags_selected: List[str], profile: dict) -> List[str]:
    flg = [s for s in red_flags_selected if s and str(s).lower() not in ["none","–Ω–µ—Ç","–Ω–µ–º–∞—î","ninguno","no"]]
    if flg:
        return {
            "ru":["‚ö†Ô∏è –ï—Å—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏. –õ—É—á—à–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –≤—Ä–∞—á—É/–≤ —Å–∫–æ—Ä—É—é."],
            "uk":["‚ö†Ô∏è –Ñ —Ç—Ä–∏–≤–æ–∂–Ω—ñ –æ–∑–Ω–∞–∫–∏. –í–∞—Ä—Ç–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è/—à–≤–∏–¥–∫–æ—ó."],
            "en":["‚ö†Ô∏è Red flags present. Please seek urgent medical evaluation."],
            "es":["‚ö†Ô∏è Se√±ales de alarma presentes. Busca evaluaci√≥n m√©dica urgente."]
        }[lang]
    age = int(re.search(r"\d+", str(profile.get("age") or "0")).group(0)) if re.search(r"\d+", str(profile.get("age") or "")) else 0
    extra = []
    if age >= 60:
        extra.append({
            "ru":"–í–∞–º 60+, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –ù–ü–í–ü; –ø–µ–π—Ç–µ –≤–æ–¥—É –∏ –ø—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É.",
            "uk":"–í–∞–º 60+, –æ–±–µ—Ä–µ–∂–Ω–æ –∑ –ù–ü–ó–ó; –ø–∏–π—Ç–µ –≤–æ–¥—É, –∑–∞ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è ‚Äî –¥–æ –ª—ñ–∫–∞—Ä—è.",
            "en":"Age 60+: be careful with NSAIDs; hydrate and seek care if worsening.",
            "es":"Edad 60+: cuidado con AINEs; hidr√°tate y busca atenci√≥n si empeora."
        }[lang])
    core = {
        "ru":[
            "1) –í–æ–¥–∞ 400‚Äì600 –º–ª –∏ 15‚Äì20 –º–∏–Ω —Ç–∏—à–∏–Ω—ã/–æ—Ç–¥—ã—Ö–∞.",
            "2) –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –∏–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ —Å –µ–¥–æ–π.",
            "3) –ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å, —É–º–µ–Ω—å—à–∏—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞ 30‚Äì60 –º–∏–Ω.",
            "–¶–µ–ª—å: –∫ –≤–µ—á–µ—Ä—É –±–æ–ª—å ‚â§3/10."
        ],
        "uk":[
            "1) –í–æ–¥–∞ 400‚Äì600 –º–ª —ñ 15‚Äì20 —Ö–≤ —Å–ø–æ–∫–æ—é.",
            "2) –Ø–∫—â–æ –Ω–µ–º–∞ –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω—å ‚Äî —ñ–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –∑ —ó–∂–µ—é.",
            "3) –ü—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏, –º–µ–Ω—à–µ –µ–∫—Ä–∞–Ω—É 30‚Äì60 —Ö–≤.",
            "–ú–µ—Ç–∞: –¥–æ –≤–µ—á–æ—Ä–∞ –±—ñ–ª—å ‚â§3/10."
        ],
        "en":[
            "1) Drink 400‚Äì600 ml water; rest 15‚Äì20 min.",
            "2) If no contraindications ‚Äî ibuprofen 200‚Äì400 mg once with food.",
            "3) Air the room; reduce screen time 30‚Äì60 min.",
            "Goal: by evening pain ‚â§3/10."
        ],
        "es":[
            "1) Bebe 400‚Äì600 ml de agua; descansa 15‚Äì20 min.",
            "2) Si no hay contraindicaciones ‚Äî ibuprofeno 200‚Äì400 mg una vez con comida.",
            "3) Ventila la habitaci√≥n; reduce pantallas 30‚Äì60 min.",
            "Meta: por la tarde dolor ‚â§3/10."
        ],
    }[lang]
    return core + extra + [T[lang]["er_text"]]

SERIOUS_KWS = {
    "diabetes": ["diabetes","–¥–∏–∞–±–µ—Ç","—Å–∞—Ö–∞—Ä–Ω—ã–π","—Ü—É–∫—Ä–æ–≤", "–≥–ª—é–∫–æ–∑–∞", "hba1c", "–≥–ª–∏–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π","–≥–ª—é–∫–æ–∑–∞"],
    "hepatitis": ["hepatitis","–≥–µ–ø–∞—Ç–∏—Ç","–ø–µ—á–µ–Ω—å hbs","hcv","alt","ast"],
    "cancer": ["cancer","—Ä–∞–∫","–æ–Ω–∫–æ","–æ–Ω–∫–æ–ª–æ–≥","–æ–ø—É—Ö–æ–ª","–ø—É—Ö–ª–∏–Ω–∞","tumor"],
   
