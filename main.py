# -*- coding: utf-8 -*-
import os, re, json, uuid, logging
from time import time
from datetime import datetime, timedelta, timezone

from dotenv import load_dotenv

# langdetect –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
try:
    from langdetect import detect, DetectorFactory
    DetectorFactory.seed = 0
except Exception:
    detect = None

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ===== OpenAI =====
try:
    from openai import OpenAI
except Exception:
    OpenAI = None

# ===== Google Sheets =====
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# =========================
# Boot & Config
# =========================
load_dotenv()
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")  # ‚Üê –ø–æ—Å—Ç–∞–≤—å gpt-5 –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
SHEET_NAME = os.getenv("SHEET_NAME", "TendAI Feedback")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is missing")

# OpenAI client
oai = OpenAI(api_key=OPENAI_API_KEY) if (OPENAI_API_KEY and OpenAI) else None
logging.info(f"OPENAI enabled: {bool(OPENAI_API_KEY)} | client: {bool(oai)} | model: {OPENAI_MODEL}")

# Google Sheets init
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
if not creds_json:
    raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
creds_dict = json.loads(creds_json)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gclient = gspread.authorize(credentials)
ss = gclient.open(SHEET_NAME)

def _get_or_create_ws(title: str, headers: list[str]):
    try:
        ws = ss.worksheet(title)
    except gspread.WorksheetNotFound:
        ws = ss.add_worksheet(title=title, rows=2000, cols=20)
        ws.append_row(headers)
    vals = ws.get_all_values()
    if not vals:
        ws.append_row(headers)
    return ws

ws_feedback = _get_or_create_ws(
    "Feedback", ["timestamp", "user_id", "name", "username", "rating", "comment"]
)
ws_users = _get_or_create_ws(
    "Users", ["user_id", "username", "lang", "consent", "tz_offset", "checkin_hour", "paused"]
)
ws_episodes = _get_or_create_ws(
    "Episodes",
    [
        "episode_id", "user_id", "topic", "started_at",
        "baseline_severity", "red_flags", "plan_accepted",
        "target", "reminder_at", "next_checkin_at",
        "status", "last_update", "notes",
    ],
)

# =========================
# State (RAM)
# =========================
sessions: dict[int, dict] = {}

# =========================
# i18n
# =========================
SUPPORTED = {"ru", "en", "uk", "es"}
def norm_lang(code: str | None) -> str:
    if not code:
        return "en"
    c = code.split("-")[0].lower()
    if c.startswith("ua"):
        c = "uk"
    return c if c in SUPPORTED else "en"

T = {
    "en": {
        "welcome": "Hi! I‚Äôm TendAI ‚Äî your health & longevity assistant.\nChoose a topic below or briefly tell me what‚Äôs going on.",
        "menu": ["Pain", "Throat/Cold", "Sleep", "Stress", "Digestion", "Energy"],
        "help": "I help with short checkups, a 24‚Äì48h plan, and gentle follow-ups.\nCommands: /help, /privacy, /pause, /resume, /delete_data, /lang, /feedback",
        "privacy": "TendAI isn‚Äôt a medical service. We store minimal data for reminders. /delete_data to erase.",
        "paused_on": "Notifications paused. Use /resume to enable.",
        "paused_off": "Notifications resumed.",
        "deleted": "All your data was deleted. You can /start again anytime.",
        "ask_consent": "May I check in with you later about how you feel?",
        "yes": "Yes", "no": "No",
        "plan_header": "Your 24‚Äì48h plan:",
        "plan_accept": "Will you try this today?",
        "accept_opts": ["‚úÖ Yes", "üîÅ Later", "‚úñÔ∏è No"],
        "remind_when": "When shall I check on you?",
        "remind_opts": ["in 4h", "this evening", "tomorrow morning", "no need"],
        "thanks": "Got it üôå",
        "checkin_ping": "Quick check-in: how is it now (0‚Äì10)?",
        "checkin_better": "Nice! Keep it up üí™",
        "checkin_worse": "Sorry to hear. If you have red flags or pain ‚â•7/10, please consider medical help.",
        "comment_prompt": "Write your comment now. Or send /skip to pass.",
        "comment_saved": "Feedback saved, thank you! üôå",
        "skip_ok": "Skipped.",
        "help_lang": "Use /lang ru|en|uk|es to change language.",
        "oos": "I‚Äôm here for health, self-care and habits. Tell me what‚Äôs going on or pick a topic below.",
        "fb_prompt": "Would you like to leave quick feedback?",
        "fb_thanks": "Thanks for your feedback! üíõ",
        "fb_like": "üëç Useful",
        "fb_dislike": "üëé Didn‚Äôt help",
        "fb_write": "‚úçÔ∏è Write a comment",
    },
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! –Ø TendAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –Ω–∏–∂–µ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç.",
        "menu": ["–ë–æ–ª—å", "–ì–æ—Ä–ª–æ/–ø—Ä–æ—Å—Ç—É–¥–∞", "–°–æ–Ω", "–°—Ç—Ä–µ—Å—Å", "–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ", "–≠–Ω–µ—Ä–≥–∏—è"],
        "help": "–ü–æ–º–æ–≥–∞—é –∫–æ—Ä–æ—Ç–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π, –ø–ª–∞–Ω–æ–º –Ω–∞ 24‚Äì48 —á –∏ –±–µ—Ä–µ–∂–Ω—ã–º–∏ —á–µ–∫-–∏–Ω–∞–º–∏.\n–ö–æ–º–∞–Ω–¥—ã: /help, /privacy, /pause, /resume, /delete_data, /lang, /feedback",
        "privacy": "TendAI –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞. –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. /delete_data ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å—ë.",
        "paused_on": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ø–∞—É–∑–µ. –í–∫–ª—é—á–∏—Ç—å: /resume",
        "paused_off": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.",
        "deleted": "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.",
        "ask_consent": "–ú–æ–∂–Ω–æ —è –Ω–∞–ø–∏—à—É –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?",
        "yes": "–î–∞", "no": "–ù–µ—Ç",
        "plan_header": "–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 —á–∞—Å–æ–≤:",
        "plan_accept": "–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
        "accept_opts": ["‚úÖ –î–∞", "üîÅ –ü–æ–∑–∂–µ", "‚úñÔ∏è –ù–µ—Ç"],
        "remind_when": "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
        "remind_opts": ["—á–µ—Ä–µ–∑ 4 —á–∞—Å–∞", "–≤–µ—á–µ—Ä–æ–º", "–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º", "–Ω–µ –Ω–∞–¥–æ"],
        "thanks": "–ü—Ä–∏–Ω—è—Ç–æ üôå",
        "checkin_ping": "–ö–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ 0‚Äì10?",
        "checkin_better": "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üí™",
        "checkin_worse": "–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å ¬´–∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏¬ª –∏–ª–∏ –±–æ–ª—å ‚â•7/10 ‚Äî –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.",
        "comment_prompt": "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–µ–π—á–∞—Å. –ò–ª–∏ /skip ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        "comment_saved": "–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å–ø–∞—Å–∏–±–æ! üôå",
        "skip_ok": "–ü—Ä–æ–ø—É—â–µ–Ω–æ.",
        "help_lang": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lang ru|en|uk|es —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫.",
        "oos": "–Ø –∑–¥–µ—Å—å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è, —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –∏ –ø—Ä–∏–≤—ã—á–µ–∫. –û–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–Ω–∏–∑—É.",
        "fb_prompt": "–û—Å—Ç–∞–≤–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∑—ã–≤?",
        "fb_thanks": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíõ",
        "fb_like": "üëç –ü–æ–ª–µ–∑–Ω–æ",
        "fb_dislike": "üëé –ù–µ –ø–æ–º–æ–≥–ª–æ",
        "fb_write": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤",
    },
    "uk": {
        "welcome": "–ü—Ä–∏–≤—ñ—Ç! –Ø TendAI ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è.\n–û–±–µ—Ä–∏ —Ç–µ–º—É –∞–±–æ –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏, —â–æ —Ç—É—Ä–±—É—î.",
        "menu": ["–ë—ñ–ª—å", "–ì–æ—Ä–ª–æ/–∑–∞—Å—Ç—É–¥–∞", "–°–æ–Ω", "–°—Ç—Ä–µ—Å", "–¢—Ä–∞–≤–ª–µ–Ω–Ω—è", "–ï–Ω–µ—Ä–≥—ñ—è"],
        "help": "–î–æ–ø–æ–º–∞–≥–∞—é –∫–æ—Ä–æ—Ç–∫–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é, –ø–ª–∞–Ω–æ–º –Ω–∞ 24‚Äì48 –≥–æ–¥ —ñ —á–µ–∫–∞–º–∏.\n–ö–æ–º–∞–Ω–¥–∏: /help, /privacy, /pause, /resume, /delete_data, /lang, /feedback",
        "privacy": "TendAI –Ω–µ –∑–∞–º—ñ–Ω—é—î –ª—ñ–∫–∞—Ä—è. /delete_data ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å–µ.",
        "paused_on": "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ. –£–≤—ñ–º–∫–Ω—É—Ç–∏: /resume",
        "paused_off": "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω–µ–Ω—ñ.",
        "deleted": "–î–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ. –ú–æ–∂–Ω–∞ /start –∑–Ω–æ–≤—É.",
        "ask_consent": "–ú–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ –≤–∏?",
        "yes": "–¢–∞–∫", "no": "–ù—ñ",
        "plan_header": "–í–∞—à –ø–ª–∞–Ω –Ω–∞ 24‚Äì48 –≥–æ–¥:",
        "plan_accept": "–°–ø—Ä–æ–±—É—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "accept_opts": ["‚úÖ –¢–∞–∫", "üîÅ –ü—ñ–∑–Ω—ñ—à–µ", "‚úñÔ∏è –ù—ñ"],
        "remind_when": "–ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏ —Ç–∞ —Å–ø–∏—Ç–∞—Ç–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è?",
        "remind_opts": ["—á–µ—Ä–µ–∑ 4 –≥–æ–¥", "—É–≤–µ—á–µ—Ä—ñ", "–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ", "–Ω–µ —Ç—Ä–µ–±–∞"],
        "thanks": "–ü—Ä–∏–π–Ω—è—Ç–æ üôå",
        "checkin_ping": "–ö–æ—Ä–æ—Ç–∫–æ: —è–∫ –∑–∞—Ä–∞–∑ (0‚Äì10)?",
        "checkin_better": "–ß—É–¥–æ–≤–æ! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ üí™",
        "checkin_worse": "–Ø–∫—â–æ —î ¬´—á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ¬ª –∞–±–æ –±—ñ–ª—å ‚â•7/10 ‚Äî –∫—Ä–∞—â–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.",
        "comment_prompt": "–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –∑–∞—Ä–∞–∑. /skip ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.",
        "comment_saved": "–í—ñ–¥–≥—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –¥—è–∫—É—î–º–æ! üôå",
        "skip_ok": "–ü—Ä–æ–ø—É—â–µ–Ω–æ.",
        "help_lang": "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /lang ru|en|uk|es —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É.",
        "oos": "–Ø —Ç—É—Ç –¥–ª—è —Ç–µ–º –ø—Ä–æ –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ —Å–∞–º–æ–ø—ñ–∫–ª—É–≤–∞–Ω–Ω—è. –û–ø–∏—à—ñ—Ç—å, —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è, –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –Ω–∏–∂—á–µ.",
        "fb_prompt": "–ó–∞–ª–∏—à–∏—Ç–∏ —à–≤–∏–¥–∫–∏–π –≤—ñ–¥–≥—É–∫?",
        "fb_thanks": "–î—è–∫—É—î–º–æ! üíõ",
        "fb_like": "üëç –ö–æ—Ä–∏—Å–Ω–æ",
        "fb_dislike": "üëé –ù–µ –¥–æ–ø–æ–º–æ–≥–ª–æ",
        "fb_write": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫",
    },
    "es": {
        "welcome": "¬°Hola! Soy TendAI, tu asistente de salud y longevidad.\nElige un tema o cu√©ntame brevemente qu√© pasa.",
        "menu": ["Dolor", "Garganta/Resfriado", "Sue√±o", "Estr√©s", "Digesti√≥n", "Energ√≠a"],
        "help": "Chequeos breves, plan 24‚Äì48 h y seguimientos.\nComandos: /help, /privacy, /pause, /resume, /delete_data, /lang, /feedback",
        "privacy": "TendAI no sustituye a un m√©dico. /delete_data para borrar.",
        "paused_on": "Recordatorios pausados. /resume para activarlos.",
        "paused_off": "Recordatorios activados.",
        "deleted": "Datos borrados. Puedes /start de nuevo.",
        "ask_consent": "¬øPuedo escribirte m√°s tarde para saber c√≥mo sigues?",
        "yes": "S√≠", "no": "No",
        "plan_header": "Tu plan para 24‚Äì48 h:",
        "plan_accept": "¬øLo intentas hoy?",
        "accept_opts": ["‚úÖ S√≠", "üîÅ M√°s tarde", "‚úñÔ∏è No"],
        "remind_when": "¬øCu√°ndo te escribo para revisar?",
        "remind_opts": ["en 4 h", "esta tarde", "ma√±ana por la ma√±ana", "no hace falta"],
        "thanks": "¬°Hecho! üôå",
        "checkin_ping": "Revisi√≥n r√°pida: ¬øc√≥mo est√°s ahora (0‚Äì10)?",
        "checkin_better": "¬°Bien! Sigue as√≠ üí™",
        "checkin_worse": "Si hay se√±ales de alarma o dolor ‚â•7/10, considera atenci√≥n m√©dica.",
        "comment_prompt": "Escribe tu comentario ahora. /skip para omitir.",
        "comment_saved": "¬°Comentario guardado, gracias! üôå",
        "skip_ok": "Omitido.",
        "help_lang": "Usa /lang ru|en|uk|es para cambiar idioma.",
        "oos": "Estoy para temas de salud y autocuidado. Cu√©ntame o elige un tema abajo.",
        "fb_prompt": "¬øOpini√≥n r√°pida?",
        "fb_thanks": "¬°Gracias! üíõ",
        "fb_like": "üëç √ötil",
        "fb_dislike": "üëé No ayud√≥",
        "fb_write": "‚úçÔ∏è Escribir comentario",
    },
}
def t(lang: str, key: str) -> str:
    return T.get(lang, T["en"]).get(key, T["en"].get(key, key))

# ===== bottom keyboards
CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
def _rkm(rows): return ReplyKeyboardMarkup(rows, resize_keyboard=True)
def main_menu(lang: str): 
    m=T[lang]["menu"]; return _rkm([m[:3], m[3:]])
def kb_numbers(): 
    nums=[str(i) for i in range(11)]; return _rkm([nums[:6], nums[6:], [CANCEL]])
def kb_accept(lang: str): 
    a=T[lang]["accept_opts"]; return _rkm([a, [CANCEL]])
def kb_remind(lang: str):
    r=T[lang]["remind_opts"]; rows=[r[:2], r[2:], [CANCEL]]; return _rkm(rows)
def kb_yesno(lang: str): return _rkm([[t(lang,"yes"), t(lang,"no")],[CANCEL]])
def kb_feedback(lang:str): return _rkm([[t(lang,"fb_like"), t(lang,"fb_dislike")],[t(lang,"fb_write")],[CANCEL]])

# =========================
# Sheets helpers
# =========================
def utcnow(): return datetime.now(timezone.utc)
def iso(dt: datetime | None) -> str:
    if not dt: return ""
    return dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

def users_get_row_index(user_id: int) -> int | None:
    vals = ws_users.get_all_records()
    for i, row in enumerate(vals, start=2):
        if str(row.get("user_id")) == str(user_id):
            return i
    return None
def users_get(user_id: int) -> dict:
    vals = ws_users.get_all_records()
    for row in vals:
        if str(row.get("user_id")) == str(user_id):
            return row
    return {}
def users_upsert(user_id: int, username: str, lang: str):
    idx = users_get_row_index(user_id)
    row = [str(user_id), username or "", lang, "no", "0", "", "no"]
    if idx: ws_users.update(f"A{idx}:G{idx}", [row])
    else: ws_users.append_row(row)
def users_set(user_id: int, field: str, value: str):
    idx = users_get_row_index(user_id); 
    if not idx: return
    headers = ws_users.row_values(1)
    if field in headers:
        col = headers.index(field) + 1
        ws_users.update_cell(idx, col, value)

def episode_create(user_id: int, topic: str, baseline_severity: int, red_flags: str) -> str:
    eid = f"{user_id}-{uuid.uuid4().hex[:8]}"
    now = iso(utcnow())
    ws_episodes.append_row([
        eid, str(user_id), topic, now,
        str(baseline_severity), red_flags, "0", "<=3/10",
        "", "", "open", now, ""
    ])
    return eid
def episode_find_open(user_id: int) -> dict | None:
    vals = ws_episodes.get_all_records()
    for row in vals:
        if str(row.get("user_id")) == str(user_id) and row.get("status") == "open":
            return row
    return None
def episode_set(eid: str, field: str, value: str):
    vals = ws_episodes.get_all_values()
    headers = vals[0]
    if field not in headers: return
    col = headers.index(field) + 1
    for i in range(2, len(vals) + 1):
        if ws_episodes.cell(i, 1).value == eid:
            ws_episodes.update_cell(i, col, value)
            ws_episodes.update_cell(i, headers.index("last_update") + 1, iso(utcnow()))
            return

def schedule_from_sheet_on_start(app):
    vals = ws_episodes.get_all_records()
    now = utcnow()
    for row in vals:
        if row.get("status") != "open": continue
        eid = row.get("episode_id"); uid = int(row.get("user_id"))
        nca = row.get("next_checkin_at") or ""
        if not nca: continue
        try: dt = datetime.strptime(nca, "%Y-%m-%d %H:%M:%S%z")
        except Exception: continue
        delay = (dt - now).total_seconds()
        if delay < 60: delay = 60
        app.job_queue.run_once(job_checkin, when=delay, data={"user_id": uid, "episode_id": eid})

# =========================
# Helpers
# =========================
def send_once(uid: int, key: str, now_ts: float, cooldown: float = 8.0) -> bool:
    s = sessions.setdefault(uid, {})
    last = s.get("last_send", {})
    ts = last.get(key, 0.0)
    if now_ts - ts >= cooldown:
        last[key] = now_ts
        s["last_send"] = last
        sessions[uid] = s
        return True
    return False

# ===== LLM =====
def _json_from_text(raw: str) -> dict:
    try:
        m = re.search(r"\{[\s\S]*\}", raw)
        return json.loads(m.group(0)) if m else json.loads(raw)
    except Exception:
        return {}

def llm_route(uid: int, lang: str, user_text: str) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON:
      assistant: —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ—Ä–æ—Ç–∫–æ, —Ç–µ–ø–ª–æ),
      stage: one of [followup, plan_ready, escalate, out],
      slots: {intent, loc, kind, duration, severity, red}
    """
    if not oai:
        return {}
    hist = sessions.setdefault(uid, {}).setdefault("chat_history", [])[-8:]
    sys = (
        "You are TendAI, a warm health & self-care assistant. "
        "Speak naturally in the user's language, max 4 sentences, supportive, no diagnoses. "
        "When info is missing, ask one specific question to progress. "
        "Also extract triage fields. Return ONLY JSON with keys: "
        "assistant (string), stage (followup|plan_ready|escalate|out), "
        "slots (object with optional keys: intent in [pain, throat, sleep, stress, digestion, energy]; "
        "loc in [Head, Throat, Back, Belly, Chest, Other]; kind in [Dull, Sharp, Throbbing, Burning, Pressing]; "
        "duration in [\"<3h\",\"3‚Äì24h\",\">1 day\",\">1 week\"] or free text; "
        "severity int 0..10; red in [\"High fever\",\"Vomiting\",\"Weakness/numbness\",\"Speech/vision issues\",\"Trauma\",\"None\"])."
    )
    msgs = [{"role":"system","content":sys}] + hist + [{"role":"user","content":f"[lang={lang}] {user_text}"}]
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.2,
            max_tokens=400,
            messages=msgs,
        )
        raw = (resp.choices[0].message.content or "").strip()
        j = _json_from_text(raw)
        if not isinstance(j, dict): j = {}
        # save compact history with assistant natural text (not JSON)
        a = j.get("assistant", "")
        hist.append({"role":"user","content":user_text})
        hist.append({"role":"assistant","content":a[:1000]})
        sessions[uid]["chat_history"] = hist[-10:]
        return j
    except Exception as e:
        logging.warning(f"LLM error: {e}")
        return {}

# ===== Plans / Hypotheses
def build_hypotheses(lang: str, ans: dict) -> list[tuple[str,float,str]]:
    loc = (ans.get("loc") or "").lower()
    kind = (ans.get("kind") or "").lower()
    duration = (ans.get("duration") or "").lower()
    sev = int(ans.get("severity", 5))
    H=[]
    def add(name,score,because): H.append((name,float(score),because))

    if "head" in loc or "–≥–æ–ª–æ–≤–∞" in loc or "cabeza" in loc:
        if "throbb" in kind or "–ø—É–ª—å—Å" in kind: add("Migraine-like", 0.7 + 0.05*(sev>=6), "Throbbing + moderate/severe")
        if "press" in kind or "tight" in kind or "–¥–∞–≤" in kind: add("Tension-type", 0.6, "Pressing/tight")
        if "3‚Äì24" in duration or ">1 day" in duration or ">1 –¥–Ω—è" in duration: add("Tension/sinus", 0.4, "Many hours")

    if "back" in loc or "—Å–ø–∏–Ω–∞" in loc or "espalda" in loc:
        if "shoot" in kind or "–ø—Ä–æ—Å—Ç—Ä–µ–ª" in kind: add("Radicular pain", 0.7, "Shooting below knee/‚Äò–ø—Ä–æ—Å—Ç—Ä–µ–ª‚Äô")
        else: add("Mechanical low back pain", 0.6, "Typical without red flags")

    if "belly" in loc or "–∂–∏–≤–æ—Ç" in loc or "abdomen" in loc or "stomach" in loc or "vientre" in loc:
        add("Dyspepsia/gastritis-like", 0.5, "Common benign causes if no red flags")

    if "chest" in loc or "–≥—Ä—É–¥" in loc or "pecho" in loc:
        add("Pleuritic/musculoskeletal vs respiratory", 0.6, "Depends on cough/pressure/breath")

    if "throat" in loc or "–≥–æ—Ä–ª–æ" in loc or "garganta" in loc:
        add("Viral sore throat", 0.6, "Common viral pattern")

    H.sort(key=lambda x:x[1], reverse=True)
    return H[:3]

def pain_plan(lang: str, ans: dict, hyps: list[tuple[str,float,str]]) -> list[str]:
    red = (ans.get("red") or "").lower()
    urgent = any(s in red for s in ["fever", "vomit", "weakness", "speech", "vision", "—Ç—Ä–∞–≤–º", "trauma"]) and (ans.get("severity", 0) >= 7)
    for name, score, because in hyps:
        if "Urgent" in name or "cardiac" in name or "Neurologic" in name or "red flag" in name:
            urgent = True
    if urgent:
        return {
            "ru": ["‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ–π —É–≥—Ä–æ–∑—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â—å—é."],
            "uk": ["‚ö†Ô∏è –Ñ –æ–∑–Ω–∞–∫–∏ –º–æ–∂–ª–∏–≤–æ—ó –∑–∞–≥—Ä–æ–∑–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –ø–æ –º–µ–¥–∏—á–Ω—É –¥–æ–ø–æ–º–æ–≥—É."],
            "en": ["‚ö†Ô∏è Some answers suggest urgent risks. Please seek medical care as soon as possible."],
            "es": ["‚ö†Ô∏è Hay se√±ales de posible urgencia. Por favor busca atenci√≥n m√©dica lo antes posible."],
        }[lang]

    base = {
        "ru": [
            "1) –í–æ–¥–∞ 400‚Äì600 –º–ª –∏ 15‚Äì20 –º–∏–Ω—É—Ç –ø–æ–∫–æ—è –≤ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ.",
            "2) –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –∏–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ 1 —Ä–∞–∑ —Å –µ–¥–æ–π.",
            "3) –ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏ —Å–Ω–∏–∑–∏—Ç—å —ç–∫—Ä–∞–Ω—ã –Ω–∞ 30‚Äì60 –º–∏–Ω—É—Ç.",
            "–¶–µ–ª—å: –∫ –≤–µ—á–µ—Ä—É –±–æ–ª—å ‚â§3/10.",
        ],
        "uk": [
            "1) 400‚Äì600 –º–ª –≤–æ–¥–∏ —ñ 15‚Äì20 —Ö–≤ —Ç–∏—à—ñ/–≤—ñ–¥–ø–æ—á–∏–Ω–∫—É.",
            "2) –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω—å ‚Äî —ñ–±—É–ø—Ä–æ—Ñ–µ–Ω 200‚Äì400 –º–≥ 1 —Ä–∞–∑ —ñ–∑ —ó–∂–µ—é.",
            "3) –ü—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É; –º–µ–Ω—à–µ –µ–∫—Ä–∞–Ω—ñ–≤ 30‚Äì60 —Ö–≤.",
            "–ú–µ—Ç–∞: –¥–æ –≤–µ—á–æ—Ä–∞ –±—ñ–ª—å ‚â§3/10.",
        ],
        "en": [
            "1) Drink 400‚Äì600 ml of water and rest 15‚Äì20 minutes in a quiet place.",
            "2) If no contraindications ‚Äî ibuprofen 200‚Äì400 mg once with food.",
            "3) Air the room; reduce screen time for 30‚Äì60 minutes.",
            "Target: by evening pain ‚â§3/10.",
        ],
        "es": [
            "1) Bebe 400‚Äì600 ml de agua y descansa 15‚Äì20 min en un lugar tranquilo.",
            "2) Si no hay contraindicaciones ‚Äî ibuprofeno 200‚Äì400 mg una vez con comida.",
            "3) Ventila la habitaci√≥n; menos pantallas 30‚Äì60 min.",
            "Objetivo: por la tarde dolor ‚â§3/10.",
        ],
    }
    loc = (ans.get("loc") or "").lower()
    if "back" in loc or "—Å–ø–∏–Ω–∞" in loc or "espalda" in loc:
        extra = {"ru":["4) –¢—ë–ø–ª—ã–π –∫–æ–º–ø—Ä–µ—Å—Å 10‚Äì15 –º–∏–Ω 2‚Äì3—Ä/–¥–µ–Ω—å, –º—è–≥–∫–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è."],
                 "uk":["4) –¢–µ–ø–ª–∏–π –∫–æ–º–ø—Ä–µ—Å 10‚Äì15 —Ö–≤ 2‚Äì3—Ä/–¥–µ–Ω—å, –º‚Äô—è–∫–∞ –º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—è."],
                 "en":["4) Warm compress 10‚Äì15 min 2‚Äì3√ó/day, gentle mobility."],
                 "es":["4) Compresa tibia 10‚Äì15 min 2‚Äì3√ó/d√≠a, movilidad suave."]}[lang]
        return base[lang] + extra
    if "throat" in loc or "–≥–æ—Ä–ª–æ" in loc or "garganta" in loc:
        extra = {"ru":["4) –¢—ë–ø–ª–æ–µ –ø–∏—Ç—å—ë; –ø–æ–ª–æ—Å–∫–∞–Ω–∏–µ —Å–æ–ª–µ–≤—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º 3‚Äì4—Ä/–¥–µ–Ω—å."],
                 "uk":["4) –¢–µ–ø–ª—ñ –Ω–∞–ø–æ—ó; –ø–æ–ª–æ—Å–∫–∞–Ω–Ω—è —Å–æ–ª—å–æ–≤–∏–º —Ä–æ–∑—á–∏–Ω–æ–º 3‚Äì4—Ä/–¥–µ–Ω—å."],
                 "en":["4) Warm fluids; saline gargles 3‚Äì4√ó/day."],
                 "es":["4) L√≠quidos tibios; g√°rgaras salinas 3‚Äì4√ó/d√≠a."]}[lang]
        return base[lang] + extra
    return base[lang]

# =========================
# Jobs (check-ins)
# =========================
async def job_checkin(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data or {}
    uid = data.get("user_id"); eid = data.get("episode_id")
    if not uid or not eid: return
    u = users_get(uid)
    if (u.get("paused") or "").lower() == "yes": return
    lang = u.get("lang") or "en"
    try:
        await context.bot.send_message(uid, t(lang, "checkin_ping"), reply_markup=kb_numbers())
        s = sessions.setdefault(uid, {})
        s["await_step"] = "checkin"; s["episode_id"] = eid
        episode_set(eid, "next_checkin_at", "")
    except Exception as e:
        logging.error(f"job_checkin send error: {e}")

# =========================
# Commands
# =========================
async def on_startup(app):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        logging.info("Webhook cleared")
    except Exception:
        pass
    schedule_from_sheet_on_start(app)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = users_get(user.id).get("lang")
    if not lang:
        txt = (update.message.text or "").strip() if update.message else ""
        cand = None
        if detect:
            try: cand = detect(txt) if txt else None
            except Exception: cand = None
        lang = norm_lang(cand or getattr(user, "language_code", None))
        users_upsert(user.id, user.username or "", lang)
    await update.message.reply_text(t(lang, "welcome"), reply_markup=main_menu(lang))
    u = users_get(user.id)
    if (u.get("consent") or "").lower() not in {"yes","no"}:
        s = sessions.setdefault(user.id, {})
        s["awaiting_consent"] = True
        await update.message.reply_text(t(lang, "ask_consent"), reply_markup=kb_yesno(lang))

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang, "help"), reply_markup=main_menu(lang))

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = norm_lang(users_get(update.effective_user.id).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang, "privacy"))

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "yes")
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang, "paused_on"))

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; users_set(uid, "paused", "no")
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
    await update.message.reply_text(t(lang, "paused_off"))

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    idx = users_get_row_index(uid)
    if idx: ws_users.delete_rows(idx)
    vals = ws_episodes.get_all_values(); to_delete=[]
    for i in range(2, len(vals)+1):
        if ws_episodes.cell(i,2).value == str(uid): to_delete.append(i)
    for j, row_i in enumerate(to_delete): ws_episodes.delete_rows(row_i - j)
    lang = norm_lang(getattr(update.effective_user, "language_code", None))
    await update.message.reply_text(t(lang, "deleted"), reply_markup=ReplyKeyboardRemove())

async def cmd_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
        await update.message.reply_text(t(lang, "help_lang"))
        return
    candidate = norm_lang(context.args[0])
    if candidate not in SUPPORTED:
        cur = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
        await update.message.reply_text(t(cur, "help_lang"))
        return
    users_set(uid, "lang", candidate)
    await update.message.reply_text("‚úÖ", reply_markup=main_menu(candidate))

async def cmd_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    s = sessions.get(uid, {})
    if s.get("awaiting_comment"):
        s["awaiting_comment"] = False; s["feedback_context"]=""
        lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
        await update.message.reply_text(t(lang, "skip_ok"))
    else:
        lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
        await update.message.reply_text("üëå", reply_markup=main_menu(lang))

async def cmd_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = norm_lang(users_get(uid).get("lang") or getattr(update.effective_user,"language_code",None))
    s = sessions.setdefault(uid, {})
    s["awaiting_feedback_choice"] = True; s["feedback_context"] = "general"
    await update.message.reply_text(t(lang, "fb_prompt"), reply_markup=kb_feedback(lang))

# =========================
# Callback (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
# =========================
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É üëá")

# =========================
# Text handler (CHAT-FIRST)
# =========================
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; uid = user.id
    text = (update.message.text or "").strip()

    # —è–∑—ã–∫
    urec = users_get(uid)
    if not urec:
        cand = None
        if detect:
            try: cand = detect(text) if text else None
            except Exception: cand = None
        lang = norm_lang(cand or getattr(user,"language_code",None))
        users_upsert(uid, user.username or "", lang)
    else:
        lang = norm_lang(urec.get("lang") or getattr(user,"language_code",None))

    s = sessions.setdefault(uid, {"flow": "chat", "answers": {}, "chat_history": []})

    # —Å–æ–≥–ª–∞—Å–∏–µ
    if s.get("awaiting_consent"):
        if text in {t(lang,"yes"), t(lang,"no")}:
            users_set(uid, "consent", "yes" if text == t(lang,"yes") else "no")
            s["awaiting_consent"]=False
            await update.message.reply_text(t(lang,"thanks"), reply_markup=main_menu(lang)); return
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=kb_yesno(lang)); return

    # —Ñ–∏–¥–±–µ–∫
    if s.get("awaiting_feedback_choice"):
        if text == t(lang,"fb_like"):
            ws_feedback.append_row([datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"), str(uid), s.get("feedback_context","general"), user.username or "", "1", ""])
            s["awaiting_feedback_choice"]=False
            await update.message.reply_text(t(lang,"fb_thanks"), reply_markup=main_menu(lang)); return
        if text == t(lang,"fb_dislike"):
            ws_feedback.append_row([datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"), str(uid), s.get("feedback_context","general"), user.username or "", "0", ""])
            s["awaiting_feedback_choice"]=False
            await update.message.reply_text(t(lang,"fb_thanks"), reply_markup=main_menu(lang)); return
        if text == t(lang,"fb_write"):
            s["awaiting_feedback_choice"]=False; s["awaiting_comment"]=True
            await update.message.reply_text(t(lang,"comment_prompt")); return
        if text == CANCEL:
            s["awaiting_feedback_choice"]=False
            await update.message.reply_text("üëå", reply_markup=main_menu(lang)); return
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ", reply_markup=kb_feedback(lang)); return

    # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if s.get("awaiting_comment") and not text.startswith("/"):
        name = s.get("feedback_context") or "general"
        ws_feedback.append_row([datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"), str(uid), f"comment:{name}", user.username or "", "", text])
        s["awaiting_comment"]=False; s["feedback_context"]=""
        await update.message.reply_text(t(lang,"comment_saved"), reply_markup=main_menu(lang)); return

    # —á–µ–∫-–∏–Ω
    if s.get("await_step") == "checkin":
        if text == CANCEL:
            s["await_step"]=0; await update.message.reply_text(t(lang,"thanks"), reply_markup=main_menu(lang)); return
        if text.isdigit() and 0 <= int(text) <= 10:
            val = int(text); ep = episode_find_open(uid)
            if ep:
                eid = ep.get("episode_id")
                episode_set(eid, "notes", f"checkin:{val}")
                if val <= 3:
                    episode_set(eid, "status", "resolved")
                    await update.message.reply_text(t(lang,"checkin_better"), reply_markup=main_menu(lang))
                else:
                    await update.message.reply_text(t(lang,"checkin_worse"), reply_markup=main_menu(lang))
            s["await_step"]=0; return
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ", reply_markup=kb_numbers()); return

    # –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–ª–∞–Ω–∞
    if s.get("flow") == "accept_wait":
        acc = T[lang]["accept_opts"]
        if text in acc:
            eid = s.get("episode_id")
            if text == acc[0]: episode_set(eid, "plan_accepted", "1")
            elif text == acc[1]: episode_set(eid, "plan_accepted", "later")
            elif text == acc[2]: episode_set(eid, "plan_accepted", "0")
            s["flow"]="remind_wait"
            await update.message.reply_text(t(lang,"remind_when"), reply_markup=kb_remind(lang)); return
        if text == CANCEL:
            s["flow"]="chat"; await update.message.reply_text("–û–∫", reply_markup=main_menu(lang)); return
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ", reply_markup=kb_accept(lang)); return

    # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if s.get("flow") == "remind_wait":
        opts = T[lang]["remind_opts"]
        if text in opts or text == CANCEL:
            code_map = {opts[0]:"4h", opts[1]:"evening", opts[2]:"morning", opts[3]:"none"}
            code = code_map.get(text, "none")
            eid = s.get("episode_id"); urec = users_get(uid)
            tz_off = 0
            try: tz_off = int(urec.get("tz_offset") or "0")
            except: tz_off = 0
            now_utc = utcnow(); user_now = now_utc + timedelta(hours=tz_off)
            if code == "4h": target_user = user_now + timedelta(hours=4)
            elif code == "evening":
                target_user = user_now.replace(hour=19, minute=0, second=0, microsecond=0)
                if target_user < user_now: target_user += timedelta(days=1)
            elif code == "morning":
                target_user = user_now.replace(hour=9, minute=0, second=0, microsecond=0)
                if target_user < user_now: target_user += timedelta(days=1)
            else: target_user = None
            if target_user:
                target_utc = target_user - timedelta(hours=tz_off)
                episode_set(eid, "next_checkin_at", iso(target_utc))
                delay = max(60, (target_utc - now_utc).total_seconds())
                context.job_queue.run_once(job_checkin, when=delay, data={"user_id": uid, "episode_id": eid})
            await update.message.reply_text(t(lang,"thanks"), reply_markup=main_menu(lang))
            s["flow"]="chat"; return
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ", reply_markup=kb_remind(lang)); return

    # ========= CHAT-FIRST =========
    # –∑–æ–≤—ë–º LLM –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∏–∫–∞–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞)
    j = llm_route(uid, lang, text)
    if not j:
        # –µ—Å–ª–∏ –∫–ª—é—á–∞/–∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç ‚Äî –º—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫ –≤–º–µ—Å—Ç–æ ¬´–¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö¬ª —Ç–µ–∫—Å—Ç–æ–≤
        await update.message.reply_text(t(lang,"oos"), reply_markup=main_menu(lang))
        return

    assistant = j.get("assistant") or ""
    stage = j.get("stage") or "followup"
    slots = j.get("slots") or {}

    # –æ—Ç–¥–∞–µ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if assistant:
        await update.message.reply_text(assistant)

    # –æ–±–Ω–æ–≤–∏–º —Å–ª–æ—Ç—ã
    ans = s.setdefault("answers", {})
    for k in ["intent","loc","kind","duration","severity","red"]:
        v = slots.get(k)
        if v not in (None, ""): ans[k]=v

    # –ø–ª–∞–Ω/—ç—Å–∫–∞–ª–∞—Ü–∏—è
    if stage == "escalate":
        await update.message.reply_text(t(lang,"thanks"), reply_markup=main_menu(lang))
        return

    have_all = all(k in ans for k in ["loc","kind","duration","severity","red"])
    if stage == "plan_ready" or have_all:
        eid = s.get("episode_id")
        if not eid:
            eid = episode_create(uid, ans.get("intent","pain"), int(ans.get("severity",5)), ans.get("red","None"))
            s["episode_id"]=eid
        hyps = build_hypotheses(lang, ans)
        plan_lines = pain_plan(lang, ans, hyps)
        await update.message.reply_text(f"{t(lang,'plan_header')}\n" + "\n".join(plan_lines))
        await update.message.reply_text(t(lang,"plan_accept"), reply_markup=kb_accept(lang))
        s["flow"]="accept_wait"; return

    # –∏–Ω–∞—á–µ –æ—Å—Ç–∞—ë–º—Å—è –≤ –±–µ—Å–µ–¥–µ
    s["flow"]="chat"
    sessions[uid] = s

# =========================
# Runner
# =========================
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(on_startup).build()
    schedule_from_sheet_on_start(app)

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("privacy", cmd_privacy))
    app.add_handler(CommandHandler("pause", cmd_pause))
    app.add_handler(CommandHandler("resume", cmd_resume))
    app.add_handler(CommandHandler("delete_data", cmd_delete_data))
    app.add_handler(CommandHandler("lang", cmd_lang))
    app.add_handler(CommandHandler("skip", cmd_skip))
    app.add_handler(CommandHandler("feedback", cmd_feedback))

    app.add_handler(CallbackQueryHandler(on_callback))  # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
