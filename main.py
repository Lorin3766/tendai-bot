#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TendAI ‚Äî LLM-powered Health & Longevity Assistant (RU/EN/ES/UA)

–§—É–Ω–∫—Ü–∏–∏:
- –ê–≤—Ç–æ-—è–∑—ã–∫ (telegram language_code + –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞), —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ user_state['lang'].
- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ (6‚Äì8 –≤–æ–ø—Ä–æ—Å–æ–≤) ‚Äî –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–±–µ–∑ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä).
- –ò–Ω—Ç–µ–Ω—Ç—ã –∏ —Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ LLM (symptom / nutrition / sleep / labs / habits / other), red-flags ‚Üí ER/911.
- –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (<=6 —Å—Ç—Ä–æ–∫ + –ø—É–Ω–∫—Ç—ã), —ç–∫–æ–Ω–æ–º–∏—è —Ç–æ–∫–µ–Ω–æ–≤. /fast ‚Äî —Ä–µ–∂–∏–º ¬´–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥¬ª.
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–∏–Ω–∏-—á–µ–∫–∞–ø—ã –≤ 08:30 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è), —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Sheets.
- –°–±–æ—Ä –æ—Ç–∑—ã–≤–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (üëç/üëé/‚úçÔ∏è).
- –ö–æ–º–∞–Ω–¥—ã: /start /pause /resume /delete_data /privacy /profile /plan /fast.
- –õ–æ–≥–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –≤ –ª–∏—Å—Ç Episodes; –ø—Ä–æ—Ñ–∏–ª—å –≤ Users; —á–µ–∫–∞–ø—ã –≤ Checkins.

–í–∞–∂–Ω–æ–µ:
- –ö–æ–¥ –±–µ–∑ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä (—Ç–æ–ª—å–∫–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏).
- –ü–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –≤ RAM (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞ –≤—ã–Ω–µ—Å—Ç–∏ –≤ Redis/DB).
"""

import os
import re
import json
import logging
import datetime as dt
from dataclasses import dataclass, field
from typing import Dict, Any, List, Optional, Tuple
from collections import defaultdict, deque
from zoneinfo import ZoneInfo

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters
)

# ---- OpenAI (LLM) ----
from openai import OpenAI

# ---- Google Sheets ----
import gspread
from google.oauth2.service_account import Credentials

# ---------------- CONFIG ----------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_TOKEN_HERE")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "YOUR_OPENAI_API_KEY_HERE")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
GSHEET_ID = os.getenv("GSHEET_ID", "")
DEFAULT_TZ = os.getenv("DEFAULT_TZ", "America/New_York")

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO
)
log = logging.getLogger("tendai-llm")

client = OpenAI(api_key=OPENAI_API_KEY)

# --------------- SHEETS -----------------
def _load_sa():
    cred_src = os.getenv("GOOGLE_CREDENTIALS_JSON", "")
    if not cred_src:
        raise RuntimeError("GOOGLE_CREDENTIALS_JSON is not set")
    if cred_src.strip().startswith("{"):
        data = json.loads(cred_src)
        creds = Credentials.from_service_account_info(
            data, scopes=["https://www.googleapis.com/auth/spreadsheets"]
        )
    else:
        creds = Credentials.from_service_account_file(
            cred_src, scopes=["https://www.googleapis.com/auth/spreadsheets"]
        )
    return creds

def open_sheets():
    try:
        gc = gspread.authorize(_load_sa())
        sh = gc.open_by_key(GSHEET_ID)
        def get_or_create(ws_name, headers):
            try:
                ws = sh.worksheet(ws_name)
            except gspread.WorksheetNotFound:
                ws = sh.add_worksheet(ws_name, rows=1000, cols=20)
                ws.append_row(headers)
            return ws
        users_ws = get_or_create("Users", [
            "ts_iso","user_id","username","lang","tz","checkin_enabled",
            "sex","age","chronic","surgeries","smoking","supplements","allergies","main_concern"
        ])
        episodes_ws = get_or_create("Episodes", [
            "ts_iso","user_id","lang","user_text","intent","slots_json","assistant_reply","feedback","comment"
        ])
        checkins_ws = get_or_create("Checkins", [
            "ts_iso","user_id","lang","mood","comment"
        ])
        return users_ws, episodes_ws, checkins_ws
    except Exception as e:
        log.warning(f"Sheets open failed: {e}")
        return None, None, None

USERS_WS, EPISODES_WS, CHECKINS_WS = open_sheets()

def append_users_row(row: List[Any]):
    try:
        if USERS_WS: USERS_WS.append_row(row, value_input_option="USER_ENTERED")
    except Exception as e:
        log.warning(f"append_users_row failed: {e}")

def append_episode(row: List[Any]):
    try:
        if EPISODES_WS: EPISODES_WS.append_row(row, value_input_option="USER_ENTERED")
    except Exception as e:
        log.warning(f"append_episode failed: {e}")

def append_checkin(row: List[Any]):
    try:
        if CHECKINS_WS: CHECKINS_WS.append_row(row, value_input_option="USER_ENTERED")
    except Exception as e:
        log.warning(f"append_checkin failed: {e}")

def delete_user_everywhere(user_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –ø–æ user_id –≤ Users/Episodes/Checkins."""
    try:
        for ws in [USERS_WS, EPISODES_WS, CHECKINS_WS]:
            if not ws: continue
            records = ws.get_all_records()
            rows_to_delete = [i+2 for i,rec in enumerate(records) if str(rec.get("user_id")) == str(user_id)]
            # —É–¥–∞–ª—è–µ–º —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–¥–≤–∏–≥–∞–ª–∏—Å—å
            for r in reversed(rows_to_delete):
                ws.delete_rows(r)
    except Exception as e:
        log.warning(f"delete_user_everywhere failed: {e}")

# --------------- TRANSLATIONS ----------------
translations = {
    "greeting": {
        "ru": "–ü—Ä–∏–≤–µ—Ç, —è TendAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é. –Ø –æ—Ç–≤–µ—á–∞—é –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
        "en": "Hi, I‚Äôm TendAI ‚Äî your health & longevity assistant. I keep answers short and useful.",
        "es": "Hola, soy TendAI ‚Äî tu asistente de salud y longevidad. Respondo breve y √∫til.",
        "uk": "–ü—Ä–∏–≤—ñ—Ç, —è TendAI ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑—ñ –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è. –í—ñ–¥–ø–æ–≤—ñ–¥–∞—é –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ."
    },
    "ask_intake": {
        "ru": "–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å (6‚Äì8 –≤–æ–ø—Ä–æ—Å–æ–≤), —á—Ç–æ–±—ã —è –ª—É—á—à–µ —Ç–µ–±—è –ø–æ–Ω—è–ª?",
        "en": "Would you like a short intake (6‚Äì8 quick questions) so I can personalize better?",
        "es": "¬øQuieres un intake corto (6‚Äì8 preguntas) para personalizar mejor?",
        "uk": "–ë–∞–∂–∞—î—à –∫–æ—Ä–æ—Ç–∫–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (6‚Äì8 –ø–∏—Ç–∞–Ω—å), —â–æ–± —è –∫—Ä–∞—â–µ —Ç–µ–±–µ –∑—Ä–æ–∑—É–º—ñ–≤?"
    },
    "btn_yes": {"ru":"‚úÖ –î–∞","en":"‚úÖ Yes","es":"‚úÖ S√≠","uk":"‚úÖ –¢–∞–∫"},
    "btn_no":  {"ru":"‚ùå –ù–µ—Ç","en":"‚ùå No","es":"‚ùå No","uk":"‚ùå –ù—ñ"},
    "privacy": {
        "ru": "–Ø –Ω–µ –≤—Ä–∞—á. –î–∞—é –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –ø–æ–º–æ—â—å. –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –°–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è OpenAI.",
        "en": "I‚Äôm not a doctor. I provide general info and don‚Äôt replace medical care. Don‚Äôt send sensitive data. Messages are processed by OpenAI.",
        "es": "No soy m√©dico. Brindo informaci√≥n general y no reemplazo la atenci√≥n m√©dica. No env√≠es datos sensibles. Los mensajes son procesados por OpenAI.",
        "uk": "–Ø –Ω–µ –ª—ñ–∫–∞—Ä. –ù–∞–¥–∞—é –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —ñ –Ω–µ –∑–∞–º—ñ–Ω—é—é –º–µ–¥–∏—á–Ω—É –¥–æ–ø–æ–º–æ–≥—É. –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π —á—É—Ç–ª–∏–≤—ñ –¥–∞–Ω—ñ. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î OpenAI."
    },
    "intake_q": {  # –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        "ru": [
            "–ü–æ–ª (–º/–∂)?",
            "–í–æ–∑—Ä–∞—Å—Ç?",
            "–ï—Å—Ç—å –ª–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏?",
            "–ë—ã–ª–∏ –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏?",
            "–ö—É—Ä–∏—à—å –ª–∏?",
            "–ü—Ä–∏–Ω–∏–º–∞–µ—à—å –ª–∏ –¥–æ–±–∞–≤–∫–∏?",
            "–ï—Å—Ç—å –∞–ª–ª–µ—Ä–≥–∏–∏?",
            "–ß—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–æ–ª–Ω—É–µ—Ç?"
        ],
        "en": [
            "Sex (m/f)?",
            "Age?",
            "Any chronic conditions?",
            "Any surgeries?",
            "Do you smoke?",
            "Do you take supplements?",
            "Any allergies?",
            "What worries you most right now?"
        ],
        "es": [
            "Sexo (m/f)?",
            "Edad?",
            "¬øCondiciones cr√≥nicas?",
            "¬øCirug√≠as?",
            "¬øFumas?",
            "¬øTomas suplementos?",
            "¬øAlergias?",
            "¬øQu√© te preocupa m√°s ahora?"
        ],
        "uk": [
            "–°—Ç–∞—Ç—å (—á/–∂)?",
            "–í—ñ–∫?",
            "–•—Ä–æ–Ω—ñ—á–Ω—ñ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è?",
            "–û–ø–µ—Ä–∞—Ü—ñ—ó?",
            "–ö—É—Ä–∏—à?",
            "–ü—Ä–∏–π–º–∞—î—à –¥–æ–±–∞–≤–∫–∏?",
            "–ê–ª–µ—Ä–≥—ñ—ó?",
            "–©–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Ç—É—Ä–±—É—î –∑–∞—Ä–∞–∑?"
        ],
    },
    "want_checkins": {
        "ru": "–í–∫–ª—é—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ –º–∏–Ω–∏-—á–µ–∫–∞–ø—ã –≤ 08:30? (—Å–ø—Ä–æ—à—É ¬´–∫–∞–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ¬ª)",
        "en": "Enable morning mini check-ins at 08:30? (I‚Äôll ask how you feel)",
        "es": "¬øActivar mini check-ins matutinos a las 08:30? (preguntar√© c√≥mo te sientes)",
        "uk": "–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä–∞–Ω–∫–æ–≤—ñ –º—ñ–Ω—ñ-—á–µ–∫—ñ–Ω–∏ –æ 08:30? (–∑–∞–ø–∏—Ç–∞—é —è–∫ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è)"
    },
    "btn_enable": {"ru":"‚úÖ –í–∫–ª—é—á–∏—Ç—å","en":"‚úÖ Enable","es":"‚úÖ Activar","uk":"‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏"},
    "btn_skip": {"ru":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å","en":"‚è≠Ô∏è Skip","es":"‚è≠Ô∏è Omitir","uk":"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"},
    "checkin_prompt": {
        "ru": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ —Å–µ–≥–æ–¥–Ω—è?",
        "en": "Good morning! How do you feel today?",
        "es": "¬°Buenos d√≠as! ¬øC√≥mo te sientes hoy?",
        "uk": "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! –Ø–∫ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è —Å—å–æ–≥–æ–¥–Ω—ñ?"
    },
    "moods": {
        "ru": ["üòÉ –•–æ—Ä–æ—à–æ","üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ","üò£ –ü–ª–æ—Ö–æ"],
        "en": ["üòÉ Good","üòê Okay","üò£ Poor"],
        "es": ["üòÉ Bien","üòê Normal","üò£ Mal"],
        "uk": ["üòÉ –î–æ–±—Ä–µ","üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ","üò£ –ü–æ–≥–∞–Ω–æ"]
    },
    "feedback_q": {
        "ru":"–ë—ã–ª –ª–∏ —è –ø–æ–ª–µ–∑–µ–Ω?",
        "en":"Was I helpful?",
        "es":"¬øFui √∫til?",
        "uk":"–ß–∏ –±—É–≤ —è –∫–æ—Ä–∏—Å–Ω–∏–º?"
    },
    "btn_up": {"ru":"üëç","en":"üëç","es":"üëç","uk":"üëç"},
    "btn_down": {"ru":"üëé","en":"üëé","es":"üëé","uk":"üëé"},
    "btn_comment": {"ru":"‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π","en":"‚úçÔ∏è Comment","es":"‚úçÔ∏è Comentario","uk":"‚úçÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä"},
    "paused": {
        "ru":"–ü–∞—É–∑–∞ –≤–∫–ª—é—á–µ–Ω–∞. –Ø –Ω–µ –±—É–¥—É –ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—ã–º. /resume —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å.",
        "en":"Paused. I won‚Äôt message first. Use /resume to enable.",
        "es":"En pausa. No iniciar√© mensajes. /resume para activar.",
        "uk":"–ü–∞—É–∑–∞. –Ø –Ω–µ –ø–∏—Å–∞—Ç–∏–º—É –ø–µ—Ä—à–∏–º. /resume —â–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏."
    },
    "resumed": {
        "ru":"–í–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É.",
        "en":"Resumed.",
        "es":"Reanudado.",
        "uk":"–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ."
    },
    "deleted": {
        "ru":"–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.",
        "en":"Data deleted.",
        "es":"Datos eliminados.",
        "uk":"–î–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ."
    },
    "fast_hint": {
        "ru":"–†–µ–∂–∏–º ¬´–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥¬ª. –î–∞–π —Å–∏–º–ø—Ç–æ–º/—Ü–µ–ª—å ‚Äî –æ—Ç–≤–µ—á—É —Å–≤–µ—Ä—Ö–∫–æ—Ä–æ—Ç–∫–æ.",
        "en":"Fast mode: give me a symptom/goal ‚Äî I‚Äôll reply ultra-briefly.",
        "es":"Modo r√°pido: dime un s√≠ntoma/meta y respondo ultra breve.",
        "uk":"–®–≤–∏–¥–∫–∏–π —Ä–µ–∂–∏–º: –Ω–∞–ø–∏—à–∏ —Å–∏–º–ø—Ç–æ–º/–º–µ—Ç—É ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–º –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–æ."
    }
}

def get_text(key: str, lang: str) -> str:
    table = translations.get(key, {})
    return table.get(lang) or table.get("en") or ""

# --------------- STATE ----------------
@dataclass
class UserState:
    lang: str = "en"
    tz: str = DEFAULT_TZ
    paused: bool = False
    intake_in_progress: bool = False
    intake_index: int = 0
    intake_answers: List[str] = field(default_factory=list)
    checkin_enabled: bool = False
    checkin_job_id: Optional[str] = None
    history: deque = field(default_factory=lambda: deque(maxlen=12))
    last_feedback_prompt: Optional[dt.datetime] = None
    profile: Dict[str, Any] = field(default_factory=dict)
    fast_mode: bool = False  # —Ä–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

STATE: Dict[int, UserState] = defaultdict(UserState)

# --------------- LANGUAGE DETECTION ---------------
def detect_lang(update: Update, fallback="en") -> str:
    code = (update.effective_user.language_code or "").lower()
    t = (update.message.text or "").lower() if update.message else ""
    if any(x in code for x in ["ru","ru-","ru_"]) or any(w in t for w in ["–ø—Ä–∏–≤–µ—Ç","–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ","—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ","–±–æ–ª—å"]):
        return "ru"
    if any(x in code for x in ["uk","uk-","uk_"]) or any(w in t for w in ["–ø—Ä–∏–≤—ñ—Ç","–∑–¥–æ—Ä–æ–≤'—è","–±–æ–ª–∏—Ç—å"]):
        return "uk"
    if any(x in code for x in ["es","es-","es_"]) or any(w in t for w in ["hola","salud","dolor","¬ø","¬°","√±"]):
        return "es"
    if any(w in t for w in ["hello","hi","how are you","pain","sleep","diet"]):
        return "en"
    return fallback

# --------------- LLM PROMPTS ---------------
SYS_CORE = """You are TendAI ‚Äî a concise, professional health & longevity assistant.
Speak in the user's language. Keep answers compact (<=6 lines + short bullets).
Prioritize safety triage (red flags). Do not diagnose; give safe, actionable steps.
Topics: symptom triage, sleep, nutrition, labs, habits, longevity.
If user invokes 'fast mode', reply in max 4 lines + 3 bullets.
"""

JSON_ROUTER = """
Task: Analyze the user's message and produce a JSON ONLY (no prose).
Return fields:
- language: "ru"|"en"|"es"|"uk"|null
- intent: "symptom"|"nutrition"|"sleep"|"labs"|"habits"|"other"
- slots: for symptom include {where, character, duration, intensity?}; for others include useful keys
- red_flags: boolean
- assistant_reply: string  # compact professional message for the user
- followups: string[]      # up to 2 short clarifying questions (optional)
- needs_more: boolean      # true if followups are needed to proceed
- ask_feedback: boolean    # true if it's a good moment to ask for feedback
Constraints:
- Keep assistant_reply short and practical.
- If red_flags=true, assistant_reply must begin with an ER/911 recommendation.
- Never output anything but minified JSON.
"""

def llm_route_reply(user_lang: str, profile: Dict[str, Any], history: List[Dict[str,str]], user_text: str, fast: bool=False) -> Dict[str, Any]:
    """LLM –¥–µ–ª–∞–µ—Ç: intent+slots+–∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç+followups –≤ JSON."""
    sys = SYS_CORE + f"\nUser language hint: {user_lang}. Fast mode: {str(fast)}.\nStored profile (JSON): {json.dumps(profile, ensure_ascii=False)}"
    messages = [{"role":"system","content":sys},
                {"role":"system","content":JSON_ROUTER},
                {"role":"user","content":user_text}]
    try:
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            temperature=0.2,
            max_tokens=400,
            messages=messages
        )
        content = resp.choices[0].message.content.strip()
        # –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–¥–µ–ª–∏—Ç—å JSON
        m = re.search(r"\{.*\}\s*$", content, re.S)
        if m: content = m.group(0)
        data = json.loads(content)
        return data
    except Exception as e:
        log.warning(f"LLM route failed: {e}")
        # fallback: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {
            "language": user_lang, "intent":"other", "slots": {},
            "red_flags": False,
            "assistant_reply": {
                "ru":"–ö–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç: —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø–æ–¥—ä—ë–º, —É—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç, 7‚Äì10 —Ç—ã—Å. —à–∞–≥–æ–≤, –±–µ–ª–æ–∫ 1.2‚Äì1.6 –≥/–∫–≥/–¥–µ–Ω—å. –ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å/—Å–∏–º–ø—Ç–æ–º ‚Äî —É—Ç–æ—á–Ω—é –ø–ª–∞–Ω.",
                "en":"Quick tip: fixed wake, morning light, 7‚Äì10k steps, protein 1.2‚Äì1.6 g/kg/day. Tell me your goal/symptom for a tailored plan.",
                "es":"Consejo: despertar fijo, luz matutina, 7‚Äì10k pasos, prote√≠na 1.2‚Äì1.6 g/kg/d√≠a. Dime tu objetivo/s√≠ntoma.",
                "uk":"–ü–æ—Ä–∞–¥–∞: —Ñ—ñ–∫—Å–æ–≤–∞–Ω–µ –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è, —Ä–∞–Ω–∫–æ–≤–µ —Å–≤—ñ—Ç–ª–æ, 7‚Äì10 —Ç–∏—Å. –∫—Ä–æ–∫—ñ–≤, –±—ñ–ª–æ–∫ 1.2‚Äì1.6 –≥/–∫–≥/–¥–µ–Ω—å. –ù–∞–ø–∏—à—ñ—Ç—å –º–µ—Ç—É/—Å–∏–º–ø—Ç–æ–º."
            }.get(user_lang,"en"),
            "followups": [], "needs_more": False, "ask_feedback": True
        }

# --------------- UI HELPERS ---------------
def ik_btn(text: str, data: str) -> InlineKeyboardButton:
    return InlineKeyboardButton(text, callback_data=data)

def send_inline(update: Update, text: str, buttons: List[List[InlineKeyboardButton]]):
    return update.effective_chat.send_message(text, reply_markup=InlineKeyboardMarkup(buttons))

async def send_msg(update: Update, text: str):
    await update.effective_chat.send_message(text, reply_markup=ReplyKeyboardRemove())

# --------------- CHECKIN SCHEDULE ---------------
def schedule_checkin(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, tz: str):
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
    job_name = f"checkin_{chat_id}"
    old = context.job_queue.get_jobs_by_name(job_name)
    for j in old:
        j.schedule_removal()
    # 08:30 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    t = dt.time(hour=8, minute=30, tzinfo=ZoneInfo(tz))
    context.job_queue.run_daily(callback=job_checkin, time=t, name=job_name, data={"chat_id": chat_id, "lang": lang})

async def job_checkin(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data or {}
    chat_id = data.get("chat_id")
    lang = data.get("lang", "en")
    moods = translations["moods"][lang]
    kb = [[ik_btn(moods[0], "checkin:mood:good"),
           ik_btn(moods[1], "checkin:mood:ok"),
           ik_btn(moods[2], "checkin:mood:bad")],
          [ik_btn(translations["btn_comment"][lang], "checkin:comment")]]
    await context.bot.send_message(chat_id, get_text("checkin_prompt", lang), reply_markup=InlineKeyboardMarkup(kb))

# --------------- COMMANDS ---------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = STATE[uid]
    st.lang = detect_lang(update, st.lang)
    st.tz = st.tz or DEFAULT_TZ
    st.paused = False
    st.fast_mode = False

    await send_msg(update, get_text("greeting", st.lang))
    await send_msg(update, get_text("privacy", st.lang))

    kb = [[ik_btn(get_text("btn_yes", st.lang), "intake:yes"),
           ik_btn(get_text("btn_no", st.lang), "intake:no")]]
    await send_inline(update, get_text("ask_intake", st.lang), kb)

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = STATE[uid].lang or detect_lang(update, "en")
    await send_msg(update, get_text("privacy", lang))

async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = STATE[update.effective_user.id]
    st.paused = True
    await send_msg(update, get_text("paused", st.lang))

async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = STATE[update.effective_user.id]
    st.paused = False
    await send_msg(update, get_text("resumed", st.lang))

async def cmd_delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    delete_user_everywhere(uid)
    STATE[uid] = UserState(lang=detect_lang(update, "en"))
    await send_msg(update, get_text("deleted", STATE[uid].lang))

async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = STATE[update.effective_user.id]
    await send_msg(update, "Profile:\n" + json.dumps(st.profile or {}, ensure_ascii=False, indent=2))

async def cmd_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = STATE[update.effective_user.id]
    # –ø–æ–ø—Ä–æ—Å–∏–º LLM —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–∏–Ω–∏-–ø–ª–∞–Ω —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    sys = SYS_CORE + "\nCreate a compact 4‚Äì6 step plan based ONLY on stored profile."
    msgs = [{"role":"system","content":sys},
            {"role":"user","content":"Generate the plan now."}]
    try:
        resp = client.chat.completions.create(model=OPENAI_MODEL, temperature=0.2, max_tokens=350, messages=msgs)
        await send_msg(update, resp.choices[0].message.content.strip())
    except Exception as e:
        await send_msg(update, {
            "ru":"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Å–µ–π—á–∞—Å.",
            "en":"Couldn‚Äôt generate a plan now.",
            "es":"No se pudo generar un plan ahora.",
            "uk":"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω –∑–∞—Ä–∞–∑."
        }.get(st.lang,"en"))

async def cmd_fast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = STATE[update.effective_user.id]
    st.fast_mode = True
    await send_msg(update, get_text("fast_hint", st.lang))

# --------------- INTAKE FLOW (INLINE) ---------------
def intake_questions(lang: str) -> List[str]:
    return translations["intake_q"][lang]

def intake_key_for_index(idx: int) -> str:
    keys = ["sex","age","chronic","surgeries","smoking","supplements","allergies","main_concern"]
    return keys[idx] if 0 <= idx < len(keys) else f"q{idx}"

async def start_intake(update: Update, st: UserState):
    st.intake_in_progress = True
    st.intake_index = 0
    st.intake_answers = []
    await send_msg(update, intake_questions(st.lang)[0])

async def proceed_intake_answer(update: Update, st: UserState, text: str):
    qs = intake_questions(st.lang)
    st.intake_answers.append(text.strip())
    st.intake_index += 1
    if st.intake_index < len(qs):
        await send_msg(update, qs[st.intake_index])
        return
    # intake –∑–∞–≤–µ—Ä—à–µ–Ω
    st.intake_in_progress = False
    # —Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    prof = {intake_key_for_index(i): st.intake_answers[i] for i in range(len(st.intake_answers))}
    st.profile.update(prof)
    # –≤ Sheets -> Users
    append_users_row([
        dt.datetime.utcnow().isoformat(), update.effective_user.id,
        (update.effective_user.username or ""), st.lang, st.tz, str(st.checkin_enabled),
        prof.get("sex",""), prof.get("age",""), prof.get("chronic",""), prof.get("surgeries",""),
        prof.get("smoking",""), prof.get("supplements",""), prof.get("allergies",""), prof.get("main_concern","")
    ])
    # –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∫–ª—é—á–∏—Ç—å —á–µ–∫–∞–ø—ã
    kb = [[ik_btn(get_text("btn_enable", st.lang), "checkin:enable"),
           ik_btn(get_text("btn_skip", st.lang), "checkin:skip")]]
    await send_inline(update, get_text("want_checkins", st.lang), kb)

# --------------- CALLBACKS ---------------
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = STATE[uid]
    data = update.callback_query.data or ""
    await update.callback_query.answer()

    if data == "intake:yes":
        await start_intake(update, st)
        return
    if data == "intake:no":
        await send_msg(update, {"ru":"–û–∫, –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å –ª—é–±–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
                                "en":"Okay, ask me anything to start.",
                                "es":"Vale, empecemos por lo que quieras.",
                                "uk":"–ì–∞—Ä–∞–∑–¥, –º–æ–∂–µ–º–æ –ø–æ—á–∞—Ç–∏ –∑ –±—É–¥—å-—á–æ–≥–æ."}[st.lang])
        return

    if data == "checkin:enable":
        st.checkin_enabled = True
        schedule_checkin(context, update.effective_chat.id, st.lang, st.tz)
        await send_msg(update, {"ru":"–£—Ç—Ä–µ–Ω–Ω–∏–µ —á–µ–∫–∞–ø—ã –≤–∫–ª—é—á–µ–Ω—ã –Ω–∞ 08:30.",
                                "en":"Morning check-ins enabled at 08:30.",
                                "es":"Check-ins matutinos activados a las 08:30.",
                                "uk":"–†–∞–Ω–∫–æ–≤—ñ —á–µ–∫—ñ–Ω–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –Ω–∞ 08:30."}[st.lang])
        return
    if data == "checkin:skip":
        st.checkin_enabled = False
        await send_msg(update, {"ru":"–•–æ—Ä–æ—à–æ, –±–µ–∑ —á–µ–∫–∞–ø–æ–≤.",
                                "en":"Alright, no check-ins.",
                                "es":"De acuerdo, sin check-ins.",
                                "uk":"–î–æ–±—Ä–µ, –±–µ–∑ —á–µ–∫—ñ–Ω—ñ–≤."}[st.lang])
        return

    if data.startswith("checkin:mood:"):
        mood = data.split(":")[-1]
        mood_map = {"good":"good","ok":"ok","bad":"bad"}
        append_checkin([dt.datetime.utcnow().isoformat(), uid, st.lang, mood_map.get(mood,""), ""])
        await send_msg(update, {"ru":"–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üëã",
                                "en":"Thanks! Have a great day üëã",
                                "es":"¬°Gracias! Buen d√≠a üëã",
                                "uk":"–î—è–∫—É—é! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üëã"}[st.lang])
        return

    if data == "checkin:comment":
        st.history.append({"role":"assistant","content":"__awaiting_checkin_comment__"})
        await send_msg(update, {"ru":"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏.",
                                "en":"Write a short comment about how you feel.",
                                "es":"Escribe un breve comentario sobre c√≥mo te sientes.",
                                "uk":"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –ø—Ä–æ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è."}[st.lang])
        return

    if data == "fb:up":
        append_episode([dt.datetime.utcnow().isoformat(), uid, st.lang, "", "", "", "", "up", ""])
        await send_msg(update, {"ru":"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!","en":"Thank you!","es":"¬°Gracias!","uk":"–î—è–∫—É—é!"}[st.lang])
        return
    if data == "fb:down":
        append_episode([dt.datetime.utcnow().isoformat(), uid, st.lang, "", "", "", "", "down", ""])
        await send_msg(update, {"ru":"–ü—Ä–∏–Ω—è–ª. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–µ–µ.","en":"Got it. I‚Äôll do better.","es":"Entendido. Mejorar√©.","uk":"–ó—Ä–æ–∑—É–º—ñ–ª–æ. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—è –∫—Ä–∞—â–µ."}[st.lang])
        return
    if data == "fb:comment":
        st.history.append({"role":"assistant","content":"__awaiting_feedback_comment__"})
        await send_msg(update, {"ru":"–û—Å—Ç–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üôè",
                                "en":"Leave a short comment üôè",
                                "es":"Deja un comentario breve üôè",
                                "uk":"–ó–∞–ª–∏—à –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä üôè"}[st.lang])
        return

# --------------- MESSAGE HANDLER ---------------
def should_ask_feedback(st: UserState) -> bool:
    if st.last_feedback_prompt is None:
        return True
    return (dt.datetime.utcnow() - st.last_feedback_prompt) > dt.timedelta(minutes=15)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = STATE[uid]
    st.lang = st.lang or detect_lang(update, "en")
    text = update.message.text or ""

    # special flows waiting for comments
    if st.history and st.history[-1].get("content") in ["__awaiting_feedback_comment__", "__awaiting_checkin_comment__"]:
        marker = st.history[-1]["content"]
        st.history.pop()
        if marker == "__awaiting_feedback_comment__":
            append_episode([dt.datetime.utcnow().isoformat(), uid, st.lang, "", "", "", "", "", text])
            await send_msg(update, {"ru":"–°–ø–∞—Å–∏–±–æ!","en":"Thanks!","es":"¬°Gracias!","uk":"–î—è–∫—É—é!"}[st.lang])
        else:
            append_checkin([dt.datetime.utcnow().isoformat(), uid, st.lang, "", text])
            await send_msg(update, {"ru":"–ó–∞–ø–∏—Å–∞–ª. –ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è.","en":"Noted. Take care.","es":"Anotado. Cu√≠date.","uk":"–ó–∞–Ω–æ—Ç—É–≤–∞–≤. –ë–µ—Ä–µ–∂—ñ—Ç—å —Å–µ–±–µ."}[st.lang])
        return

    # intake in progress?
    if st.intake_in_progress:
        await proceed_intake_answer(update, st, text)
        return

    # paused?
    if st.paused:
        await send_msg(update, get_text("paused", st.lang))
        return

    # fast mode one-shot?
    fast = False
    if st.fast_mode or any(w in text.lower() for w in ["–±—ã—Å—Ç—Ä–æ","60 —Å–µ–∫","60 —Å–µ–∫—É–Ω–¥","fast"]):
        fast = True
        st.fast_mode = False

    # LLM routing + reply
    st.history.append({"role":"user","content": text})
    data = llm_route_reply(st.lang, st.profile, list(st.history), text, fast=fast)

    # update lang if LLM guessed better
    if isinstance(data.get("language"), str):
        st.lang = data["language"]

    reply = (data.get("assistant_reply") or "").strip()
    if not reply:
        reply = {"ru":"–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–µ–ª—å/–≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.",
                 "en":"Please state your goal or question in one sentence.",
                 "es":"Por favor, di tu objetivo o pregunta en una frase.",
                 "uk":"–ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ñ–æ—Ä–º—É–ª—é–π –º–µ—Ç—É –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è –æ–¥–Ω–∏–º —Ä–µ—á–µ–Ω–Ω—è–º."}[st.lang]

    await send_msg(update, reply)

    # log in Episodes
    append_episode([
        dt.datetime.utcnow().isoformat(), uid, st.lang, text,
        data.get("intent",""), json.dumps(data.get("slots",{}), ensure_ascii=False),
        reply, "", ""
    ])

    # ask followups if needed
    if data.get("needs_more") and data.get("followups"):
        for q in data["followups"][:2]:
            await send_msg(update, q)

    # feedback prompt (if it's a good moment and not intake/checkin)
    if data.get("ask_feedback") and should_ask_feedback(st):
        st.last_feedback_prompt = dt.datetime.utcnow()
        kb = [[ik_btn(get_text("btn_up", st.lang), "fb:up"),
               ik_btn(get_text("btn_down", st.lang), "fb:down"),
               ik_btn(get_text("btn_comment", st.lang), "fb:comment")]]
        await send_inline(update, get_text("feedback_q", st.lang), kb)

# --------------- MAIN ----------------
def main():
    if TELEGRAM_TOKEN == "YOUR_TELEGRAM_TOKEN_HERE":
        log.warning("Please set TELEGRAM_TOKEN")
    if OPENAI_API_KEY == "YOUR_OPENAI_API_KEY_HERE":
        log.warning("Please set OPENAI_API_KEY")
    if not GSHEET_ID:
        log.warning("GSHEET_ID is empty ‚Äî data logging to Sheets will be skipped if not set properly.")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("privacy", cmd_privacy))
    app.add_handler(CommandHandler("pause", cmd_pause))
    app.add_handler(CommandHandler("resume", cmd_resume))
    app.add_handler(CommandHandler("delete_data", cmd_delete_data))
    app.add_handler(CommandHandler("profile", cmd_profile))
    app.add_handler(CommandHandler("plan", cmd_plan))
    app.add_handler(CommandHandler("fast", cmd_fast))

    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    log.info("TendAI LLM bot starting‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
