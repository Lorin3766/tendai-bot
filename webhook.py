import os
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

openai = OpenAI(api_key=OPENAI_API_KEY)

# –°–æ–∑–¥–∞—ë–º FastAPI app
app = FastAPI()

telegram_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —è TendAI. –ß—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ –≤–æ–ª–Ω—É–µ—Ç? –Ø –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å."
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    if user_message.lower() == "tendai support":
        await update.message.reply_text(
            "üîç –í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç TendAI: –æ–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç, –∏ —è —Å—Ä–∞–∑—É –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –≤–∞–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å."
        )
        return

    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "You are a medical AI assistant. Always respond in the same language the user uses. "
                        "Ask follow-up questions to better understand the issue. "
                        "If the user says 'headache', ask where exactly, what kind of pain (sharp, dull, throbbing), "
                        "how long it has lasted, and whether there are other symptoms like nausea or light sensitivity. "
                        "If it's 'stomach pain', ask for location, character, duration, and other symptoms."
                    ),
                },
                {"role": "user", "content": user_message},
            ],
        )
        bot_reply = response.choices[0].message.content
        await update.message.reply_text(bot_reply)
    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    feedback_text = ' '.join(context.args)
    if feedback_text:
        print(f"[FEEDBACK] {update.effective_user.username}: {feedback_text}")
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—ë–º –µ—ë üôè")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /feedback.")


telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("feedback", feedback))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))


@app.post("/")
async def root(request: Request):
    json_data = await request.json()
    update = Update.de_json(json_data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}
