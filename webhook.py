import os
import requests
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)
from openai import OpenAI

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_SHEETS_WEBHOOK = os.getenv("GOOGLE_SHEETS_WEBHOOK")

openai = OpenAI(api_key=OPENAI_API_KEY)
app = FastAPI()
telegram_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

# üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google –¢–∞–±–ª–∏—Ü—É
def send_feedback_to_google_sheets(user_id: int, feedback: str):
    if not GOOGLE_SHEETS_WEBHOOK:
        print("‚ùó GOOGLE_SHEETS_WEBHOOK –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
        return
    try:
        response = requests.post(GOOGLE_SHEETS_WEBHOOK, json={
            "user_id": user_id,
            "feedback": feedback
        })
        print(f"‚úîÔ∏è –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞: {e}")

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —è TendAI ü§ó –ß—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ –≤–æ–ª–Ω—É–µ—Ç? –Ø –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å."
    )

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    if user_message.lower() == "tendai support":
        await update.message.reply_text(
            "üîç –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç ‚Äî —è –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –≤–∞–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å."
        )
        return

    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "You are a medical AI assistant. Always respond in the same language the user uses. "
                        "Ask follow-up questions to better understand the issue. "
                        "If the user says 'headache', ask where exactly, what kind of pain (sharp, dull, throbbing), "
                        "how long it has lasted, and whether there are other symptoms like nausea or light sensitivity."
                    ),
                },
                {"role": "user", "content": user_message},
            ],
        )
        bot_reply = response.choices[0].message.content
        await update.message.reply_text(bot_reply)
    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        print(f"OpenAI Error: {e}")

# üîπ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    feedback_text = ' '.join(context.args)
    user_id = update.effective_user.id

    if feedback_text:
        send_feedback_to_google_sheets(user_id, feedback_text)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —É—á—Ç—ë–º üôè")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /feedback.")

# üîπ –•–µ–Ω–¥–ª–µ—Ä—ã
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("feedback", feedback))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# üîπ –í–µ–±—Ö—É–∫ –æ—Ç Telegram
@app.post("/")
async def root(request: Request):
    json_data = await request.json()
    update = Update.de_json(json_data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}
