# -*- coding: utf-8 -*-
from typing import Optional, Set, Dict
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import CallbackQueryHandler, ContextTypes

# -------- –ü—É–±–ª–∏—á–Ω—ã–π API –º–æ–¥—É–ª—è --------
def register_intake_pro(application, gspread_client=None, spreadsheet_id: Optional[str] = None, on_finish=None) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –ü–†–û-–æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ PTB.
    - gspread_client / spreadsheet_id ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ bot_data (–Ω–∞ –±—É–¥—É—â–µ–µ / –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
    - on_finish: async-–∫–æ–ª–±—ç–∫ –≤–∏–¥–∞ (update, context, profile_dict) ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —à–∞–≥–∞ 6/6.
    """
    application.bot_data["ipro_on_finish"] = on_finish
    application.bot_data["ipro_gs"] = {"gclient": gspread_client, "spreadsheet_id": spreadsheet_id}

    # –û–¥–∏–Ω –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π CallbackQueryHandler –Ω–∞ –≤–µ—Å—å –æ–ø—Ä–æ—Å–Ω–∏–∫:
    application.add_handler(CallbackQueryHandler(_ipro_cb, pattern=r"^intake:"))

def intake_entry_button(text: str = "üôè –û–ø—Ä–æ—Å–Ω–∏–∫ (6 –ø—É–Ω–∫—Ç–æ–≤)") -> InlineKeyboardButton:
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –∏–∑ –ª—é–±–æ–≥–æ –º–µ–Ω—é/–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    return InlineKeyboardButton(text, callback_data="intake:start")


# -------- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è) --------
_I18N = {
    "en": {
        "intro": "Quick 6-step intake to tailor your advice.",
        "step1": "Step 1/6. Sex:",
        "step2": "Step 2/6. Age:",
        "step3": "Step 3/6. Main goal:",
        "step4": "Step 4/6. Chronic conditions (toggle, then Next):",
        "step5": "Step 5/6. Sleep pattern:",
        "step6": "Step 6/6. Activity level:",
        "next": "Next",
        "skip": "Skip",
        "back": "‚óÄ Back",
        "done": "Finish",
        "saved": "Saved profile.",
        "sex_opts": [("Male", "male"), ("Female", "female"), ("Other", "other")],
        "age_opts": [("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "goal_opts": [("Weight","weight"),("Energy","energy"),("Sleep","sleep"),("Longevity","longevity"),("Strength","strength")],
        "chronic_opts": [("None","none"),("Hypertension","hypertension"),("Diabetes","diabetes"),("Thyroid","thyroid"),("Other","other")],
        "sleep_opts": [("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("Irregular","irregular")],
        "activity_opts": [("<5k steps","<5k"),("5‚Äì8k","5-8k"),("8‚Äì12k","8-12k"),("Regular sport","sport")],
    },
    "ru": {
        "intro": "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å –∏–∑ 6 —à–∞–≥–æ–≤, —á—Ç–æ–±—ã —Å–æ–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ.",
        "step1": "–®–∞–≥ 1/6. –ü–æ–ª:",
        "step2": "–®–∞–≥ 2/6. –í–æ–∑—Ä–∞—Å—Ç:",
        "step3": "–®–∞–≥ 3/6. –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:",
        "step4": "–®–∞–≥ 4/6. –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏ (–≤—ã–±–∏—Ä–∞–π—Ç–µ/–æ—Ç–º–µ–Ω—è–π—Ç–µ, –∑–∞—Ç–µ–º ¬´–î–∞–ª–µ–µ¬ª):",
        "step5": "–®–∞–≥ 5/6. –†–µ–∂–∏–º —Å–Ω–∞:",
        "step6": "–®–∞–≥ 6/6. –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        "next": "–î–∞–ª–µ–µ",
        "skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "back": "‚óÄ –ù–∞–∑–∞–¥",
        "done": "–ó–∞–≤–µ—Ä—à–∏—Ç—å",
        "saved": "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        "sex_opts": [("–ú—É–∂—Å–∫–æ–π","male"),("–ñ–µ–Ω—Å–∫–∏–π","female"),("–î—Ä—É–≥–æ–µ","other")],
        "age_opts": [("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "goal_opts": [("–ü–æ—Ö—É–¥–µ–Ω–∏–µ","weight"),("–≠–Ω–µ—Ä–≥–∏—è","energy"),("–°–æ–Ω","sleep"),("–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ","longevity"),("–°–∏–ª–∞","strength")],
        "chronic_opts": [("–ù–µ—Ç","none"),("–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è","hypertension"),("–î–∏–∞–±–µ—Ç","diabetes"),("–©–∏—Ç–æ–≤–∏–¥–∫–∞","thyroid"),("–î—Ä—É–≥–æ–µ","other")],
        "sleep_opts": [("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
        "activity_opts": [("<5–∫ —à–∞–≥–æ–≤","<5k"),("5‚Äì8–∫","5-8k"),("8‚Äì12–∫","8-12k"),("–°–ø–æ—Ä—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ","sport")],
    }
}

def _lang(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —è–∑—ã–∫ –∏–∑ user_data, –∏–Ω–∞—á–µ ‚Äî –∏–∑ Telegram, –¥–µ—Ñ–æ–ª—Ç 'en'
    l = (context.user_data.get("lang")
         or (getattr(update.effective_user, "language_code", None) or "en").split("-")[0].lower())
    return "ru" if l in ("ru","uk","be","kk") else "en"


# --------- –†–µ–Ω–¥–µ—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---------
def _kb_from_pairs(prefix: str, pairs, per_row: int = 3) -> InlineKeyboardMarkup:
    rows, row = [], []
    for text, val in pairs:
        row.append(InlineKeyboardButton(text, callback_data=f"intake:{prefix}:{val}"))
        if len(row) == per_row:
            rows.append(row); row = []
    if row: rows.append(row)
    return InlineKeyboardMarkup(rows)

def _kb_chronic(lang: str, selected: Set[str]) -> InlineKeyboardMarkup:
    labels = _I18N[lang]["chronic_opts"]
    rows, row = [], []
    for text, val in labels:
        mark = "‚úÖ " if val in selected else ""
        row.append(InlineKeyboardButton(mark + text, callback_data=f"intake:chronic:toggle:{val}"))
        if len(row) == 2:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(_I18N[lang]["next"], callback_data="intake:chronic:next"),
                 InlineKeyboardButton(_I18N[lang]["skip"], callback_data="intake:chronic:skip")])
    return InlineKeyboardMarkup(rows)


# --------- –û—Å–Ω–æ–≤–Ω–æ–π Callback –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ ---------
async def _ipro_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data  # "intake:...."
    lang = _lang(update, context)
    t = _I18N[lang]

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st: Dict = context.user_data.setdefault("ipro", {
        "step": 0,
        "sex": "",
        "age": "",
        "goal": "",
        "chronic": set(),   # type: ignore
        "hab_sleep": "",
        "hab_activity": "",
        "meds": "",         # –æ—Ç–¥–µ–ª—å–Ω—ã–º —à–∞–≥–æ–º –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º, –ø—É—Å—Ç—å –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º
        "complaints": set() # –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ
    })
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø (–ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∫–∞–∫ list)
    if not isinstance(st.get("chronic"), set):
        st["chronic"] = set(st.get("chronic") or [])

    # --- –°—Ç–∞—Ä—Ç ---
    if data == "intake:start":
        st.update({"step": 1, "sex":"", "age":"", "goal":"", "chronic": set(),
                   "hab_sleep":"", "hab_activity":"", "meds":"", "complaints": set()})
        await q.message.reply_text(t["intro"])
        await q.message.reply_text(t["step1"], reply_markup=_kb_from_pairs("sex", t["sex_opts"], per_row=3))
        return

    # --- –®–∞–≥ 1: –ü–æ–ª ---
    if data.startswith("intake:sex:"):
        st["sex"] = data.split(":")[-1]
        st["step"] = 2
        await q.message.reply_text(t["step2"], reply_markup=_kb_from_pairs("age", t["age_opts"], per_row=3))
        return

    # --- –®–∞–≥ 2: –í–æ–∑—Ä–∞—Å—Ç ---
    if data.startswith("intake:age:"):
        st["age"] = data.split(":")[-1]
        st["step"] = 3
        await q.message.reply_text(t["step3"], reply_markup=_kb_from_pairs("goal", t["goal_opts"], per_row=3))
        return

    # --- –®–∞–≥ 3: –¶–µ–ª—å ---
    if data.startswith("intake:goal:"):
        st["goal"] = data.split(":")[-1]
        st["step"] = 4
        await q.message.reply_text(t["step4"], reply_markup=_kb_chronic(lang, st["chronic"]))
        return

    # --- –®–∞–≥ 4: –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä) ---
    if data.startswith("intake:chronic:toggle:"):
        key = data.split(":")[-1]
        sel: Set[str] = st["chronic"]
        if key in sel:
            sel.remove(key)
        else:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "none", —Å–Ω–∏–º–∞–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
            if key in ("none",):
                sel.clear()
            sel.add(key)
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ "none" ‚Äî —É–±—Ä–∞—Ç—å "none"
            if key != "none" and "none" in sel:
                sel.remove("none")
        await q.edit_message_reply_markup(reply_markup=_kb_chronic(lang, sel))
        return

    if data == "intake:chronic:skip" or data == "intake:chronic:next":
        st["step"] = 5
        await q.message.reply_text(t["step5"], reply_markup=_kb_from_pairs("sleep", t["sleep_opts"], per_row=2))
        return

    # --- –®–∞–≥ 5: –°–æ–Ω ---
    if data.startswith("intake:sleep:"):
        st["hab_sleep"] = data.split(":")[-1]
        st["step"] = 6
        await q.message.reply_text(t["step6"], reply_markup=_kb_from_pairs("activity", t["activity_opts"], per_row=2))
        return

    # --- –®–∞–≥ 6: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å -> —Ñ–∏–Ω–∞–ª ---
    if data.startswith("intake:activity:"):
        st["hab_activity"] = data.split(":")[-1]
        st["step"] = 7  # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø—Ä–æ—Ñ–∏–ª—å –≤ —É–¥–æ–±–Ω–æ–º –≤–∏–¥–µ
        profile = {
            "sex": st.get("sex", ""),
            "age": st.get("age", ""),
            "goal": st.get("goal", ""),
            "chronic": set(st.get("chronic") or []),
            "meds": st.get("meds", ""),
            "hab_sleep": st.get("hab_sleep", ""),
            "hab_activity": st.get("hab_activity", ""),
            "complaints": set(st.get("complaints") or []),
        }

        # –ö–æ–ª–±—ç–∫, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ö–æ–∑—è–∏–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (main.py)
        on_finish = update.get_bot().bot_data.get("ipro_on_finish")
        if callable(on_finish):
            try:
                await on_finish(update, context, profile)
            except Exception:
                # –ú—è–≥–∫–æ –¥–µ–≥—Ä–∞–¥–∏—Ä—É–µ–º: –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º ‚Äú—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ‚Äù
                await q.message.reply_text(t["saved"])
        else:
            await q.message.reply_text(t["saved"])

        # –û—á–∏—Å—Ç–∏–º state
        try:
            context.user_data.pop("ipro", None)
        except Exception:
            pass
        return
