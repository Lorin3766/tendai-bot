# -*- coding: utf-8 -*-
"""
Minimal PRO intake (6 —à–∞–≥–æ–≤): sex, age, goal, chronic, meds, sleep.

–≠–∫—Å–ø–æ—Ä—Ç:
- intake_entry_button(label: Optional[str]) -> InlineKeyboardButton
- register_intake_pro(app, on_complete_cb: Optional[Callable])

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
- –ö–Ω–æ–ø–∫–∞/–∫–æ–ª–ª–±–µ–∫ "ipro:start" –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å.
- –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É, –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
- –ü–æ—Å–ª–µ 6-–≥–æ —à–∞–≥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è on_complete_cb(update, context, profile_dict).
- –ú–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Google Sheets –∏ –Ω–∏—á–µ–≥–æ —Å–∞–º –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
"""

from __future__ import annotations
from typing import List, Tuple, Optional, Dict, Any, Callable

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

__all__ = ["intake_entry_button", "register_intake_pro"]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ i18n ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def _lang(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    """–Ø–∑—ã–∫: —Å–Ω–∞—á–∞–ª–∞ user_data['lang'], –ø–æ—Ç–æ–º –∫–æ–¥ –∏–∑ Telegram."""
    code = (
        context.user_data.get("lang")
        or getattr(update.effective_user, "language_code", "en")
    )
    return (code or "en").split("-")[0].lower() or "en"


def _t(lang: str, key: str):
    RU = {
        "title": "–ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å (6 —à–∞–≥–æ–≤). –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç.",
        "write": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
        "skip": "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "done": "–ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ—Ñ–∏–ª—å‚Ä¶",
        "ask_free": "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:",
        "steps": [
            "–®–∞–≥ 1/6. –ü–æ–ª:",
            "–®–∞–≥ 2/6. –í–æ–∑—Ä–∞—Å—Ç:",
            "–®–∞–≥ 3/6. –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:",
            "–®–∞–≥ 4/6. –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏:",
            "–®–∞–≥ 5/6. –õ–µ–∫–∞—Ä—Å—Ç–≤–∞/–¥–æ–±–∞–≤–∫–∏/–∞–ª–ª–µ—Ä–≥–∏–∏:",
            "–®–∞–≥ 6/6. –°–æ–Ω (–æ—Ç–±–æ–π/–ø–æ–¥—ä—ë–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        ],
    }
    EN = {
        "title": "Quick intake (6 steps). Use buttons or type your answer.",
        "write": "‚úçÔ∏è Write",
        "skip": "‚è≠Ô∏è Skip",
        "done": "Done! Saving your profile‚Ä¶",
        "ask_free": "Type your answer:",
        "steps": [
            "Step 1/6. Sex:",
            "Step 2/6. Age:",
            "Step 3/6. Main goal:",
            "Step 4/6. Chronic conditions:",
            "Step 5/6. Meds/supplements/allergies:",
            "Step 6/6. Sleep (bed/wake, e.g., 23:30/07:00):",
        ],
    }
    data = EN if lang == "en" else RU
    return data["steps"] if key == "steps" else data.get(key, key)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥–∏ –æ–ø—Ä–æ—Å–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

Step = Dict[str, Any]
_STEPS: List[Step] = [
    {
        "key": "sex",
        "opts": {
            "ru": [("–ú—É–∂—Å–∫–æ–π", "male"), ("–ñ–µ–Ω—Å–∫–∏–π", "female"), ("–î—Ä—É–≥–æ–µ", "other")],
            "en": [("Male", "male"), ("Female", "female"), ("Other", "other")],
        },
    },
    {
        "key": "age",
        "opts": {
            "ru": [("18‚Äì25", "22"), ("26‚Äì35", "30"), ("36‚Äì45", "40"), ("46‚Äì60", "50"), ("60+", "65")],
            "en": [("18‚Äì25", "22"), ("26‚Äì35", "30"), ("36‚Äì45", "40"), ("46‚Äì60", "50"), ("60+", "65")],
        },
    },
    {
        "key": "goal",
        "opts": {
            "ru": [("–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "weight"), ("–≠–Ω–µ—Ä–≥–∏—è", "energy"), ("–°–æ–Ω", "sleep"), ("–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ", "longevity"), ("–°–∏–ª–∞", "strength")],
            "en": [("Weight", "weight"), ("Energy", "energy"), ("Sleep", "sleep"), ("Longevity", "longevity"), ("Strength", "strength")],
        },
    },
    {
        "key": "chronic",
        "opts": {
            "ru": [("–ù–µ—Ç", "none"), ("–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è", "hypertension"), ("–î–∏–∞–±–µ—Ç", "diabetes"), ("–©–∏—Ç–æ–≤–∏–¥–∫–∞", "thyroid"), ("–î—Ä—É–≥–æ–µ", "other")],
            "en": [("None", "none"), ("Hypertension", "hypertension"), ("Diabetes", "diabetes"), ("Thyroid", "thyroid"), ("Other", "other")],
        },
    },
    {
        "key": "meds",
        "opts": {
            "ru": [("–ù–µ—Ç", "none"), ("–ú–∞–≥–Ω–∏–π", "magnesium"), ("–í–∏—Ç–∞–º–∏–Ω D", "vitd"), ("–ê–ª–ª–µ—Ä–≥–∏–∏ –µ—Å—Ç—å", "allergies"), ("–î—Ä—É–≥–æ–µ", "other")],
            "en": [("None", "none"), ("Magnesium", "magnesium"), ("Vitamin D", "vitd"), ("Allergies", "allergies"), ("Other", "other")],
        },
    },
    {
        "key": "sleep",
        "opts": {
            "ru": [("23:00/07:00", "23:00/07:00"), ("00:00/08:00", "00:00/08:00"), ("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ", "irregular")],
            "en": [("23:00/07:00", "23:00/07:00"), ("00:00/08:00", "00:00/08:00"), ("Irregular", "irregular")],
        },
    },
]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü—É–±–ª–∏—á–Ω—ã–π API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def intake_entry_button(label: Optional[str] = None) -> InlineKeyboardButton:
    """–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞ (callback_data='ipro:start')."""
    return InlineKeyboardButton(label or "üß© Intake (6-step)", callback_data="ipro:start")


def register_intake_pro(app, **kwargs):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø—Ä–æ—Å–∞.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      - on_complete_cb: Optional[Callable[[Update, Context, dict], Awaitable[None]]]
    –û—Å—Ç–∞–ª—å–Ω—ã–µ kwargs –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    """
    app.bot_data.setdefault("ipro_cfg", {})
    if "on_complete_cb" in kwargs:
        app.bot_data["ipro_cfg"]["on_complete_cb"] = kwargs["on_complete_cb"]

    # –í–ê–ñ–ù–û: —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞–≤–∏–º –≤ group=0, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —Ä–∞–Ω—å—à–µ –æ–±—â–µ–≥–æ msg_text
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, _ipro_text), group=0)
    app.add_handler(CallbackQueryHandler(_ipro_cb, pattern=r"^ipro:"))


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def _kb_for_step(lang: str, key: str, opts: List[Tuple[str, str]]) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    row: List[InlineKeyboardButton] = []
    for label, val in opts:
        row.append(InlineKeyboardButton(label, callback_data=f"ipro:choose|{key}|{val}"))
        if len(row) == 3:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append(
        [
            InlineKeyboardButton(_t(lang, "write"), callback_data=f"ipro:write|{key}"),
            InlineKeyboardButton(_t(lang, "skip"), callback_data=f"ipro:skip|{key}"),
        ]
    )
    return InlineKeyboardMarkup(rows)


async def _reply(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, kb: Optional[InlineKeyboardMarkup] = None):
    """–û—Ç–≤–µ—Ç –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç (–∏ –ø—Ä–∏ callback, –∏ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)."""
    if update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=kb or ReplyKeyboardRemove())
    else:
        await update.message.reply_text(text, reply_markup=kb or ReplyKeyboardRemove())


async def _send_step(update: Update, context: ContextTypes.DEFAULT_TYPE, idx: int):
    lang = _lang(update, context)
    step = _STEPS[idx]
    steps_titles = _t(lang, "steps")
    kb = _kb_for_step(lang, step["key"], step["opts"]["en" if lang == "en" else "ru"])
    await _reply(update, context, steps_titles[idx], kb)


async def _ipro_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data or ""

    # –°—Ç–∞—Ä—Ç
    if data == "ipro:start":
        context.user_data["ipro"] = {"idx": 0, "answers": {}, "wait_key": None}
        lang = _lang(update, context)
        await q.message.reply_text(_t(lang, "title"))
        await _send_step(update, context, 0)
        return

    ud: Dict[str, Any] = context.user_data.get("ipro") or {}
    if not ud:
        return

    if data.startswith("ipro:choose|"):
        _, _, key, val = data.split("|", 3)
        ud["answers"][key] = val
        context.user_data["ipro"] = ud
        await _advance(update, context)
        return

    if data.startswith("ipro:write|"):
        _, _, key = data.split("|", 2)
        ud["wait_key"] = key
        context.user_data["ipro"] = ud
        lang = _lang(update, context)
        await q.message.reply_text(_t(lang, "ask_free"))
        return

    if data.startswith("ipro:skip|"):
        _, _, key = data.split("|", 2)
        ud["answers"].setdefault(key, "")
        context.user_data["ipro"] = ud
        await _advance(update, context)
        return


async def _ipro_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å –æ–± —ç—Ç–æ–º –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ."""
    ud: Dict[str, Any] = context.user_data.get("ipro") or {}
    wait_key = ud.get("wait_key")
    if not wait_key:
        # –≠—Ç–æ –Ω–µ –Ω–∞—à —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç.
        return

    val = (update.message.text or "").strip()
    if wait_key == "age":
        # –∏–∑–≤–ª–µ—á—å –¥–≤—É–∑–Ω–∞—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ñ—Ä–∞–∑—É
        import re

        m = re.search(r"\d{2}", val)
        if m:
            val = m.group(0)

    ud["answers"][wait_key] = val
    ud["wait_key"] = None
    context.user_data["ipro"] = ud
    await _advance(update, context)


async def _advance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞."""
    ud: Dict[str, Any] = context.user_data.get("ipro") or {}
    idx = int(ud.get("idx", 0)) + 1
    ud["idx"] = idx
    context.user_data["ipro"] = ud

    if idx < len(_STEPS):
        await _send_step(update, context, idx)
        return

    # –ì–æ—Ç–æ–≤–æ ‚Äî –æ—Ç–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–≤–µ—Ä—Ö –∏ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    lang = _lang(update, context)
    await _reply(update, context, _t(lang, "done"))

    answers: Dict[str, str] = ud.get("answers", {})

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á–∏ –ø–æ–¥ main.py (—Ç—ã –∏—Ö –º–∞–ø–ø–∏—à—å –≤ _ipro_on_done)
    profile = {
        "sex": answers.get("sex", ""),
        "age": answers.get("age", ""),
        "goal": answers.get("goal", ""),
        "chronic": answers.get("chronic", ""),
        "meds": answers.get("meds", ""),
        "hab_sleep": answers.get("sleep", ""),
        "hab_activity": "",  # –≤ —ç—Ç–æ–π –º–∏–Ω–∏-–≤–µ—Ä—Å–∏–∏ —à–∞–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ—Ç
        "complaints": set(),
    }

    cfg = context.application.bot_data.get("ipro_cfg") or {}
    on_done: Optional[Callable] = cfg.get("on_complete_cb")
    if callable(on_done):
        try:
            await on_done(update, context, profile)
        except Exception as e:  # –Ω–µ –≤–∞–ª–∏–º –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            import logging

            logging.error(f"[intake_pro] on_complete_cb error: {e}")

    # –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–µ–π—Ç –æ–ø—Ä–æ—Å–∞
    context.user_data["ipro"] = {}
