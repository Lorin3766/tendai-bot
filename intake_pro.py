# -*- coding: utf-8 -*-
# Minimal PRO intake (6 steps): sex, age, goal, chronic, meds, sleep
# Exports:
#   - intake_entry_button(label: str|None) -> InlineKeyboardButton
#   - register_intake_pro(app, gclient=None, ws_profiles=None, on_complete_cb=None)

from typing import List, Tuple, Optional, Dict, Any, Callable
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters

# ---- i18n helpers ----
def _lang(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    # –ø—Ä–æ–±—É–µ–º –∏–∑ user_data, –∏–Ω–∞—á–µ –∫–æ–¥ Telegram
    return (context.user_data.get("lang")
            or getattr(update.effective_user, "language_code", "en").split("-")[0]
            or "en")

def _t(lang: str, key: str) -> str:
    RU = {
        "title": "–ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å (6 —à–∞–≥–æ–≤). –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç.",
        "write": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
        "skip": "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "done": "–ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ—Ñ–∏–ª—å‚Ä¶",
        "steps": [
            "–®–∞–≥ 1/6. –ü–æ–ª:",
            "–®–∞–≥ 2/6. –í–æ–∑—Ä–∞—Å—Ç:",
            "–®–∞–≥ 3/6. –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:",
            "–®–∞–≥ 4/6. –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏:",
            "–®–∞–≥ 5/6. –õ–µ–∫–∞—Ä—Å—Ç–≤–∞/–¥–æ–±–∞–≤–∫–∏/–∞–ª–ª–µ—Ä–≥–∏–∏:",
            "–®–∞–≥ 6/6. –°–æ–Ω (–æ—Ç–±–æ–π/–ø–æ–¥—ä—ë–º, –Ω–∞–ø—Ä. 23:30/07:00):",
        ]
    }
    EN = {
        "title": "Quick intake (6 steps). Use buttons or type your answer.",
        "write": "‚úçÔ∏è Write",
        "skip": "‚è≠Ô∏è Skip",
        "done": "Done! Saving your profile‚Ä¶",
        "steps": [
            "Step 1/6. Sex:",
            "Step 2/6. Age:",
            "Step 3/6. Main goal:",
            "Step 4/6. Chronic conditions:",
            "Step 5/6. Meds/supplements/allergies:",
            "Step 6/6. Sleep (bed/wake, e.g., 23:30/07:00):",
        ]
    }
    data = RU if lang != "en" else EN
    if key == "steps":
        return data["steps"]
    return data.get(key, key)

# ---- steps & options ----
Step = Dict[str, Any]
_STEPS: List[Step] = [
    {"key":"sex","opts":{
        "ru":[("–ú—É–∂—Å–∫–æ–π","male"),("–ñ–µ–Ω—Å–∫–∏–π","female"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("Male","male"),("Female","female"),("Other","other")],
    }},
    {"key":"age","opts":{
        "ru":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
        "en":[("18‚Äì25","22"),("26‚Äì35","30"),("36‚Äì45","40"),("46‚Äì60","50"),("60+","65")],
    }},
    {"key":"goal","opts":{
        "ru":[("–ü–æ—Ö—É–¥–µ–Ω–∏–µ","weight"),("–≠–Ω–µ—Ä–≥–∏—è","energy"),("–°–æ–Ω","sleep"),("–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ","longevity"),("–°–∏–ª–∞","strength")],
        "en":[("Weight","weight"),("Energy","energy"),("Sleep","sleep"),("Longevity","longevity"),("Strength","strength")],
    }},
    {"key":"chronic","opts":{
        "ru":[("–ù–µ—Ç","none"),("–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è","hypertension"),("–î–∏–∞–±–µ—Ç","diabetes"),("–©–∏—Ç–æ–≤–∏–¥–∫–∞","thyroid"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("None","none"),("Hypertension","hypertension"),("Diabetes","diabetes"),("Thyroid","thyroid"),("Other","other")],
    }},
    {"key":"meds","opts":{
        "ru":[("–ù–µ—Ç","none"),("–ú–∞–≥–Ω–∏–π","magnesium"),("–í–∏—Ç–∞–º–∏–Ω D","vitd"),("–ê–ª–ª–µ—Ä–≥–∏–∏ –µ—Å—Ç—å","allergies"),("–î—Ä—É–≥–æ–µ","other")],
        "en":[("None","none"),("Magnesium","magnesium"),("Vitamin D","vitd"),("Allergies","allergies"),("Other","other")],
    }},
    {"key":"sleep","opts":{
        "ru":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ","irregular")],
        "en":[("23:00/07:00","23:00/07:00"),("00:00/08:00","00:00/08:00"),("Irregular","irregular")],
    }},
]

# ---- public helpers ----
def intake_entry_button(label: Optional[str] = None) -> InlineKeyboardButton:
    return InlineKeyboardButton(label or "üß© Intake (6-step)", callback_data="ipro:start")

def register_intake_pro(app, gclient=None, ws_profiles=None, on_complete_cb: Optional[Callable]=None):
    # —Å–æ—Ö—Ä–∞–Ω–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ bot_data
    app.bot_data.setdefault("ipro_cfg", {})
    app.bot_data["ipro_cfg"].update({
        "gclient": gclient,
        "ws_profiles": ws_profiles,
        "on_complete_cb": on_complete_cb,
    })

    app.add_handler(CallbackQueryHandler(_ipro_cb, pattern=r"^ipro:"))
    # —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –∂–¥—ë–º —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, _ipro_text), group=1)

# ---- internals ----
def _kb_for_step(lang: str, key: str, opts: List[Tuple[str,str]]) -> InlineKeyboardMarkup:
    rows, row = [], []
    for label, val in opts:
        row.append(InlineKeyboardButton(label, callback_data=f"ipro:choose|{key}|{val}"))
        if len(row) == 3:
            rows.append(row); row = []
    if row:
        rows.append(row)
    rows.append([
        InlineKeyboardButton(_t(lang,"write"), callback_data=f"ipro:write|{key}"),
        InlineKeyboardButton(_t(lang,"skip"),  callback_data=f"ipro:skip|{key}"),
    ])
    return InlineKeyboardMarkup(rows)

async def _send_step(update: Update, context: ContextTypes.DEFAULT_TYPE, idx: int):
    lang = _lang(update, context)
    steps_titles = _t(lang, "steps")
    step = _STEPS[idx]
    kb = _kb_for_step(lang, step["key"], step["opts"]["ru" if lang!="en" else "en"])
    msg = steps_titles[idx]
    await _reply(update, context, msg, kb)

async def _reply(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, kb: Optional[InlineKeyboardMarkup]=None):
    if update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=kb or ReplyKeyboardRemove())
    else:
        await update.message.reply_text(text, reply_markup=kb or ReplyKeyboardRemove())

async def _ipro_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data or ""

    if data == "ipro:start":
        context.user_data["ipro"] = {"idx": 0, "answers": {}, "wait_key": None}
        lang = _lang(update, context)
        await q.message.reply_text(_t(lang, "title"))
        await _send_step(update, context, 0)
        return

    ud = context.user_data.get("ipro") or {}
    idx = ud.get("idx", 0)
    if not ud:
        return

    if data.startswith("ipro:choose|"):
        _, _, key, val = data.split("|", 3)
        ud["answers"][key] = val
        context.user_data["ipro"] = ud
        await _advance(update, context)
        return

    if data.startswith("ipro:write|"):
        _, _, key = data.split("|", 2)
        ud["wait_key"] = key
        context.user_data["ipro"] = ud
        lang = _lang(update, context)
        await q.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:" if lang!="en" else "Type your answer:")
        return

    if data.startswith("ipro:skip|"):
        _, _, key = data.split("|", 2)
        ud["answers"].setdefault(key, "")
        context.user_data["ipro"] = ud
        await _advance(update, context)
        return

async def _ipro_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ud = context.user_data.get("ipro")
    if not ud or not ud.get("wait_key"):
        # –Ω–µ –Ω–∞—à–∞ —Å–∏—Ç—É–∞—Ü–∏—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        return
    key = ud["wait_key"]; ud["wait_key"] = None
    val = (update.message.text or "").strip()
    if key == "age":
        # –≤—ã—Ç–∞—â–∏–º 2 —Ü–∏—Ñ—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        import re
        m = re.search(r"\d{2}", val)
        if m:
            val = m.group(0)
    ud["answers"][key] = val
    context.user_data["ipro"] = ud
    await _advance(update, context)

async def _advance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ud = context.user_data.get("ipro") or {}
    idx = ud.get("idx", 0) + 1
    ud["idx"] = idx
    context.user_data["ipro"] = ud

    if idx < len(_STEPS):
        await _send_step(update, context, idx)
        return

    # –ì–æ—Ç–æ–≤–æ ‚Äî —Å–æ–±–µ—Ä—ë–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –Ω–∞–≤–µ—Ä—Ö
    lang = _lang(update, context)
    await _reply(update, context, _t(lang, "done"))

    answers = ud.get("answers", {})
    # –ø—Ä–∏–≤–æ–¥–∏–º –∫ –∫–ª—é—á–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—ë—Ç main.py
    profile = {
        "sex": answers.get("sex",""),
        "age": answers.get("age",""),
        "goal": answers.get("goal",""),
        "chronic": answers.get("chronic",""),
        "meds": answers.get("meds",""),
        "hab_sleep": answers.get("sleep",""),
        "hab_activity": "",   # –≤ —ç—Ç–æ–π –º–∏–Ω–∏–≤–µ—Ä—Å–∏–∏ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
        "complaints": set(),  # –ø—É—Å—Ç–æ
    }

    cfg = context.application.bot_data.get("ipro_cfg") or {}
    on_done = cfg.get("on_complete_cb")
    if callable(on_done):
        try:
            await on_done(update, context, profile)
        except Exception as e:
            # –Ω–µ –ø–∞–¥–∞–µ–º –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞
            import logging
            logging.error(f"ipro on_complete_cb error: {e}")

    # –æ—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data["ipro"] = {}
